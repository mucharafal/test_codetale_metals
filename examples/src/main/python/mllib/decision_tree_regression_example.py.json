[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "Why did we get rid of the lambda (v, p) & similar elsewhere?",
    "commit": "3da7aec21cd6560d82da3cd0a22d8118bebbed38",
    "createdAt": "2016-12-30T21:41:41Z",
    "diffHunk": "@@ -44,7 +44,7 @@\n     # Evaluate model on test instances and compute test error\n     predictions = model.predict(testData.map(lambda x: x.features))\n     labelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)\n-    testMSE = labelsAndPredictions.map(lambda (v, p): (v - p) * (v - p)).sum() /\\\n+    testMSE = labelsAndPredictions.map(lambda lp: (lp[0] - lp[1]) * (lp[0] - lp[1])).sum() /\\",
    "line": 5
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "That seems causing errors in python 3 when a tuple is used in lambda to unpack. It seems http://www.python.org/dev/peps/pep-3113 is related issue.",
    "commit": "3da7aec21cd6560d82da3cd0a22d8118bebbed38",
    "createdAt": "2016-12-30T23:05:38Z",
    "diffHunk": "@@ -44,7 +44,7 @@\n     # Evaluate model on test instances and compute test error\n     predictions = model.predict(testData.map(lambda x: x.features))\n     labelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)\n-    testMSE = labelsAndPredictions.map(lambda (v, p): (v - p) * (v - p)).sum() /\\\n+    testMSE = labelsAndPredictions.map(lambda lp: (lp[0] - lp[1]) * (lp[0] - lp[1])).sum() /\\",
    "line": 5
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Ah ok, makes sense - I was looking at changes directly from pep8 but if we need it to be compiled with python3 to test py3 pep8 that makes sense (of course a follow up issue for proper py3 support is the best place to address the issues not blocking pep8 testing).",
    "commit": "3da7aec21cd6560d82da3cd0a22d8118bebbed38",
    "createdAt": "2016-12-30T23:35:11Z",
    "diffHunk": "@@ -44,7 +44,7 @@\n     # Evaluate model on test instances and compute test error\n     predictions = model.predict(testData.map(lambda x: x.features))\n     labelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)\n-    testMSE = labelsAndPredictions.map(lambda (v, p): (v - p) * (v - p)).sum() /\\\n+    testMSE = labelsAndPredictions.map(lambda lp: (lp[0] - lp[1]) * (lp[0] - lp[1])).sum() /\\",
    "line": 5
  }],
  "prId": 16405
}]