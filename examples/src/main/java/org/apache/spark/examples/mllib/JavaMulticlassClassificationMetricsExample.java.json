[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a space line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:16:50Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */",
    "line": 16
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a space line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:17:12Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the import \n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:17:30Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "align with previous line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:17:59Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMulticlassClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multi class Classification Metrics Example\");\n+    SparkContext sc = new SparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_multiclass_classification_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc, path).toJavaRDD();\n+\n+    // Split initial RDD into two... [60% training data, 40% testing data].\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.6, 0.4}, 11L);\n+    JavaRDD<LabeledPoint> training = splits[0].cache();\n+    JavaRDD<LabeledPoint> test = splits[1];\n+\n+    // Run training algorithm to build the model.\n+    final LogisticRegressionModel model = new LogisticRegressionWithLBFGS()\n+      .setNumClasses(3)\n+            .run(training.rdd());"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:18:25Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMulticlassClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multi class Classification Metrics Example\");\n+    SparkContext sc = new SparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_multiclass_classification_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc, path).toJavaRDD();\n+\n+    // Split initial RDD into two... [60% training data, 40% testing data].\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.6, 0.4}, 11L);\n+    JavaRDD<LabeledPoint> training = splits[0].cache();\n+    JavaRDD<LabeledPoint> test = splits[1];\n+\n+    // Run training algorithm to build the model.\n+    final LogisticRegressionModel model = new LogisticRegressionWithLBFGS()\n+      .setNumClasses(3)\n+            .run(training.rdd());\n+\n+    // Compute raw scores on the test set.\n+    JavaRDD<Tuple2<Object, Object>> predictionAndLabels = test.map(\n+      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(LabeledPoint p) {\n+          Double prediction = model.predict(p.features());\n+          return new Tuple2<Object, Object>(prediction, p.label());\n+        }\n+      }\n+    );\n+\n+    // Get evaluation metrics.\n+    MulticlassMetrics metrics = new MulticlassMetrics(predictionAndLabels.rdd());\n+\n+    // Confusion matrix\n+    Matrix confusion = metrics.confusionMatrix();\n+    System.out.println(\"Confusion matrix: \\n\" + confusion);\n+\n+    // Overall statistics\n+    System.out.println(\"Precision = \" + metrics.precision());\n+    System.out.println(\"Recall = \" + metrics.recall());\n+    System.out.println(\"F1 Score = \" + metrics.fMeasure());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length; i++) {\n+      System.out.format(\"Class %f precision = %f\\n\", metrics.labels()[i],metrics.precision\n+              (metrics.labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:18:30Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMulticlassClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multi class Classification Metrics Example\");\n+    SparkContext sc = new SparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_multiclass_classification_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc, path).toJavaRDD();\n+\n+    // Split initial RDD into two... [60% training data, 40% testing data].\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.6, 0.4}, 11L);\n+    JavaRDD<LabeledPoint> training = splits[0].cache();\n+    JavaRDD<LabeledPoint> test = splits[1];\n+\n+    // Run training algorithm to build the model.\n+    final LogisticRegressionModel model = new LogisticRegressionWithLBFGS()\n+      .setNumClasses(3)\n+            .run(training.rdd());\n+\n+    // Compute raw scores on the test set.\n+    JavaRDD<Tuple2<Object, Object>> predictionAndLabels = test.map(\n+      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(LabeledPoint p) {\n+          Double prediction = model.predict(p.features());\n+          return new Tuple2<Object, Object>(prediction, p.label());\n+        }\n+      }\n+    );\n+\n+    // Get evaluation metrics.\n+    MulticlassMetrics metrics = new MulticlassMetrics(predictionAndLabels.rdd());\n+\n+    // Confusion matrix\n+    Matrix confusion = metrics.confusionMatrix();\n+    System.out.println(\"Confusion matrix: \\n\" + confusion);\n+\n+    // Overall statistics\n+    System.out.println(\"Precision = \" + metrics.precision());\n+    System.out.println(\"Recall = \" + metrics.recall());\n+    System.out.println(\"F1 Score = \" + metrics.fMeasure());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length; i++) {\n+      System.out.format(\"Class %f precision = %f\\n\", metrics.labels()[i],metrics.precision\n+              (metrics.labels()[i]));\n+      System.out.format(\"Class %f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics\n+              .labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:18:37Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMulticlassClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multi class Classification Metrics Example\");\n+    SparkContext sc = new SparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_multiclass_classification_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc, path).toJavaRDD();\n+\n+    // Split initial RDD into two... [60% training data, 40% testing data].\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.6, 0.4}, 11L);\n+    JavaRDD<LabeledPoint> training = splits[0].cache();\n+    JavaRDD<LabeledPoint> test = splits[1];\n+\n+    // Run training algorithm to build the model.\n+    final LogisticRegressionModel model = new LogisticRegressionWithLBFGS()\n+      .setNumClasses(3)\n+            .run(training.rdd());\n+\n+    // Compute raw scores on the test set.\n+    JavaRDD<Tuple2<Object, Object>> predictionAndLabels = test.map(\n+      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(LabeledPoint p) {\n+          Double prediction = model.predict(p.features());\n+          return new Tuple2<Object, Object>(prediction, p.label());\n+        }\n+      }\n+    );\n+\n+    // Get evaluation metrics.\n+    MulticlassMetrics metrics = new MulticlassMetrics(predictionAndLabels.rdd());\n+\n+    // Confusion matrix\n+    Matrix confusion = metrics.confusionMatrix();\n+    System.out.println(\"Confusion matrix: \\n\" + confusion);\n+\n+    // Overall statistics\n+    System.out.println(\"Precision = \" + metrics.precision());\n+    System.out.println(\"Recall = \" + metrics.recall());\n+    System.out.println(\"F1 Score = \" + metrics.fMeasure());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length; i++) {\n+      System.out.format(\"Class %f precision = %f\\n\", metrics.labels()[i],metrics.precision\n+              (metrics.labels()[i]));\n+      System.out.format(\"Class %f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics\n+              .labels()[i]));\n+      System.out.format(\"Class %f F1 score = %f\\n\", metrics.labels()[i], metrics.fMeasure\n+              (metrics.labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:18:46Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.classification.LogisticRegressionModel;\n+import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS;\n+import org.apache.spark.mllib.evaluation.MulticlassMetrics;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.mllib.linalg.Matrix;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMulticlassClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multi class Classification Metrics Example\");\n+    SparkContext sc = new SparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_multiclass_classification_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc, path).toJavaRDD();\n+\n+    // Split initial RDD into two... [60% training data, 40% testing data].\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.6, 0.4}, 11L);\n+    JavaRDD<LabeledPoint> training = splits[0].cache();\n+    JavaRDD<LabeledPoint> test = splits[1];\n+\n+    // Run training algorithm to build the model.\n+    final LogisticRegressionModel model = new LogisticRegressionWithLBFGS()\n+      .setNumClasses(3)\n+            .run(training.rdd());\n+\n+    // Compute raw scores on the test set.\n+    JavaRDD<Tuple2<Object, Object>> predictionAndLabels = test.map(\n+      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(LabeledPoint p) {\n+          Double prediction = model.predict(p.features());\n+          return new Tuple2<Object, Object>(prediction, p.label());\n+        }\n+      }\n+    );\n+\n+    // Get evaluation metrics.\n+    MulticlassMetrics metrics = new MulticlassMetrics(predictionAndLabels.rdd());\n+\n+    // Confusion matrix\n+    Matrix confusion = metrics.confusionMatrix();\n+    System.out.println(\"Confusion matrix: \\n\" + confusion);\n+\n+    // Overall statistics\n+    System.out.println(\"Precision = \" + metrics.precision());\n+    System.out.println(\"Recall = \" + metrics.recall());\n+    System.out.println(\"F1 Score = \" + metrics.fMeasure());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length; i++) {\n+      System.out.format(\"Class %f precision = %f\\n\", metrics.labels()[i],metrics.precision\n+              (metrics.labels()[i]));\n+      System.out.format(\"Class %f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics\n+              .labels()[i]));\n+      System.out.format(\"Class %f F1 score = %f\\n\", metrics.labels()[i], metrics.fMeasure\n+              (metrics.labels()[i]));\n+    }\n+\n+    //Weighted stats\n+    System.out.format(\"Weighted precision = %f\\n\", metrics.weightedPrecision());\n+    System.out.format(\"Weighted recall = %f\\n\", metrics.weightedRecall());\n+    System.out.format(\"Weighted F1 score = %f\\n\", metrics.weightedFMeasure());\n+    System.out.format(\"Weighted false positive rate = %f\\n\", metrics.weightedFalsePositiveRate());\n+\n+    // Save and load model\n+    model.save(sc, \"target/tmp/LogisticRegressionModel\");\n+    LogisticRegressionModel sameModel = LogisticRegressionModel.load(sc,\n+            \"target/tmp/LogisticRegressionModel\");"
  }],
  "prId": 9689
}]