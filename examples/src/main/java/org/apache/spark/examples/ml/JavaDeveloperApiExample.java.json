[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "This is kinda confusing for a Java example having Scala code, no?\n",
    "commit": "b6e5f2868e3d13f27a1c21235a304f36b3a5d81c",
    "createdAt": "2016-06-01T17:41:57Z",
    "diffHunk": "@@ -88,153 +95,156 @@ public static void main(String[] args) throws Exception {\n     }\n     if (sumPredictions != 0.0) {\n       throw new Exception(\"MyJavaLogisticRegression predicted something other than 0,\" +\n-          \" even though all coefficients are 0!\");\n+        \" even though all coefficients are 0!\");\n     }\n \n     spark.stop();\n   }\n-}\n-\n-/**\n- * Example of defining a type of {@link Classifier}.\n- *\n- * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n- *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n- *       However, this should still compile and run successfully.\n- */\n-class MyJavaLogisticRegression\n-  extends Classifier<Vector, MyJavaLogisticRegression, MyJavaLogisticRegressionModel> {\n-\n-  MyJavaLogisticRegression() {\n-    init();\n-  }\n-\n-  MyJavaLogisticRegression(String uid) {\n-    this.uid_ = uid;\n-    init();\n-  }\n-\n-  private String uid_ = Identifiable$.MODULE$.randomUID(\"myJavaLogReg\");\n-\n-  @Override\n-  public String uid() {\n-    return uid_;\n-  }\n \n   /**\n-   * Param for max number of iterations\n-   * <p>\n-   * NOTE: The usual way to add a parameter to a model or algorithm is to include:\n-   * - val myParamName: ParamType\n-   * - def getMyParamName\n-   * - def setMyParamName\n+   * Example of defining a type of {@link Classifier}.\n+   *\n+   * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n+   *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n+   *       However, this should still compile and run successfully.\n    */\n-  IntParam maxIter = new IntParam(this, \"maxIter\", \"max number of iterations\");\n-\n-  int getMaxIter() { return (Integer) getOrDefault(maxIter); }\n-\n-  private void init() {\n-    setMaxIter(100);\n-  }\n-\n-  // The parameter setter is in this class since it should return type MyJavaLogisticRegression.\n-  MyJavaLogisticRegression setMaxIter(int value) {\n-    return (MyJavaLogisticRegression) set(maxIter, value);\n-  }\n+  public abstract static class MyJavaLogisticRegression\n+    extends Classifier<Vector, MyJavaLogisticRegression, MyJavaLogisticRegressionModel> {\n \n-  // This method is used by fit().\n-  // In Java, we have to make it public since Java does not understand Scala's protected modifier.\n-  public MyJavaLogisticRegressionModel train(Dataset<?> dataset) {\n-    // Extract columns from data using helper method.\n-    JavaRDD<LabeledPoint> oldDataset = extractLabeledPoints(dataset).toJavaRDD();\n-\n-    // Do learning to estimate the coefficients vector.\n-    int numFeatures = oldDataset.take(1).get(0).features().size();\n-    Vector coefficients = Vectors.zeros(numFeatures); // Learning would happen here.\n-\n-    // Create a model, and return it.\n-    return new MyJavaLogisticRegressionModel(uid(), coefficients).setParent(this);\n-  }\n-\n-  @Override\n-  public MyJavaLogisticRegression copy(ParamMap extra) {\n-    return defaultCopy(extra);\n-  }\n-}\n+    MyJavaLogisticRegression() {\n+      init();\n+    }\n \n-/**\n- * Example of defining a type of {@link ClassificationModel}.\n- *\n- * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n- *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n- *       However, this should still compile and run successfully.\n- */\n-class MyJavaLogisticRegressionModel\n-  extends ClassificationModel<Vector, MyJavaLogisticRegressionModel> {\n+    MyJavaLogisticRegression(String uid) {\n+      this.uid_ = uid;\n+      init();\n+    }\n \n-  private Vector coefficients_;\n-  public Vector coefficients() { return coefficients_; }\n+    private String uid_;\n+    public abstract String uid();\n+\n+    /**\n+     * Param for max number of iterations\n+     * <p>\n+     * NOTE: The usual way to add a parameter to a model or algorithm is to include:\n+     * - val myParamName: ParamType"
  }, {
    "author": {
      "login": "yanboliang"
    },
    "body": "As discussed with @jkbradley , we will remove this example for 2.0. I will address this comments when we add this example back.\n",
    "commit": "b6e5f2868e3d13f27a1c21235a304f36b3a5d81c",
    "createdAt": "2016-06-02T10:40:33Z",
    "diffHunk": "@@ -88,153 +95,156 @@ public static void main(String[] args) throws Exception {\n     }\n     if (sumPredictions != 0.0) {\n       throw new Exception(\"MyJavaLogisticRegression predicted something other than 0,\" +\n-          \" even though all coefficients are 0!\");\n+        \" even though all coefficients are 0!\");\n     }\n \n     spark.stop();\n   }\n-}\n-\n-/**\n- * Example of defining a type of {@link Classifier}.\n- *\n- * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n- *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n- *       However, this should still compile and run successfully.\n- */\n-class MyJavaLogisticRegression\n-  extends Classifier<Vector, MyJavaLogisticRegression, MyJavaLogisticRegressionModel> {\n-\n-  MyJavaLogisticRegression() {\n-    init();\n-  }\n-\n-  MyJavaLogisticRegression(String uid) {\n-    this.uid_ = uid;\n-    init();\n-  }\n-\n-  private String uid_ = Identifiable$.MODULE$.randomUID(\"myJavaLogReg\");\n-\n-  @Override\n-  public String uid() {\n-    return uid_;\n-  }\n \n   /**\n-   * Param for max number of iterations\n-   * <p>\n-   * NOTE: The usual way to add a parameter to a model or algorithm is to include:\n-   * - val myParamName: ParamType\n-   * - def getMyParamName\n-   * - def setMyParamName\n+   * Example of defining a type of {@link Classifier}.\n+   *\n+   * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n+   *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n+   *       However, this should still compile and run successfully.\n    */\n-  IntParam maxIter = new IntParam(this, \"maxIter\", \"max number of iterations\");\n-\n-  int getMaxIter() { return (Integer) getOrDefault(maxIter); }\n-\n-  private void init() {\n-    setMaxIter(100);\n-  }\n-\n-  // The parameter setter is in this class since it should return type MyJavaLogisticRegression.\n-  MyJavaLogisticRegression setMaxIter(int value) {\n-    return (MyJavaLogisticRegression) set(maxIter, value);\n-  }\n+  public abstract static class MyJavaLogisticRegression\n+    extends Classifier<Vector, MyJavaLogisticRegression, MyJavaLogisticRegressionModel> {\n \n-  // This method is used by fit().\n-  // In Java, we have to make it public since Java does not understand Scala's protected modifier.\n-  public MyJavaLogisticRegressionModel train(Dataset<?> dataset) {\n-    // Extract columns from data using helper method.\n-    JavaRDD<LabeledPoint> oldDataset = extractLabeledPoints(dataset).toJavaRDD();\n-\n-    // Do learning to estimate the coefficients vector.\n-    int numFeatures = oldDataset.take(1).get(0).features().size();\n-    Vector coefficients = Vectors.zeros(numFeatures); // Learning would happen here.\n-\n-    // Create a model, and return it.\n-    return new MyJavaLogisticRegressionModel(uid(), coefficients).setParent(this);\n-  }\n-\n-  @Override\n-  public MyJavaLogisticRegression copy(ParamMap extra) {\n-    return defaultCopy(extra);\n-  }\n-}\n+    MyJavaLogisticRegression() {\n+      init();\n+    }\n \n-/**\n- * Example of defining a type of {@link ClassificationModel}.\n- *\n- * Note: Some IDEs (e.g., IntelliJ) will complain that this will not compile due to\n- *       {@link org.apache.spark.ml.param.Params#set} using incompatible return types.\n- *       However, this should still compile and run successfully.\n- */\n-class MyJavaLogisticRegressionModel\n-  extends ClassificationModel<Vector, MyJavaLogisticRegressionModel> {\n+    MyJavaLogisticRegression(String uid) {\n+      this.uid_ = uid;\n+      init();\n+    }\n \n-  private Vector coefficients_;\n-  public Vector coefficients() { return coefficients_; }\n+    private String uid_;\n+    public abstract String uid();\n+\n+    /**\n+     * Param for max number of iterations\n+     * <p>\n+     * NOTE: The usual way to add a parameter to a model or algorithm is to include:\n+     * - val myParamName: ParamType"
  }],
  "prId": 13353
}]