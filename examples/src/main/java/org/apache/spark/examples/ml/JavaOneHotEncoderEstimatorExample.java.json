[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Perhaps we can move the note above the `$example on$` - I don't think it is necessary for it to appear in the user guide as we've mentioned it above.\r\n\r\nAlso perhaps rather: `Note: categorical features are usually first encoded with StringIndexer`",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-16T12:20:01Z",
    "diffHunk": "@@ -35,41 +34,37 @@\n import org.apache.spark.sql.types.StructType;\n // $example off$\n \n-public class JavaOneHotEncoderExample {\n+public class JavaOneHotEncoderEstimatorExample {\n   public static void main(String[] args) {\n     SparkSession spark = SparkSession\n       .builder()\n-      .appName(\"JavaOneHotEncoderExample\")\n+      .appName(\"JavaOneHotEncoderEstimatorExample\")\n       .getOrCreate();\n \n     // $example on$\n+    // Notice: this categorical features are usually encoded with `StringIndexer`."
  }],
  "prId": 20257
}, {
  "comments": [{
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Don't need to pass `Metadata.empty()` param, it's a default value.\r\nWe'd better to make the example code simpler.",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-16T19:10:51Z",
    "diffHunk": "@@ -35,41 +34,37 @@\n import org.apache.spark.sql.types.StructType;\n // $example off$\n \n-public class JavaOneHotEncoderExample {\n+public class JavaOneHotEncoderEstimatorExample {\n   public static void main(String[] args) {\n     SparkSession spark = SparkSession\n       .builder()\n-      .appName(\"JavaOneHotEncoderExample\")\n+      .appName(\"JavaOneHotEncoderEstimatorExample\")\n       .getOrCreate();\n \n     // $example on$\n+    // Notice: this categorical features are usually encoded with `StringIndexer`.\n     List<Row> data = Arrays.asList(\n-      RowFactory.create(0, \"a\"),\n-      RowFactory.create(1, \"b\"),\n-      RowFactory.create(2, \"c\"),\n-      RowFactory.create(3, \"a\"),\n-      RowFactory.create(4, \"a\"),\n-      RowFactory.create(5, \"c\")\n+      RowFactory.create(0.0, 1.0),\n+      RowFactory.create(1.0, 0.0),\n+      RowFactory.create(2.0, 1.0),\n+      RowFactory.create(0.0, 2.0),\n+      RowFactory.create(0.0, 1.0),\n+      RowFactory.create(2.0, 0.0)\n     );\n \n     StructType schema = new StructType(new StructField[]{\n-      new StructField(\"id\", DataTypes.IntegerType, false, Metadata.empty()),\n-      new StructField(\"category\", DataTypes.StringType, false, Metadata.empty())\n+      new StructField(\"categoryIndex1\", DataTypes.DoubleType, false, Metadata.empty()),\n+      new StructField(\"categoryIndex2\", DataTypes.DoubleType, false, Metadata.empty())",
    "line": 46
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Since this is java example, the default param seems don't work:\r\n\r\n```scala\r\nerror: no suitable constructor found for StructField(String,DataType,boolean)\r\n[error]       new StructField(\"categoryIndex1\", DataTypes.DoubleType, false),\r\n[error]       ^\r\n[error] /root/repos/spark-1/constructor StructField.StructField(String,DataType,boolean,Metadata) is not applicable\r\n[error]       (actual and formal argument lists differ in length)\r\n[error]     constructor StructField.StructField() is not applicable\r\n```",
    "commit": "3c697bd069519b99f19796d7f173655ffccefb50",
    "createdAt": "2018-01-17T00:39:15Z",
    "diffHunk": "@@ -35,41 +34,37 @@\n import org.apache.spark.sql.types.StructType;\n // $example off$\n \n-public class JavaOneHotEncoderExample {\n+public class JavaOneHotEncoderEstimatorExample {\n   public static void main(String[] args) {\n     SparkSession spark = SparkSession\n       .builder()\n-      .appName(\"JavaOneHotEncoderExample\")\n+      .appName(\"JavaOneHotEncoderEstimatorExample\")\n       .getOrCreate();\n \n     // $example on$\n+    // Notice: this categorical features are usually encoded with `StringIndexer`.\n     List<Row> data = Arrays.asList(\n-      RowFactory.create(0, \"a\"),\n-      RowFactory.create(1, \"b\"),\n-      RowFactory.create(2, \"c\"),\n-      RowFactory.create(3, \"a\"),\n-      RowFactory.create(4, \"a\"),\n-      RowFactory.create(5, \"c\")\n+      RowFactory.create(0.0, 1.0),\n+      RowFactory.create(1.0, 0.0),\n+      RowFactory.create(2.0, 1.0),\n+      RowFactory.create(0.0, 2.0),\n+      RowFactory.create(0.0, 1.0),\n+      RowFactory.create(2.0, 0.0)\n     );\n \n     StructType schema = new StructType(new StructField[]{\n-      new StructField(\"id\", DataTypes.IntegerType, false, Metadata.empty()),\n-      new StructField(\"category\", DataTypes.StringType, false, Metadata.empty())\n+      new StructField(\"categoryIndex1\", DataTypes.DoubleType, false, Metadata.empty()),\n+      new StructField(\"categoryIndex2\", DataTypes.DoubleType, false, Metadata.empty())",
    "line": 46
  }],
  "prId": 20257
}]