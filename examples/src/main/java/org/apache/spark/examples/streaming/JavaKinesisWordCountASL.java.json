[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Inline comment style should /\\* ...  _/  .... /_\\* is reserved only for scala docs.\n",
    "commit": "47745816b21d7d2255a98283e3055a5a2a397a27",
    "createdAt": "2014-08-01T22:43:07Z",
    "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.streaming;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.function.FlatMapFunction;\n+import org.apache.spark.api.java.function.Function2;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.storage.StorageLevel;\n+import org.apache.spark.streaming.Duration;\n+import org.apache.spark.streaming.api.java.JavaDStream;\n+import org.apache.spark.streaming.api.java.JavaPairDStream;\n+import org.apache.spark.streaming.api.java.JavaStreamingContext;\n+import org.apache.spark.streaming.kinesis.KinesisUtils;\n+\n+import scala.Tuple2;\n+\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.kinesis.AmazonKinesisClient;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Java-friendly Kinesis Spark Streaming WordCount example\n+ *\n+ * See http://spark.apache.org/docs/latest/streaming-kinesis.html for more details\n+ * on the Kinesis Spark Streaming integration.\n+ *\n+ * This example spins up 1 Kinesis Worker (Spark Streaming Receiver) per shard\n+ *   for the given stream.\n+ * It then starts pulling from the last checkpointed sequence number of the given\n+ *   <stream-name> and <endpoint-url>. \n+ *\n+ * Valid endpoint urls:  http://docs.aws.amazon.com/general/latest/gr/rande.html#ak_region\n+ *\n+ * This code uses the DefaultAWSCredentialsProviderChain and searches for credentials \n+ *  in the following order of precedence: \n+ *         Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_KEY\n+ *         Java System Properties - aws.accessKeyId and aws.secretKey\n+ *         Credential profiles file - default location (~/.aws/credentials) shared by all AWS SDKs\n+ *         Instance profile credentials - delivered through the Amazon EC2 metadata service\n+ *\n+ * Usage: JavaKinesisWordCountASL <stream-name> <endpoint-url>\n+ *         <stream-name> is the name of the Kinesis stream (ie. mySparkStream)\n+ *         <endpoint-url> is the endpoint of the Kinesis service \n+ *           (ie. https://kinesis.us-east-1.amazonaws.com)\n+ *\n+ * Example:\n+ *      $ export AWS_ACCESS_KEY_ID=<your-access-key>\n+ *      $ export AWS_SECRET_KEY=<your-secret-key>\n+ *      $ $SPARK_HOME/bin/run-example \\\n+ *            org.apache.spark.examples.streaming.JavaKinesisWordCountASL mySparkStream \\\n+ *            https://kinesis.us-east-1.amazonaws.com\n+ *\n+ * There is a companion helper class called KinesisWordCountProducerASL which puts dummy data \n+ *   onto the Kinesis stream. \n+ * Usage instructions for KinesisWordCountProducerASL are provided in the class definition.\n+ */\n+public final class JavaKinesisWordCountASL {\n+    private static final Pattern WORD_SEPARATOR = Pattern.compile(\" \");\n+    private static final Logger logger = Logger.getLogger(JavaKinesisWordCountASL.class);\n+\n+    /**\n+     * Make the constructor private to enforce singleton\n+     */\n+    private JavaKinesisWordCountASL() {\n+    }\n+\n+    public static void main(String[] args) {\n+        /**"
  }],
  "prId": 1434
}]