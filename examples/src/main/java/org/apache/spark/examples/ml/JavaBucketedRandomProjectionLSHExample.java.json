[{
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "it's not values anymore",
    "commit": "36fd9bc6366d58541c8306803d8742649be69098",
    "createdAt": "2017-02-09T22:14:56Z",
    "diffHunk": "@@ -71,25 +71,32 @@ public static void main(String[] args) {\n     BucketedRandomProjectionLSH mh = new BucketedRandomProjectionLSH()\n       .setBucketLength(2.0)\n       .setNumHashTables(3)\n-      .setInputCol(\"keys\")\n-      .setOutputCol(\"values\");\n+      .setInputCol(\"features\")\n+      .setOutputCol(\"hashes\");\n \n     BucketedRandomProjectionLSHModel model = mh.fit(dfA);\n \n     // Feature Transformation\n+    System.out.println(\"The hashed dataset where hashed values are stored in the column 'values':\");"
  }],
  "prId": 16715
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "I don't think the self join is necessary, but I'll defer to others. Also, \"Approximate self join\" and it's dfA not dfB",
    "commit": "36fd9bc6366d58541c8306803d8742649be69098",
    "createdAt": "2017-02-09T22:16:04Z",
    "diffHunk": "@@ -71,25 +71,32 @@ public static void main(String[] args) {\n     BucketedRandomProjectionLSH mh = new BucketedRandomProjectionLSH()\n       .setBucketLength(2.0)\n       .setNumHashTables(3)\n-      .setInputCol(\"keys\")\n-      .setOutputCol(\"values\");\n+      .setInputCol(\"features\")\n+      .setOutputCol(\"hashes\");\n \n     BucketedRandomProjectionLSHModel model = mh.fit(dfA);\n \n     // Feature Transformation\n+    System.out.println(\"The hashed dataset where hashed values are stored in the column 'values':\");\n     model.transform(dfA).show();\n     // Cache the transformed columns\n     Dataset<Row> transformedA = model.transform(dfA).cache();\n     Dataset<Row> transformedB = model.transform(dfB).cache();\n \n     // Approximate similarity join\n+    System.out.println(\"Approximately joining dfA and dfB on distance smaller than 1.5:\");\n     model.approxSimilarityJoin(dfA, dfB, 1.5).show();\n+    System.out.println(\"Joining cached datasets to avoid recomputing the hash values:\");\n     model.approxSimilarityJoin(transformedA, transformedB, 1.5).show();\n+\n     // Self Join\n+    System.out.println(\"Approximately self join of dfB on distance smaller than 2.5:\");"
  }],
  "prId": 16715
}, {
  "comments": [{
    "author": {
      "login": "sethah"
    },
    "body": "just import `col` here and minhash",
    "commit": "36fd9bc6366d58541c8306803d8742649be69098",
    "createdAt": "2017-02-13T19:32:25Z",
    "diffHunk": "@@ -35,6 +35,8 @@\n import org.apache.spark.sql.types.Metadata;\n import org.apache.spark.sql.types.StructField;\n import org.apache.spark.sql.types.StructType;\n+\n+import static org.apache.spark.sql.functions.*;"
  }, {
    "author": {
      "login": "Yunni"
    },
    "body": "Done.",
    "commit": "36fd9bc6366d58541c8306803d8742649be69098",
    "createdAt": "2017-02-14T06:19:43Z",
    "diffHunk": "@@ -35,6 +35,8 @@\n import org.apache.spark.sql.types.Metadata;\n import org.apache.spark.sql.types.StructField;\n import org.apache.spark.sql.types.StructType;\n+\n+import static org.apache.spark.sql.functions.*;"
  }],
  "prId": 16715
}, {
  "comments": [{
    "author": {
      "login": "yanboliang"
    },
    "body": "Actually we can simplify it as ```bin/run-example ml.JavaBucketedRandomProjectionLSHExample```, but it's ok to leave as it is.",
    "commit": "36fd9bc6366d58541c8306803d8742649be69098",
    "createdAt": "2017-02-16T00:23:06Z",
    "diffHunk": "@@ -35,8 +35,15 @@\n import org.apache.spark.sql.types.Metadata;\n import org.apache.spark.sql.types.StructField;\n import org.apache.spark.sql.types.StructType;\n+\n+import static org.apache.spark.sql.functions.col;\n // $example off$\n \n+/**\n+ * An example demonstrating BucketedRandomProjectionLSH.\n+ * Run with:\n+ *   bin/run-example org.apache.spark.examples.ml.JavaBucketedRandomProjectionLSHExample",
    "line": 11
  }],
  "prId": 16715
}]