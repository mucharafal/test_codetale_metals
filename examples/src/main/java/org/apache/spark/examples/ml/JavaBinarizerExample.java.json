[{
  "comments": [{
    "author": {
      "login": "BenFradet"
    },
    "body": "indent\n",
    "commit": "771d015000114828ab32e38301acbb50df150f9d",
    "createdAt": "2015-12-09T20:32:03Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.util.Arrays;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.ml.feature.Binarizer;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+// $example off$\n+\n+public class JavaBinarizerExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaBinarizerExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    // $example on$\n+    JavaRDD<Row> jrdd = jsc.parallelize(Arrays.asList(\n+      RowFactory.create(0, 0.1),\n+      RowFactory.create(1, 0.8),\n+      RowFactory.create(2, 0.2)\n+    ));\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"label\", DataTypes.DoubleType, false, Metadata.empty()),\n+      new StructField(\"feature\", DataTypes.DoubleType, false, Metadata.empty())\n+    });\n+    DataFrame continuousDataFrame = jsql.createDataFrame(jrdd, schema);\n+    Binarizer binarizer = new Binarizer()\n+      .setInputCol(\"feature\")\n+      .setOutputCol(\"binarized_feature\")\n+      .setThreshold(0.5);\n+    DataFrame binarizedDataFrame = binarizer.transform(continuousDataFrame);\n+    DataFrame binarizedFeatures = binarizedDataFrame.select(\"binarized_feature\");\n+    for (Row r : binarizedFeatures.collect()) {\n+    Double binarized_value = r.getDouble(0);",
    "line": 62
  }],
  "prId": 10219
}]