[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "merge this line with previous one\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:40:01Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 },\n+      { 10.2, 8.0, 20.5 } };"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "merge this line with previous one\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:40:05Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 },\n+      { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(\n+      rowsList);"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove blank here and try to print U, s, and V.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-15T21:40:41Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 },\n+      { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(\n+      rowsList);\n+\n+    // Create a RowMatrix from JavaRDD<Vector>.\n+    RowMatrix mat = new RowMatrix(rows.rdd());\n+\n+    // Compute the top 4 singular values and corresponding singular vectors.\n+    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(4, true,\n+      1.0E-9d);\n+    RowMatrix U = svd.U();\n+    Vector s = svd.s();\n+    Matrix V = svd.V();\n+"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "redundant casting `(Vector[])`\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T05:59:01Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 }, { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(rowsList);\n+\n+    // Create a RowMatrix from JavaRDD<Vector>.\n+    RowMatrix mat = new RowMatrix(rows.rdd());\n+\n+    // Compute the top 3 singular values and corresponding singular vectors.\n+    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(3, true, 1.0E-9d);\n+    RowMatrix U = svd.U();\n+    Vector s = svd.s();\n+    Matrix V = svd.V();\n+    Vector[] collectPartitions = (Vector[]) U.rows().collect();"
  }, {
    "author": {
      "login": "devaraj-kavali"
    },
    "body": "It gives compilation error if we remove typecasting here since the return type of collect is Object.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T07:00:31Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 }, { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(rowsList);\n+\n+    // Create a RowMatrix from JavaRDD<Vector>.\n+    RowMatrix mat = new RowMatrix(rows.rdd());\n+\n+    // Compute the top 3 singular values and corresponding singular vectors.\n+    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(3, true, 1.0E-9d);\n+    RowMatrix U = svd.U();\n+    Vector s = svd.s();\n+    Matrix V = svd.V();\n+    Vector[] collectPartitions = (Vector[]) U.rows().collect();"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "Ok let's keep it.\n\n2016年2月17日星期三，Devaraj Kavali notifications@github.com 写道：\n\n> In\n> examples/src/main/java/org/apache/spark/examples/mllib/JavaSVDExample.java\n> https://github.com/apache/spark/pull/11132#discussion_r53277719:\n> \n> > -    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n> > -    for (int i = 0; i < array.length; i++) {\n> > -      Vector currentRow = Vectors.dense(array[i]);\n> > -      rowsList.add(currentRow);\n> > -    }\n> > -    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(rowsList);\n> >   +\n> > -    // Create a RowMatrix from JavaRDD<Vector>.\n> > -    RowMatrix mat = new RowMatrix(rows.rdd());\n> >   +\n> > -    // Compute the top 3 singular values and corresponding singular vectors.\n> > -    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(3, true, 1.0E-9d);\n> > -    RowMatrix U = svd.U();\n> > -    Vector s = svd.s();\n> > -    Matrix V = svd.V();\n> > -    Vector[] collectPartitions = (Vector[]) U.rows().collect();\n> \n> It gives compilation error if we remove typecasting here since the return\n> type of collect is Object.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/11132/files#r53277719.\n\n## \n\n## Cheers\n\nXusen Yin    (尹绪森)\nLinkedIn: https://cn.linkedin.com/in/xusenyin\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T07:02:29Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 }, { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(rowsList);\n+\n+    // Create a RowMatrix from JavaRDD<Vector>.\n+    RowMatrix mat = new RowMatrix(rows.rdd());\n+\n+    // Compute the top 3 singular values and corresponding singular vectors.\n+    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(3, true, 1.0E-9d);\n+    RowMatrix U = svd.U();\n+    Vector s = svd.s();\n+    Matrix V = svd.V();\n+    Vector[] collectPartitions = (Vector[]) U.rows().collect();"
  }],
  "prId": 11132
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Move `// $example off$` here.\n",
    "commit": "3b031da55b81b9440539dfe7ee9579fe4c656b9d",
    "createdAt": "2016-02-18T05:59:25Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+//$example on$\n+import java.util.LinkedList;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.SingularValueDecomposition;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.linalg.distributed.RowMatrix;\n+//$example off$\n+\n+/**\n+ * Example for SingularValueDecomposition.\n+ */\n+public class JavaSVDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"SVD Example\");\n+    SparkContext sc = new SparkContext(conf);\n+\n+    // $example on$\n+    double[][] array = { { 1.12, 2.05, 3.12 }, { 5.56, 6.28, 8.94 }, { 10.2, 8.0, 20.5 } };\n+    LinkedList<Vector> rowsList = new LinkedList<Vector>();\n+    for (int i = 0; i < array.length; i++) {\n+      Vector currentRow = Vectors.dense(array[i]);\n+      rowsList.add(currentRow);\n+    }\n+    JavaRDD<Vector> rows = JavaSparkContext.fromSparkContext(sc).parallelize(rowsList);\n+\n+    // Create a RowMatrix from JavaRDD<Vector>.\n+    RowMatrix mat = new RowMatrix(rows.rdd());\n+\n+    // Compute the top 3 singular values and corresponding singular vectors.\n+    SingularValueDecomposition<RowMatrix, Matrix> svd = mat.computeSVD(3, true, 1.0E-9d);\n+    RowMatrix U = svd.U();\n+    Vector s = svd.s();\n+    Matrix V = svd.V();",
    "line": 60
  }],
  "prId": 11132
}]