[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Why `$example off$` here?\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:35:15Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "We do not place `$example on$` in the beginning of a class.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:35:50Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+// $example on$"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "`$example on$` here.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:36:12Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+// $example on$\n+public class JavaMultiLabelClassification {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "We use 100 chars per line. Wrap the line if it exceeds 100 chars.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:37:14Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+// $example on$\n+public class JavaMultiLabelClassification {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision(metrics.labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "substitute the blank line with a `$example off$`.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:37:48Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+// $example on$\n+public class JavaMultiLabelClassification {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision(metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f F1 score = %f\\n\", metrics.labels()[i], metrics.f1Measure(metrics.labels()[i]));\n+    }\n+\n+    // Micro stats\n+    System.out.format(\"Micro recall = %f\\n\", metrics.microRecall());\n+    System.out.format(\"Micro precision = %f\\n\", metrics.microPrecision());\n+    System.out.format(\"Micro F1 measure = %f\\n\", metrics.microF1Measure());\n+\n+    // Hamming loss\n+    System.out.format(\"Hamming loss = %f\\n\", metrics.hammingLoss());\n+\n+    // Subset accuracy\n+    System.out.format(\"Subset accuracy = %f\\n\", metrics.subsetAccuracy());\n+"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove it.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-13T15:37:57Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example off$\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+// $example on$\n+public class JavaMultiLabelClassification {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+            new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+            new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+            new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision(metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f F1 score = %f\\n\", metrics.labels()[i], metrics.f1Measure(metrics.labels()[i]));\n+    }\n+\n+    // Micro stats\n+    System.out.format(\"Micro recall = %f\\n\", metrics.microRecall());\n+    System.out.format(\"Micro precision = %f\\n\", metrics.microPrecision());\n+    System.out.format(\"Micro F1 measure = %f\\n\", metrics.microF1Measure());\n+\n+    // Hamming loss\n+    System.out.format(\"Hamming loss = %f\\n\", metrics.hammingLoss());\n+\n+    // Subset accuracy\n+    System.out.format(\"Subset accuracy = %f\\n\", metrics.subsetAccuracy());\n+\n+  }\n+}\n+// $example off$"
  }],
  "prId": 9689
}]