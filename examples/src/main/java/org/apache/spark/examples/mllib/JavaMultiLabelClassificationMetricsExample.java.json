[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a space line here\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:09:36Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */",
    "line": 16
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove a space line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:09:43Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "change the imports like this:\n\n``` java\n// $example on$\nimport java.util.Arrays;\nimport java.util.List;\n\nimport scala.Tuple2;\n\nimport org.apache.spark.api.java.*;\nimport org.apache.spark.mllib.evaluation.MultilabelMetrics;\nimport org.apache.spark.SparkConf;\n// $example off$\n```\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:15:11Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+\n+\n+import java.util.Arrays;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:15:54Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+\n+\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMultiLabelClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision\n+              (metrics.labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:16:01Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+\n+\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMultiLabelClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision\n+              (metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics\n+              .labels()[i]));"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:16:08Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+\n+\n+import java.util.Arrays;\n+import java.util.List;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.mllib.evaluation.MultilabelMetrics;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+import org.apache.spark.SparkContext;\n+\n+public class JavaMultiLabelClassificationMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Multilabel Classification Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    List<Tuple2<double[], double[]>> data = Arrays.asList(\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0}, new double[]{0.0, 2.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{}, new double[]{0.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0}, new double[]{2.0}),\n+      new Tuple2<double[], double[]>(new double[]{2.0, 0.0}, new double[]{2.0, 0.0}),\n+      new Tuple2<double[], double[]>(new double[]{0.0, 1.0, 2.0}, new double[]{0.0, 1.0}),\n+      new Tuple2<double[], double[]>(new double[]{1.0}, new double[]{1.0, 2.0})\n+    );\n+    JavaRDD<Tuple2<double[], double[]>> scoreAndLabels = sc.parallelize(data);\n+\n+    // Instantiate metrics object\n+    MultilabelMetrics metrics = new MultilabelMetrics(scoreAndLabels.rdd());\n+\n+    // Summary stats\n+    System.out.format(\"Recall = %f\\n\", metrics.recall());\n+    System.out.format(\"Precision = %f\\n\", metrics.precision());\n+    System.out.format(\"F1 measure = %f\\n\", metrics.f1Measure());\n+    System.out.format(\"Accuracy = %f\\n\", metrics.accuracy());\n+\n+    // Stats by labels\n+    for (int i = 0; i < metrics.labels().length - 1; i++) {\n+      System.out.format(\"Class %1.1f precision = %f\\n\", metrics.labels()[i], metrics.precision\n+              (metrics.labels()[i]));\n+      System.out.format(\"Class %1.1f recall = %f\\n\", metrics.labels()[i], metrics.recall(metrics\n+              .labels()[i]));\n+      System.out.format(\"Class %1.1f F1 score = %f\\n\", metrics.labels()[i], metrics.f1Measure\n+              (metrics.labels()[i]));"
  }],
  "prId": 9689
}]