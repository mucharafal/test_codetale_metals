[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "We're expecting a text file containing count vectors here? Seems a bit odd. IMO an example taking a document of text and using pipelines to generate the features would be more natural, e.g. https://gist.github.com/feynmanliang/3b6555758a27adcb527d\n",
    "commit": "c794096d7ae52a91b577640d27f480860f4b31d0",
    "createdAt": "2015-11-18T14:51:43Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.clustering.LDA;\n+import org.apache.spark.ml.clustering.LDAModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.catalyst.expressions.GenericRow;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An example demonstrating LDA\n+ * Run with\n+ * <pre>\n+ * bin/run-example ml.JavaLDAExample <file> <k>\n+ * </pre>\n+ */\n+public class JavaLDAExample {\n+\n+  private static class ParseVector implements Function<String, Row> {\n+    private static final Pattern separator = Pattern.compile(\" \");\n+\n+    @Override\n+    public Row call(String line) {\n+      String[] tok = separator.split(line);\n+      double[] point = new double[tok.length];\n+      for (int i = 0; i < tok.length; ++i) {\n+        point[i] = Double.parseDouble(tok[i]);",
    "line": 56
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "I changed the scala one. For the java example I keep it as it is in the mllib model.\n",
    "commit": "c794096d7ae52a91b577640d27f480860f4b31d0",
    "createdAt": "2015-11-19T16:50:14Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.clustering.LDA;\n+import org.apache.spark.ml.clustering.LDAModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.catalyst.expressions.GenericRow;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An example demonstrating LDA\n+ * Run with\n+ * <pre>\n+ * bin/run-example ml.JavaLDAExample <file> <k>\n+ * </pre>\n+ */\n+public class JavaLDAExample {\n+\n+  private static class ParseVector implements Function<String, Row> {\n+    private static final Pattern separator = Pattern.compile(\" \");\n+\n+    @Override\n+    public Row call(String line) {\n+      String[] tok = separator.split(line);\n+      double[] point = new double[tok.length];\n+      for (int i = 0; i < tok.length; ++i) {\n+        point[i] = Double.parseDouble(tok[i]);",
    "line": 56
  }, {
    "author": {
      "login": "feynmanliang"
    },
    "body": "I think it might be confusing when a reader of the docs gets two different examples after flipping between languages. I'm really sorry, but do you mind changing it back so that they match (we can keep the examples using count vectors).\n",
    "commit": "c794096d7ae52a91b577640d27f480860f4b31d0",
    "createdAt": "2015-11-19T18:49:47Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.clustering.LDA;\n+import org.apache.spark.ml.clustering.LDAModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.catalyst.expressions.GenericRow;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An example demonstrating LDA\n+ * Run with\n+ * <pre>\n+ * bin/run-example ml.JavaLDAExample <file> <k>\n+ * </pre>\n+ */\n+public class JavaLDAExample {\n+\n+  private static class ParseVector implements Function<String, Row> {\n+    private static final Pattern separator = Pattern.compile(\" \");\n+\n+    @Override\n+    public Row call(String line) {\n+      String[] tok = separator.split(line);\n+      double[] point = new double[tok.length];\n+      for (int i = 0; i < tok.length; ++i) {\n+        point[i] = Double.parseDouble(tok[i]);",
    "line": 56
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "Sure.\n",
    "commit": "c794096d7ae52a91b577640d27f480860f4b31d0",
    "createdAt": "2015-11-20T02:03:19Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.clustering.LDA;\n+import org.apache.spark.ml.clustering.LDAModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.VectorUDT;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.catalyst.expressions.GenericRow;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An example demonstrating LDA\n+ * Run with\n+ * <pre>\n+ * bin/run-example ml.JavaLDAExample <file> <k>\n+ * </pre>\n+ */\n+public class JavaLDAExample {\n+\n+  private static class ParseVector implements Function<String, Row> {\n+    private static final Pattern separator = Pattern.compile(\" \");\n+\n+    @Override\n+    public Row call(String line) {\n+      String[] tok = separator.split(line);\n+      double[] point = new double[tok.length];\n+      for (int i = 0; i < tok.length; ++i) {\n+        point[i] = Double.parseDouble(tok[i]);",
    "line": 56
  }],
  "prId": 9722
}]