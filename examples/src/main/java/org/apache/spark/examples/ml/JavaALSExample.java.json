[{
  "comments": [{
    "author": {
      "login": "BenFradet"
    },
    "body": "There might be a better way to do this, input welcome.\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2015-12-24T15:30:36Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {\n+      this.userId = userId;\n+    }\n+\n+    public int getMovieId() {\n+      return movieId;\n+    }\n+\n+    public void setMovieId(int movieId) {\n+      this.movieId = movieId;\n+    }\n+\n+    public float getRating() {\n+      return rating;\n+    }\n+\n+    public void setRating(float rating) {\n+      this.rating = rating;\n+    }\n+\n+    public long getTimestamp() {\n+      return timestamp;\n+    }\n+\n+    public void setTimestamp(long timestamp) {\n+      this.timestamp = timestamp;\n+    }\n+\n+    public static Rating parseRating(String str) {\n+      String[] fields = str.split(\"::\");\n+      assert(fields.length == 4);\n+      Rating rating = new Rating();\n+      rating.setUserId(Integer.parseInt(fields[0]));\n+      rating.setMovieId(Integer.parseInt(fields[1]));\n+      rating.setRating(Float.parseFloat(fields[2]));\n+      rating.setTimestamp(Long.parseLong(fields[3]));\n+      return rating;\n+    }\n+  }\n+  // $example off$\n+\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaALSExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext sqlContext = new SQLContext(jsc);\n+\n+    // $example on$\n+    JavaRDD<Rating> ratingsRDD = jsc.textFile(\"data/mllib/als/sample_movielens_ratings.txt\")\n+      .map(new Function<String, Rating>() {\n+        public Rating call(String str) {\n+          return Rating.parseRating(str);\n+        }\n+      });\n+    DataFrame ratings = sqlContext.createDataFrame(ratingsRDD, Rating.class);\n+    DataFrame[] splits = ratings.randomSplit(new double[]{0.8, 0.2});\n+    DataFrame training = splits[0];\n+    DataFrame test = splits[1];\n+\n+    // Build the recommendation model using ALS on the training data\n+    ALS als = new ALS()\n+      .setMaxIter(5)\n+      .setRegParam(0.01)\n+      .setUserCol(\"userId\")\n+      .setItemCol(\"movieId\")\n+      .setRatingCol(\"rating\");\n+    ALSModel model = als.fit(training);\n+\n+    // Evaluate the model by computing the RMSE on the test data\n+    DataFrame rawPredictions = model.transform(test);\n+    DataFrame predictions = rawPredictions\n+      .withColumn(\"rating\", rawPredictions.col(\"rating\").cast(DataTypes.DoubleType))\n+      .withColumn(\"prediction\", rawPredictions.col(\"prediction\").cast(DataTypes.DoubleType));",
    "line": 114
  }],
  "prId": 10411
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "To keep the example simpler, do you really need setters instead of just constructor args? I personally am used to that as the default, with final fields.\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2016-02-12T10:55:07Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {"
  }, {
    "author": {
      "login": "BenFradet"
    },
    "body": "AFAIK, spark SQL only supports JavaBean according to the doc: https://spark.apache.org/docs/latest/sql-programming-guide.html#inferring-the-schema-using-reflection.\n\nSo, public final fields with a constructor won't work.\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2016-02-13T15:40:55Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Aha. Can you omit the setters, leave a no-arg constructor, and leave them non-final? That's JavaBeans-friendly and may be simpler and close enough. If there's any catch though just leave it.\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2016-02-13T15:49:28Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {"
  }, {
    "author": {
      "login": "BenFradet"
    },
    "body": "yup\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2016-02-13T16:33:46Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {"
  }],
  "prId": 10411
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "You don't want to add `assert`s in Java\n",
    "commit": "9b351e914e87012298ab773d6b76ec019a735b6f",
    "createdAt": "2016-02-12T10:55:25Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+\n+// $example on$\n+import java.io.Serializable;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.recommendation.ALS;\n+import org.apache.spark.ml.recommendation.ALSModel;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.types.DataTypes;\n+// $example off$\n+\n+public class JavaALSExample {\n+\n+  // $example on$\n+  public static class Rating implements Serializable {\n+    private int userId;\n+    private int movieId;\n+    private float rating;\n+    private long timestamp;\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public void setUserId(int userId) {\n+      this.userId = userId;\n+    }\n+\n+    public int getMovieId() {\n+      return movieId;\n+    }\n+\n+    public void setMovieId(int movieId) {\n+      this.movieId = movieId;\n+    }\n+\n+    public float getRating() {\n+      return rating;\n+    }\n+\n+    public void setRating(float rating) {\n+      this.rating = rating;\n+    }\n+\n+    public long getTimestamp() {\n+      return timestamp;\n+    }\n+\n+    public void setTimestamp(long timestamp) {\n+      this.timestamp = timestamp;\n+    }\n+\n+    public static Rating parseRating(String str) {\n+      String[] fields = str.split(\"::\");\n+      assert(fields.length == 4);"
  }],
  "prId": 10411
}]