[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "I would not include SparkConf or JavaSparkContext\n",
    "commit": "e27fe714e553901860f45dba6906fa7fcc4dcdb0",
    "createdAt": "2016-04-08T20:39:16Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import org.apache.spark.SparkConf;"
  }],
  "prId": 11015
}, {
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Rename \"trainer\" -> \"nb\" or \"estimator\"\nSame for other examples\n",
    "commit": "e27fe714e553901860f45dba6906fa7fcc4dcdb0",
    "createdAt": "2016-04-08T20:39:22Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.classification.NaiveBayes;\n+import org.apache.spark.ml.classification.NaiveBayesModel;\n+import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+// $example off$\n+\n+/**\n+ * An example for Naive Bayes Classification.\n+ */\n+public class JavaNaiveBayesExample {\n+\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaNaiveBayesExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    // $example on$\n+    // Load training data\n+    DataFrame dataFrame = jsql.read().format(\"libsvm\").load(\"data/mllib/sample_libsvm_data.txt\");\n+    // Split the data into train and test\n+    DataFrame[] splits = dataFrame.randomSplit(new double[]{0.6, 0.4}, 1234L);\n+    DataFrame train = splits[0];\n+    DataFrame test = splits[1];\n+\n+    // create the trainer and set its parameters\n+    NaiveBayes trainer = new NaiveBayes();"
  }],
  "prId": 11015
}]