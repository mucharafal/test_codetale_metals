[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Why not just `df.select(...).show()`?",
    "commit": "ee9d3686f3e48650668bf26a7003b0bde912b6a0",
    "createdAt": "2018-02-01T13:59:14Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.sql.*;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.linalg.Vector;\n+import org.apache.spark.ml.linalg.Vectors;\n+import org.apache.spark.ml.linalg.VectorUDT;\n+import org.apache.spark.ml.stat.Summarizer;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+// $example off$\n+\n+public class JavaSummarizerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaSummarizerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(Vectors.dense(2.0, 3.0, 5.0), 1.0),\n+      RowFactory.create(Vectors.dense(4.0, 6.0, 7.0), 2.0)\n+    );\n+\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"features\", new VectorUDT(), false, Metadata.empty()),\n+      new StructField(\"weight\", DataTypes.DoubleType, false, Metadata.empty())\n+    });\n+\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Row result1 = df.select(Summarizer.metrics(\"mean\", \"variance\")\n+        .summary(new Column(\"features\"), new Column(\"weight\")))\n+        .first().getStruct(0);\n+    System.out.println(\"with weight: mean = \" + result1.<Vector>getAs(0).toString() +"
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "Because spark user will usually want to get the summary result (multiple vectors), I want to show the simple way to extract these results from the returned dataframe which contains only one row. I think some user is possible to get stuck here.",
    "commit": "ee9d3686f3e48650668bf26a7003b0bde912b6a0",
    "createdAt": "2018-02-02T06:08:04Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.sql.*;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.linalg.Vector;\n+import org.apache.spark.ml.linalg.Vectors;\n+import org.apache.spark.ml.linalg.VectorUDT;\n+import org.apache.spark.ml.stat.Summarizer;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+// $example off$\n+\n+public class JavaSummarizerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaSummarizerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(Vectors.dense(2.0, 3.0, 5.0), 1.0),\n+      RowFactory.create(Vectors.dense(4.0, 6.0, 7.0), 2.0)\n+    );\n+\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"features\", new VectorUDT(), false, Metadata.empty()),\n+      new StructField(\"weight\", DataTypes.DoubleType, false, Metadata.empty())\n+    });\n+\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Row result1 = df.select(Summarizer.metrics(\"mean\", \"variance\")\n+        .summary(new Column(\"features\"), new Column(\"weight\")))\n+        .first().getStruct(0);\n+    System.out.println(\"with weight: mean = \" + result1.<Vector>getAs(0).toString() +"
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "ok fair enough",
    "commit": "ee9d3686f3e48650668bf26a7003b0bde912b6a0",
    "createdAt": "2018-02-02T06:38:33Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.sql.*;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.linalg.Vector;\n+import org.apache.spark.ml.linalg.Vectors;\n+import org.apache.spark.ml.linalg.VectorUDT;\n+import org.apache.spark.ml.stat.Summarizer;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+// $example off$\n+\n+public class JavaSummarizerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaSummarizerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(Vectors.dense(2.0, 3.0, 5.0), 1.0),\n+      RowFactory.create(Vectors.dense(4.0, 6.0, 7.0), 2.0)\n+    );\n+\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"features\", new VectorUDT(), false, Metadata.empty()),\n+      new StructField(\"weight\", DataTypes.DoubleType, false, Metadata.empty())\n+    });\n+\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Row result1 = df.select(Summarizer.metrics(\"mean\", \"variance\")\n+        .summary(new Column(\"features\"), new Column(\"weight\")))\n+        .first().getStruct(0);\n+    System.out.println(\"with weight: mean = \" + result1.<Vector>getAs(0).toString() +"
  }],
  "prId": 20446
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Why not just `df.select(...).show()`?",
    "commit": "ee9d3686f3e48650668bf26a7003b0bde912b6a0",
    "createdAt": "2018-02-01T13:59:26Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.sql.*;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.linalg.Vector;\n+import org.apache.spark.ml.linalg.Vectors;\n+import org.apache.spark.ml.linalg.VectorUDT;\n+import org.apache.spark.ml.stat.Summarizer;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+// $example off$\n+\n+public class JavaSummarizerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaSummarizerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(Vectors.dense(2.0, 3.0, 5.0), 1.0),\n+      RowFactory.create(Vectors.dense(4.0, 6.0, 7.0), 2.0)\n+    );\n+\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"features\", new VectorUDT(), false, Metadata.empty()),\n+      new StructField(\"weight\", DataTypes.DoubleType, false, Metadata.empty())\n+    });\n+\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Row result1 = df.select(Summarizer.metrics(\"mean\", \"variance\")\n+        .summary(new Column(\"features\"), new Column(\"weight\")))\n+        .first().getStruct(0);\n+    System.out.println(\"with weight: mean = \" + result1.<Vector>getAs(0).toString() +\n+      \", variance = \" + result1.<Vector>getAs(1).toString());\n+\n+    Row result2 = df.select(\n+      Summarizer.mean(new Column(\"features\")),\n+      Summarizer.variance(new Column(\"features\"))\n+    ).first();\n+    System.out.println(\"without weight: mean = \" + result2.<Vector>getAs(0).toString() +",
    "line": 66
  }],
  "prId": 20446
}]