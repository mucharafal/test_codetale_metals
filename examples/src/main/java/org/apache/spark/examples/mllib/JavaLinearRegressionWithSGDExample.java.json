[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Update the import block in this way:\n\n``` java\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaSparkContext;\n\n// $example on$\nimport scala.Tuple2;\n\nimport org.apache.spark.api.java.JavaDoubleRDD;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.function.Function;\nimport org.apache.spark.mllib.linalg.Vectors;\nimport org.apache.spark.mllib.regression.LabeledPoint;\nimport org.apache.spark.mllib.regression.LinearRegressionModel;\nimport org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n// $example off$\n```\n",
    "commit": "90004058248ed356252fddcfc86bdc913175b644",
    "createdAt": "2016-02-26T08:34:13Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$"
  }],
  "prId": 11320
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "exceed 100 chars limitation.\n",
    "commit": "90004058248ed356252fddcfc86bdc913175b644",
    "createdAt": "2016-02-26T08:36:33Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+// $example off$\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+/**\n+ * Example for LinearRegressionWithSGD.\n+ */\n+public class JavaLinearRegressionWithSGDExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaLinearRegressionWithSGDExample\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    // Load and parse the data\n+    String path = \"data/mllib/ridge-data/lpsa.data\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<LabeledPoint> parsedData = data.map(\n+      new Function<String, LabeledPoint>() {\n+        public LabeledPoint call(String line) {\n+          String[] parts = line.split(\",\");\n+          String[] features = parts[1].split(\" \");\n+          double[] v = new double[features.length];\n+          for (int i = 0; i < features.length - 1; i++) {\n+            v[i] = Double.parseDouble(features[i]);\n+          }\n+          return new LabeledPoint(Double.parseDouble(parts[0]), Vectors.dense(v));\n+        }\n+      }\n+    );\n+    parsedData.cache();\n+\n+    // Building the model\n+    int numIterations = 100;\n+    double stepSize = 0.00000001;\n+    final LinearRegressionModel model =\n+      LinearRegressionWithSGD.train(JavaRDD.toRDD(parsedData), numIterations, stepSize);\n+\n+    // Evaluate model on training examples and compute training error\n+    JavaRDD<Tuple2<Double, Double>> valuesAndPreds = parsedData.map(\n+      new Function<LabeledPoint, Tuple2<Double, Double>>() {\n+        public Tuple2<Double, Double> call(LabeledPoint point) {\n+          double prediction = model.predict(point.features());\n+          return new Tuple2<Double, Double>(prediction, point.label());\n+        }\n+      }\n+    );\n+    double MSE = new JavaDoubleRDD(valuesAndPreds.map(\n+      new Function<Tuple2<Double, Double>, Object>() {\n+        public Object call(Tuple2<Double, Double> pair) {\n+          return Math.pow(pair._1() - pair._2(), 2.0);\n+        }\n+      }\n+    ).rdd()).mean();\n+    System.out.println(\"training Mean Squared Error = \" + MSE);\n+\n+    // Save and load model\n+    model.save(sc.sc(), \"target/tmp/myLinearRegressionWithSGDModel\");\n+    LinearRegressionModel sameModel = LinearRegressionModel.load(sc.sc(), \"target/tmp/myLinearRegressionWithSGDModel\");"
  }],
  "prId": 11320
}]