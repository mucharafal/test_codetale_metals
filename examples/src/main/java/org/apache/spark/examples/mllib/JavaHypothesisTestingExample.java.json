[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "``` java\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaSparkContext;\n\n// $example on$\nimport java.util.Arrays;\n\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.mllib.linalg.Matrices;\nimport org.apache.spark.mllib.linalg.Matrix;\nimport org.apache.spark.mllib.linalg.Vector;\nimport org.apache.spark.mllib.linalg.Vectors;\nimport org.apache.spark.mllib.regression.LabeledPoint;\nimport org.apache.spark.mllib.stat.Statistics;\nimport org.apache.spark.mllib.stat.test.ChiSqTestResult;\n// $example off$\n```\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:18:33Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "exceeds 100\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:18:54Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:19:09Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:19:18Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:19:30Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+\n+    // Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0}); // a contingency matrix"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:19:40Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+\n+    // Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0}); // a contingency matrix\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    ChiSqTestResult independenceTestResult = Statistics.chiSqTest(mat);\n+    // summary of the test including the p-value, degrees of freedom...\n+    System.out.println(independenceTestResult);\n+\n+    LabeledPoint p1 = new LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0));\n+    LabeledPoint p2 = new LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0));\n+    LabeledPoint p3 = new LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5));\n+    JavaRDD<LabeledPoint> obs = jsc.parallelize(Arrays.asList(p1, p2, p3)); // an RDD of labeled points"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indent\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:19:56Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+\n+    // Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0}); // a contingency matrix\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    ChiSqTestResult independenceTestResult = Statistics.chiSqTest(mat);\n+    // summary of the test including the p-value, degrees of freedom...\n+    System.out.println(independenceTestResult);\n+\n+    LabeledPoint p1 = new LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0));\n+    LabeledPoint p2 = new LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0));\n+    LabeledPoint p3 = new LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5));\n+    JavaRDD<LabeledPoint> obs = jsc.parallelize(Arrays.asList(p1, p2, p3)); // an RDD of labeled points\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    ChiSqTestResult[] featureTestResults = Statistics.chiSqTest(obs.rdd());\n+    int i = 1;\n+    for (ChiSqTestResult result : featureTestResults) {\n+      System.out.println(\"Column \" + i + \":\");\n+      System.out.println(result); // summary of the test"
  }, {
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:20:32Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+\n+    // Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0}); // a contingency matrix\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    ChiSqTestResult independenceTestResult = Statistics.chiSqTest(mat);\n+    // summary of the test including the p-value, degrees of freedom...\n+    System.out.println(independenceTestResult);\n+\n+    LabeledPoint p1 = new LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0));\n+    LabeledPoint p2 = new LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0));\n+    LabeledPoint p3 = new LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5));\n+    JavaRDD<LabeledPoint> obs = jsc.parallelize(Arrays.asList(p1, p2, p3)); // an RDD of labeled points\n+\n+    // The contingency table is constructed from the raw (feature, label) pairs and used to conduct\n+    // the independence test. Returns an array containing the ChiSquaredTestResult for every feature\n+    // against the label.\n+    ChiSqTestResult[] featureTestResults = Statistics.chiSqTest(obs.rdd());\n+    int i = 1;\n+    for (ChiSqTestResult result : featureTestResults) {\n+      System.out.println(\"Column \" + i + \":\");\n+      System.out.println(result); // summary of the test"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:20:10Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:20:17Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.Arrays;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25); // a vector composed of the frequencies of events\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied as a parameter,\n+    // the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic, the method used,\n+    // and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+\n+    // Create a dense matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0}); // a contingency matrix\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    ChiSqTestResult independenceTestResult = Statistics.chiSqTest(mat);\n+    // summary of the test including the p-value, degrees of freedom...\n+    System.out.println(independenceTestResult);"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Same here. Embed `new LabelPoint` in `Arrays.asList`.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:28:13Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.Arrays;\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.mllib.linalg.Matrices;\n+import org.apache.spark.mllib.linalg.Matrix;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.stat.Statistics;\n+import org.apache.spark.mllib.stat.test.ChiSqTestResult;\n+// $example off$\n+\n+public class JavaHypothesisTestingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaHypothesisTestingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    // a vector composed of the frequencies of events\n+    Vector vec = Vectors.dense(0.1, 0.15, 0.2, 0.3, 0.25);\n+\n+    // compute the goodness of fit. If a second vector to test against is not supplied\n+    // as a parameter, the test runs against a uniform distribution.\n+    ChiSqTestResult goodnessOfFitTestResult = Statistics.chiSqTest(vec);\n+    // summary of the test including the p-value, degrees of freedom, test statistic,\n+    // the method used, and the null hypothesis.\n+    System.out.println(goodnessOfFitTestResult);\n+    System.out.println();\n+\n+    // Create a contingency matrix ((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n+    Matrix mat = Matrices.dense(3, 2, new double[]{1.0, 3.0, 5.0, 2.0, 4.0, 6.0});\n+\n+    // conduct Pearson's independence test on the input contingency matrix\n+    ChiSqTestResult independenceTestResult = Statistics.chiSqTest(mat);\n+    // summary of the test including the p-value, degrees of freedom...\n+    System.out.println(independenceTestResult);\n+    System.out.println();\n+\n+    LabeledPoint p1 = new LabeledPoint(1.0, Vectors.dense(1.0, 0.0, 3.0));\n+    LabeledPoint p2 = new LabeledPoint(1.0, Vectors.dense(1.0, 2.0, 0.0));\n+    LabeledPoint p3 = new LabeledPoint(-1.0, Vectors.dense(-1.0, 0.0, -0.5));\n+    // an RDD of labeled points\n+    JavaRDD<LabeledPoint> obs = jsc.parallelize(Arrays.asList(p1, p2, p3));"
  }],
  "prId": 11108
}]