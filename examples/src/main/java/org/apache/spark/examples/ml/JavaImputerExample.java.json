[{
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Since we're using defaults we can remove the `setStrategy` call in all examples.",
    "commit": "e17f997518782014b3c3dc1c33d69aecfcb0d38c",
    "createdAt": "2017-03-27T12:40:07Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.feature.Imputer;\n+import org.apache.spark.ml.feature.ImputerModel;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+import static org.apache.spark.sql.types.DataTypes.*;\n+\n+/**\n+ * An example demonstrating Imputer.\n+ * Run with:\n+ *   bin/run-example ml.JavaImputerExample\n+ */\n+public class JavaImputerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaImputerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.0, Double.NaN),\n+      RowFactory.create(2.0, Double.NaN),\n+      RowFactory.create(Double.NaN, 3.0),\n+      RowFactory.create(4.0, 4.0),\n+      RowFactory.create(5.0, 5.0)\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      createStructField(\"a\", DoubleType, false),\n+      createStructField(\"b\", DoubleType, false)\n+    });\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Imputer imputerModel = new Imputer()\n+      .setStrategy(\"mean\")"
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "For the example code, can we keep it to introduce the primary API or important parameters?",
    "commit": "e17f997518782014b3c3dc1c33d69aecfcb0d38c",
    "createdAt": "2017-03-27T17:46:20Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.feature.Imputer;\n+import org.apache.spark.ml.feature.ImputerModel;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+import static org.apache.spark.sql.types.DataTypes.*;\n+\n+/**\n+ * An example demonstrating Imputer.\n+ * Run with:\n+ *   bin/run-example ml.JavaImputerExample\n+ */\n+public class JavaImputerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaImputerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.0, Double.NaN),\n+      RowFactory.create(2.0, Double.NaN),\n+      RowFactory.create(Double.NaN, 3.0),\n+      RowFactory.create(4.0, 4.0),\n+      RowFactory.create(5.0, 5.0)\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      createStructField(\"a\", DoubleType, false),\n+      createStructField(\"b\", DoubleType, false)\n+    });\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Imputer imputerModel = new Imputer()\n+      .setStrategy(\"mean\")"
  }, {
    "author": {
      "login": "MLnick"
    },
    "body": "It's not a big deal - still I think it's not necessary to illustrate `setStrategy(\"mean\")` as we already mention in the user guide what the defaults are.",
    "commit": "e17f997518782014b3c3dc1c33d69aecfcb0d38c",
    "createdAt": "2017-03-28T08:04:34Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.feature.Imputer;\n+import org.apache.spark.ml.feature.ImputerModel;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+import static org.apache.spark.sql.types.DataTypes.*;\n+\n+/**\n+ * An example demonstrating Imputer.\n+ * Run with:\n+ *   bin/run-example ml.JavaImputerExample\n+ */\n+public class JavaImputerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaImputerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.0, Double.NaN),\n+      RowFactory.create(2.0, Double.NaN),\n+      RowFactory.create(Double.NaN, 3.0),\n+      RowFactory.create(4.0, 4.0),\n+      RowFactory.create(5.0, 5.0)\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      createStructField(\"a\", DoubleType, false),\n+      createStructField(\"b\", DoubleType, false)\n+    });\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Imputer imputerModel = new Imputer()\n+      .setStrategy(\"mean\")"
  }],
  "prId": 17324
}, {
  "comments": [{
    "author": {
      "login": "MLnick"
    },
    "body": "Sorry just noticed this `imputerModel` here and `model` below. Let's call it `imputer` and `model`.",
    "commit": "e17f997518782014b3c3dc1c33d69aecfcb0d38c",
    "createdAt": "2017-03-28T08:09:37Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.feature.Imputer;\n+import org.apache.spark.ml.feature.ImputerModel;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+import static org.apache.spark.sql.types.DataTypes.*;\n+\n+/**\n+ * An example demonstrating Imputer.\n+ * Run with:\n+ *   bin/run-example ml.JavaImputerExample\n+ */\n+public class JavaImputerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaImputerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.0, Double.NaN),\n+      RowFactory.create(2.0, Double.NaN),\n+      RowFactory.create(Double.NaN, 3.0),\n+      RowFactory.create(4.0, 4.0),\n+      RowFactory.create(5.0, 5.0)\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      createStructField(\"a\", DoubleType, false),\n+      createStructField(\"b\", DoubleType, false)\n+    });\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Imputer imputerModel = new Imputer()"
  }, {
    "author": {
      "login": "hhbyyh"
    },
    "body": "Thanks for finding this.",
    "commit": "e17f997518782014b3c3dc1c33d69aecfcb0d38c",
    "createdAt": "2017-03-29T06:10:05Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.ml.feature.Imputer;\n+import org.apache.spark.ml.feature.ImputerModel;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+import static org.apache.spark.sql.types.DataTypes.*;\n+\n+/**\n+ * An example demonstrating Imputer.\n+ * Run with:\n+ *   bin/run-example ml.JavaImputerExample\n+ */\n+public class JavaImputerExample {\n+  public static void main(String[] args) {\n+    SparkSession spark = SparkSession\n+      .builder()\n+      .appName(\"JavaImputerExample\")\n+      .getOrCreate();\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.0, Double.NaN),\n+      RowFactory.create(2.0, Double.NaN),\n+      RowFactory.create(Double.NaN, 3.0),\n+      RowFactory.create(4.0, 4.0),\n+      RowFactory.create(5.0, 5.0)\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      createStructField(\"a\", DoubleType, false),\n+      createStructField(\"b\", DoubleType, false)\n+    });\n+    Dataset<Row> df = spark.createDataFrame(data, schema);\n+\n+    Imputer imputerModel = new Imputer()"
  }],
  "prId": 17324
}]