[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "remove `factory`\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-09T21:27:25Z",
    "diffHunk": "@@ -204,13 +202,25 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    final AtomicBoolean newContextCreated = new AtomicBoolean(false);\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {\n+      @Override\n+      public JavaStreamingContext call() {\n+        newContextCreated.set(true);\n+        return createContext(ip, port, checkpointDirectory, outputPath);\n+      }\n+    };\n+\n     JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {"
  }, {
    "author": {
      "login": "lresende"
    },
    "body": "Thanks @zsxwing , removed on the latest code.\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-09T22:00:01Z",
    "diffHunk": "@@ -204,13 +202,25 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    final AtomicBoolean newContextCreated = new AtomicBoolean(false);\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {\n+      @Override\n+      public JavaStreamingContext call() {\n+        newContextCreated.set(true);\n+        return createContext(ip, port, checkpointDirectory, outputPath);\n+      }\n+    };\n+\n     JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {"
  }],
  "prId": 11139
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "import order. See https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide#SparkCodeStyleGuide-Imports\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-10T00:12:55Z",
    "diffHunk": "@@ -23,8 +23,11 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.regex.Pattern;\n \n+import org.apache.spark.api.java.function.*;\n+import org.apache.spark.streaming.Seconds;"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I generally would not collapse imports to `*`, though the code is inconsistent and people have different feelings. Don't make that change\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-10T07:25:05Z",
    "diffHunk": "@@ -23,8 +23,11 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.regex.Pattern;\n \n+import org.apache.spark.api.java.function.*;\n+import org.apache.spark.streaming.Seconds;"
  }],
  "prId": 11139
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: remove newContextCreated\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-10T00:13:42Z",
    "diffHunk": "@@ -204,13 +202,19 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n-    JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    final AtomicBoolean newContextCreated = new AtomicBoolean(false);"
  }],
  "prId": 11139
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit -- I think the end of line can be just `new Function<>() {`\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-10T07:26:59Z",
    "diffHunk": "@@ -204,13 +202,17 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n-    JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {",
    "line": 36
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Likewise this comment was still valid, though again minor\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-17T12:03:36Z",
    "diffHunk": "@@ -204,13 +202,17 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n-    JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {",
    "line": 36
  }, {
    "author": {
      "login": "lresende"
    },
    "body": "As this is a Java example, I would prefer to leave like this unless you have strong feelings about the function declaration\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-17T18:29:36Z",
    "diffHunk": "@@ -204,13 +202,17 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n-    JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {",
    "line": 36
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "`new Function0<>` is valid Java. What do you mean? it's just simpler.\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-17T18:34:15Z",
    "diffHunk": "@@ -204,13 +202,17 @@ public static void main(String[] args) {\n     final int port = Integer.parseInt(args[1]);\n     final String checkpointDirectory = args[2];\n     final String outputPath = args[3];\n-    JavaStreamingContextFactory factory = new JavaStreamingContextFactory() {\n+\n+    // Function to create JavaStreamingContext without any output operations\n+    // (used to detect the new context)\n+    Function0<JavaStreamingContext> createContextFunc = new Function0<JavaStreamingContext>() {",
    "line": 36
  }],
  "prId": 11139
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I was saying that these shouldn't be collapsed to a `*` import, but I don't think it's that important. We don't often use this.\n",
    "commit": "a5d928f140d2753430c1ea0f9085dd21d29a0c03",
    "createdAt": "2016-02-17T12:03:07Z",
    "diffHunk": "@@ -26,17 +26,14 @@\n import java.util.regex.Pattern;\n \n import scala.Tuple2;\n+\n import com.google.common.io.Files;\n \n import org.apache.spark.Accumulator;\n import org.apache.spark.SparkConf;\n import org.apache.spark.api.java.JavaPairRDD;\n import org.apache.spark.api.java.JavaSparkContext;\n-import org.apache.spark.api.java.function.FlatMapFunction;\n-import org.apache.spark.api.java.function.Function;\n-import org.apache.spark.api.java.function.Function2;\n-import org.apache.spark.api.java.function.PairFunction;\n-import org.apache.spark.api.java.function.VoidFunction2;\n+import org.apache.spark.api.java.function.*;",
    "line": 16
  }],
  "prId": 11139
}]