[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Is this constructor necessary?\n",
    "commit": "9998df67b1c15c7cc350ef59c10af8275b947e02",
    "createdAt": "2015-09-22T23:50:24Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.streaming;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.FlatMapFunction;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.Function2;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.streaming.Duration;\n+import org.apache.spark.streaming.api.java.JavaDStream;\n+import org.apache.spark.streaming.api.java.JavaPairDStream;\n+import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;\n+import org.apache.spark.streaming.api.java.JavaStreamingContext;\n+import org.apache.spark.streaming.twitter.TwitterUtils;\n+import scala.Tuple2;\n+import twitter4j.Status;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Displays the most positive hash tags by joining the streaming Twitter data with a static RDD of\n+ * the AFINN word list (http://neuro.imm.dtu.dk/wiki/AFINN)\n+ */\n+public class JavaTwitterTagSentiments {\n+    private JavaTwitterTagSentiments() {"
  }, {
    "author": {
      "login": "Agent007"
    },
    "body": "I followed the example in https://github.com/apache/spark/blob/master/examples/src/main/java/org/apache/spark/examples/streaming/JavaKafkaWordCount.java but I can see how that may be distracting and superfluous for the purposes of showing the example. I now notice that the other Java streaming examples don't have it either. Give me a few minutes to make a new commit to remove it. Thanks for your feedback @tdas \n",
    "commit": "9998df67b1c15c7cc350ef59c10af8275b947e02",
    "createdAt": "2015-09-22T23:55:47Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.streaming;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.FlatMapFunction;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.Function2;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.streaming.Duration;\n+import org.apache.spark.streaming.api.java.JavaDStream;\n+import org.apache.spark.streaming.api.java.JavaPairDStream;\n+import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;\n+import org.apache.spark.streaming.api.java.JavaStreamingContext;\n+import org.apache.spark.streaming.twitter.TwitterUtils;\n+import scala.Tuple2;\n+import twitter4j.Status;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Displays the most positive hash tags by joining the streaming Twitter data with a static RDD of\n+ * the AFINN word list (http://neuro.imm.dtu.dk/wiki/AFINN)\n+ */\n+public class JavaTwitterTagSentiments {\n+    private JavaTwitterTagSentiments() {"
  }],
  "prId": 8431
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "This whole file should be indented with 2 spaces, to keep it consistent with other Java examples.\n",
    "commit": "9998df67b1c15c7cc350ef59c10af8275b947e02",
    "createdAt": "2015-09-22T23:51:27Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.streaming;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.FlatMapFunction;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.Function2;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.streaming.Duration;\n+import org.apache.spark.streaming.api.java.JavaDStream;\n+import org.apache.spark.streaming.api.java.JavaPairDStream;\n+import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;\n+import org.apache.spark.streaming.api.java.JavaStreamingContext;\n+import org.apache.spark.streaming.twitter.TwitterUtils;\n+import scala.Tuple2;\n+import twitter4j.Status;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Displays the most positive hash tags by joining the streaming Twitter data with a static RDD of\n+ * the AFINN word list (http://neuro.imm.dtu.dk/wiki/AFINN)\n+ */\n+public class JavaTwitterTagSentiments {"
  }],
  "prId": 8431
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Please add more comments throughout the code to explain stuff.\n",
    "commit": "9998df67b1c15c7cc350ef59c10af8275b947e02",
    "createdAt": "2015-09-22T23:52:54Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.streaming;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.FlatMapFunction;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.Function2;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.streaming.Duration;\n+import org.apache.spark.streaming.api.java.JavaDStream;\n+import org.apache.spark.streaming.api.java.JavaPairDStream;\n+import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;\n+import org.apache.spark.streaming.api.java.JavaStreamingContext;\n+import org.apache.spark.streaming.twitter.TwitterUtils;\n+import scala.Tuple2;\n+import twitter4j.Status;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Displays the most positive hash tags by joining the streaming Twitter data with a static RDD of\n+ * the AFINN word list (http://neuro.imm.dtu.dk/wiki/AFINN)\n+ */\n+public class JavaTwitterTagSentiments {\n+    private JavaTwitterTagSentiments() {\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length < 4) {\n+            System.err.println(\"Usage: JavaTwitterTagSentiments <consumer key> <consumer secret>\" +\n+                    \" <access token> <access token secret> [<filters>]\");\n+            System.exit(1);\n+        }\n+\n+        StreamingExamples.setStreamingLogLevels();\n+\n+        String consumerKey = args[0];\n+        String consumerSecret = args[1];\n+        String accessToken = args[2];\n+        String accessTokenSecret = args[3];\n+        String[] filters = Arrays.copyOfRange(args, 4, args.length);\n+\n+        System.setProperty(\"twitter4j.oauth.consumerKey\", consumerKey);\n+        System.setProperty(\"twitter4j.oauth.consumerSecret\", consumerSecret);\n+        System.setProperty(\"twitter4j.oauth.accessToken\", accessToken);\n+        System.setProperty(\"twitter4j.oauth.accessTokenSecret\", accessTokenSecret);\n+"
  }],
  "prId": 8431
}]