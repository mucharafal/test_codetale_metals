[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Add a blank line below here.\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T02:59:57Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;",
    "line": 18
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "blank line below here\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:00:14Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;\n+import java.util.Map;\n+import scala.Tuple2;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.tree.GradientBoostedTrees;\n+import org.apache.spark.mllib.tree.configuration.BoostingStrategy;\n+import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$",
    "line": 37
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "You need to add some blank lines in imports. See [code style guide](https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide).\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:02:58Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;"
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "sc -> jsc, change the following sc to jsc accordingly.\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:05:24Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;\n+import java.util.Map;\n+import scala.Tuple2;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.tree.GradientBoostedTrees;\n+import org.apache.spark.mllib.tree.configuration.BoostingStrategy;\n+import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$\n+public class JavaGradientBoostingClassificationExample {\n+  public static void main(String[] args) {\n+    // $example on$\n+    SparkConf sparkConf = new SparkConf()\n+      .setAppName(\"JavaGradientBoostedTreesClassificationExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);"
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Use the same indent with the previous comment.\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:08:03Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;\n+import java.util.Map;\n+import scala.Tuple2;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.tree.GradientBoostedTrees;\n+import org.apache.spark.mllib.tree.configuration.BoostingStrategy;\n+import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$\n+public class JavaGradientBoostingClassificationExample {\n+  public static void main(String[] args) {\n+    // $example on$\n+    SparkConf sparkConf = new SparkConf()\n+      .setAppName(\"JavaGradientBoostedTreesClassificationExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+\n+    // Load and parse the data file.\n+    String datapath = \"data/mllib/sample_libsvm_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc.sc(), datapath).toJavaRDD();\n+    // Split the data into training and test sets (30% held out for testing)\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.7, 0.3});\n+    JavaRDD<LabeledPoint> trainingData = splits[0];\n+    JavaRDD<LabeledPoint> testData = splits[1];\n+\n+    // Train a GradientBoostedTrees model.\n+    //  The defaultParams for Classification use LogLoss by default."
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:08:11Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;\n+import java.util.Map;\n+import scala.Tuple2;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.tree.GradientBoostedTrees;\n+import org.apache.spark.mllib.tree.configuration.BoostingStrategy;\n+import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$\n+public class JavaGradientBoostingClassificationExample {\n+  public static void main(String[] args) {\n+    // $example on$\n+    SparkConf sparkConf = new SparkConf()\n+      .setAppName(\"JavaGradientBoostedTreesClassificationExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+\n+    // Load and parse the data file.\n+    String datapath = \"data/mllib/sample_libsvm_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc.sc(), datapath).toJavaRDD();\n+    // Split the data into training and test sets (30% held out for testing)\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.7, 0.3});\n+    JavaRDD<LabeledPoint> trainingData = splits[0];\n+    JavaRDD<LabeledPoint> testData = splits[1];\n+\n+    // Train a GradientBoostedTrees model.\n+    //  The defaultParams for Classification use LogLoss by default.\n+    BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\");\n+    boostingStrategy.setNumIterations(3); // Note: Use more iterations in practice.\n+    boostingStrategy.getTreeStrategy().setNumClasses(2);\n+    boostingStrategy.getTreeStrategy().setMaxDepth(5);\n+    //  Empty categoricalFeaturesInfo indicates all features are continuous."
  }],
  "prId": 9407
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "swap the two lines. I think it should be \n\n``` scala\n    // $example off$\n  }\n```\n",
    "commit": "29a8067cee1ef3f047ff3e2248de812f3e1453fb",
    "createdAt": "2015-11-03T03:10:03Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import java.util.HashMap;\n+import java.util.Map;\n+import scala.Tuple2;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.tree.GradientBoostedTrees;\n+import org.apache.spark.mllib.tree.configuration.BoostingStrategy;\n+import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$\n+public class JavaGradientBoostingClassificationExample {\n+  public static void main(String[] args) {\n+    // $example on$\n+    SparkConf sparkConf = new SparkConf()\n+      .setAppName(\"JavaGradientBoostedTreesClassificationExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+\n+    // Load and parse the data file.\n+    String datapath = \"data/mllib/sample_libsvm_data.txt\";\n+    JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc.sc(), datapath).toJavaRDD();\n+    // Split the data into training and test sets (30% held out for testing)\n+    JavaRDD<LabeledPoint>[] splits = data.randomSplit(new double[]{0.7, 0.3});\n+    JavaRDD<LabeledPoint> trainingData = splits[0];\n+    JavaRDD<LabeledPoint> testData = splits[1];\n+\n+    // Train a GradientBoostedTrees model.\n+    //  The defaultParams for Classification use LogLoss by default.\n+    BoostingStrategy boostingStrategy = BoostingStrategy.defaultParams(\"Classification\");\n+    boostingStrategy.setNumIterations(3); // Note: Use more iterations in practice.\n+    boostingStrategy.getTreeStrategy().setNumClasses(2);\n+    boostingStrategy.getTreeStrategy().setMaxDepth(5);\n+    //  Empty categoricalFeaturesInfo indicates all features are continuous.\n+    Map<Integer, Integer> categoricalFeaturesInfo = new HashMap<Integer, Integer>();\n+    boostingStrategy.treeStrategy().setCategoricalFeaturesInfo(categoricalFeaturesInfo);\n+\n+    final GradientBoostedTreesModel model =\n+      GradientBoostedTrees.train(trainingData, boostingStrategy);\n+\n+    // Evaluate model on test instances and compute test error\n+    JavaPairRDD<Double, Double> predictionAndLabel =\n+      testData.mapToPair(new PairFunction<LabeledPoint, Double, Double>() {\n+        @Override\n+        public Tuple2<Double, Double> call(LabeledPoint p) {\n+          return new Tuple2<Double, Double>(model.predict(p.features()), p.label());\n+        }\n+      });\n+    Double testErr =\n+      1.0 * predictionAndLabel.filter(new Function<Tuple2<Double, Double>, Boolean>() {\n+        @Override\n+        public Boolean call(Tuple2<Double, Double> pl) {\n+          return !pl._1().equals(pl._2());\n+        }\n+      }).count() / testData.count();\n+    System.out.println(\"Test Error: \" + testErr);\n+    System.out.println(\"Learned classification GBT model:\\n\" + model.toDebugString());\n+\n+    // Save and load model\n+    model.save(sc.sc(), \"target/tmp/myGradientBoostingClassificationModel\");\n+    GradientBoostedTreesModel sameModel = GradientBoostedTreesModel.load(sc.sc(),\n+      \"target/tmp/myGradientBoostingClassificationModel\");\n+  }"
  }],
  "prId": 9407
}]