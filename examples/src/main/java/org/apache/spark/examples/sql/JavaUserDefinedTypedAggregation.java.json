[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Its a little confusing to have the comment here for this optimization, but then not implement it.",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T21:03:07Z",
    "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql;\n+\n+// $example on:typed_custom_aggregation$\n+import java.io.Serializable;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoder;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.TypedColumn;\n+import org.apache.spark.sql.expressions.Aggregator;\n+// $example off:typed_custom_aggregation$\n+\n+public class JavaUserDefinedTypedAggregation {\n+\n+  // $example on:typed_custom_aggregation$\n+  public static class Salary implements Serializable {\n+    private String person;\n+    private long salary;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public String getPerson() {\n+      return person;\n+    }\n+\n+    public void setPerson(String person) {\n+      this.person = person;\n+    }\n+\n+    public long getSalary() {\n+      return salary;\n+    }\n+\n+    public void setSalary(long salary) {\n+      this.salary = salary;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class Average implements Serializable  {\n+    private long sum;\n+    private long count;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public Average() {\n+    }\n+\n+    public Average(long sum, long count) {\n+      this.sum = sum;\n+      this.count = count;\n+    }\n+\n+    public long getSum() {\n+      return sum;\n+    }\n+\n+    public void setSum(long sum) {\n+      this.sum = sum;\n+    }\n+\n+    public long getCount() {\n+      return count;\n+    }\n+\n+    public void setCount(long count) {\n+      this.count = count;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class MyAverage extends Aggregator<Salary, Average, Double> {\n+    // A zero value for this aggregation. Should satisfy the property that any b + zero = b\n+    public Average zero() {\n+      return new Average(0L, 0L);\n+    }\n+    // Combine two values to produce a new value. For performance, the function may modify `b` and"
  }],
  "prId": 16329
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I might be a little clearer if this was a `Person` with a `name` and `salary`.",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2016-12-19T21:03:38Z",
    "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql;\n+\n+// $example on:typed_custom_aggregation$\n+import java.io.Serializable;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoder;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.TypedColumn;\n+import org.apache.spark.sql.expressions.Aggregator;\n+// $example off:typed_custom_aggregation$\n+\n+public class JavaUserDefinedTypedAggregation {\n+\n+  // $example on:typed_custom_aggregation$\n+  public static class Salary implements Serializable {"
  }],
  "prId": 16329
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Is this meant to be `MyAverage`?",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2017-01-24T15:57:34Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql;\n+\n+// $example on:typed_custom_aggregation$\n+import java.io.Serializable;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoder;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.TypedColumn;\n+import org.apache.spark.sql.expressions.Aggregator;\n+// $example off:typed_custom_aggregation$\n+\n+public class JavaUserDefinedTypedAggregation {\n+\n+  // $example on:typed_custom_aggregation$\n+  public static class Employee implements Serializable {\n+    private String name;\n+    private long salary;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public void setName(String name) {\n+      this.name = name;\n+    }\n+\n+    public long getSalary() {\n+      return salary;\n+    }\n+\n+    public void setSalary(long salary) {\n+      this.salary = salary;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class Average implements Serializable  {\n+    private long sum;\n+    private long count;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public Average() {\n+    }\n+\n+    public Average(long sum, long count) {\n+      this.sum = sum;\n+      this.count = count;\n+    }\n+\n+    public long getSum() {\n+      return sum;\n+    }\n+\n+    public void setSum(long sum) {\n+      this.sum = sum;\n+    }\n+\n+    public long getCount() {\n+      return count;\n+    }\n+\n+    public void setCount(long count) {\n+      this.count = count;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class MyAverage extends Aggregator<Employee, Average, Double> {\n+    // A zero value for this aggregation. Should satisfy the property that any b + zero = b\n+    public Average zero() {",
    "line": 91
  }, {
    "author": {
      "login": "aokolnychyi"
    },
    "body": "@srowen `Average` is a Java bean that holds current sum and count. It is defined earlier. Here it represents a zero value. `MyAverage`, in turn, is the actual aggregator that accepts instances of the `Employee` class, stores intermediate results using an instance of`Average`, and produces `Double` as a result. \r\n\r\nI can rename `MyAverage` to `MyAverageAggregator` if this makes things clearer. ",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2017-01-24T16:31:32Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql;\n+\n+// $example on:typed_custom_aggregation$\n+import java.io.Serializable;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoder;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.TypedColumn;\n+import org.apache.spark.sql.expressions.Aggregator;\n+// $example off:typed_custom_aggregation$\n+\n+public class JavaUserDefinedTypedAggregation {\n+\n+  // $example on:typed_custom_aggregation$\n+  public static class Employee implements Serializable {\n+    private String name;\n+    private long salary;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public void setName(String name) {\n+      this.name = name;\n+    }\n+\n+    public long getSalary() {\n+      return salary;\n+    }\n+\n+    public void setSalary(long salary) {\n+      this.salary = salary;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class Average implements Serializable  {\n+    private long sum;\n+    private long count;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public Average() {\n+    }\n+\n+    public Average(long sum, long count) {\n+      this.sum = sum;\n+      this.count = count;\n+    }\n+\n+    public long getSum() {\n+      return sum;\n+    }\n+\n+    public void setSum(long sum) {\n+      this.sum = sum;\n+    }\n+\n+    public long getCount() {\n+      return count;\n+    }\n+\n+    public void setCount(long count) {\n+      this.count = count;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class MyAverage extends Aggregator<Employee, Average, Double> {\n+    // A zero value for this aggregation. Should satisfy the property that any b + zero = b\n+    public Average zero() {",
    "line": 91
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "My bad, I read this incorrectly while skimming.",
    "commit": "0b17e132b24daf0f0eab5cd53e3dc84ffb56c2dd",
    "createdAt": "2017-01-24T16:35:42Z",
    "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.sql;\n+\n+// $example on:typed_custom_aggregation$\n+import java.io.Serializable;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoder;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.TypedColumn;\n+import org.apache.spark.sql.expressions.Aggregator;\n+// $example off:typed_custom_aggregation$\n+\n+public class JavaUserDefinedTypedAggregation {\n+\n+  // $example on:typed_custom_aggregation$\n+  public static class Employee implements Serializable {\n+    private String name;\n+    private long salary;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public void setName(String name) {\n+      this.name = name;\n+    }\n+\n+    public long getSalary() {\n+      return salary;\n+    }\n+\n+    public void setSalary(long salary) {\n+      this.salary = salary;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class Average implements Serializable  {\n+    private long sum;\n+    private long count;\n+\n+    // Constructors, getters, setters...\n+    // $example off:typed_custom_aggregation$\n+    public Average() {\n+    }\n+\n+    public Average(long sum, long count) {\n+      this.sum = sum;\n+      this.count = count;\n+    }\n+\n+    public long getSum() {\n+      return sum;\n+    }\n+\n+    public void setSum(long sum) {\n+      this.sum = sum;\n+    }\n+\n+    public long getCount() {\n+      return count;\n+    }\n+\n+    public void setCount(long count) {\n+      this.count = count;\n+    }\n+    // $example on:typed_custom_aggregation$\n+  }\n+\n+  public static class MyAverage extends Aggregator<Employee, Average, Double> {\n+    // A zero value for this aggregation. Should satisfy the property that any b + zero = b\n+    public Average zero() {",
    "line": 91
  }],
  "prId": 16329
}]