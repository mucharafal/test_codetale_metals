[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "~~indent.~~ nvm. my mistake.\n",
    "commit": "c31be3524f9de9b82d8ea475d7d67c38641a4e66",
    "createdAt": "2016-01-19T01:05:12Z",
    "diffHunk": "@@ -100,18 +108,21 @@ public static void main(String[] args) {\n     String feederActorURI = \"akka.tcp://test@\" + host + \":\" + port + \"/user/FeederActor\";\n \n     /*\n-     * Following is the use of actorStream to plug in custom actor as receiver\n+     * Following is the use of AkkaUtils.createStream to plug in custom actor as receiver\n      *\n      * An important point to note:\n      * Since Actor may exist outside the spark framework, It is thus user's responsibility\n      * to ensure the type safety, i.e type of data received and InputDstream\n      * should be same.\n      *\n-     * For example: Both actorStream and JavaSampleActorReceiver are parameterized\n+     * For example: Both AkkaUtils.createStream and JavaSampleActorReceiver are parameterized\n      * to same type to ensure type safety.\n      */\n-    JavaDStream<String> lines = jssc.actorStream(\n-        Props.create(JavaSampleActorReceiver.class, feederActorURI), \"SampleReceiver\");\n+    JavaDStream<String> lines = AkkaUtils.createStream(\n+        jssc,\n+        new WordcountActorSystemCreator(),\n+        Props.create(JavaSampleActorReceiver.class, feederActorURI),\n+        \"SampleReceiver\");"
  }],
  "prId": 10744
}]