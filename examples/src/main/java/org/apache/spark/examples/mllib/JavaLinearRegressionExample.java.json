[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Change the name to `JavaRegressionMetricsExample`\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:02:21Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data\n+public class JavaLinearRegressionExample {"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a space line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:02:29Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a space line\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:02:36Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the comment\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:03:05Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Java Regression Metrics Example\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:03:37Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data\n+public class JavaLinearRegressionExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Linear Regression Example\");"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Here is strange because we do not need to parse data ourselves. Try to change it with `MLUtils.loadLibSVMFile(sc, path).toJavaRDD();`.\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:06:59Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data\n+public class JavaLinearRegressionExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Linear Regression Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    // Load and parse the data\n+    String path = \"data/mllib/sample_linear_regression_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<LabeledPoint> parsedData = data.map("
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention here\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:08:13Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data\n+public class JavaLinearRegressionExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Linear Regression Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    // Load and parse the data\n+    String path = \"data/mllib/sample_linear_regression_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<LabeledPoint> parsedData = data.map(\n+      new Function<String, LabeledPoint>() {\n+        public LabeledPoint call(String line) {\n+          String[] parts = line.split(\" \");\n+          double[] v = new double[parts.length - 1];\n+          for (int i = 1; i < parts.length - 1; i++)\n+            v[i - 1] = Double.parseDouble(parts[i].split(\":\")[1]);\n+          return new LabeledPoint(Double.parseDouble(parts[0]), Vectors.dense(v));\n+        }\n+      }\n+    );\n+    parsedData.cache();\n+\n+    // Building the model\n+    int numIterations = 100;\n+    final LinearRegressionModel model = LinearRegressionWithSGD.train(JavaRDD.toRDD(parsedData),\n+            numIterations);"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention here\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:08:25Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.examples.mllib;\n+// $example on$\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.regression.LinearRegressionModel;\n+import org.apache.spark.mllib.regression.LinearRegressionWithSGD;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+// Read in the ratings data\n+public class JavaLinearRegressionExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Linear Regression Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    // Load and parse the data\n+    String path = \"data/mllib/sample_linear_regression_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<LabeledPoint> parsedData = data.map(\n+      new Function<String, LabeledPoint>() {\n+        public LabeledPoint call(String line) {\n+          String[] parts = line.split(\" \");\n+          double[] v = new double[parts.length - 1];\n+          for (int i = 1; i < parts.length - 1; i++)\n+            v[i - 1] = Double.parseDouble(parts[i].split(\":\")[1]);\n+          return new LabeledPoint(Double.parseDouble(parts[0]), Vectors.dense(v));\n+        }\n+      }\n+    );\n+    parsedData.cache();\n+\n+    // Building the model\n+    int numIterations = 100;\n+    final LinearRegressionModel model = LinearRegressionWithSGD.train(JavaRDD.toRDD(parsedData),\n+            numIterations);\n+\n+    // Evaluate model on training examples and compute training error\n+    JavaRDD<Tuple2<Object, Object>> valuesAndPreds = parsedData.map(\n+      new Function<LabeledPoint, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(LabeledPoint point) {\n+          double prediction = model.predict(point.features());\n+          return new Tuple2<Object, Object>(prediction, point.label());\n+        }\n+      }\n+    );\n+\n+    // Instantiate metrics object\n+    RegressionMetrics metrics = new RegressionMetrics(valuesAndPreds.rdd());\n+\n+    // Squared error\n+    System.out.format(\"MSE = %f\\n\", metrics.meanSquaredError());\n+    System.out.format(\"RMSE = %f\\n\", metrics.rootMeanSquaredError());\n+\n+    // R-squared\n+    System.out.format(\"R Squared = %f\\n\", metrics.r2());\n+\n+    // Mean absolute error\n+    System.out.format(\"MAE = %f\\n\", metrics.meanAbsoluteError());\n+\n+    // Explained variance\n+    System.out.format(\"Explained Variance = %f\\n\", metrics.explainedVariance());\n+\n+    // Save and load model\n+    model.save(sc.sc(), \"target/tmp/LogisticRegressionModel\");\n+    LinearRegressionModel sameModel = LinearRegressionModel.load(sc.sc(),\n+            \"target/tmp/LogisticRegressionModel\");"
  }],
  "prId": 9689
}]