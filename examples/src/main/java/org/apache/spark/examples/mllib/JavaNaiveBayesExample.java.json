[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "double blank lines are no need. pls remove one of them.\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T01:10:06Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import scala.Tuple2;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+// $example off$\n+import org.apache.spark.api.java.JavaSparkContext;\n+// $example on$\n+import org.apache.spark.mllib.classification.NaiveBayes;\n+import org.apache.spark.mllib.classification.NaiveBayesModel;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.rdd.RDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaNaiveBayesExample {\n+  public static void main(String[] args) {\n+    SparkConf sparkConf = new SparkConf().setAppName(\"JavaNaiveBayesExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+    JavaSparkContext jsc = new JavaSparkContext(sparkConf);\n+"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove this line\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:28Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import scala.Tuple2;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+// $example off$\n+import org.apache.spark.api.java.JavaSparkContext;\n+// $example on$\n+import org.apache.spark.mllib.classification.NaiveBayes;\n+import org.apache.spark.mllib.classification.NaiveBayesModel;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.rdd.RDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaNaiveBayesExample {\n+  public static void main(String[] args) {\n+    SparkConf sparkConf = new SparkConf().setAppName(\"JavaNaiveBayesExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- `randomSplit` is defined in `JavaRDD`. So the best `Java-like` approach is to call `toJavaRDD()` on line 44, and then use `JavaRDD` thereafter.\n- `new double [] {0.6, 0.4}` (same as the Scala example)\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:30Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import scala.Tuple2;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+// $example off$\n+import org.apache.spark.api.java.JavaSparkContext;\n+// $example on$\n+import org.apache.spark.mllib.classification.NaiveBayes;\n+import org.apache.spark.mllib.classification.NaiveBayesModel;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.rdd.RDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaNaiveBayesExample {\n+  public static void main(String[] args) {\n+    SparkConf sparkConf = new SparkConf().setAppName(\"JavaNaiveBayesExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+    JavaSparkContext jsc = new JavaSparkContext(sparkConf);\n+    // $example on$\n+    String path = \"data/mllib/sample_naive_bayes_data.txt\";\n+    RDD<LabeledPoint> inputData = MLUtils.loadLibSVMFile(jsc.sc(), path);\n+    RDD<LabeledPoint>[] tmp = inputData.randomSplit(new double[]{1 - 0.2, 0.2}, 12345);"
  }],
  "prId": 9353
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "same issue with model path\n",
    "commit": "331eab24603f6df1f9dd650625b89a5454777bc2",
    "createdAt": "2015-10-30T06:09:31Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import scala.Tuple2;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.api.java.function.PairFunction;\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.JavaRDD;\n+// $example off$\n+import org.apache.spark.api.java.JavaSparkContext;\n+// $example on$\n+import org.apache.spark.mllib.classification.NaiveBayes;\n+import org.apache.spark.mllib.classification.NaiveBayesModel;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.rdd.RDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaNaiveBayesExample {\n+  public static void main(String[] args) {\n+    SparkConf sparkConf = new SparkConf().setAppName(\"JavaNaiveBayesExample\");\n+    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n+    JavaSparkContext jsc = new JavaSparkContext(sparkConf);\n+    // $example on$\n+    String path = \"data/mllib/sample_naive_bayes_data.txt\";\n+    RDD<LabeledPoint> inputData = MLUtils.loadLibSVMFile(jsc.sc(), path);\n+    RDD<LabeledPoint>[] tmp = inputData.randomSplit(new double[]{1 - 0.2, 0.2}, 12345);\n+    JavaRDD<LabeledPoint> training = tmp[0].toJavaRDD(); // training set\n+    JavaRDD<LabeledPoint> test = tmp[1].toJavaRDD(); // test set\n+    final NaiveBayesModel model = NaiveBayes.train(training.rdd(), 1.0);\n+    JavaPairRDD<Double, Double> predictionAndLabel =\n+      test.mapToPair(new PairFunction<LabeledPoint, Double, Double>() {\n+        @Override\n+        public Tuple2<Double, Double> call(LabeledPoint p) {\n+          return new Tuple2<Double, Double>(model.predict(p.features()), p.label());\n+        }\n+      });\n+    double accuracy = predictionAndLabel.filter(new Function<Tuple2<Double, Double>, Boolean>() {\n+      @Override\n+      public Boolean call(Tuple2<Double, Double> pl) {\n+        return pl._1().equals(pl._2());\n+      }\n+    }).count() / (double) test.count();\n+\n+    // Save and load model\n+    model.save(sc.sc(), \"myModelPath\");"
  }],
  "prId": 9353
}]