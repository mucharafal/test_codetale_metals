[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "``` java\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaSparkContext;\n\n// $example on$\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport scala.Tuple2;\n\nimport org.apache.spark.api.java.JavaPairRDD;\nimport org.apache.spark.api.java.function.VoidFunction;\n// $example off$\n```\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:06:18Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.ArrayList;"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "exceeds 100\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:07:15Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.HashMap;\n+// $example on$\n+import java.util.Map;\n+// $example off$\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example on$\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.JavaPairRDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample = data.sampleByKey(false, fractions); // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:07:29Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.HashMap;\n+// $example on$\n+import java.util.Map;\n+// $example off$\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example on$\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.JavaPairRDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample = data.sampleByKey(false, fractions); // JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> exactSample = data.sampleByKeyExact(false, fractions); // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "add a println here\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-06T06:07:49Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.HashMap;\n+// $example on$\n+import java.util.Map;\n+// $example off$\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example on$\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.JavaPairRDD;\n+// $example off$\n+import org.apache.spark.SparkConf;\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample = data.sampleByKey(false, fractions); // JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> exactSample = data.sampleByKeyExact(false, fractions); // JavaPairRDD<K, V>\n+    // $example off$\n+\n+    approxSample.foreach(new VoidFunction<Tuple2<Integer, Character>>() {\n+      public void call(Tuple2<Integer, Character> t) throws Exception {\n+        System.out.println(t._1() + \" \" + t._2());\n+      }\n+    });\n+"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indent\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:31:24Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample =\n+      data.sampleByKey(false, fractions); // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-07T20:31:31Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample =\n+      data.sampleByKey(false, fractions); // JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> exactSample =\n+      data.sampleByKeyExact(false, fractions); // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Use `Arrays.list`.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:29:43Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "(minor) You can use `ImmutableMap.of` from Guava to simplify the map construction.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:30:20Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The comment is not necessary.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:31:05Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "The comment is wrong.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:31:37Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove comment\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:31:50Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample =\n+      data.sampleByKey(false, fractions);  // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "remove comment\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:32:04Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample =\n+      data.sampleByKey(false, fractions);  // JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> exactSample =\n+      data.sampleByKeyExact(false, fractions);  // JavaPairRDD<K, V>"
  }],
  "prId": 11108
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "- Okay, I see why we don't want to have `println` lines in the example now. If it is just one line of code, I prefer putting it inside the example.\n- This won't work on a distributed server. We need to collect them first.\n\n``` java\nfor(Tuple2<Integer, Character> t: approxSample.collect()) {\n  ...\n}\n```\n\nPlease also try saving some type info by using `<>` if feasible.\n",
    "commit": "a4eb28d07a99e559132160f8ae9ac993d47d8fa3",
    "createdAt": "2016-03-16T23:35:03Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+// $example on$\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.JavaPairRDD;\n+import org.apache.spark.api.java.function.VoidFunction;\n+// $example off$\n+\n+public class JavaStratifiedSamplingExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaStratifiedSamplingExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    List<Tuple2<Integer, Character>> list = new ArrayList<>();\n+    list.add(new Tuple2(1, 'a'));\n+    list.add(new Tuple2(1, 'b'));\n+    list.add(new Tuple2(2, 'c'));\n+    list.add(new Tuple2(2, 'd'));\n+    list.add(new Tuple2(2, 'e'));\n+    list.add(new Tuple2(3, 'f'));\n+\n+    // an RDD of any key value pairs JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> data = jsc.parallelizePairs(list);\n+\n+    // specify the exact fraction desired from each key Map<K, Object>\n+    Map<Integer, Object> fractions = new HashMap<>();\n+\n+    fractions.put(1, 0.1);\n+    fractions.put(2, 0.6);\n+    fractions.put(3, 0.3);\n+\n+    // Get an exact sample from each stratum\n+    JavaPairRDD<Integer, Character> approxSample =\n+      data.sampleByKey(false, fractions);  // JavaPairRDD<K, V>\n+    JavaPairRDD<Integer, Character> exactSample =\n+      data.sampleByKeyExact(false, fractions);  // JavaPairRDD<K, V>\n+    // $example off$\n+\n+    approxSample.foreach(new VoidFunction<Tuple2<Integer, Character>>() {"
  }],
  "prId": 11108
}]