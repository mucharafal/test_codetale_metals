[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "line too wide. Maybe we didn't turn on style check for code under `examples/`.\n",
    "commit": "b36401d9e538d30e881bfa8e4a67a211b718ca07",
    "createdAt": "2015-11-06T15:34:14Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+// $example on$\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.regression.AFTSurvivalRegression;\n+import org.apache.spark.ml.regression.AFTSurvivalRegressionModel;\n+import org.apache.spark.mllib.linalg.*;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.types.*;\n+// $example off$\n+\n+public class JavaAFTSurvivalRegressionExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaAFTSurvivalRegressionExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    // $example on$\n+    List<Row> data = Arrays.asList(\n+      RowFactory.create(1.218, 1.0, Vectors.dense(1.560, -0.605)),\n+      RowFactory.create(2.949, 0.0, Vectors.dense(0.346, 2.158)),\n+      RowFactory.create(3.627, 0.0, Vectors.dense(1.380, 0.231)),\n+      RowFactory.create(0.273, 1.0, Vectors.dense(0.520, 1.151)),\n+      RowFactory.create(4.199, 0.0, Vectors.dense(0.795, -0.226))\n+    );\n+    StructType schema = new StructType(new StructField[]{\n+      new StructField(\"label\", DataTypes.DoubleType, false, Metadata.empty()),\n+      new StructField(\"censor\", DataTypes.DoubleType, false, Metadata.empty()),\n+      new StructField(\"features\", new VectorUDT(), false, Metadata.empty())\n+    });\n+    DataFrame training = jsql.createDataFrame(data, schema);\n+    double[] quantileProbabilities = new double[]{0.3, 0.6};\n+    AFTSurvivalRegression aft = new AFTSurvivalRegression()\n+      .setQuantileProbabilities(quantileProbabilities)\n+      .setQuantilesCol(\"quantiles\");\n+\n+    AFTSurvivalRegressionModel model = aft.fit(training);\n+\n+    // Print the coefficients, intercept and scale parameter for AFT survival regression\n+    System.out.println(\"Coefficients: \" + model.coefficients() + \" Intercept: \" + model.intercept() + \" Scale: \" + model.scale());"
  }],
  "prId": 9491
}]