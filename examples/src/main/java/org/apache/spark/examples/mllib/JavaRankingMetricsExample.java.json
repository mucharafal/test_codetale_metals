[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the line, since it's for scala code, not for java code\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:19:46Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "remove the import\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:20:02Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Add a \"Java\" in AppName of Java code\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:20:41Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:21:12Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:21:41Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);\n+        }\n+      }\n+    );\n+    ratings.cache();\n+\n+    // Train an ALS model\n+    final MatrixFactorizationModel model = ALS.train(JavaRDD.toRDD(ratings), 10, 10, 0.01);\n+\n+    // Get top 10 recommendations for every user and scale ratings from 0 to 1\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecs = model.recommendProductsForUsers(10).toJavaRDD();\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecsScaled = userRecs.map(\n+      new Function<Tuple2<Object, Rating[]>, Tuple2<Object, Rating[]>>() {\n+        public Tuple2<Object, Rating[]> call(Tuple2<Object, Rating[]> t) {\n+          Rating[] scaledRatings = new Rating[t._2().length];\n+          for (int i = 0; i < scaledRatings.length; i++) {\n+            double newRating = Math.max(Math.min(t._2()[i].rating(), 1.0), 0.0);\n+            scaledRatings[i] = new Rating(t._2()[i].user(), t._2()[i].product(), newRating);\n+          }\n+          return new Tuple2<Object, Rating[]>(t._1(), scaledRatings);\n+        }\n+      }\n+    );\n+    JavaPairRDD<Object, Rating[]> userRecommended = JavaPairRDD.fromJavaRDD(userRecsScaled);\n+\n+    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n+    JavaRDD<Rating> binarizedRatings = ratings.map(\n+      new Function<Rating, Rating>() {\n+        public Rating call(Rating r) {\n+          double binaryRating;\n+          if (r.rating() > 0.0) {\n+              binaryRating = 1.0;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "ditto\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:21:46Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);\n+        }\n+      }\n+    );\n+    ratings.cache();\n+\n+    // Train an ALS model\n+    final MatrixFactorizationModel model = ALS.train(JavaRDD.toRDD(ratings), 10, 10, 0.01);\n+\n+    // Get top 10 recommendations for every user and scale ratings from 0 to 1\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecs = model.recommendProductsForUsers(10).toJavaRDD();\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecsScaled = userRecs.map(\n+      new Function<Tuple2<Object, Rating[]>, Tuple2<Object, Rating[]>>() {\n+        public Tuple2<Object, Rating[]> call(Tuple2<Object, Rating[]> t) {\n+          Rating[] scaledRatings = new Rating[t._2().length];\n+          for (int i = 0; i < scaledRatings.length; i++) {\n+            double newRating = Math.max(Math.min(t._2()[i].rating(), 1.0), 0.0);\n+            scaledRatings[i] = new Rating(t._2()[i].user(), t._2()[i].product(), newRating);\n+          }\n+          return new Tuple2<Object, Rating[]>(t._1(), scaledRatings);\n+        }\n+      }\n+    );\n+    JavaPairRDD<Object, Rating[]> userRecommended = JavaPairRDD.fromJavaRDD(userRecsScaled);\n+\n+    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n+    JavaRDD<Rating> binarizedRatings = ratings.map(\n+      new Function<Rating, Rating>() {\n+        public Rating call(Rating r) {\n+          double binaryRating;\n+          if (r.rating() > 0.0) {\n+              binaryRating = 1.0;\n+          } else {\n+              binaryRating = 0.0;"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "fix the indention here\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:22:07Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);\n+        }\n+      }\n+    );\n+    ratings.cache();\n+\n+    // Train an ALS model\n+    final MatrixFactorizationModel model = ALS.train(JavaRDD.toRDD(ratings), 10, 10, 0.01);\n+\n+    // Get top 10 recommendations for every user and scale ratings from 0 to 1\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecs = model.recommendProductsForUsers(10).toJavaRDD();\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecsScaled = userRecs.map(\n+      new Function<Tuple2<Object, Rating[]>, Tuple2<Object, Rating[]>>() {\n+        public Tuple2<Object, Rating[]> call(Tuple2<Object, Rating[]> t) {\n+          Rating[] scaledRatings = new Rating[t._2().length];\n+          for (int i = 0; i < scaledRatings.length; i++) {\n+            double newRating = Math.max(Math.min(t._2()[i].rating(), 1.0), 0.0);\n+            scaledRatings[i] = new Rating(t._2()[i].user(), t._2()[i].product(), newRating);\n+          }\n+          return new Tuple2<Object, Rating[]>(t._1(), scaledRatings);\n+        }\n+      }\n+    );\n+    JavaPairRDD<Object, Rating[]> userRecommended = JavaPairRDD.fromJavaRDD(userRecsScaled);\n+\n+    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n+    JavaRDD<Rating> binarizedRatings = ratings.map(\n+      new Function<Rating, Rating>() {\n+        public Rating call(Rating r) {\n+          double binaryRating;\n+          if (r.rating() > 0.0) {\n+              binaryRating = 1.0;\n+          } else {\n+              binaryRating = 0.0;\n+          }\n+          return new Rating(r.user(), r.product(), binaryRating);\n+        }\n+      }\n+    );\n+\n+    // Group ratings by common user\n+    JavaPairRDD<Object, Iterable<Rating>> userMovies = binarizedRatings.groupBy(\n+            new Function<Rating, Object>() {"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indention\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:23:15Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);\n+        }\n+      }\n+    );\n+    ratings.cache();\n+\n+    // Train an ALS model\n+    final MatrixFactorizationModel model = ALS.train(JavaRDD.toRDD(ratings), 10, 10, 0.01);\n+\n+    // Get top 10 recommendations for every user and scale ratings from 0 to 1\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecs = model.recommendProductsForUsers(10).toJavaRDD();\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecsScaled = userRecs.map(\n+      new Function<Tuple2<Object, Rating[]>, Tuple2<Object, Rating[]>>() {\n+        public Tuple2<Object, Rating[]> call(Tuple2<Object, Rating[]> t) {\n+          Rating[] scaledRatings = new Rating[t._2().length];\n+          for (int i = 0; i < scaledRatings.length; i++) {\n+            double newRating = Math.max(Math.min(t._2()[i].rating(), 1.0), 0.0);\n+            scaledRatings[i] = new Rating(t._2()[i].user(), t._2()[i].product(), newRating);\n+          }\n+          return new Tuple2<Object, Rating[]>(t._1(), scaledRatings);\n+        }\n+      }\n+    );\n+    JavaPairRDD<Object, Rating[]> userRecommended = JavaPairRDD.fromJavaRDD(userRecsScaled);\n+\n+    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n+    JavaRDD<Rating> binarizedRatings = ratings.map(\n+      new Function<Rating, Rating>() {\n+        public Rating call(Rating r) {\n+          double binaryRating;\n+          if (r.rating() > 0.0) {\n+              binaryRating = 1.0;\n+          } else {\n+              binaryRating = 0.0;\n+          }\n+          return new Rating(r.user(), r.product(), binaryRating);\n+        }\n+      }\n+    );\n+\n+    // Group ratings by common user\n+    JavaPairRDD<Object, Iterable<Rating>> userMovies = binarizedRatings.groupBy(\n+            new Function<Rating, Object>() {\n+              public Object call(Rating r) {\n+                return r.user();\n+              }\n+            }\n+    );\n+\n+    // Get true relevant documents from all user ratings\n+    JavaPairRDD<Object, List<Integer>> userMoviesList = userMovies.mapValues(\n+      new Function<Iterable<Rating>, List<Integer>>() {\n+        public List<Integer> call(Iterable<Rating> docs) {\n+          List<Integer> products = new ArrayList<Integer>();\n+          for (Rating r : docs) {\n+            if (r.rating() > 0.0) {\n+              products.add(r.product());\n+            }\n+          }\n+          return products;\n+        }\n+      }\n+    );\n+\n+    // Extract the product id from each recommendation\n+    JavaPairRDD<Object, List<Integer>> userRecommendedList = userRecommended.mapValues(\n+      new Function<Rating[], List<Integer>>() {\n+        public List<Integer> call(Rating[] docs) {\n+          List<Integer> products = new ArrayList<Integer>();\n+          for (Rating r : docs) {\n+            products.add(r.product());\n+          }\n+          return products;\n+        }\n+      }\n+    );\n+    JavaRDD<Tuple2<List<Integer>, List<Integer>>> relevantDocs = userMoviesList.join\n+            (userRecommendedList).values();"
  }],
  "prId": 9689
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "fix indention here\n",
    "commit": "88512e7ff1f1d55f31a5c12b57668216d39b22b9",
    "createdAt": "2015-11-19T09:23:26Z",
    "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// scalastyle:off println\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import java.util.*;\n+\n+import scala.Tuple2;\n+\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.evaluation.RegressionMetrics;\n+import org.apache.spark.mllib.evaluation.RankingMetrics;\n+import org.apache.spark.mllib.recommendation.ALS;\n+import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;\n+import org.apache.spark.mllib.recommendation.Rating;\n+// $example off$\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.SparkConf;\n+\n+public class JavaRankingMetricsExample {\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"Ranking Metrics Example\");\n+    JavaSparkContext sc = new JavaSparkContext(conf);\n+    // $example on$\n+    String path = \"data/mllib/sample_movielens_data.txt\";\n+    JavaRDD<String> data = sc.textFile(path);\n+    JavaRDD<Rating> ratings = data.map(\n+      new Function<String, Rating>() {\n+        public Rating call(String line) {\n+          String[] parts = line.split(\"::\");\n+            return new Rating(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Double\n+                    .parseDouble(parts[2]) - 2.5);\n+        }\n+      }\n+    );\n+    ratings.cache();\n+\n+    // Train an ALS model\n+    final MatrixFactorizationModel model = ALS.train(JavaRDD.toRDD(ratings), 10, 10, 0.01);\n+\n+    // Get top 10 recommendations for every user and scale ratings from 0 to 1\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecs = model.recommendProductsForUsers(10).toJavaRDD();\n+    JavaRDD<Tuple2<Object, Rating[]>> userRecsScaled = userRecs.map(\n+      new Function<Tuple2<Object, Rating[]>, Tuple2<Object, Rating[]>>() {\n+        public Tuple2<Object, Rating[]> call(Tuple2<Object, Rating[]> t) {\n+          Rating[] scaledRatings = new Rating[t._2().length];\n+          for (int i = 0; i < scaledRatings.length; i++) {\n+            double newRating = Math.max(Math.min(t._2()[i].rating(), 1.0), 0.0);\n+            scaledRatings[i] = new Rating(t._2()[i].user(), t._2()[i].product(), newRating);\n+          }\n+          return new Tuple2<Object, Rating[]>(t._1(), scaledRatings);\n+        }\n+      }\n+    );\n+    JavaPairRDD<Object, Rating[]> userRecommended = JavaPairRDD.fromJavaRDD(userRecsScaled);\n+\n+    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended\n+    JavaRDD<Rating> binarizedRatings = ratings.map(\n+      new Function<Rating, Rating>() {\n+        public Rating call(Rating r) {\n+          double binaryRating;\n+          if (r.rating() > 0.0) {\n+              binaryRating = 1.0;\n+          } else {\n+              binaryRating = 0.0;\n+          }\n+          return new Rating(r.user(), r.product(), binaryRating);\n+        }\n+      }\n+    );\n+\n+    // Group ratings by common user\n+    JavaPairRDD<Object, Iterable<Rating>> userMovies = binarizedRatings.groupBy(\n+            new Function<Rating, Object>() {\n+              public Object call(Rating r) {\n+                return r.user();\n+              }\n+            }\n+    );\n+\n+    // Get true relevant documents from all user ratings\n+    JavaPairRDD<Object, List<Integer>> userMoviesList = userMovies.mapValues(\n+      new Function<Iterable<Rating>, List<Integer>>() {\n+        public List<Integer> call(Iterable<Rating> docs) {\n+          List<Integer> products = new ArrayList<Integer>();\n+          for (Rating r : docs) {\n+            if (r.rating() > 0.0) {\n+              products.add(r.product());\n+            }\n+          }\n+          return products;\n+        }\n+      }\n+    );\n+\n+    // Extract the product id from each recommendation\n+    JavaPairRDD<Object, List<Integer>> userRecommendedList = userRecommended.mapValues(\n+      new Function<Rating[], List<Integer>>() {\n+        public List<Integer> call(Rating[] docs) {\n+          List<Integer> products = new ArrayList<Integer>();\n+          for (Rating r : docs) {\n+            products.add(r.product());\n+          }\n+          return products;\n+        }\n+      }\n+    );\n+    JavaRDD<Tuple2<List<Integer>, List<Integer>>> relevantDocs = userMoviesList.join\n+            (userRecommendedList).values();\n+\n+    // Instantiate the metrics object\n+    RankingMetrics metrics = RankingMetrics.of(relevantDocs);\n+\n+    // Precision and NDCG at k\n+    Integer[] kVector = {1, 3, 5};\n+    for (Integer k : kVector) {\n+      System.out.format(\"Precision at %d = %f\\n\", k, metrics.precisionAt(k));\n+      System.out.format(\"NDCG at %d = %f\\n\", k, metrics.ndcgAt(k));\n+    }\n+\n+    // Mean average precision\n+    System.out.format(\"Mean average precision = %f\\n\", metrics.meanAveragePrecision());\n+\n+    // Evaluate the model using numerical ratings and regression metrics\n+    JavaRDD<Tuple2<Object, Object>> userProducts = ratings.map(\n+      new Function<Rating, Tuple2<Object, Object>>() {\n+        public Tuple2<Object, Object> call(Rating r) {\n+          return new Tuple2<Object, Object>(r.user(), r.product());\n+        }\n+      }\n+    );\n+    JavaPairRDD<Tuple2<Integer, Integer>, Object> predictions = JavaPairRDD.fromJavaRDD(\n+      model.predict(JavaRDD.toRDD(userProducts)).toJavaRDD().map(\n+        new Function<Rating, Tuple2<Tuple2<Integer, Integer>, Object>>() {\n+          public Tuple2<Tuple2<Integer, Integer>, Object> call(Rating r) {\n+            return new Tuple2<Tuple2<Integer, Integer>, Object>(\n+              new Tuple2<Integer, Integer>(r.user(), r.product()), r.rating());\n+          }\n+        }\n+      ));\n+    JavaRDD<Tuple2<Object, Object>> ratesAndPreds =\n+            JavaPairRDD.fromJavaRDD(ratings.map("
  }],
  "prId": 9689
}]