[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "It's better to add an output of `filteredData` to make it a complete example code. Refer to https://github.com/apache/spark/blob/master/examples/src/main/java/org/apache/spark/examples/mllib/JavaLDAExample.java#L68\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-02-20T23:28:22Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;\n+// $example on$\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.feature.ChiSqSelector;\n+import org.apache.spark.mllib.feature.ChiSqSelectorModel;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+// $example off$\n+\n+public class JavaChiSqSelectorExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaChiSqSelectorExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    JavaRDD<LabeledPoint> points = MLUtils.loadLibSVMFile(jsc.sc(),\n+      \"data/mllib/sample_libsvm_data.txt\").toJavaRDD().cache();\n+\n+    // Discretize data in 16 equal bins since ChiSqSelector requires categorical features\n+    // Although features are doubles, the ChiSqSelector treats each unique value as a category\n+    JavaRDD<LabeledPoint> discretizedData = points.map(\n+      new Function<LabeledPoint, LabeledPoint>() {\n+        @Override\n+        public LabeledPoint call(LabeledPoint lp) {\n+          final double[] discretizedFeatures = new double[lp.features().size()];\n+          for (int i = 0; i < lp.features().size(); ++i) {\n+            discretizedFeatures[i] = Math.floor(lp.features().apply(i) / 16);\n+          }\n+          return new LabeledPoint(lp.label(), Vectors.dense(discretizedFeatures));\n+        }\n+      }\n+    );\n+\n+    // Create ChiSqSelector that will select top 50 of 692 features\n+    ChiSqSelector selector = new ChiSqSelector(50);\n+    // Create ChiSqSelector model (selecting features)\n+    final ChiSqSelectorModel transformer = selector.fit(discretizedData.rdd());\n+    // Filter the top 50 features from each feature vector\n+    JavaRDD<LabeledPoint> filteredData = discretizedData.map(\n+      new Function<LabeledPoint, LabeledPoint>() {\n+        @Override\n+        public LabeledPoint call(LabeledPoint lp) {\n+          return new LabeledPoint(lp.label(), transformer.transform(lp.features()));\n+        }\n+      }\n+    );\n+    // $example off$\n+",
    "line": 72
  }],
  "prId": 11142
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Imports: Remember to keep unused imports out of example on and off.\n\n``` java\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.apache.spark.api.java.function.VoidFunction;\n// $example on$\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.function.Function;\nimport org.apache.spark.mllib.feature.ChiSqSelector;\nimport org.apache.spark.mllib.feature.ChiSqSelectorModel;\nimport org.apache.spark.mllib.linalg.Vectors;\nimport org.apache.spark.mllib.regression.LabeledPoint;\nimport org.apache.spark.mllib.util.MLUtils;\n// $example off$\n// $example off$\n```\n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-03-03T15:49:20Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;",
    "line": 20
  }, {
    "author": {
      "login": "keypointt"
    },
    "body": "thank you @yinxusen \n",
    "commit": "3513e0f63ed88479052266db5ddc0f22aab175a2",
    "createdAt": "2016-03-03T18:58:49Z",
    "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+import org.apache.spark.SparkConf;",
    "line": 20
  }],
  "prId": 11142
}]