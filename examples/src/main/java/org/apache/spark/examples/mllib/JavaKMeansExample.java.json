[{
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Change the imports to \n\n``` Java\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaSparkContext;\n\n// $example on$\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.function.Function;\nimport org.apache.spark.mllib.clustering.KMeans;\nimport org.apache.spark.mllib.clustering.KMeansModel;\nimport org.apache.spark.mllib.linalg.Vector;\nimport org.apache.spark.mllib.linalg.Vectors;\n// $example off$\n```\n",
    "commit": "8b9228dfaefdf966841d91bb838a7aeacb5854e2",
    "createdAt": "2016-02-18T22:32:07Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$"
  }],
  "prId": 11116
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "Change the code block with 2-indent like below.\n\n``` Java\n    JavaRDD<Vector> parsedData = data.map(\n      new Function<String, Vector>() {\n        public Vector call(String s) {\n          String[] sarray = s.split(\" \");\n          double[] values = new double[sarray.length];\n          for (int i = 0; i < sarray.length; i++)\n            values[i] = Double.parseDouble(sarray[i]);\n          return Vectors.dense(values);\n        }\n      }\n    );\n```\n",
    "commit": "8b9228dfaefdf966841d91bb838a7aeacb5854e2",
    "createdAt": "2016-02-18T22:33:14Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.clustering.KMeans;\n+import org.apache.spark.mllib.clustering.KMeansModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+public class JavaKMeansExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaKMeansExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    // Load and parse data\n+    String path = \"data/mllib/kmeans_data.txt\";\n+    JavaRDD<String> data = jsc.textFile(path);\n+    JavaRDD<Vector> parsedData = data.map(",
    "line": 42
  }],
  "prId": 11116
}, {
  "comments": [{
    "author": {
      "login": "yinxusen"
    },
    "body": "2-indent\n",
    "commit": "8b9228dfaefdf966841d91bb838a7aeacb5854e2",
    "createdAt": "2016-02-18T22:34:30Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.mllib;\n+\n+// $example on$\n+import org.apache.spark.api.java.*;\n+import org.apache.spark.api.java.function.Function;\n+import org.apache.spark.mllib.clustering.KMeans;\n+import org.apache.spark.mllib.clustering.KMeansModel;\n+import org.apache.spark.mllib.linalg.Vector;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.SparkConf;\n+// $example off$\n+\n+public class JavaKMeansExample {\n+  public static void main(String[] args) {\n+\n+    SparkConf conf = new SparkConf().setAppName(\"JavaKMeansExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+\n+    // $example on$\n+    // Load and parse data\n+    String path = \"data/mllib/kmeans_data.txt\";\n+    JavaRDD<String> data = jsc.textFile(path);\n+    JavaRDD<Vector> parsedData = data.map(\n+            new Function<String, Vector>() {\n+                public Vector call(String s) {\n+                    String[] sarray = s.split(\" \");\n+                    double[] values = new double[sarray.length];\n+                    for (int i = 0; i < sarray.length; i++)\n+                        values[i] = Double.parseDouble(sarray[i]);\n+                    return Vectors.dense(values);\n+                }\n+            }\n+    );\n+    parsedData.cache();\n+\n+    // Cluster the data into two classes using KMeans\n+    int numClusters = 2;\n+    int numIterations = 20;\n+    KMeansModel clusters = KMeans.train(parsedData.rdd(), numClusters, numIterations);\n+\n+    // Evaluate clustering by computing Within Set Sum of Squared Errors\n+    double WSSSE = clusters.computeCost(parsedData.rdd());\n+    System.out.println(\"Within Set Sum of Squared Errors = \" + WSSSE);\n+\n+    // Save and load model\n+    clusters.save(jsc.sc(), \"myModelPath\");\n+    KMeansModel sameModel = KMeansModel.load(jsc.sc(), \"myModelPath\");\n+    // $example off$\n+\n+    jsc.stop();\n+}"
  }],
  "prId": 11116
}]