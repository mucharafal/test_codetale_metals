[{
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "`Arrays.asList` and remove Guava\n",
    "commit": "dd3a0e54d84388d75f3bcb789a34e7832f9c103f",
    "createdAt": "2015-08-26T03:36:16Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.param.ParamMap;\n+import org.apache.spark.ml.regression.LinearRegression;\n+import org.apache.spark.ml.tuning.*;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+\n+/**\n+ * A simple example demonstrating model selection using TrainValidationSplit.\n+ *\n+ * The example is based on {@link org.apache.spark.examples.ml.JavaSimpleParamsExample}\n+ * using linear regression.\n+ *\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.JavaTrainValidationSplitExample\n+ * }}}\n+ */\n+public class JavaTrainValidationSplitExample {\n+\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaTrainValidationSplitExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    List<LabeledPoint> localTraining = Lists.newArrayList("
  }],
  "prId": 8377
}, {
  "comments": [{
    "author": {
      "login": "feynmanliang"
    },
    "body": "Use `DataFrame.show()`\n",
    "commit": "dd3a0e54d84388d75f3bcb789a34e7832f9c103f",
    "createdAt": "2015-08-26T03:37:05Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.param.ParamMap;\n+import org.apache.spark.ml.regression.LinearRegression;\n+import org.apache.spark.ml.tuning.*;\n+import org.apache.spark.mllib.linalg.Vectors;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SQLContext;\n+\n+/**\n+ * A simple example demonstrating model selection using TrainValidationSplit.\n+ *\n+ * The example is based on {@link org.apache.spark.examples.ml.JavaSimpleParamsExample}\n+ * using linear regression.\n+ *\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.JavaTrainValidationSplitExample\n+ * }}}\n+ */\n+public class JavaTrainValidationSplitExample {\n+\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaTrainValidationSplitExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    List<LabeledPoint> localTraining = Lists.newArrayList(\n+      new LabeledPoint(1.0, Vectors.dense(0.0, 1.1, 0.1)),\n+      new LabeledPoint(0.0, Vectors.dense(2.0, 1.0, -1.0)),\n+      new LabeledPoint(0.0, Vectors.dense(2.0, 1.3, 1.0)),\n+      new LabeledPoint(1.0, Vectors.dense(0.0, 1.2, -0.5)));\n+\n+    DataFrame training = jsql.createDataFrame(jsc.parallelize(localTraining), LabeledPoint.class);\n+\n+    LinearRegression lr = new LinearRegression();\n+\n+    // In this case the estimator is simply the linear regression.\n+    // A TrainValidationSplit requires an Estimator, a set of Estimator ParamMaps, and an Evaluator.\n+    TrainValidationSplit trainValidationSplit = new TrainValidationSplit()\n+      .setEstimator(lr)\n+      .setEvaluator(new RegressionEvaluator());\n+\n+    // We use a ParamGridBuilder to construct a grid of parameters to search over.\n+    // TrainValidationSplit will try all combinations of values and determine best model using\n+    // the evaluator.\n+    ParamMap[] paramGrid = new ParamGridBuilder()\n+      .addGrid(lr.regParam(), new double[]{0.1, 0.01})\n+      .addGrid(lr.fitIntercept())\n+      .addGrid(lr.elasticNetParam(), new double[]{0.0, 0.5, 1.0})\n+      .addGrid(lr.maxIter(), new int[]{10, 100})\n+      .addGrid(lr.tol(), new double[]{1E-5, 1E-6})\n+      .build();\n+\n+    trainValidationSplit.setEstimatorParamMaps(paramGrid);\n+\n+    // 80% of the data will be used for training and the remaining 20% for validation.\n+    trainValidationSplit.setTrainRatio(0.8);\n+\n+    // Run train validation split, and choose the best set of parameters.\n+    TrainValidationSplitModel model = trainValidationSplit.fit(training);\n+\n+    // Prepare unlabeled test data.\n+    List<LabeledPoint> localTest = Lists.newArrayList(\n+      new LabeledPoint(1.0, Vectors.dense(-1.0, 1.5, 1.3)),\n+      new LabeledPoint(0.0, Vectors.dense(3.0, 2.0, -0.1)),\n+      new LabeledPoint(1.0, Vectors.dense(0.0, 2.2, -1.5)));\n+\n+    DataFrame test = jsql.createDataFrame(jsc.parallelize(localTest), LabeledPoint.class);\n+\n+    // Make predictions on test data. model is the model with combination of parameters\n+    // that performed best.\n+    DataFrame results = model.transform(test);\n+    for (Row r: results.select(\"features\", \"label\", \"prediction\").collect()) {\n+      System.out.println(\"(\" + r.get(0) + \", \" + r.get(1) + \") --> \" + \"prediction=\" + r.get(2));"
  }],
  "prId": 8377
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Convert to DF first and then call `randomSplit`.\n",
    "commit": "dd3a0e54d84388d75f3bcb789a34e7832f9c103f",
    "createdAt": "2015-08-27T23:25:09Z",
    "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.examples.ml;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.ml.evaluation.RegressionEvaluator;\n+import org.apache.spark.ml.param.ParamMap;\n+import org.apache.spark.ml.regression.LinearRegression;\n+import org.apache.spark.ml.tuning.*;\n+import org.apache.spark.mllib.regression.LabeledPoint;\n+import org.apache.spark.mllib.util.MLUtils;\n+import org.apache.spark.rdd.RDD;\n+import org.apache.spark.sql.DataFrame;\n+import org.apache.spark.sql.SQLContext;\n+\n+/**\n+ * A simple example demonstrating model selection using TrainValidationSplit.\n+ *\n+ * The example is based on {@link org.apache.spark.examples.ml.JavaSimpleParamsExample}\n+ * using linear regression.\n+ *\n+ * Run with\n+ * {{{\n+ * bin/run-example ml.JavaTrainValidationSplitExample\n+ * }}}\n+ */\n+public class JavaTrainValidationSplitExample {\n+\n+  public static void main(String[] args) {\n+    SparkConf conf = new SparkConf().setAppName(\"JavaTrainValidationSplitExample\");\n+    JavaSparkContext jsc = new JavaSparkContext(conf);\n+    SQLContext jsql = new SQLContext(jsc);\n+\n+    RDD<LabeledPoint> data = MLUtils.loadLibSVMFile(jsc.sc(), \"data/mllib/sample_libsvm_data.txt\");"
  }],
  "prId": 8377
}]