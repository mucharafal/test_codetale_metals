[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Mind calling these `before` and `after` instead?  I find `finalize` to be confusing since it sounds like finalizers.\n",
    "commit": "d0a747901af273c5eb8578ec191cc7673f6efce5",
    "createdAt": "2015-01-26T19:20:21Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.graphx;\n+\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.graphx.api.java.JavaEdgeRDD;\n+import org.apache.spark.graphx.api.java.JavaVertexRDD;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import scala.Tuple2;\n+import scala.reflect.ClassTag;\n+import scala.reflect.ClassTag$;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JavaAPISuite implements Serializable {\n+\n+    private transient JavaSparkContext ssc;\n+    private List<Tuple2<Object, VertexProperty<String, String>>> myList;\n+    private ClassTag<VertexProperty<String, String>> classTag;\n+\n+\n+    @Before\n+    public void initialize() {",
    "line": 45
  }, {
    "author": {
      "login": "kdatta"
    },
    "body": "yes\n",
    "commit": "d0a747901af273c5eb8578ec191cc7673f6efce5",
    "createdAt": "2015-01-26T19:31:53Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.graphx;\n+\n+\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.graphx.api.java.JavaEdgeRDD;\n+import org.apache.spark.graphx.api.java.JavaVertexRDD;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import scala.Tuple2;\n+import scala.reflect.ClassTag;\n+import scala.reflect.ClassTag$;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JavaAPISuite implements Serializable {\n+\n+    private transient JavaSparkContext ssc;\n+    private List<Tuple2<Object, VertexProperty<String, String>>> myList;\n+    private ClassTag<VertexProperty<String, String>> classTag;\n+\n+\n+    @Before\n+    public void initialize() {",
    "line": 45
  }],
  "prId": 4205
}]