[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "This is an example of breaking source compatibility, although it's used the implicit `intToIntWritable` occasionally. `_.get` => `intToIntWritable(_).get`.\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2014-12-09T11:20:16Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Or we can keep `xxxToXxxWritable` still implicit for the source compatibility?\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2014-12-10T05:51:47Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "i don't think you can keep that and have the new one because the compiler will complain\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2015-02-03T05:44:20Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Do you have any example? I added implicit to them and compiled codes successfully.\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2015-02-03T08:45:06Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "If they are not ambiguous, I'd add the implicits back to make sure we never break.\n\n@ankurdave  - why is there a get in this test case? Is the get just redundant?\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2015-02-03T23:08:00Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "ankurdave"
    },
    "body": "It does look like the get is redundant, since Int should be sufficient for this purpose.\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2015-02-03T23:33:19Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> If they are not ambiguous, I'd add the implicits back to make sure we never break.\n\nI added them back.\n",
    "commit": "914b2d6a65afe19b582b436ed1eb6501d5c16db3",
    "createdAt": "2015-02-04T03:23:06Z",
    "diffHunk": "@@ -40,7 +40,7 @@ class ShortestPathsSuite extends FunSuite with LocalSparkContext {\n       val graph = Graph.fromEdgeTuples(edges, 1)\n       val landmarks = Seq(1, 4).map(_.toLong)\n       val results = ShortestPaths.run(graph, landmarks).vertices.collect.map {\n-        case (v, spMap) => (v, spMap.mapValues(_.get))",
    "line": 4
  }],
  "prId": 3642
}]