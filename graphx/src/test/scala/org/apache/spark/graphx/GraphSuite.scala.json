[{
  "comments": [{
    "author": {
      "login": "apivovarov"
    },
    "body": "better to use \n\n```\nassert(sc.getPersistentRDDs.nonEmpty)\n```\n",
    "commit": "0bf90d7803f38c7d0ad2261c5df789b00ad6e70f",
    "createdAt": "2016-01-12T00:46:29Z",
    "diffHunk": "@@ -428,4 +428,20 @@ class GraphSuite extends SparkFunSuite with LocalSparkContext {\n     }\n   }\n \n+  test(\"unpersist graph RDD\") {\n+    withSpark { sc =>\n+      val vert = sc.parallelize(List((1L, \"a\"), (2L, \"b\"), (3L, \"c\")), 1)\n+      val edges = sc.parallelize(List(Edge[Long](1L, 2L), Edge[Long](1L, 3L)), 1)\n+      val g0 = Graph(vert, edges)\n+      val g = g0.partitionBy(PartitionStrategy.EdgePartition2D, 2)\n+      val cc = g.connectedComponents()\n+      assert(sc.persistentRdds.isEmpty === false)"
  }],
  "prId": 10713
}, {
  "comments": [{
    "author": {
      "login": "apivovarov"
    },
    "body": "```\nassert(sc.getPersistentRDDs.isEmpty)\n```\n",
    "commit": "0bf90d7803f38c7d0ad2261c5df789b00ad6e70f",
    "createdAt": "2016-01-12T00:46:52Z",
    "diffHunk": "@@ -428,4 +428,20 @@ class GraphSuite extends SparkFunSuite with LocalSparkContext {\n     }\n   }\n \n+  test(\"unpersist graph RDD\") {\n+    withSpark { sc =>\n+      val vert = sc.parallelize(List((1L, \"a\"), (2L, \"b\"), (3L, \"c\")), 1)\n+      val edges = sc.parallelize(List(Edge[Long](1L, 2L), Edge[Long](1L, 3L)), 1)\n+      val g0 = Graph(vert, edges)\n+      val g = g0.partitionBy(PartitionStrategy.EdgePartition2D, 2)\n+      val cc = g.connectedComponents()\n+      assert(sc.persistentRdds.isEmpty === false)\n+      cc.unpersist()\n+      g.unpersist()\n+      g0.unpersist()\n+      vert.unpersist()\n+      edges.unpersist()\n+      assert(sc.persistentRdds.isEmpty === true)"
  }],
  "prId": 10713
}]