[{
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "Looks like this line is too long - it would be great if you could wrap it. Also, I think the Spark style is for parameter lists to be indented 4 spaces instead of 2.\n",
    "commit": "625aa9d2c2fd434040416b863cfe72c9208d7b26",
    "createdAt": "2014-09-03T01:56:29Z",
    "diffHunk": "@@ -36,17 +36,27 @@ private[graphx]\n object ShippableVertexPartition {\n   /** Construct a `ShippableVertexPartition` from the given vertices without any routing table. */\n   def apply[VD: ClassTag](iter: Iterator[(VertexId, VD)]): ShippableVertexPartition[VD] =\n-    apply(iter, RoutingTablePartition.empty, null.asInstanceOf[VD])\n+    apply(iter, RoutingTablePartition.empty, null.asInstanceOf[VD], (a, b) => a)\n \n   /**\n    * Construct a `ShippableVertexPartition` from the given vertices with the specified routing\n    * table, filling in missing vertices mentioned in the routing table using `defaultVal`.\n    */\n   def apply[VD: ClassTag](\n-      iter: Iterator[(VertexId, VD)], routingTable: RoutingTablePartition, defaultVal: VD)\n+    iter: Iterator[(VertexId, VD)], routingTable: RoutingTablePartition, defaultVal: VD)\n+    : ShippableVertexPartition[VD] = \n+    apply(iter, routingTable, defaultVal, (a, b) => a)\n+\n+  /**\n+   * Construct a `ShippableVertexPartition` from the given vertices with the specified routing\n+   * table, filling in missing vertices mentioned in the routing table using `defaultVal`,\n+   * and merging duplicate vertex atrribute with mergeFunc.\n+   */\n+  def apply[VD: ClassTag](\n+    iter: Iterator[(VertexId, VD)], routingTable: RoutingTablePartition, defaultVal: VD, mergeFunc: (VD, VD) => VD)"
  }],
  "prId": 1903
}]