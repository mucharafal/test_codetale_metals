[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Add an explicit return type\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-06T18:36:14Z",
    "diffHunk": "@@ -26,6 +26,33 @@ import org.apache.spark.serializer._\n import scala.language.existentials\n \n private[graphx]\n+class RoutingTableMessageSerializer extends Serializer with Serializable {\n+  override def newInstance(): SerializerInstance = new ShuffleSerializerInstance {\n+\n+    override def serializeStream(s: OutputStream) = new ShuffleSerializationStream(s) {"
  }],
  "prId": 497
}, {
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Add an explicit return type\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-06T18:36:18Z",
    "diffHunk": "@@ -26,6 +26,33 @@ import org.apache.spark.serializer._\n import scala.language.existentials\n \n private[graphx]\n+class RoutingTableMessageSerializer extends Serializer with Serializable {\n+  override def newInstance(): SerializerInstance = new ShuffleSerializerInstance {\n+\n+    override def serializeStream(s: OutputStream) = new ShuffleSerializationStream(s) {\n+      def writeObject[T](t: T) = {\n+        val msg = t.asInstanceOf[RoutingTableMessage]\n+        writeVarLong(msg.vid, optimizePositive = false)\n+        writeUnsignedVarInt(msg.pid)\n+        // TODO: Write only the bottom two bits of msg.position\n+        s.write(msg.position)\n+        this\n+      }\n+    }\n+\n+    override def deserializeStream(s: InputStream) = new ShuffleDeserializationStream(s) {"
  }],
  "prId": 497
}, {
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "Remove this TODO\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-08T22:41:39Z",
    "diffHunk": "@@ -26,6 +26,35 @@ import org.apache.spark.serializer._\n import scala.language.existentials\n \n private[graphx]\n+class RoutingTableMessageSerializer extends Serializer with Serializable {\n+  override def newInstance(): SerializerInstance = new ShuffleSerializerInstance {\n+\n+    override def serializeStream(s: OutputStream): SerializationStream =\n+      new ShuffleSerializationStream(s) {\n+        def writeObject[T](t: T): SerializationStream = {\n+          val msg = t.asInstanceOf[RoutingTableMessage]\n+          writeVarLong(msg.vid, optimizePositive = false)\n+          writeUnsignedVarInt(msg.pid)\n+          // TODO: Write only the bottom two bits of msg.position"
  }],
  "prId": 497
}]