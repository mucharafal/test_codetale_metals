[{
  "comments": [{
    "author": {
      "login": "Ishiihara"
    },
    "body": "mapUsesSrcAttr -> mapUsesDstAttr\n",
    "commit": "4097ca7f967156399f9f398b4b1dca5a6b186efe",
    "createdAt": "2014-10-15T19:54:33Z",
    "diffHunk": "@@ -195,6 +195,12 @@ abstract class Graph[VD: ClassTag, ED: ClassTag] protected () extends Serializab\n    * the underlying index structures can be reused.\n    *\n    * @param map the function from an edge object to a new edge value.\n+   * @param mapUsesSrcAttr indicates whether the source vertex attribute should be included in\n+   * the triplet. Setting this to false can improve performance if the source vertex attribute\n+   * is not needed.\n+   * @param mapUsesSrcAttr indicates whether the destination vertex attribute should be included in"
  }],
  "prId": 2815
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i'd create an enum for that\n",
    "commit": "4097ca7f967156399f9f398b4b1dca5a6b186efe",
    "createdAt": "2014-10-31T22:48:26Z",
    "diffHunk": "@@ -207,8 +213,9 @@ abstract class Graph[VD: ClassTag, ED: ClassTag] protected () extends Serializab\n    * }}}\n    *\n    */\n-  def mapTriplets[ED2: ClassTag](map: EdgeTriplet[VD, ED] => ED2): Graph[VD, ED2] = {\n-    mapTriplets((pid, iter) => iter.map(map))\n+  def mapTriplets[ED2: ClassTag](map: EdgeTriplet[VD, ED] => ED2,\n+    mapUsesSrcAttr: Boolean = true, mapUsesDstAttr: Boolean = true): Graph[VD, ED2] = {"
  }],
  "prId": 2815
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i'd deprecate the old one and create a new one for the new api.\n\nthe old one should keep the old behavior\n",
    "commit": "4097ca7f967156399f9f398b4b1dca5a6b186efe",
    "createdAt": "2014-10-31T22:49:37Z",
    "diffHunk": "@@ -207,8 +213,9 @@ abstract class Graph[VD: ClassTag, ED: ClassTag] protected () extends Serializab\n    * }}}\n    *\n    */\n-  def mapTriplets[ED2: ClassTag](map: EdgeTriplet[VD, ED] => ED2): Graph[VD, ED2] = {\n-    mapTriplets((pid, iter) => iter.map(map))\n+  def mapTriplets[ED2: ClassTag](map: EdgeTriplet[VD, ED] => ED2,",
    "line": 19
  }],
  "prId": 2815
}, {
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "These comments are out of date now that we have tripletFields\n",
    "commit": "4097ca7f967156399f9f398b4b1dca5a6b186efe",
    "createdAt": "2014-11-02T00:37:24Z",
    "diffHunk": "@@ -303,6 +318,12 @@ abstract class Graph[VD: ClassTag, ED: ClassTag] protected () extends Serializab\n    * direction is `Either`, `mapFunc` will be run on edges with *either* vertex in the active set\n    * . If the direction is `Both`, `mapFunc` will be run on edges with *both* vertices in the\n    * active set. The active set must have the same index as the graph's vertices.\n+   * @param mapUsesSrcAttr indicates whether the source vertex attribute should be included in\n+   * the triplet. Setting this to false can improve performance if the source vertex attribute\n+   * is not needed.\n+   * @param mapUsesDstAttr indicates whether the destination vertex attribute should be included in\n+   * the triplet. Setting this to false can improve performance if the destination vertex attribute\n+   * is not needed.",
    "line": 66
  }],
  "prId": 2815
}]