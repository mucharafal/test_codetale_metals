[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "If this API has already been deprecated in the other languages, should we still introduce it here or can we leave it out?\n",
    "commit": "d0a747901af273c5eb8578ec191cc7673f6efce5",
    "createdAt": "2015-01-26T19:29:45Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.graphx.api.java\n+\n+import java.lang.{Double => JDouble, Long => JLong}\n+\n+import org.apache.spark.graphx._\n+import org.apache.spark.graphx.lib.PageRank\n+import org.apache.spark.rdd.RDD\n+\n+import scala.language.implicitConversions\n+import scala.reflect.ClassTag\n+\n+class JavaGraph[@specialized VD: ClassTag, @specialized ED: ClassTag]\n+  (vertexRDD : VertexRDD[VD], edgeRDD: EdgeRDD[ED]) {\n+\n+  def vertices: JavaVertexRDD[VD] = JavaVertexRDD(vertexRDD)\n+  def edges: JavaEdgeRDD[ED] = JavaEdgeRDD(edgeRDD)\n+  @transient lazy val graph : Graph[VD, ED] = Graph(vertexRDD, edgeRDD)\n+\n+  def partitionBy(partitionStrategy: PartitionStrategy, numPartitions: Int): JavaGraph[VD, ED] = {\n+    val graph = Graph(vertexRDD, edgeRDD)\n+    JavaGraph(graph.partitionBy(partitionStrategy, numPartitions))\n+  }\n+\n+  /** The number of edges in the graph. */\n+  def numEdges: JLong = edges.count()\n+\n+  /** The number of vertices in the graph. */\n+  def numVertices: JLong = vertices.count()\n+\n+  def inDegrees: JavaVertexRDD[Int] = JavaVertexRDD[Int](graph.inDegrees)\n+\n+  def outDegrees: JavaVertexRDD[Int] = JavaVertexRDD[Int](graph.outDegrees)\n+\n+  def mapVertices[VD2: ClassTag](map: (VertexId, VD) => VD2) : JavaGraph[VD2, ED] = {\n+    JavaGraph(graph.mapVertices(map))\n+  }\n+\n+  def mapEdges[ED2: ClassTag](map: Edge[ED] => ED2): JavaGraph[VD, ED2] = {\n+    JavaGraph(graph.mapEdges(map))\n+  }\n+\n+  def mapTriplets[ED2: ClassTag](map: EdgeTriplet[VD, ED] => ED2): JavaGraph[VD, ED2] = {\n+    JavaGraph(graph.mapTriplets(map))\n+  }\n+\n+  def reverse : JavaGraph[VD, ED] = JavaGraph(graph.reverse)\n+\n+  def subgraph(\n+    epred: EdgeTriplet[VD,ED] => Boolean = (x => true),\n+    vpred: (VertexId, VD) => Boolean = ((v, d) => true)) : JavaGraph[VD, ED] = {\n+    JavaGraph(graph.subgraph(epred, vpred))\n+  }\n+\n+  def groupEdges(merge: (ED, ED) => ED): JavaGraph[VD, ED] = {\n+    JavaGraph(graph.groupEdges(merge))\n+  }\n+\n+  @deprecated(\"use aggregateMessages\", \"1.2.0\")",
    "line": 74
  }],
  "prId": 4205
}]