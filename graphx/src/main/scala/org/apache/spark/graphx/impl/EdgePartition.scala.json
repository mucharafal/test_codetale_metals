[{
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "specialize VD\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-08T21:30:18Z",
    "diffHunk": "@@ -17,39 +17,86 @@\n \n package org.apache.spark.graphx.impl\n \n-import scala.reflect.ClassTag\n+import scala.reflect.{classTag, ClassTag}\n \n import org.apache.spark.graphx._\n import org.apache.spark.graphx.util.collection.PrimitiveKeyOpenHashMap\n \n /**\n- * A collection of edges stored in 3 large columnar arrays (src, dst, attribute). The arrays are\n- * clustered by src.\n+ * A collection of edges stored in columnar format, along with any vertex attributes referenced. The\n+ * edges are stored in 3 large columnar arrays (src, dst, attribute). The arrays are clustered by\n+ * src. There is an optional active vertex set for filtering computation on the edges.\n+ *\n+ * @tparam ED the edge attribute type\n+ * @tparam VD the vertex attribute type\n  *\n  * @param srcIds the source vertex id of each edge\n  * @param dstIds the destination vertex id of each edge\n  * @param data the attribute associated with each edge\n  * @param index a clustered index on source vertex id\n- * @tparam ED the edge attribute type.\n+ * @param vertices a map from referenced vertex ids to their corresponding attributes. Must\n+ *   contain all vertex ids from `srcIds` and `dstIds`, though not necessarily valid attributes for\n+ *   those vertex ids. The mask is not used.\n+ * @param activeSet an optional active vertex set for filtering computation on the edges\n  */\n private[graphx]\n-class EdgePartition[@specialized(Char, Int, Boolean, Byte, Long, Float, Double) ED: ClassTag](\n+class EdgePartition[\n+    @specialized(Char, Int, Boolean, Byte, Long, Float, Double) ED: ClassTag, VD: ClassTag](",
    "line": 33
  }],
  "prId": 497
}, {
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "Assumes the EdgePartition is upgraded to full triplets\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-08T21:34:30Z",
    "diffHunk": "@@ -100,7 +147,23 @@ class EdgePartition[@specialized(Char, Int, Boolean, Byte, Long, Float, Double)\n       i += 1\n     }\n     assert(newData.size == i)\n-    new EdgePartition(srcIds, dstIds, newData, index)\n+    this.withData(newData)\n+  }\n+\n+  /**\n+   * Construct a new edge partition containing only the edges matching `epred` and where both\n+   * vertices match `vpred`.",
    "line": 133
  }],
  "prId": 497
}, {
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "Consider making EdgePartition know its own includeSrc and includeDst, then assert equality here\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-08T21:38:43Z",
    "diffHunk": "@@ -212,9 +275,34 @@ class EdgePartition[@specialized(Char, Int, Boolean, Byte, Long, Float, Double)\n   }\n \n   /**\n+   * Get an iterator over the edge triplets in this partition.\n+   *\n+   * It is safe to keep references to the objects from this iterator.\n+   */\n+  def tripletIterator(\n+      includeSrc: Boolean = true, includeDst: Boolean = true): Iterator[EdgeTriplet[VD, ED]] = {",
    "line": 213
  }],
  "prId": 497
}, {
  "comments": [{
    "author": {
      "login": "ankurdave"
    },
    "body": "TODO: filter the clustered using `vpred` first\n",
    "commit": "332ab43f388a1e0a1e445971289df80c68072ad6",
    "createdAt": "2014-05-08T21:44:33Z",
    "diffHunk": "@@ -100,7 +147,23 @@ class EdgePartition[@specialized(Char, Int, Boolean, Byte, Long, Float, Double)\n       i += 1\n     }\n     assert(newData.size == i)\n-    new EdgePartition(srcIds, dstIds, newData, index)\n+    this.withData(newData)\n+  }\n+\n+  /**\n+   * Construct a new edge partition containing only the edges matching `epred` and where both\n+   * vertices match `vpred`.\n+   */\n+  def filter(",
    "line": 135
  }],
  "prId": 497
}]