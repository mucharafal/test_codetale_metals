[{
  "comments": [{
    "author": {
      "login": "ScrapCodes"
    },
    "body": "This line is the actual fix. Here we just try to import what is directly referenced and ignore everything else. This works for wildcard imports too. \n",
    "commit": "b1968d29f444bb10d1eecc70cd567a2a1d6a0648",
    "createdAt": "2014-07-29T14:38:15Z",
    "diffHunk": "@@ -124,8 +125,14 @@ trait SparkImports {\n         // Single symbol imports might be implicits! See bug #1752.  Rather than\n         // try to finesse this, we will mimic all imports for now.\n         def keepHandler(handler: MemberHandler) = handler match {\n-          case _: ImportHandler => true\n-          case x                => x.definesImplicit || (x.definedNames exists wanted)\n+       /* This case clause tries to \"precisely\" import only what is required. And in this\n+        * it may miss out on some implicits, because implicits are not known in `wanted`. Thus \n+        * it is suitable for defining classes. AFAIK while defining classes implicits are not\n+        * needed.*/\n+          case h: ImportHandler if definedClass && !fallback => ",
    "line": 21
  }],
  "prId": 1635
}]