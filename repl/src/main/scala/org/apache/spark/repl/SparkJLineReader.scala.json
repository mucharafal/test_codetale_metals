[{
  "comments": [{
    "author": {
      "login": "pwendell"
    },
    "body": "Just wondering - does this handle systems with different path separators correctly?\n\nDoes `historyFile` need to be  `scala.reflect.io.File`? Or can it be a `java.io.File`? It seems a little heavyweight to pull in the reflection library to create a file path, but it makes sense if this is the needed type of `historyFile`.\n",
    "commit": "f9c62d21fea922207e182e48e946715172366a84",
    "createdAt": "2014-03-30T17:31:35Z",
    "diffHunk": "@@ -78,3 +80,11 @@ class SparkJLineReader(_completion: => Completion) extends InteractiveReader {\n   def readOneLine(prompt: String) = consoleReader readLine prompt\n   def readOneKey(prompt: String)  = consoleReader readOneKey prompt\n }\n+\n+/** Changes the default history file to not collide with the scala repl's. */\n+class SparkJLineHistory extends JLineFileHistory {\n+  import Properties.userHome\n+\n+  def defaultFileName = \".spark_history\"\n+  override protected lazy val historyFile = File(Path(userHome) / defaultFileName)",
    "line": 30
  }, {
    "author": {
      "login": "aarondav"
    },
    "body": "The reason I did this was to fully mimic the [code from the Scala interpreter](https://github.com/scala/scala/blob/master/src/repl/scala/tools/nsc/interpreter/session/FileBackedHistory.scala#L77). I think this will make it easier to compare in case the Scala version is updated some time in the future, but you're right we could use a lighter weight construct, we just risk having different behavior than the standard Scala shell history.\n\nNot a big deal to me, but I'm inclined to stick with cloning the Scala shell behavior. Let me know if you still prefer the `java.io.File` route, I'd be happy to change to that.\n",
    "commit": "f9c62d21fea922207e182e48e946715172366a84",
    "createdAt": "2014-04-05T23:30:15Z",
    "diffHunk": "@@ -78,3 +80,11 @@ class SparkJLineReader(_completion: => Completion) extends InteractiveReader {\n   def readOneLine(prompt: String) = consoleReader readLine prompt\n   def readOneKey(prompt: String)  = consoleReader readOneKey prompt\n }\n+\n+/** Changes the default history file to not collide with the scala repl's. */\n+class SparkJLineHistory extends JLineFileHistory {\n+  import Properties.userHome\n+\n+  def defaultFileName = \".spark_history\"\n+  override protected lazy val historyFile = File(Path(userHome) / defaultFileName)",
    "line": 30
  }, {
    "author": {
      "login": "pwendell"
    },
    "body": "Okay sounds good - just wondering why it was there.\n",
    "commit": "f9c62d21fea922207e182e48e946715172366a84",
    "createdAt": "2014-04-05T23:40:47Z",
    "diffHunk": "@@ -78,3 +80,11 @@ class SparkJLineReader(_completion: => Completion) extends InteractiveReader {\n   def readOneLine(prompt: String) = consoleReader readLine prompt\n   def readOneKey(prompt: String)  = consoleReader readOneKey prompt\n }\n+\n+/** Changes the default history file to not collide with the scala repl's. */\n+class SparkJLineHistory extends JLineFileHistory {\n+  import Properties.userHome\n+\n+  def defaultFileName = \".spark_history\"\n+  override protected lazy val historyFile = File(Path(userHome) / defaultFileName)",
    "line": 30
  }],
  "prId": 267
}]