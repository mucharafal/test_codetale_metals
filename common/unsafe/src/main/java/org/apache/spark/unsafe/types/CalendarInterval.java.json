[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Why did we use such string representation now? Was it in order to put the same logics into `IntervalUtils`? If that's the case, we didn't have to move but use `toString` of this class until this case becomes completely exposed.",
    "commit": "0f54af89b8641ee7df80991dcca63e183a03d5ff",
    "createdAt": "2019-11-18T09:06:13Z",
    "diffHunk": "@@ -80,39 +79,8 @@ public int compareTo(CalendarInterval that) {\n \n   @Override\n   public String toString() {\n-    if (months == 0 && days == 0 && microseconds == 0) {\n-      return \"0 seconds\";\n-    }\n-\n-    StringBuilder sb = new StringBuilder();\n-\n-    if (months != 0) {\n-      appendUnit(sb, months / 12, \"years\");\n-      appendUnit(sb, months % 12, \"months\");\n-    }\n-\n-    appendUnit(sb, days, \"days\");\n-\n-    if (microseconds != 0) {\n-      long rest = microseconds;\n-      appendUnit(sb, rest / MICROS_PER_HOUR, \"hours\");\n-      rest %= MICROS_PER_HOUR;\n-      appendUnit(sb, rest / MICROS_PER_MINUTE, \"minutes\");\n-      rest %= MICROS_PER_MINUTE;\n-      if (rest != 0) {\n-        String s = BigDecimal.valueOf(rest, 6).stripTrailingZeros().toPlainString();\n-        sb.append(s).append(\" seconds \");\n-      }\n-    }\n-\n-    sb.setLength(sb.length() - 1);\n-    return sb.toString();\n-  }\n-\n-  private void appendUnit(StringBuilder sb, long value, String unit) {\n-    if (value != 0) {\n-      sb.append(value).append(' ').append(unit).append(' ');\n-    }\n+    return \"CalendarInterval(months= \" + months + \", days = \" + days + \", microsecond = \" +\n+      microseconds + \")\";",
    "line": 46
  }],
  "prId": 26418
}]