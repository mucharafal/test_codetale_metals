[{
  "comments": [{
    "author": {
      "login": "tejasapatil"
    },
    "body": "`BytesMB` seemed weird to read as `MB` is generally interpreted as mega bytes. How about `hashUnsafeBlock` ?",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2017-09-21T19:25:52Z",
    "diffHunk": "@@ -38,6 +39,10 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n+  public static int hashUnsafeBytesMB(MemoryBlock base, long offset, int lengthInBytes) {"
  }],
  "prId": 19222
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why we call it `hashUnsafeBytesBlock` while passing in a general `MemoryBlock`?",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2017-10-28T22:19:12Z",
    "diffHunk": "@@ -38,6 +39,10 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n+  public static int hashUnsafeBytesBlock(MemoryBlock base, long offset, int lengthInBytes) {"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "This is based on [this discussion](https://github.com/apache/spark/pull/19222#discussion_r138744794). Currently, when I can see large performance improvement, I do not call non-MemoyBlock version.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2017-10-29T17:00:48Z",
    "diffHunk": "@@ -38,6 +39,10 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n+  public static int hashUnsafeBytesBlock(MemoryBlock base, long offset, int lengthInBytes) {"
  }],
  "prId": 19222
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "overflow check?",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-03-13T21:47:18Z",
    "diffHunk": "@@ -38,12 +39,18 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n-  public static int hashUnsafeBytes(Object base, long offset, int lengthInBytes) {\n+  public static int hashUnsafeBytesBlock(MemoryBlock mb) {\n+    long offset = mb.getBaseOffset();\n+    int lengthInBytes = (int)mb.size();"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "or we just use long here?",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-03-13T21:47:57Z",
    "diffHunk": "@@ -38,12 +39,18 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n-  public static int hashUnsafeBytes(Object base, long offset, int lengthInBytes) {\n+  public static int hashUnsafeBytesBlock(MemoryBlock mb) {\n+    long offset = mb.getBaseOffset();\n+    int lengthInBytes = (int)mb.size();"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Let us use `long`.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-03-14T01:45:37Z",
    "diffHunk": "@@ -38,12 +39,18 @@ public static int hashLong(long input) {\n     return (int) ((input >>> 32) ^ input);\n   }\n \n-  public static int hashUnsafeBytes(Object base, long offset, int lengthInBytes) {\n+  public static int hashUnsafeBytesBlock(MemoryBlock mb) {\n+    long offset = mb.getBaseOffset();\n+    int lengthInBytes = (int)mb.size();"
  }],
  "prId": 19222
}]