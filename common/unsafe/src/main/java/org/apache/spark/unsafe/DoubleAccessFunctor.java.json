[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "Is there any reason to use `interface`? I think that `abstract class` is enough for this.  \r\nI like virtual call rather than interface call. This is because [the code sequnce](https://wiki.openjdk.java.net/display/HotSpot/VirtualCalls) for virtual call is simpler than [that](https://wiki.openjdk.java.net/display/HotSpot/InterfaceCalls) for interface call.",
    "commit": "1a5abc37b62948e95d5802a3bf91fd4f100ee442",
    "createdAt": "2016-12-28T16:11:17Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe;\n+\n+import sun.misc.Unsafe;\n+\n+interface DoubleAccessFunctor {"
  }, {
    "author": {
      "login": "michaelkamprath"
    },
    "body": "No reason other than there was no commonality between the concrete classes other than the interface. I will switch to an abstract class given your performance input. ",
    "commit": "1a5abc37b62948e95d5802a3bf91fd4f100ee442",
    "createdAt": "2016-12-28T16:54:30Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe;\n+\n+import sun.misc.Unsafe;\n+\n+interface DoubleAccessFunctor {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Interesting @kiszk I had not encountered this before. I would have used an interface for simplicity, but I understand this is an argument about performance in hot code. Design-wise it's virtually identical. According to http://stackoverflow.com/questions/21608240/performance-difference-between-passing-interface-and-class-reloaded this particular case might be just as fast. I think we can leave it unless someone has a strong feeling otherwise.",
    "commit": "1a5abc37b62948e95d5802a3bf91fd4f100ee442",
    "createdAt": "2016-12-30T09:55:50Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.unsafe;\n+\n+import sun.misc.Unsafe;\n+\n+interface DoubleAccessFunctor {"
  }],
  "prId": 16403
}]