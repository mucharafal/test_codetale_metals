[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we expect to only see `LongArrayMemoryBlock` here, don't we?",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2017-10-28T22:30:47Z",
    "diffHunk": "@@ -73,6 +73,12 @@ public MemoryBlock allocate(long size) throws OutOfMemoryError {\n \n   @Override\n   public void free(MemoryBlock memory) {\n+    assert(memory instanceof ByteArrayMemoryBlock || memory instanceof IntArrayMemoryBlock ||"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Good catch, you are right.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2017-10-29T07:52:05Z",
    "diffHunk": "@@ -73,6 +73,12 @@ public MemoryBlock allocate(long size) throws OutOfMemoryError {\n \n   @Override\n   public void free(MemoryBlock memory) {\n+    assert(memory instanceof ByteArrayMemoryBlock || memory instanceof IntArrayMemoryBlock ||"
  }],
  "prId": 19222
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`OnHeapMemoryBlock.fromArray`? we should hide `Platform.LONG_ARRAY_OFFSET` from the caller side.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-02-22T14:58:35Z",
    "diffHunk": "@@ -58,7 +58,8 @@ public MemoryBlock allocate(long size) throws OutOfMemoryError {\n             final long[] array = arrayReference.get();\n             if (array != null) {\n               assert (array.length * 8L >= size);\n-              MemoryBlock memory = new MemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);\n+              MemoryBlock memory =\n+                new OnHeapMemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "sure, done",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-02-23T16:21:51Z",
    "diffHunk": "@@ -58,7 +58,8 @@ public MemoryBlock allocate(long size) throws OutOfMemoryError {\n             final long[] array = arrayReference.get();\n             if (array != null) {\n               assert (array.length * 8L >= size);\n-              MemoryBlock memory = new MemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);\n+              MemoryBlock memory =\n+                new OnHeapMemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);"
  }],
  "prId": 19222
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-02-22T14:58:45Z",
    "diffHunk": "@@ -70,7 +71,7 @@ public MemoryBlock allocate(long size) throws OutOfMemoryError {\n       }\n     }\n     long[] array = new long[numWords];\n-    MemoryBlock memory = new MemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);\n+    MemoryBlock memory = new OnHeapMemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);"
  }],
  "prId": 19222
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think in the future we should cache `MemoryBlock` directly, so that we can have a unified pool for both on-heap and off-heap memory manager.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-03-19T22:18:55Z",
    "diffHunk": "@@ -94,12 +95,12 @@ public void free(MemoryBlock memory) {\n     }\n \n     // Mark the page as freed (so we can detect double-frees).\n-    memory.pageNumber = MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER;\n+    memory.setPageNumber(MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER);\n \n     // As an additional layer of defense against use-after-free bugs, we mutate the\n     // MemoryBlock to null out its reference to the long[] array.\n-    long[] array = (long[]) memory.obj;\n-    memory.setObjAndOffset(null, 0);\n+    long[] array = ((OnHeapMemoryBlock)memory).getLongArray();\n+    memory.resetObjAndOffset();\n \n     long alignedSize = ((size + 7) / 8) * 8;\n     if (shouldPool(alignedSize)) {",
    "line": 51
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Yeah, in that case, we will move `allocate` and `free` methods into `MemoryAllocator` class.",
    "commit": "50326ca2fff63ef0a88f3c7924fa8f1d53d17ec1",
    "createdAt": "2018-03-20T17:46:13Z",
    "diffHunk": "@@ -94,12 +95,12 @@ public void free(MemoryBlock memory) {\n     }\n \n     // Mark the page as freed (so we can detect double-frees).\n-    memory.pageNumber = MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER;\n+    memory.setPageNumber(MemoryBlock.FREED_IN_ALLOCATOR_PAGE_NUMBER);\n \n     // As an additional layer of defense against use-after-free bugs, we mutate the\n     // MemoryBlock to null out its reference to the long[] array.\n-    long[] array = (long[]) memory.obj;\n-    memory.setObjAndOffset(null, 0);\n+    long[] array = ((OnHeapMemoryBlock)memory).getLongArray();\n+    memory.resetObjAndOffset();\n \n     long alignedSize = ((size + 7) / 8) * 8;\n     if (shouldPool(alignedSize)) {",
    "line": 51
  }],
  "prId": 19222
}]