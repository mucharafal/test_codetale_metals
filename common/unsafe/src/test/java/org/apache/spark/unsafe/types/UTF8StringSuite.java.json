[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: indent",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-02T01:48:25Z",
    "diffHunk": "@@ -394,12 +394,14 @@ public void substringSQL() {\n \n   @Test\n   public void split() {\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), -1),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n+    UTF8String[] negativeAndZeroLimitCase =\n+            new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\"), fromString(\"\")};"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Why should we change the existing tests? Just add one test to check \r\n\r\n```\r\n    if (limit == 0) {\r\n      limit = -1;\r\n    }\r\n```",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-03T01:49:52Z",
    "diffHunk": "@@ -394,12 +394,14 @@ public void substringSQL() {\n \n   @Test\n   public void split() {\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), -1),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n+    UTF8String[] negativeAndZeroLimitCase =\n+            new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\"), fromString(\"\")};\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), 0),\n+            negativeAndZeroLimitCase));\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), -1),",
    "line": 14
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "@HyukjinKwon the last two were duplicates:\r\n```\r\n    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\r\n      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\r\n    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\r\n      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\r\n```\r\n\r\nAnd I also thought it better to include the case where you do get an empty string (adding one more instance of the regex at the end). Want me to revert? My view is it's more exhaustive of the expected behavior, and also easier to see that limit = -1 should behave exactly like limit = 0.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-04T14:02:52Z",
    "diffHunk": "@@ -394,12 +394,14 @@ public void substringSQL() {\n \n   @Test\n   public void split() {\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), -1),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n+    UTF8String[] negativeAndZeroLimitCase =\n+            new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\"), fromString(\"\")};\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), 0),\n+            negativeAndZeroLimitCase));\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), -1),",
    "line": 14
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's fix the indentation to show less diff.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-05T03:01:49Z",
    "diffHunk": "@@ -394,12 +394,14 @@ public void substringSQL() {\n \n   @Test\n   public void split() {\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), -1),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n-    assertTrue(Arrays.equals(fromString(\"ab,def,ghi\").split(fromString(\",\"), 2),\n-      new UTF8String[]{fromString(\"ab\"), fromString(\"def,ghi\")}));\n+    UTF8String[] negativeAndZeroLimitCase =\n+            new UTF8String[]{fromString(\"ab\"), fromString(\"def\"), fromString(\"ghi\"), fromString(\"\")};\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), 0),\n+            negativeAndZeroLimitCase));\n+    assertTrue(Arrays.equals(fromString(\"ab,def,ghi,\").split(fromString(\",\"), -1),",
    "line": 14
  }],
  "prId": 22227
}]