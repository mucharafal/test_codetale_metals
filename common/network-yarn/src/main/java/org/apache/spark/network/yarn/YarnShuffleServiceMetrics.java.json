[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Is it possible to add a unit test to verify the correctness of converting codahale metrics to Hadoop metrics?",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-24T05:39:10Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {",
    "line": 47
  }, {
    "author": {
      "login": "ash211"
    },
    "body": "should be able to, I'm working on creating one now.  By correctness, I think you mostly mean that the values passed through are the same, even though the naming schemes are different?",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-24T06:06:30Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {",
    "line": 47
  }, {
    "author": {
      "login": "jerryshao"
    },
    "body": "Yes, you're right. From my understanding the correctness means `Gauge` still coverts to `Gauge`, `Meter` still to `Meter`, not sure can it be guaranteed?",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-24T06:09:42Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {",
    "line": 47
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Is it necessary to use `static` here? Looks like here it is  it is only for the test convenience.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-27T08:56:55Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {\n+    MetricsRecordBuilder metricsRecordBuilder = collector.addRecord(\"shuffleService\");\n+\n+    for (Map.Entry<String, Metric> entry : metricSet.getMetrics().entrySet()) {\n+      collectMetric(metricsRecordBuilder, entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public static void collectMetric(MetricsRecordBuilder metricsRecordBuilder, String name, Metric metric) {",
    "line": 56
  }, {
    "author": {
      "login": "ash211"
    },
    "body": "I use `static` here to make it clear that the method does not need to be run in the context of an instance.  This prevents it from accidentally accessing instance variables when I don't intend it to",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-28T23:35:24Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {\n+    MetricsRecordBuilder metricsRecordBuilder = collector.addRecord(\"shuffleService\");\n+\n+    for (Map.Entry<String, Metric> entry : metricSet.getMetrics().entrySet()) {\n+      collectMetric(metricsRecordBuilder, entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public static void collectMetric(MetricsRecordBuilder metricsRecordBuilder, String name, Metric metric) {",
    "line": 56
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Also here.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-04-05T13:33:05Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {\n+    MetricsRecordBuilder metricsRecordBuilder = collector.addRecord(\"shuffleService\");\n+\n+    for (Map.Entry<String, Metric> entry : metricSet.getMetrics().entrySet()) {\n+      collectMetric(metricsRecordBuilder, entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @VisibleForTesting",
    "line": 55
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Does it mean that we could only handle integer Gauge, what if later on we add different metric in `ExternalShuffleBlockHandler`? Looks like we should also manually handle the case one by one here. At least we should an else branch for the fallback check.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-04-05T13:41:19Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.yarn;\n+\n+import com.codahale.metrics.*;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsInfo;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.MetricsSource;\n+\n+import java.util.Map;\n+\n+/**\n+ * Modeled off of YARN's NodeManagerMetrics.\n+ */\n+public class YarnShuffleServiceMetrics implements MetricsSource {\n+\n+  private final MetricSet metricSet;\n+\n+  public YarnShuffleServiceMetrics(MetricSet metricSet) {\n+    this.metricSet = metricSet;\n+  }\n+\n+  /**\n+   * Get metrics from the source\n+   *\n+   * @param collector to contain the resulting metrics snapshot\n+   * @param all       if true, return all metrics even if unchanged.\n+   */\n+  @Override\n+  public void getMetrics(MetricsCollector collector, boolean all) {\n+    MetricsRecordBuilder metricsRecordBuilder = collector.addRecord(\"shuffleService\");\n+\n+    for (Map.Entry<String, Metric> entry : metricSet.getMetrics().entrySet()) {\n+      collectMetric(metricsRecordBuilder, entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public static void collectMetric(MetricsRecordBuilder metricsRecordBuilder, String name, Metric metric) {\n+\n+    // The metric types used in ExternalShuffleBlockHandler.ShuffleMetrics\n+    if (metric instanceof Timer) {\n+      Timer t = (Timer) metric;\n+      metricsRecordBuilder\n+        .addCounter(new ShuffleServiceMetricsInfo(name + \"_count\", \"Count of timer \" + name),\n+          t.getCount())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate15\", \"15 minute rate of timer \" + name),\n+          t.getFifteenMinuteRate())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate5\", \"5 minute rate of timer \" + name),\n+          t.getFiveMinuteRate())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate1\", \"1 minute rate of timer \" + name),\n+          t.getOneMinuteRate())\n+        .addGauge(new ShuffleServiceMetricsInfo(name + \"_rateMean\", \"Mean rate of timer \" + name),\n+          t.getMeanRate());\n+    } else if (metric instanceof Meter) {\n+      Meter m = (Meter) metric;\n+      metricsRecordBuilder\n+        .addCounter(new ShuffleServiceMetricsInfo(name + \"_count\", \"Count of meter \" + name),\n+          m.getCount())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate15\", \"15 minute rate of meter \" + name),\n+          m.getFifteenMinuteRate())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate5\", \"5 minute rate of meter \" + name),\n+          m.getFiveMinuteRate())\n+        .addGauge(\n+          new ShuffleServiceMetricsInfo(name + \"_rate1\", \"1 minute rate of meter \" + name),\n+          m.getOneMinuteRate())\n+        .addGauge(new ShuffleServiceMetricsInfo(name + \"_rateMean\", \"Mean rate of meter \" + name),\n+          m.getMeanRate());\n+    } else if (metric instanceof Gauge) {\n+      Gauge m = (Gauge) metric;\n+      Object gaugeValue = m.getValue();\n+      if (gaugeValue instanceof Integer) {\n+        Integer intValue = (Integer) gaugeValue;",
    "line": 95
  }],
  "prId": 17401
}]