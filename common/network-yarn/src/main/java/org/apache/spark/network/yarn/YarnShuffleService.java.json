[{
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "nit. \"shuffleService\" camel case might be better.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-24T05:41:33Z",
    "diffHunk": "@@ -166,6 +170,23 @@ protected void serviceInit(Configuration conf) throws Exception {\n       TransportConf transportConf = new TransportConf(\"shuffle\", new HadoopConfigProvider(conf));\n       blockHandler = new ExternalShuffleBlockHandler(transportConf, registeredExecutorFile);\n \n+      // register metrics on the block handler into the Node Manager's metrics system.\n+      try {\n+        YarnShuffleServiceMetrics serviceMetrics = new YarnShuffleServiceMetrics(\n+          blockHandler.getAllMetrics());\n+        MetricsSystemImpl metricsSystem = (MetricsSystemImpl) DefaultMetricsSystem.instance();\n+\n+        Method registerSourceMethod = metricsSystem.getClass().getDeclaredMethod(\"registerSource\",\n+                String.class, String.class, MetricsSource.class);\n+        registerSourceMethod.setAccessible(true);\n+        registerSourceMethod.invoke(metricsSystem, \"shuffleservice\", \"Metrics on the Spark \" +"
  }, {
    "author": {
      "login": "ash211"
    },
    "body": "will change shortly",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-24T06:05:48Z",
    "diffHunk": "@@ -166,6 +170,23 @@ protected void serviceInit(Configuration conf) throws Exception {\n       TransportConf transportConf = new TransportConf(\"shuffle\", new HadoopConfigProvider(conf));\n       blockHandler = new ExternalShuffleBlockHandler(transportConf, registeredExecutorFile);\n \n+      // register metrics on the block handler into the Node Manager's metrics system.\n+      try {\n+        YarnShuffleServiceMetrics serviceMetrics = new YarnShuffleServiceMetrics(\n+          blockHandler.getAllMetrics());\n+        MetricsSystemImpl metricsSystem = (MetricsSystemImpl) DefaultMetricsSystem.instance();\n+\n+        Method registerSourceMethod = metricsSystem.getClass().getDeclaredMethod(\"registerSource\",\n+                String.class, String.class, MetricsSource.class);\n+        registerSourceMethod.setAccessible(true);\n+        registerSourceMethod.invoke(metricsSystem, \"shuffleservice\", \"Metrics on the Spark \" +"
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Nit, here I think should be 2 space indent follow the above line.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-27T09:00:12Z",
    "diffHunk": "@@ -166,6 +170,23 @@ protected void serviceInit(Configuration conf) throws Exception {\n       TransportConf transportConf = new TransportConf(\"shuffle\", new HadoopConfigProvider(conf));\n       blockHandler = new ExternalShuffleBlockHandler(transportConf, registeredExecutorFile);\n \n+      // register metrics on the block handler into the Node Manager's metrics system.\n+      try {\n+        YarnShuffleServiceMetrics serviceMetrics = new YarnShuffleServiceMetrics(\n+          blockHandler.getAllMetrics());\n+        MetricsSystemImpl metricsSystem = (MetricsSystemImpl) DefaultMetricsSystem.instance();\n+\n+        Method registerSourceMethod = metricsSystem.getClass().getDeclaredMethod(\"registerSource\",\n+                String.class, String.class, MetricsSource.class);"
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Also here.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-03-27T09:15:07Z",
    "diffHunk": "@@ -166,6 +170,23 @@ protected void serviceInit(Configuration conf) throws Exception {\n       TransportConf transportConf = new TransportConf(\"shuffle\", new HadoopConfigProvider(conf));\n       blockHandler = new ExternalShuffleBlockHandler(transportConf, registeredExecutorFile);\n \n+      // register metrics on the block handler into the Node Manager's metrics system.\n+      try {\n+        YarnShuffleServiceMetrics serviceMetrics = new YarnShuffleServiceMetrics(\n+          blockHandler.getAllMetrics());\n+        MetricsSystemImpl metricsSystem = (MetricsSystemImpl) DefaultMetricsSystem.instance();\n+\n+        Method registerSourceMethod = metricsSystem.getClass().getDeclaredMethod(\"registerSource\",\n+                String.class, String.class, MetricsSource.class);\n+        registerSourceMethod.setAccessible(true);\n+        registerSourceMethod.invoke(metricsSystem, \"shuffleService\", \"Metrics on the Spark \" +\n+                \"Shuffle Service\", serviceMetrics);"
  }],
  "prId": 17401
}, {
  "comments": [{
    "author": {
      "login": "jerryshao"
    },
    "body": "Nit: this 2 space indent looks like not necessary.",
    "commit": "7c7d6d4c4c6f572e6e1646ff0b8e6e99e95b43c3",
    "createdAt": "2017-04-05T13:28:46Z",
    "diffHunk": "@@ -184,7 +204,7 @@ protected void serviceInit(Configuration conf) throws Exception {\n       boundPort = port;\n       String authEnabledString = authEnabled ? \"enabled\" : \"not enabled\";\n       logger.info(\"Started YARN shuffle service for Spark on port {}. \" +\n-        \"Authentication is {}.  Registered executor file is {}\", port, authEnabledString,\n+          \"Authentication is {}.  Registered executor file is {}\", port, authEnabledString,",
    "line": 87
  }],
  "prId": 17401
}]