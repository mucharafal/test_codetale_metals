[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: it's better to use `Iterator` pattern here, as the input list may not be an indexed list and `list.get(i)` becomes `O(n)`.",
    "commit": "3a018b14ce4c5bbb894df8a85ce3ec0586f276fb",
    "createdAt": "2017-06-29T05:34:10Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import io.netty.buffer.PoolArenaMetric;\n+import io.netty.buffer.PoolChunkListMetric;\n+import io.netty.buffer.PoolChunkMetric;\n+import io.netty.buffer.PooledByteBufAllocator;\n+\n+/**\n+ * A {@link PooledByteBufAllocator} providing some metrics.\n+ */\n+public class PooledByteBufAllocatorWithMetrics extends PooledByteBufAllocator {\n+\n+  public PooledByteBufAllocatorWithMetrics(\n+      boolean preferDirect,\n+      int nHeapArena,\n+      int nDirectArena,\n+      int pageSize,\n+      int maxOrder,\n+      int tinyCacheSize,\n+      int smallCacheSize,\n+      int normalCacheSize) {\n+    super(preferDirect, nHeapArena, nDirectArena, pageSize, maxOrder, tinyCacheSize,\n+      smallCacheSize, normalCacheSize);\n+  }\n+\n+  public long offHeapUsage() {\n+    return sumOfMetrics(directArenas());\n+  }\n+\n+  public long onHeapUsage() {\n+    return sumOfMetrics(heapArenas());\n+  }\n+\n+  private long sumOfMetrics(List<PoolArenaMetric> metrics) {\n+    long sum = 0;\n+    for (int i = 0; i < metrics.size(); i++) {\n+      PoolArenaMetric metric = metrics.get(i);"
  }, {
    "author": {
      "login": "jinxing64"
    },
    "body": "Yes, I should refine.",
    "commit": "3a018b14ce4c5bbb894df8a85ce3ec0586f276fb",
    "createdAt": "2017-06-29T06:42:29Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import io.netty.buffer.PoolArenaMetric;\n+import io.netty.buffer.PoolChunkListMetric;\n+import io.netty.buffer.PoolChunkMetric;\n+import io.netty.buffer.PooledByteBufAllocator;\n+\n+/**\n+ * A {@link PooledByteBufAllocator} providing some metrics.\n+ */\n+public class PooledByteBufAllocatorWithMetrics extends PooledByteBufAllocator {\n+\n+  public PooledByteBufAllocatorWithMetrics(\n+      boolean preferDirect,\n+      int nHeapArena,\n+      int nDirectArena,\n+      int pageSize,\n+      int maxOrder,\n+      int tinyCacheSize,\n+      int smallCacheSize,\n+      int normalCacheSize) {\n+    super(preferDirect, nHeapArena, nDirectArena, pageSize, maxOrder, tinyCacheSize,\n+      smallCacheSize, normalCacheSize);\n+  }\n+\n+  public long offHeapUsage() {\n+    return sumOfMetrics(directArenas());\n+  }\n+\n+  public long onHeapUsage() {\n+    return sumOfMetrics(heapArenas());\n+  }\n+\n+  private long sumOfMetrics(List<PoolArenaMetric> metrics) {\n+    long sum = 0;\n+    for (int i = 0; i < metrics.size(); i++) {\n+      PoolArenaMetric metric = metrics.get(i);"
  }],
  "prId": 18388
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Instead of adding this class, can we upgrade to Netty 4.0.45.Final which allows us to use metrics APIs? (See https://github.com/netty/netty/pull/6460)",
    "commit": "3a018b14ce4c5bbb894df8a85ce3ec0586f276fb",
    "createdAt": "2017-07-13T05:36:05Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import io.netty.buffer.PoolArenaMetric;\n+import io.netty.buffer.PoolChunkListMetric;\n+import io.netty.buffer.PoolChunkMetric;\n+import io.netty.buffer.PooledByteBufAllocator;\n+\n+/**\n+ * A {@link PooledByteBufAllocator} providing some metrics.\n+ */\n+public class PooledByteBufAllocatorWithMetrics extends PooledByteBufAllocator {"
  }],
  "prId": 18388
}]