[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Normally these would be on two lines -- think the linter will complain about this (but not fail the build, so take a look).\r\nAlso does it matter that they're not released in the reverse order they were obtained?",
    "commit": "d0ced9f132752cdb2e5238cb1081c86964cff129",
    "createdAt": "2017-06-23T14:27:09Z",
    "diffHunk": "@@ -187,14 +188,30 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n   /* Encode a byte[] identifier as a Base64-encoded string. */\n   public static String encodeIdentifier(String identifier) {\n     Preconditions.checkNotNull(identifier, \"User cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(identifier.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8);\n+    return getBase64EncodedString(identifier);\n   }\n \n   /** Encode a password as a base64-encoded char[] array. */\n   public static char[] encodePassword(String password) {\n     Preconditions.checkNotNull(password, \"Password cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(password.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8).toCharArray();\n+    return getBase64EncodedString(password).toCharArray();\n+  }\n+\n+  /** Return a Base64-encoded string. */\n+  private static String getBase64EncodedString (String str) {\n+    ByteBuf byteBuf = null, encodedByteBuf = null;"
  }, {
    "author": {
      "login": "dhruve"
    },
    "body": "Okay. The order of releasing the buffers does not matter. We check for the byteBuf first just incase if we hit an exception while trying to acquire it, we know we don't need to check encodedByteBuf. ",
    "commit": "d0ced9f132752cdb2e5238cb1081c86964cff129",
    "createdAt": "2017-06-23T14:45:32Z",
    "diffHunk": "@@ -187,14 +188,30 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n   /* Encode a byte[] identifier as a Base64-encoded string. */\n   public static String encodeIdentifier(String identifier) {\n     Preconditions.checkNotNull(identifier, \"User cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(identifier.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8);\n+    return getBase64EncodedString(identifier);\n   }\n \n   /** Encode a password as a base64-encoded char[] array. */\n   public static char[] encodePassword(String password) {\n     Preconditions.checkNotNull(password, \"Password cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(password.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8).toCharArray();\n+    return getBase64EncodedString(password).toCharArray();\n+  }\n+\n+  /** Return a Base64-encoded string. */\n+  private static String getBase64EncodedString (String str) {\n+    ByteBuf byteBuf = null, encodedByteBuf = null;"
  }, {
    "author": {
      "login": "dhruve"
    },
    "body": "Had to fix a space, refactored the code. The linter however didn't complain.",
    "commit": "d0ced9f132752cdb2e5238cb1081c86964cff129",
    "createdAt": "2017-06-23T15:20:33Z",
    "diffHunk": "@@ -187,14 +188,30 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n   /* Encode a byte[] identifier as a Base64-encoded string. */\n   public static String encodeIdentifier(String identifier) {\n     Preconditions.checkNotNull(identifier, \"User cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(identifier.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8);\n+    return getBase64EncodedString(identifier);\n   }\n \n   /** Encode a password as a base64-encoded char[] array. */\n   public static char[] encodePassword(String password) {\n     Preconditions.checkNotNull(password, \"Password cannot be null if SASL is enabled\");\n-    return Base64.encode(Unpooled.wrappedBuffer(password.getBytes(StandardCharsets.UTF_8)))\n-      .toString(StandardCharsets.UTF_8).toCharArray();\n+    return getBase64EncodedString(password).toCharArray();\n+  }\n+\n+  /** Return a Base64-encoded string. */\n+  private static String getBase64EncodedString (String str) {\n+    ByteBuf byteBuf = null, encodedByteBuf = null;"
  }],
  "prId": 18407
}]