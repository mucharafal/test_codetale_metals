[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "These metrics looks interesting, but do you think having them separated out by arena is helpful?  Seems like we want a view of these metrics which sums them over all arenas?\r\n\r\n(Perhaps this is some ignornance of how arenas work in netty ... would help to seem some example metrics you get from it)",
    "commit": "25868023439ae1a885b73b52368d1d915cdbed2d",
    "createdAt": "2017-08-18T20:38:24Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.*;\n+\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.Metric;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.MetricSet;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.PoolArenaMetric;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocatorMetric;\n+\n+/**\n+ * A Netty memory metrics class to collect metrics from Netty PooledByteBufAllocator.\n+ */\n+public class NettyMemoryMetrics implements MetricSet {\n+\n+  private final PooledByteBufAllocator pooledAllocator;\n+\n+  private final boolean verboseMetricsEnabled;\n+\n+  private final Map<String, Metric> allMetrics;\n+\n+  private final String metricPrefix;\n+\n+  @VisibleForTesting\n+  final static Set<String> VERBOSE_METRICS = new HashSet<>();\n+  static {\n+    VERBOSE_METRICS.addAll(Arrays.asList(\n+      \"numAllocations\",\n+      \"numTinyAllocations\",\n+      \"numSmallAllocations\",\n+      \"numNormalAllocations\",\n+      \"numHugeAllocations\",\n+      \"numDeallocations\",\n+      \"numTinyDeallocations\",\n+      \"numSmallDeallocations\",\n+      \"numNormalDeallocations\",\n+      \"numHugeDeallocations\",\n+      \"numActiveAllocations\",\n+      \"numActiveTinyAllocations\",\n+      \"numActiveSmallAllocations\",\n+      \"numActiveNormalAllocations\",\n+      \"numActiveHugeAllocations\",\n+      \"numActiveBytes\"));\n+  }\n+\n+  public NettyMemoryMetrics(PooledByteBufAllocator pooledAllocator,\n+      String metricPrefix,\n+      TransportConf conf) {\n+    this.pooledAllocator = pooledAllocator;\n+    this.allMetrics = new HashMap<>();\n+    this.metricPrefix = metricPrefix;\n+    this.verboseMetricsEnabled = conf.verboseMetrics();\n+\n+    registerMetrics(this.pooledAllocator);\n+  }\n+\n+  private void registerMetrics(PooledByteBufAllocator allocator) {\n+    PooledByteBufAllocatorMetric pooledAllocatorMetric = allocator.metric();\n+\n+    // Register general metrics.\n+    allMetrics.put(MetricRegistry.name(metricPrefix, \"usedHeapMemory\"),\n+      (Gauge<Long>) () -> pooledAllocatorMetric.usedHeapMemory());\n+    allMetrics.put(MetricRegistry.name(metricPrefix, \"usedDirectMemory\"),\n+      (Gauge<Long>) () -> pooledAllocatorMetric.usedDirectMemory());\n+\n+    if (verboseMetricsEnabled) {\n+      int directArenaIndex = 0;\n+      for (PoolArenaMetric metric : pooledAllocatorMetric.directArenas()) {\n+        registerArenaMetric(metric, \"directArena\" + directArenaIndex);\n+        directArenaIndex++;\n+      }\n+\n+      int heapArenaIndex = 0;\n+      for (PoolArenaMetric metric : pooledAllocatorMetric.heapArenas()) {\n+        registerArenaMetric(metric, \"heapArena\" + heapArenaIndex);\n+        heapArenaIndex++;\n+      }\n+    }\n+  }\n+\n+  private void registerArenaMetric(PoolArenaMetric arenaMetric, String arenaName) {\n+    for (String methodName : VERBOSE_METRICS) {\n+      Method m;\n+      try {\n+        m = PoolArenaMetric.class.getMethod(methodName);\n+      } catch (Exception e) {\n+        // Failed to find metric related method, ignore this metric.\n+        continue;\n+      }\n+\n+      if (!Modifier.isPublic(m.getModifiers())) {\n+        // Ignore non-public methods.\n+        continue;\n+      }\n+\n+      Class<?> returnType = m.getReturnType();\n+      String metricName = MetricRegistry.name(metricPrefix, arenaName, m.getName());",
    "line": 119
  }, {
    "author": {
      "login": "squito"
    },
    "body": "also just saw zsxwings comment:\r\n\r\n> Does anyone really care about the details of PoolArenaMetric? Maybe just report https://github.com/netty/netty/blob/4.1/buffer/src/main/java/io/netty/buffer/ByteBufAllocatorMetric.java ?\r\n\r\nthat may be enough, rather than aggregating the details from the arenas.  again, an example of the info from these metrics would be helpful to decide if they're useful.",
    "commit": "25868023439ae1a885b73b52368d1d915cdbed2d",
    "createdAt": "2017-08-18T20:47:30Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.*;\n+\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.Metric;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.MetricSet;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.buffer.PoolArenaMetric;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocatorMetric;\n+\n+/**\n+ * A Netty memory metrics class to collect metrics from Netty PooledByteBufAllocator.\n+ */\n+public class NettyMemoryMetrics implements MetricSet {\n+\n+  private final PooledByteBufAllocator pooledAllocator;\n+\n+  private final boolean verboseMetricsEnabled;\n+\n+  private final Map<String, Metric> allMetrics;\n+\n+  private final String metricPrefix;\n+\n+  @VisibleForTesting\n+  final static Set<String> VERBOSE_METRICS = new HashSet<>();\n+  static {\n+    VERBOSE_METRICS.addAll(Arrays.asList(\n+      \"numAllocations\",\n+      \"numTinyAllocations\",\n+      \"numSmallAllocations\",\n+      \"numNormalAllocations\",\n+      \"numHugeAllocations\",\n+      \"numDeallocations\",\n+      \"numTinyDeallocations\",\n+      \"numSmallDeallocations\",\n+      \"numNormalDeallocations\",\n+      \"numHugeDeallocations\",\n+      \"numActiveAllocations\",\n+      \"numActiveTinyAllocations\",\n+      \"numActiveSmallAllocations\",\n+      \"numActiveNormalAllocations\",\n+      \"numActiveHugeAllocations\",\n+      \"numActiveBytes\"));\n+  }\n+\n+  public NettyMemoryMetrics(PooledByteBufAllocator pooledAllocator,\n+      String metricPrefix,\n+      TransportConf conf) {\n+    this.pooledAllocator = pooledAllocator;\n+    this.allMetrics = new HashMap<>();\n+    this.metricPrefix = metricPrefix;\n+    this.verboseMetricsEnabled = conf.verboseMetrics();\n+\n+    registerMetrics(this.pooledAllocator);\n+  }\n+\n+  private void registerMetrics(PooledByteBufAllocator allocator) {\n+    PooledByteBufAllocatorMetric pooledAllocatorMetric = allocator.metric();\n+\n+    // Register general metrics.\n+    allMetrics.put(MetricRegistry.name(metricPrefix, \"usedHeapMemory\"),\n+      (Gauge<Long>) () -> pooledAllocatorMetric.usedHeapMemory());\n+    allMetrics.put(MetricRegistry.name(metricPrefix, \"usedDirectMemory\"),\n+      (Gauge<Long>) () -> pooledAllocatorMetric.usedDirectMemory());\n+\n+    if (verboseMetricsEnabled) {\n+      int directArenaIndex = 0;\n+      for (PoolArenaMetric metric : pooledAllocatorMetric.directArenas()) {\n+        registerArenaMetric(metric, \"directArena\" + directArenaIndex);\n+        directArenaIndex++;\n+      }\n+\n+      int heapArenaIndex = 0;\n+      for (PoolArenaMetric metric : pooledAllocatorMetric.heapArenas()) {\n+        registerArenaMetric(metric, \"heapArena\" + heapArenaIndex);\n+        heapArenaIndex++;\n+      }\n+    }\n+  }\n+\n+  private void registerArenaMetric(PoolArenaMetric arenaMetric, String arenaName) {\n+    for (String methodName : VERBOSE_METRICS) {\n+      Method m;\n+      try {\n+        m = PoolArenaMetric.class.getMethod(methodName);\n+      } catch (Exception e) {\n+        // Failed to find metric related method, ignore this metric.\n+        continue;\n+      }\n+\n+      if (!Modifier.isPublic(m.getModifiers())) {\n+        // Ignore non-public methods.\n+        continue;\n+      }\n+\n+      Class<?> returnType = m.getReturnType();\n+      String metricName = MetricRegistry.name(metricPrefix, arenaName, m.getName());",
    "line": 119
  }],
  "prId": 18935
}]