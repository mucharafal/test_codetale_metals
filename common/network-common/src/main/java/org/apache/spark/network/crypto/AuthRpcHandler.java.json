[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: debug -> warn",
    "commit": "39df4b312997e4c2f9bacfb9da2d5adaad8af509",
    "createdAt": "2017-01-20T23:32:46Z",
    "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.crypto;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.security.sasl.Sasl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.sasl.SecretKeyHolder;\n+import org.apache.spark.network.sasl.SaslRpcHandler;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.StreamManager;\n+import org.apache.spark.network.util.JavaUtils;\n+import org.apache.spark.network.util.TransportConf;\n+\n+/**\n+ * RPC Handler which performs authentication using Spark's auth protocol before delegating to a\n+ * child RPC handler. If the configuration allows, this handler will delegate messages to a SASL\n+ * RPC handler for further authentication, to support for clients that do not support Spark's\n+ * protocol.\n+ *\n+ * The delegate will only receive messages if the given connection has been successfully\n+ * authenticated. A connection may be authenticated at most once.\n+ */\n+class AuthRpcHandler extends RpcHandler {\n+  private static final Logger LOG = LoggerFactory.getLogger(AuthRpcHandler.class);\n+\n+  /** Transport configuration. */\n+  private final TransportConf conf;\n+\n+  /** The client channel. */\n+  private final Channel channel;\n+\n+  /**\n+   * RpcHandler we will delegate to for authenticated connections. When falling back to SASL\n+   * this will be replaced with the SASL RPC handler.\n+   */\n+  private RpcHandler delegate;\n+\n+  /** Class which provides secret keys which are shared by server and client on a per-app basis. */\n+  private final SecretKeyHolder secretKeyHolder;\n+\n+  /** Whether auth is done and future calls should be delegated. */\n+  @VisibleForTesting\n+  boolean doDelegate;\n+\n+  AuthRpcHandler(\n+      TransportConf conf,\n+      Channel channel,\n+      RpcHandler delegate,\n+      SecretKeyHolder secretKeyHolder) {\n+    this.conf = conf;\n+    this.channel = channel;\n+    this.delegate = delegate;\n+    this.secretKeyHolder = secretKeyHolder;\n+  }\n+\n+  @Override\n+  public void receive(TransportClient client, ByteBuffer message, RpcResponseCallback callback) {\n+    if (doDelegate) {\n+      delegate.receive(client, message, callback);\n+      return;\n+    }\n+\n+    int position = message.position();\n+    int limit = message.limit();\n+\n+    ClientChallenge challenge;\n+    try {\n+      challenge = ClientChallenge.decodeMessage(message);\n+      LOG.debug(\"Received new auth challenge for client {}.\", channel.remoteAddress());\n+    } catch (RuntimeException e) {\n+      if (conf.saslFallback()) {\n+        LOG.debug(\"Failed to parse new auth challenge, reverting to SASL for client {}.\","
  }],
  "prId": 16521
}]