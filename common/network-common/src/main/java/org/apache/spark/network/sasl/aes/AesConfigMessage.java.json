[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "See previous comments. It would be better if this method did not exist.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-24T20:18:50Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for SASL encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  /**\n+   * Set key and input vector for cipher option\n+   * @param keySize the size of key in byte.\n+   * @param inKey The decrypt key of one side.\n+   * @param inIv The input vector of one side.\n+   * @param outKey The decrypt key of another side.\n+   * @param outIv The input vector of another side.\n+   */\n+  public void setParameters(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "So... you need this check because the client is sending an empty `AesConfigMessage` to the server, which then creates the keys and sends a response back to the client. Instead, why not save the round trip and have the client generate the keys and send a single message to the server, without requiring a response? Then the overloading of `AesConfigMessage` as both request and response goes away, and things become less confusing.\n\n(Hint: see the `TransportClient.send()` method.)\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-24T20:22:23Z",
    "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for SASL encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  /**\n+   * Set key and input vector for cipher option\n+   * @param keySize the size of key in byte.\n+   * @param inKey The decrypt key of one side.\n+   * @param inIv The input vector of one side.\n+   * @param outKey The decrypt key of another side.\n+   * @param outIv The input vector of another side.\n+   */\n+  public void setParameters(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    buf.writeInt(keySize);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  /**\n+   * Encode the config message.\n+   * @return ByteBuffer which contains encoded config message.\n+   */\n+  public ByteBuffer encodeMessage(){\n+    ByteBuffer buf = ByteBuffer.allocate(encodedLength());\n+\n+    ByteBuf wrappedBuf = Unpooled.wrappedBuffer(buf);\n+    wrappedBuf.clear();\n+    encode(wrappedBuf);\n+\n+    return buf;\n+  }\n+\n+  /**\n+   * Decode the config message from buffer\n+   * @param buffer the buffer contain encoded config message\n+   * @return config message\n+   */\n+  public static AesConfigMessage decodeMessage(ByteBuffer buffer) {\n+    ByteBuf buf = Unpooled.wrappedBuffer(buffer);\n+\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected SaslMessage, received something else\"\n+        + \" (maybe your client does not have SASL enabled?)\");\n+    }\n+\n+    int keySize = buf.readInt();\n+\n+    if (buf.readableBytes() > 0) {"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "s/SaslMessage/AesConfigMessage/\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-31T22:53:13Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    buf.writeInt(keySize);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  /**\n+   * Encode the config message.\n+   * @return ByteBuffer which contains encoded config message.\n+   */\n+  public ByteBuffer encodeMessage(){\n+    ByteBuffer buf = ByteBuffer.allocate(encodedLength());\n+\n+    ByteBuf wrappedBuf = Unpooled.wrappedBuffer(buf);\n+    wrappedBuf.clear();\n+    encode(wrappedBuf);\n+\n+    return buf;\n+  }\n+\n+  /**\n+   * Decode the config message from buffer\n+   * @param buffer the buffer contain encoded config message\n+   * @return config message\n+   */\n+  public static AesConfigMessage decodeMessage(ByteBuffer buffer) {\n+    ByteBuf buf = Unpooled.wrappedBuffer(buffer);\n+\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected SaslMessage, received something else\""
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "If I understand correctly, the cause for this would be a server that does not support AES encryption, and a client that wants it.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-31T22:54:45Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    buf.writeInt(keySize);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  /**\n+   * Encode the config message.\n+   * @return ByteBuffer which contains encoded config message.\n+   */\n+  public ByteBuffer encodeMessage(){\n+    ByteBuffer buf = ByteBuffer.allocate(encodedLength());\n+\n+    ByteBuf wrappedBuf = Unpooled.wrappedBuffer(buf);\n+    wrappedBuf.clear();\n+    encode(wrappedBuf);\n+\n+    return buf;\n+  }\n+\n+  /**\n+   * Decode the config message from buffer\n+   * @param buffer the buffer contain encoded config message\n+   * @return config message\n+   */\n+  public static AesConfigMessage decodeMessage(ByteBuffer buffer) {\n+    ByteBuf buf = Unpooled.wrappedBuffer(buffer);\n+\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected SaslMessage, received something else\"\n+        + \" (maybe your client does not have SASL enabled?)\");"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: don't allow null values then the codes will be simpler.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-11-10T06:48:44Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: since keySize is just `inKey.length`. You don't need to send it via the network.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-11-10T06:50:04Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "why the `decode` order is not same as the `encode` order?\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-11-10T06:51:59Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    buf.writeInt(keySize);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  /**\n+   * Encode the config message.\n+   * @return ByteBuffer which contains encoded config message.\n+   */\n+  public ByteBuffer encodeMessage(){\n+    ByteBuffer buf = ByteBuffer.allocate(encodedLength());\n+\n+    ByteBuf wrappedBuf = Unpooled.wrappedBuffer(buf);\n+    wrappedBuf.clear();\n+    encode(wrappedBuf);\n+\n+    return buf;\n+  }\n+\n+  /**\n+   * Decode the config message from buffer\n+   * @param buffer the buffer contain encoded config message\n+   * @return config message\n+   */\n+  public static AesConfigMessage decodeMessage(ByteBuffer buffer) {\n+    ByteBuf buf = Unpooled.wrappedBuffer(buffer);\n+\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected AesConfigMessage, received something else\"\n+        + \" (maybe your client does not have AES enabled?)\");\n+    }\n+\n+    int keySize = buf.readInt();\n+\n+    byte[] outKey = Encoders.ByteArrays.decode(buf);"
  }, {
    "author": {
      "login": "chenjunjiedada"
    },
    "body": "client use inKey to encrypt, server use inKey to decrypt, So exchange the inkey and outkey here.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-11-10T13:06:15Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    buf.writeInt(keySize);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  /**\n+   * Encode the config message.\n+   * @return ByteBuffer which contains encoded config message.\n+   */\n+  public ByteBuffer encodeMessage(){\n+    ByteBuffer buf = ByteBuffer.allocate(encodedLength());\n+\n+    ByteBuf wrappedBuf = Unpooled.wrappedBuffer(buf);\n+    wrappedBuf.clear();\n+    encode(wrappedBuf);\n+\n+    return buf;\n+  }\n+\n+  /**\n+   * Decode the config message from buffer\n+   * @param buffer the buffer contain encoded config message\n+   * @return config message\n+   */\n+  public static AesConfigMessage decodeMessage(ByteBuffer buffer) {\n+    ByteBuf buf = Unpooled.wrappedBuffer(buffer);\n+\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected AesConfigMessage, received something else\"\n+        + \" (maybe your client does not have AES enabled?)\");\n+    }\n+\n+    int keySize = buf.readInt();\n+\n+    byte[] outKey = Encoders.ByteArrays.decode(buf);"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(**outKey**) +\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-11-10T06:56:25Z",
    "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for encryption negotiation.\n+ */\n+public class AesConfigMessage implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public int keySize;\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesConfigMessage(int keySize, byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.keySize = keySize;\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + 4 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +"
  }],
  "prId": 15172
}]