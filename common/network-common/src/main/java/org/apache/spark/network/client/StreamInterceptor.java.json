[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Why don't we need to do this for `TransportRequestHandler`?",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-30T21:56:25Z",
    "diffHunk": "@@ -50,16 +52,22 @@\n \n   @Override\n   public void exceptionCaught(Throwable cause) throws Exception {\n-    handler.deactivateStream();\n+    deactivateStream();\n     callback.onFailure(streamId, cause);\n   }\n \n   @Override\n   public void channelInactive() throws Exception {\n-    handler.deactivateStream();\n+    deactivateStream();\n     callback.onFailure(streamId, new ClosedChannelException());\n   }\n \n+  private void deactivateStream() {\n+    if (handler instanceof TransportResponseHandler) {",
    "line": 46
  }, {
    "author": {
      "login": "squito"
    },
    "body": "the only purpose of `TransportResponseHandler.deactivateStream()` is to include the stream request in the count for `numOutstandingRequests` (its not doing any critical cleanup).  I will include a comment here explaining that.",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-31T03:00:58Z",
    "diffHunk": "@@ -50,16 +52,22 @@\n \n   @Override\n   public void exceptionCaught(Throwable cause) throws Exception {\n-    handler.deactivateStream();\n+    deactivateStream();\n     callback.onFailure(streamId, cause);\n   }\n \n   @Override\n   public void channelInactive() throws Exception {\n-    handler.deactivateStream();\n+    deactivateStream();\n     callback.onFailure(streamId, new ClosedChannelException());\n   }\n \n+  private void deactivateStream() {\n+    if (handler instanceof TransportResponseHandler) {",
    "line": 46
  }],
  "prId": 21346
}]