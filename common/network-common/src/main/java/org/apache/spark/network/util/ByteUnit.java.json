[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "We need a space after casts. I suppose the point is to avoid overflow when the result is going to be a double anyway, at the cost of precision maybe. I tested, and the precision issue won't matter, but then again, there's no reason this method should return `double`. There is no such thing as 0.5 bytes.\r\n\r\nI think we can just fix that for Spark 3; its value is used as a `long` or `int` everywhere anyway.\r\n\r\nWhile here, I think I'd also fix the expressions like `(long) Math.pow(1024L, 2L)` above. The multipliers should be `1L << 10`, `1L << 20`, ... `1L << 50`. There's again no point there in using floating point math.",
    "commit": "3df0a0ab27b2c841da4c7b3da6ecf8b7f48d7e6d",
    "createdAt": "2018-12-31T14:40:01Z",
    "diffHunk": "@@ -54,7 +54,7 @@ public double toBytes(long d) {\n     if (d < 0) {\n       throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n     }\n-    return d * multiplier;\n+    return d * (double)multiplier;"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "I agree with chaniging the precision. I will use `long` here.  \r\nI will also use `1L << 10`, ... in `enum ByteUnit`.",
    "commit": "3df0a0ab27b2c841da4c7b3da6ecf8b7f48d7e6d",
    "createdAt": "2018-12-31T15:29:23Z",
    "diffHunk": "@@ -54,7 +54,7 @@ public double toBytes(long d) {\n     if (d < 0) {\n       throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n     }\n-    return d * multiplier;\n+    return d * (double)multiplier;"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Hm, really? what does it return? type-wise the numbers should easily fit into a long. 2 TiB = 2199023255552 bytes. I'm missing where the failure is here.",
    "commit": "3df0a0ab27b2c841da4c7b3da6ecf8b7f48d7e6d",
    "createdAt": "2018-12-31T23:48:57Z",
    "diffHunk": "@@ -54,7 +54,7 @@ public double toBytes(long d) {\n     if (d < 0) {\n       throw new IllegalArgumentException(\"Negative size value. Size must be positive: \" + d);\n     }\n-    return d * multiplier;\n+    return d * (double)multiplier;"
  }],
  "prId": 23420
}]