[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Although these are method name changes here, you're right that the old method is deprecated and new correctly-spelled one can be freely used now.",
    "commit": "ae1c0f37def154b053f2d3063ce994940ca853b6",
    "createdAt": "2018-08-10T12:27:58Z",
    "diffHunk": "@@ -231,17 +231,17 @@ public boolean release(int decrement) {\n      * data into memory at once, and can avoid ballooning memory usage when transferring large\n      * messages such as shuffle blocks.\n      *\n-     * The {@link #transfered()} counter also behaves a little funny, in that it won't go forward\n+     * The {@link #transferred()} counter also behaves a little funny, in that it won't go forward\n      * until a whole chunk has been written. This is done because the code can't use the actual\n      * number of bytes written to the channel as the transferred count (see {@link #count()}).\n      * Instead, once an encrypted chunk is written to the output (including its header), the\n-     * size of the original block will be added to the {@link #transfered()} amount.\n+     * size of the original block will be added to the {@link #transferred()} amount.\n      */\n     @Override\n     public long transferTo(final WritableByteChannel target, final long position)\n       throws IOException {\n \n-      Preconditions.checkArgument(position == transfered(), \"Invalid position.\");\n+      Preconditions.checkArgument(position == transferred(), \"Invalid position.\");",
    "line": 17
  }],
  "prId": 22070
}]