[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Why do you need this check?\n\nIf you just let exceptions propagate, you wouldn't need the empty constructor, and you could remove all the null checks from this code.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-14T23:08:24Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for SASL encryption negotiation.\n+ */\n+public class AesCipherOption implements Encodable {\n+  /** Serialization tag used to catch incorrect payloads. */\n+  private static final byte TAG_BYTE = (byte) 0xEB;\n+\n+  public byte[] inKey;\n+  public byte[] outKey;\n+  public byte[] inIv;\n+  public byte[] outIv;\n+\n+  public AesCipherOption() {\n+    this(null, null, null, null);\n+  }\n+  public AesCipherOption(byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  /**\n+   * Set key and input vector for cipher option\n+   * @param inKey The decrypt key of one side\n+   * @param inIv The input vector of one side\n+   * @param outKey The decrypt key of another side\n+   * @param outIv The input vector of another side\n+   */\n+  public void setParameters(byte[] inKey, byte[] inIv, byte[] outKey, byte[] outIv) {\n+    this.inKey = inKey;\n+    this.inIv = inIv;\n+    this.outKey = outKey;\n+    this.outIv = outIv;\n+  }\n+\n+  @Override\n+  public int encodedLength() {\n+    return 1 + ((inKey != null && inIv != null && outKey != null && outIv != null) ?\n+      Encoders.ByteArrays.encodedLength(inKey) + Encoders.ByteArrays.encodedLength(inKey) +\n+      Encoders.ByteArrays.encodedLength(inIv) + Encoders.ByteArrays.encodedLength(outIv) : 0);\n+  }\n+\n+  @Override\n+  public void encode(ByteBuf buf) {\n+    buf.writeByte(TAG_BYTE);\n+    if (inKey != null && inIv != null && outKey != null && outIv != null) {\n+      Encoders.ByteArrays.encode(buf, inKey);\n+      Encoders.ByteArrays.encode(buf, inIv);\n+      Encoders.ByteArrays.encode(buf, outKey);\n+      Encoders.ByteArrays.encode(buf, outIv);\n+    }\n+  }\n+\n+  public static AesCipherOption decode(ByteBuf buf) {\n+    if (buf.readByte() != TAG_BYTE) {\n+      throw new IllegalStateException(\"Expected SaslMessage, received something else\"\n+        + \" (maybe your client does not have SASL enabled?)\");\n+    }\n+\n+    if (buf.isReadable()) {"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "I'd name this `AesCipherConfigMessage` or something that makes it more explicit that it's a protocol message.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-14T23:22:03Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.sasl.aes;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.apache.spark.network.protocol.Encodable;\n+import org.apache.spark.network.protocol.Encoders;\n+\n+/**\n+ * The AES cipher options for SASL encryption negotiation.\n+ */\n+public class AesCipherOption implements Encodable {"
  }],
  "prId": 15172
}]