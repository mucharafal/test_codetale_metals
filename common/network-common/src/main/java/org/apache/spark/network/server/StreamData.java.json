[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "either remove or document all parameters (and add an empty line before).",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-25T20:13:03Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.server;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.StreamCallback;\n+import org.apache.spark.network.client.StreamInterceptor;\n+import org.apache.spark.network.util.TransportFrameDecoder;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A holder for streamed data sent along with an RPC message.\n+ */\n+public class StreamData {\n+\n+  private final TransportRequestHandler handler;\n+  private final TransportFrameDecoder frameDecoder;\n+  private final RpcResponseCallback rpcCallback;\n+  private final ByteBuffer meta;\n+  private final long streamByteCount;\n+  private boolean hasCallback = false;\n+\n+  public StreamData(\n+      TransportRequestHandler handler,\n+      TransportFrameDecoder frameDecoder,\n+      RpcResponseCallback rpcCallback,\n+      ByteBuffer meta,\n+      long streamByteCount) {\n+    this.handler = handler;\n+    this.frameDecoder = frameDecoder;\n+    this.rpcCallback = rpcCallback;\n+    this.meta = meta;\n+    this.streamByteCount = streamByteCount;\n+  }\n+\n+  public boolean hasCallback() {\n+    return hasCallback;\n+  }\n+\n+  /**\n+   * Register callback to receive the streaming data.\n+   *\n+   * If an exception is thrown from the callback, it will be propogated back to the sender as an rpc\n+   * failure.\n+   * @param callback"
  }],
  "prId": 21346
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "It looks like this field is not actually used in the current implementation. Is that intentional?",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-30T22:25:54Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.server;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.StreamCallback;\n+import org.apache.spark.network.client.StreamInterceptor;\n+import org.apache.spark.network.util.TransportFrameDecoder;\n+\n+/**\n+ * A holder for streamed data sent along with an RPC message.\n+ */\n+public class StreamData {\n+\n+  private final TransportRequestHandler handler;\n+  private final TransportFrameDecoder frameDecoder;\n+  private final RpcResponseCallback rpcCallback;\n+  private final ByteBuffer meta;"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "whoops, you're right.  I was using this at one point in the follow-on patch, then changed it and didn't fully clean this up.  thanks",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-31T02:49:22Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.server;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.spark.network.client.RpcResponseCallback;\n+import org.apache.spark.network.client.StreamCallback;\n+import org.apache.spark.network.client.StreamInterceptor;\n+import org.apache.spark.network.util.TransportFrameDecoder;\n+\n+/**\n+ * A holder for streamed data sent along with an RPC message.\n+ */\n+public class StreamData {\n+\n+  private final TransportRequestHandler handler;\n+  private final TransportFrameDecoder frameDecoder;\n+  private final RpcResponseCallback rpcCallback;\n+  private final ByteBuffer meta;"
  }],
  "prId": 21346
}]