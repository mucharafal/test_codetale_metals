[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: remove this empty line\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-14T22:51:06Z",
    "diffHunk": "@@ -32,9 +34,17 @@\n \n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableMap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "\"for AES\"?\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-14T22:51:41Z",
    "diffHunk": "@@ -120,6 +130,38 @@ public synchronized void dispose() {\n   }\n \n   /**\n+   * Negotiate extra encryption options for SASL"
  }],
  "prId": 15172
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Since this is now AES-specific, how about changing the name to `negotiateSessionKey` or something, and returning `AesCipher`? Then you wouldn't need the `instanceof` checks in the callers, which are kinda weird.\n\nAnother alternative would be to have this method return some new interface with a `addToChannel` method, and have different implementations for the SASL-based encryption and AES. But that feels like overkill right now.\n",
    "commit": "6863efe77118f91c0f849d34d4698dad608213b1",
    "createdAt": "2016-10-14T22:53:37Z",
    "diffHunk": "@@ -120,6 +130,38 @@ public synchronized void dispose() {\n   }\n \n   /**\n+   * Negotiate extra encryption options for SASL\n+   * @param client is transport client used to connect to peer.\n+   * @param conf contain client transport configuration.\n+   * @throws IOException\n+   * @return The object represent the result of negotiate.\n+   */\n+  public Object negotiate(TransportClient client, TransportConf conf) throws IOException {"
  }],
  "prId": 15172
}]