[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "We should update this code comment of `fetchChunk`. Now it can request stream instead of just a single chunk.",
    "commit": "6e1a05b088cabddc986e0a3d8e126095f0f7b32b",
    "createdAt": "2019-01-11T06:47:34Z",
    "diffHunk": "@@ -128,11 +128,15 @@ public void setClientId(String id) {\n    *                 be agreed upon by client and server beforehand.\n    * @param chunkIndex 0-based index of the chunk to fetch\n    * @param callback Callback invoked upon successful receipt of chunk, or upon any failure.\n+   * @param streamCallback If it's not null, we will send a `ChunkFetchRequest` with\n+   *                       `fetchAsStream=true`, and this callback will be used to handle the stream\n+   *                       response.",
    "line": 17
  }],
  "prId": 23510
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Not big deal but maybe rename to `fetchChunkOrStream`?\r\n",
    "commit": "6e1a05b088cabddc986e0a3d8e126095f0f7b32b",
    "createdAt": "2019-01-11T06:48:25Z",
    "diffHunk": "@@ -128,11 +128,15 @@ public void setClientId(String id) {\n    *                 be agreed upon by client and server beforehand.\n    * @param chunkIndex 0-based index of the chunk to fetch\n    * @param callback Callback invoked upon successful receipt of chunk, or upon any failure.\n+   * @param streamCallback If it's not null, we will send a `ChunkFetchRequest` with\n+   *                       `fetchAsStream=true`, and this callback will be used to handle the stream\n+   *                       response.\n    */\n   public void fetchChunk(",
    "line": 19
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "we still fetch a chunk, but the chunk may be returned as a stream.",
    "commit": "6e1a05b088cabddc986e0a3d8e126095f0f7b32b",
    "createdAt": "2019-01-11T12:32:20Z",
    "diffHunk": "@@ -128,11 +128,15 @@ public void setClientId(String id) {\n    *                 be agreed upon by client and server beforehand.\n    * @param chunkIndex 0-based index of the chunk to fetch\n    * @param callback Callback invoked upon successful receipt of chunk, or upon any failure.\n+   * @param streamCallback If it's not null, we will send a `ChunkFetchRequest` with\n+   *                       `fetchAsStream=true`, and this callback will be used to handle the stream\n+   *                       response.\n    */\n   public void fetchChunk(",
    "line": 19
  }],
  "prId": 23510
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Should we have something in the log to show this is also a stream request in case of `streamCallback != null`?",
    "commit": "6e1a05b088cabddc986e0a3d8e126095f0f7b32b",
    "createdAt": "2019-01-11T06:49:33Z",
    "diffHunk": "@@ -128,11 +128,15 @@ public void setClientId(String id) {\n    *                 be agreed upon by client and server beforehand.\n    * @param chunkIndex 0-based index of the chunk to fetch\n    * @param callback Callback invoked upon successful receipt of chunk, or upon any failure.\n+   * @param streamCallback If it's not null, we will send a `ChunkFetchRequest` with\n+   *                       `fetchAsStream=true`, and this callback will be used to handle the stream\n+   *                       response.\n    */\n   public void fetchChunk(\n       long streamId,\n       int chunkIndex,\n-      ChunkReceivedCallback callback) {\n+      ChunkReceivedCallback callback,\n+      StreamCallback streamCallback) {\n     if (logger.isDebugEnabled()) {\n       logger.debug(\"Sending fetch chunk request {} to {}\", chunkIndex, getRemoteAddress(channel));\n     }",
    "line": 27
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "It depends on how you interprete it. We can say that this is a special chunk fetch request, the server side can return a stream reponse for it.",
    "commit": "6e1a05b088cabddc986e0a3d8e126095f0f7b32b",
    "createdAt": "2019-01-11T12:33:27Z",
    "diffHunk": "@@ -128,11 +128,15 @@ public void setClientId(String id) {\n    *                 be agreed upon by client and server beforehand.\n    * @param chunkIndex 0-based index of the chunk to fetch\n    * @param callback Callback invoked upon successful receipt of chunk, or upon any failure.\n+   * @param streamCallback If it's not null, we will send a `ChunkFetchRequest` with\n+   *                       `fetchAsStream=true`, and this callback will be used to handle the stream\n+   *                       response.\n    */\n   public void fetchChunk(\n       long streamId,\n       int chunkIndex,\n-      ChunkReceivedCallback callback) {\n+      ChunkReceivedCallback callback,\n+      StreamCallback streamCallback) {\n     if (logger.isDebugEnabled()) {\n       logger.debug(\"Sending fetch chunk request {} to {}\", chunkIndex, getRemoteAddress(channel));\n     }",
    "line": 27
  }],
  "prId": 23510
}]