[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Indentation?",
    "commit": "25868023439ae1a885b73b52368d1d915cdbed2d",
    "createdAt": "2017-08-14T17:41:11Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.util;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.Metric;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.MetricSet;\n+import org.apache.spark.network.TestUtils;\n+import org.apache.spark.network.client.TransportClient;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.spark.network.TransportContext;\n+import org.apache.spark.network.client.TransportClientFactory;\n+import org.apache.spark.network.server.NoOpRpcHandler;\n+import org.apache.spark.network.server.RpcHandler;\n+import org.apache.spark.network.server.TransportServer;\n+\n+public class NettyMemoryMetricsSuite {\n+\n+  private TransportConf conf;\n+  private TransportContext context;\n+  private TransportServer server;\n+  private TransportClientFactory clientFactory;\n+\n+  @Before\n+  public void setUp() {\n+    conf = new TransportConf(\"shuffle\", MapConfigProvider.EMPTY);\n+    RpcHandler rpcHandler = new NoOpRpcHandler();\n+    context = new TransportContext(conf, rpcHandler);\n+    server = context.createServer();\n+    clientFactory = context.createClientFactory();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    JavaUtils.closeQuietly(clientFactory);\n+    JavaUtils.closeQuietly(server);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void testNettyMemoryMetrics() throws IOException, InterruptedException {\n+    MetricSet serverMetrics = server.getAllMetrics();\n+    Assert.assertNotNull(serverMetrics);\n+    Assert.assertNotNull(serverMetrics.getMetrics());\n+    Assert.assertNotEquals(serverMetrics.getMetrics().size(), 0);\n+\n+    Map<String, Metric> serverMetricMap = serverMetrics.getMetrics();\n+    serverMetricMap.forEach((name, metric) -> {\n+      Assert.assertTrue(name.startsWith(\"shuffle-server\"));\n+      });"
  }],
  "prId": 18935
}]