[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Wrong place... basically in every file you've changed.",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-25T20:34:30Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.io.Files;\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;"
  }, {
    "author": {
      "login": "squito"
    },
    "body": "ooops, sorry got used to the style checker warning finding these in scala.  fixed these now.",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-05-26T22:03:15Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import com.google.common.io.Files;\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;"
  }],
  "prId": 21346
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`final` for all these?",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-06-14T22:38:09Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Random;\n+\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+class StreamTestHelper {\n+  static final String[] STREAMS = { \"largeBuffer\", \"smallBuffer\", \"emptyBuffer\", \"file\" };\n+\n+  final File testFile;\n+  File tempDir;"
  }],
  "prId": 21346
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: remove",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-06-14T22:38:28Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Random;\n+\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+class StreamTestHelper {\n+  static final String[] STREAMS = { \"largeBuffer\", \"smallBuffer\", \"emptyBuffer\", \"file\" };\n+\n+  final File testFile;\n+  File tempDir;\n+\n+  ByteBuffer emptyBuffer;\n+  ByteBuffer smallBuffer;\n+  ByteBuffer largeBuffer;\n+\n+  private static ByteBuffer createBuffer(int bufSize) {\n+    ByteBuffer buf = ByteBuffer.allocate(bufSize);\n+    for (int i = 0; i < bufSize; i ++) {\n+      buf.put((byte) i);\n+    }\n+    buf.flip();\n+    return buf;\n+  }\n+\n+  StreamTestHelper() throws Exception {\n+    tempDir = Files.createTempDir();\n+    emptyBuffer = createBuffer(0);\n+    smallBuffer = createBuffer(100);\n+    largeBuffer = createBuffer(100000);\n+\n+    testFile = File.createTempFile(\"stream-test-file\", \"txt\", tempDir);\n+    FileOutputStream fp = new FileOutputStream(testFile);\n+    try {\n+      Random rnd = new Random();\n+      for (int i = 0; i < 512; i++) {\n+        byte[] fileContent = new byte[1024];\n+        rnd.nextBytes(fileContent);\n+        fp.write(fileContent);\n+      }\n+    } finally {\n+      fp.close();\n+    }\n+  }\n+\n+  public ByteBuffer srcBuffer(String name) {\n+    switch (name) {\n+      case \"largeBuffer\":\n+        return largeBuffer;\n+      case \"smallBuffer\":\n+        return smallBuffer;\n+      case \"emptyBuffer\":\n+        return emptyBuffer;\n+      default:\n+        throw new IllegalArgumentException(\"Invalid stream: \" + name);\n+    }\n+  }\n+\n+  public ManagedBuffer openStream(TransportConf conf, String streamId) {\n+    switch (streamId) {\n+      case \"file\":\n+        return new FileSegmentManagedBuffer(conf, testFile, 0, testFile.length());\n+      default:\n+        return new NioManagedBuffer(srcBuffer(streamId));\n+    }\n+  }\n+\n+"
  }],
  "prId": 21346
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`JavaUtils.deleteRecursively`.",
    "commit": "cd11abc3261d6f37731aa4574705119e0ac57a93",
    "createdAt": "2018-06-14T22:39:15Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Random;\n+\n+import com.google.common.io.Files;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.buffer.NioManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+class StreamTestHelper {\n+  static final String[] STREAMS = { \"largeBuffer\", \"smallBuffer\", \"emptyBuffer\", \"file\" };\n+\n+  final File testFile;\n+  File tempDir;\n+\n+  ByteBuffer emptyBuffer;\n+  ByteBuffer smallBuffer;\n+  ByteBuffer largeBuffer;\n+\n+  private static ByteBuffer createBuffer(int bufSize) {\n+    ByteBuffer buf = ByteBuffer.allocate(bufSize);\n+    for (int i = 0; i < bufSize; i ++) {\n+      buf.put((byte) i);\n+    }\n+    buf.flip();\n+    return buf;\n+  }\n+\n+  StreamTestHelper() throws Exception {\n+    tempDir = Files.createTempDir();\n+    emptyBuffer = createBuffer(0);\n+    smallBuffer = createBuffer(100);\n+    largeBuffer = createBuffer(100000);\n+\n+    testFile = File.createTempFile(\"stream-test-file\", \"txt\", tempDir);\n+    FileOutputStream fp = new FileOutputStream(testFile);\n+    try {\n+      Random rnd = new Random();\n+      for (int i = 0; i < 512; i++) {\n+        byte[] fileContent = new byte[1024];\n+        rnd.nextBytes(fileContent);\n+        fp.write(fileContent);\n+      }\n+    } finally {\n+      fp.close();\n+    }\n+  }\n+\n+  public ByteBuffer srcBuffer(String name) {\n+    switch (name) {\n+      case \"largeBuffer\":\n+        return largeBuffer;\n+      case \"smallBuffer\":\n+        return smallBuffer;\n+      case \"emptyBuffer\":\n+        return emptyBuffer;\n+      default:\n+        throw new IllegalArgumentException(\"Invalid stream: \" + name);\n+    }\n+  }\n+\n+  public ManagedBuffer openStream(TransportConf conf, String streamId) {\n+    switch (streamId) {\n+      case \"file\":\n+        return new FileSegmentManagedBuffer(conf, testFile, 0, testFile.length());\n+      default:\n+        return new NioManagedBuffer(srcBuffer(streamId));\n+    }\n+  }\n+\n+\n+  void cleanup() {\n+    if (tempDir != null) {\n+      for (File f : tempDir.listFiles()) {"
  }],
  "prId": 21346
}]