[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Anyone wondering about 'final' -- these are no longer needed because lambdas are OK with variables that are effectively final in the enclosing scope.",
    "commit": "72fe17812566dfc5023f381063283a1cb6b0c187",
    "createdAt": "2017-02-16T21:44:24Z",
    "diffHunk": "@@ -255,21 +250,16 @@ public void testEncryptedMessageChunking() throws Exception {\n \n   @Test\n   public void testFileRegionEncryption() throws Exception {\n-    final Map<String, String> testConf = ImmutableMap.of(\n+    Map<String, String> testConf = ImmutableMap.of(",
    "line": 57
  }],
  "prId": 16964
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "This line is now too long (although we don't have automatic java style checks.)",
    "commit": "72fe17812566dfc5023f381063283a1cb6b0c187",
    "createdAt": "2017-02-17T19:51:07Z",
    "diffHunk": "@@ -255,21 +250,16 @@ public void testEncryptedMessageChunking() throws Exception {\n \n   @Test\n   public void testFileRegionEncryption() throws Exception {\n-    final Map<String, String> testConf = ImmutableMap.of(\n+    Map<String, String> testConf = ImmutableMap.of(\n       \"spark.network.sasl.maxEncryptedBlockSize\", \"1k\");\n \n-    final AtomicReference<ManagedBuffer> response = new AtomicReference<>();\n-    final File file = File.createTempFile(\"sasltest\", \".txt\");\n+    AtomicReference<ManagedBuffer> response = new AtomicReference<>();\n+    File file = File.createTempFile(\"sasltest\", \".txt\");\n     SaslTestCtx ctx = null;\n     try {\n-      final TransportConf conf = new TransportConf(\"shuffle\", new MapConfigProvider(testConf));\n+      TransportConf conf = new TransportConf(\"shuffle\", new MapConfigProvider(testConf));\n       StreamManager sm = mock(StreamManager.class);\n-      when(sm.getChunk(anyLong(), anyInt())).thenAnswer(new Answer<ManagedBuffer>() {\n-          @Override\n-          public ManagedBuffer answer(InvocationOnMock invocation) {\n-            return new FileSegmentManagedBuffer(conf, file, 0, file.length());\n-          }\n-        });\n+      when(sm.getChunk(anyLong(), anyInt())).thenAnswer(invocation -> new FileSegmentManagedBuffer(conf, file, 0, file.length()));"
  }],
  "prId": 16964
}]