[{
  "comments": [{
    "author": {
      "login": "jinxing64"
    },
    "body": "Remove this test. Because `ManagedBuffer` are initialized only when it is being fetched. There is no remaining `ManagedBuffer` when the connection is closed.",
    "commit": "31070fc4905f3f9e08e10ced09051ecace22eeab",
    "createdAt": "2017-06-06T15:09:23Z",
    "diffHunk": "@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.network.server;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import io.netty.channel.Channel;\n-import org.junit.Test;\n-import org.mockito.Mockito;\n-\n-import org.apache.spark.network.TestManagedBuffer;\n-import org.apache.spark.network.buffer.ManagedBuffer;\n-\n-public class OneForOneStreamManagerSuite {\n-\n-  @Test\n-  public void managedBuffersAreFeedWhenConnectionIsClosed() throws Exception {\n-    OneForOneStreamManager manager = new OneForOneStreamManager();\n-    List<ManagedBuffer> buffers = new ArrayList<>();\n-    TestManagedBuffer buffer1 = Mockito.spy(new TestManagedBuffer(10));\n-    TestManagedBuffer buffer2 = Mockito.spy(new TestManagedBuffer(20));\n-    buffers.add(buffer1);\n-    buffers.add(buffer2);\n-    long streamId = manager.registerStream(\"appId\", buffers.iterator());\n-\n-    Channel dummyChannel = Mockito.mock(Channel.class, Mockito.RETURNS_SMART_NULLS);\n-    manager.registerChannel(dummyChannel, streamId);\n-\n-    manager.connectionTerminated(dummyChannel);\n-\n-    Mockito.verify(buffer1, Mockito.times(1)).release();\n-    Mockito.verify(buffer2, Mockito.times(1)).release();\n-  }\n-}",
    "line": 50
  }],
  "prId": 18211
}]