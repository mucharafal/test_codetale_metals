[{
  "comments": [{
    "author": {
      "login": "tgravescs"
    },
    "body": "change spacing to 2 here and through file",
    "commit": "0348ec8d5570aab9d744043a3d6a88950f4aeb5c",
    "createdAt": "2018-09-19T18:57:01Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.channel.Channel;\n+import org.apache.spark.network.server.ChunkFetchRequestHandler;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.client.TransportClient;\n+import org.apache.spark.network.protocol.*;\n+import org.apache.spark.network.server.NoOpRpcHandler;\n+import org.apache.spark.network.server.OneForOneStreamManager;\n+import org.apache.spark.network.server.RpcHandler;\n+\n+public class ChunkFetchRequestHandlerSuite {\n+\n+  @Test\n+  public void handleChunkFetchRequest() throws Exception {\n+    RpcHandler rpcHandler = new NoOpRpcHandler();\n+    OneForOneStreamManager streamManager = (OneForOneStreamManager) (rpcHandler.getStreamManager());\n+    Channel channel = mock(Channel.class);\n+    ChannelHandlerContext context = mock(ChannelHandlerContext.class);\n+    when(context.channel())\n+        .thenAnswer(invocationOnMock0 -> {"
  }],
  "prId": 22173
}]