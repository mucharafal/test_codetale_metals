[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "These are JVM asserts, not JUnit asserts.",
    "commit": "4f79632d22b67128a6be8a285f4fc1fec0d5f12f",
    "createdAt": "2018-01-10T13:47:40Z",
    "diffHunk": "@@ -100,6 +101,43 @@ public void handleFetchRequestAndStreamRequest() throws Exception {\n     assert responseAndPromisePairs.size() == 3;\n   }\n \n+    @Test\n+    public void handleOneWayMessageWithWrongSerialVersionUID() throws Exception {\n+        RpcHandler rpcHandler = new NoOpRpcHandler();\n+        Channel channel = mock(Channel.class);\n+        List<Pair<Object, ExtendedChannelPromise>> responseAndPromisePairs =\n+                new ArrayList<>();\n+\n+        when(channel.writeAndFlush(any()))\n+                .thenAnswer(invocationOnMock -> {\n+                    Object response = invocationOnMock.getArguments()[0];\n+                    ExtendedChannelPromise channelFuture = new ExtendedChannelPromise(channel);\n+                    responseAndPromisePairs.add(ImmutablePair.of(response, channelFuture));\n+                    return channelFuture;\n+                });\n+\n+        TransportClient reverseClient = mock(TransportClient.class);\n+        TransportRequestHandler requestHandler = new TransportRequestHandler(channel, reverseClient,\n+                rpcHandler, 2L);\n+\n+        // req.body().nioByteBuffer() is the method that throws the InvalidClassException\n+        // with wrong svUID, so let's mock it\n+        ManagedBuffer body = mock(ManagedBuffer.class);\n+        when(body.nioByteBuffer()).thenThrow(new InvalidClassException(\"test - wrong version\"));\n+        RequestMessage msg = new OneWayMessage(body);\n+\n+        requestHandler.handle(msg);\n+\n+        assert responseAndPromisePairs.size() == 1;"
  }, {
    "author": {
      "login": "jkremser"
    },
    "body": ":+1: \r\nah, long time no Java :man_facepalming: ",
    "commit": "4f79632d22b67128a6be8a285f4fc1fec0d5f12f",
    "createdAt": "2018-01-10T14:15:49Z",
    "diffHunk": "@@ -100,6 +101,43 @@ public void handleFetchRequestAndStreamRequest() throws Exception {\n     assert responseAndPromisePairs.size() == 3;\n   }\n \n+    @Test\n+    public void handleOneWayMessageWithWrongSerialVersionUID() throws Exception {\n+        RpcHandler rpcHandler = new NoOpRpcHandler();\n+        Channel channel = mock(Channel.class);\n+        List<Pair<Object, ExtendedChannelPromise>> responseAndPromisePairs =\n+                new ArrayList<>();\n+\n+        when(channel.writeAndFlush(any()))\n+                .thenAnswer(invocationOnMock -> {\n+                    Object response = invocationOnMock.getArguments()[0];\n+                    ExtendedChannelPromise channelFuture = new ExtendedChannelPromise(channel);\n+                    responseAndPromisePairs.add(ImmutablePair.of(response, channelFuture));\n+                    return channelFuture;\n+                });\n+\n+        TransportClient reverseClient = mock(TransportClient.class);\n+        TransportRequestHandler requestHandler = new TransportRequestHandler(channel, reverseClient,\n+                rpcHandler, 2L);\n+\n+        // req.body().nioByteBuffer() is the method that throws the InvalidClassException\n+        // with wrong svUID, so let's mock it\n+        ManagedBuffer body = mock(ManagedBuffer.class);\n+        when(body.nioByteBuffer()).thenThrow(new InvalidClassException(\"test - wrong version\"));\n+        RequestMessage msg = new OneWayMessage(body);\n+\n+        requestHandler.handle(msg);\n+\n+        assert responseAndPromisePairs.size() == 1;"
  }],
  "prId": 19802
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "2 space, not 4 space indent",
    "commit": "4f79632d22b67128a6be8a285f4fc1fec0d5f12f",
    "createdAt": "2018-01-10T13:48:11Z",
    "diffHunk": "@@ -100,6 +101,43 @@ public void handleFetchRequestAndStreamRequest() throws Exception {\n     assert responseAndPromisePairs.size() == 3;\n   }\n \n+    @Test\n+    public void handleOneWayMessageWithWrongSerialVersionUID() throws Exception {\n+        RpcHandler rpcHandler = new NoOpRpcHandler();"
  }],
  "prId": 19802
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Space after casts",
    "commit": "4f79632d22b67128a6be8a285f4fc1fec0d5f12f",
    "createdAt": "2018-01-10T13:48:29Z",
    "diffHunk": "@@ -100,6 +101,43 @@ public void handleFetchRequestAndStreamRequest() throws Exception {\n     assert responseAndPromisePairs.size() == 3;\n   }\n \n+    @Test\n+    public void handleOneWayMessageWithWrongSerialVersionUID() throws Exception {\n+        RpcHandler rpcHandler = new NoOpRpcHandler();\n+        Channel channel = mock(Channel.class);\n+        List<Pair<Object, ExtendedChannelPromise>> responseAndPromisePairs =\n+                new ArrayList<>();\n+\n+        when(channel.writeAndFlush(any()))\n+                .thenAnswer(invocationOnMock -> {\n+                    Object response = invocationOnMock.getArguments()[0];\n+                    ExtendedChannelPromise channelFuture = new ExtendedChannelPromise(channel);\n+                    responseAndPromisePairs.add(ImmutablePair.of(response, channelFuture));\n+                    return channelFuture;\n+                });\n+\n+        TransportClient reverseClient = mock(TransportClient.class);\n+        TransportRequestHandler requestHandler = new TransportRequestHandler(channel, reverseClient,\n+                rpcHandler, 2L);\n+\n+        // req.body().nioByteBuffer() is the method that throws the InvalidClassException\n+        // with wrong svUID, so let's mock it\n+        ManagedBuffer body = mock(ManagedBuffer.class);\n+        when(body.nioByteBuffer()).thenThrow(new InvalidClassException(\"test - wrong version\"));\n+        RequestMessage msg = new OneWayMessage(body);\n+\n+        requestHandler.handle(msg);\n+\n+        assert responseAndPromisePairs.size() == 1;\n+        assert responseAndPromisePairs.get(0).getLeft() instanceof RpcFailure;\n+        assert (responseAndPromisePairs.get(0).getLeft().toString()\n+                .contains(\"version mismatch between client and server\"));\n+        assert (((RpcFailure)responseAndPromisePairs.get(0).getLeft()).requestId"
  }],
  "prId": 19802
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I don't think it's necessary to assert about the text because it could change",
    "commit": "4f79632d22b67128a6be8a285f4fc1fec0d5f12f",
    "createdAt": "2018-01-10T13:48:41Z",
    "diffHunk": "@@ -100,6 +101,43 @@ public void handleFetchRequestAndStreamRequest() throws Exception {\n     assert responseAndPromisePairs.size() == 3;\n   }\n \n+    @Test\n+    public void handleOneWayMessageWithWrongSerialVersionUID() throws Exception {\n+        RpcHandler rpcHandler = new NoOpRpcHandler();\n+        Channel channel = mock(Channel.class);\n+        List<Pair<Object, ExtendedChannelPromise>> responseAndPromisePairs =\n+                new ArrayList<>();\n+\n+        when(channel.writeAndFlush(any()))\n+                .thenAnswer(invocationOnMock -> {\n+                    Object response = invocationOnMock.getArguments()[0];\n+                    ExtendedChannelPromise channelFuture = new ExtendedChannelPromise(channel);\n+                    responseAndPromisePairs.add(ImmutablePair.of(response, channelFuture));\n+                    return channelFuture;\n+                });\n+\n+        TransportClient reverseClient = mock(TransportClient.class);\n+        TransportRequestHandler requestHandler = new TransportRequestHandler(channel, reverseClient,\n+                rpcHandler, 2L);\n+\n+        // req.body().nioByteBuffer() is the method that throws the InvalidClassException\n+        // with wrong svUID, so let's mock it\n+        ManagedBuffer body = mock(ManagedBuffer.class);\n+        when(body.nioByteBuffer()).thenThrow(new InvalidClassException(\"test - wrong version\"));\n+        RequestMessage msg = new OneWayMessage(body);\n+\n+        requestHandler.handle(msg);\n+\n+        assert responseAndPromisePairs.size() == 1;\n+        assert responseAndPromisePairs.get(0).getLeft() instanceof RpcFailure;\n+        assert (responseAndPromisePairs.get(0).getLeft().toString()"
  }],
  "prId": 19802
}]