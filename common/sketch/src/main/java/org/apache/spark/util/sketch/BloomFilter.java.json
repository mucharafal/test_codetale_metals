[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "how about just calling this union?\r\n",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-09T09:26:07Z",
    "diffHunk": "@@ -148,6 +153,20 @@ int getVersionNumber() {\n   public abstract boolean mightContainBinary(byte[] item);\n \n   /**\n+   * Returns a new Bloom filter of the union of two Bloom filters.\n+   * Unlike mergeInplace, this will not cause a mutation.\n+   * Callers must ensure the bloom filters are appropriately sized to avoid saturating them.\n+   *\n+   * @throws IncompatibleUnionException if either are null, different classes, or different size or number of hash functions\n+   */\n+  public abstract BloomFilterImpl createUnionBloomFilter(BloomFilter other) throws IncompatibleUnionException;"
  }],
  "prId": 16864
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "shouldn't this return a long rather than a double?\r\n",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-09T09:26:26Z",
    "diffHunk": "@@ -81,6 +81,11 @@ int getVersionNumber() {\n   public abstract long bitSize();\n \n   /**\n+   * Swamidass & Baldi (2007) approximation for number of items in a Bloom filter\n+   */\n+  public abstract double approxItems();"
  }, {
    "author": {
      "login": "Bcpoole"
    },
    "body": "I was debating this due to possible rounding errors.",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-09T19:06:29Z",
    "diffHunk": "@@ -81,6 +81,11 @@ int getVersionNumber() {\n   public abstract long bitSize();\n \n   /**\n+   * Swamidass & Baldi (2007) approximation for number of items in a Bloom filter\n+   */\n+  public abstract double approxItems();"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "yea but that would only be off by 1. I wouldn't worry about that since it is approximate anyway.\r\n",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-10T10:00:34Z",
    "diffHunk": "@@ -81,6 +81,11 @@ int getVersionNumber() {\n   public abstract long bitSize();\n \n   /**\n+   * Swamidass & Baldi (2007) approximation for number of items in a Bloom filter\n+   */\n+  public abstract double approxItems();"
  }, {
    "author": {
      "login": "mengxr"
    },
    "body": "It might be easier to keep it as double because the estimate could be out of bound if the bits are full.",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-10T16:26:13Z",
    "diffHunk": "@@ -81,6 +81,11 @@ int getVersionNumber() {\n   public abstract long bitSize();\n \n   /**\n+   * Swamidass & Baldi (2007) approximation for number of items in a Bloom filter\n+   */\n+  public abstract double approxItems();"
  }],
  "prId": 16864
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Please describe the method first and its properties (approximation error).  Then put the reference in `@seealso` with a permanent link to the paper: https://dx.doi.org/10.1021%2Fci600526a",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-10T16:25:01Z",
    "diffHunk": "@@ -81,6 +81,11 @@ int getVersionNumber() {\n   public abstract long bitSize();\n \n   /**\n+   * Swamidass & Baldi (2007) approximation for number of items in a Bloom filter",
    "line": 4
  }],
  "prId": 16864
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "* Same here. Document the method first and then mention the reference.\r\n* ~~How is it different from intersecting two bloom filters and then estimate the number of items? Union might lead to larger approximation error.~~ Okay, I got why. Please also document it.",
    "commit": "2cbf490cfc9dc216b1e52e66534193a789ab3d32",
    "createdAt": "2017-02-10T16:32:55Z",
    "diffHunk": "@@ -148,6 +153,24 @@ int getVersionNumber() {\n   public abstract boolean mightContainBinary(byte[] item);\n \n   /**\n+   * Returns a new Bloom filter of the union of two Bloom filters.\n+   * Unlike mergeInplace, this will not cause a mutation.\n+   * Callers must ensure the bloom filters are appropriately sized to avoid saturating them.\n+   *\n+   * @param other The bloom filter to union this bloom filter with.\n+   * @throws IncompatibleUnionException if {@code isCompatible(other) == false}\n+   */\n+  public abstract BloomFilterImpl union(BloomFilter other) throws IncompatibleUnionException;\n+\n+  /**\n+   * Swamidass & Baldi (2007) approximation for number of items in the intersection of two Bloom filters",
    "line": 40
  }],
  "prId": 16864
}]