[{
  "comments": [{
    "author": {
      "login": "markgrover"
    },
    "body": "I think this test the way it's written doesn't make much sense any more since registerExecutor throws an exception. Personally, I'd prefer if we stopped checked for blocks being empty, and rather assert that the correct type of exception with the correct message is being thrown.\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-21T16:29:39Z",
    "diffHunk": "@@ -186,7 +186,12 @@ public void testFetchThreeSort() throws Exception {\n \n   @Test\n   public void testFetchInvalidShuffle() throws Exception {\n-    registerExecutor(\"exec-1\", dataContext0.createExecutorInfo(\"unknown sort manager\"));\n+    try {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Yeah, this would be better as a separate test:\n\n```\n@Test(expect=TheExpectedException.class)\npublic void testInvalidShuffleManager() {\n   registerExecutor(\"exec-1\", dataContext0.createExecutorInfo(\"unknown sort manager\"));\n}\n```\n\n(Not sure about the names of the arguments, but it's something like that.)\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-21T17:35:01Z",
    "diffHunk": "@@ -186,7 +186,12 @@ public void testFetchThreeSort() throws Exception {\n \n   @Test\n   public void testFetchInvalidShuffle() throws Exception {\n-    registerExecutor(\"exec-1\", dataContext0.createExecutorInfo(\"unknown sort manager\"));\n+    try {"
  }],
  "prId": 12568
}, {
  "comments": [{
    "author": {
      "login": "markgrover"
    },
    "body": "nit: trailing whitespace\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-21T16:29:47Z",
    "diffHunk": "@@ -186,7 +186,12 @@ public void testFetchThreeSort() throws Exception {\n \n   @Test\n   public void testFetchInvalidShuffle() throws Exception {\n-    registerExecutor(\"exec-1\", dataContext0.createExecutorInfo(\"unknown sort manager\"));\n+    try {\n+      registerExecutor(\"exec-1\", dataContext0.createExecutorInfo(\"unknown sort manager\"));\n+      fail(\"unknown sort manager \");"
  }],
  "prId": 12568
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: private final\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-21T17:33:05Z",
    "diffHunk": "@@ -49,7 +49,7 @@\n public class ExternalShuffleIntegrationSuite {\n \n   static String APP_ID = \"app-id\";\n-  static String SORT_MANAGER = \"sort\";\n+  static String SORT_MANAGER = \"org.apache.spark.shuffle.sort.SortShuffleManager\";"
  }],
  "prId": 12568
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "nit: this can still remain static (same for the constant in the other test).\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-22T17:43:41Z",
    "diffHunk": "@@ -49,7 +49,7 @@\n public class ExternalShuffleIntegrationSuite {\n \n   static String APP_ID = \"app-id\";\n-  static String SORT_MANAGER = \"sort\";\n+  private final String SORT_MANAGER = \"org.apache.spark.shuffle.sort.SortShuffleManager\";"
  }],
  "prId": 12568
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Does the test just throw a generic RuntimeException? Or could you expect `UnsupportedOperationException` here?\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-22T17:44:39Z",
    "diffHunk": "@@ -184,12 +184,9 @@ public void testFetchThreeSort() throws Exception {\n     exec0Fetch.releaseBuffers();\n   }\n \n-  @Test\n-  public void testFetchInvalidShuffle() throws Exception {\n+  @Test (expected = RuntimeException.class)",
    "line": 17
  }, {
    "author": {
      "login": "lianhuiwang"
    },
    "body": "It will throw a generic RunTimeException.\n",
    "commit": "ca46f4cbc564dd605e223c529bb5380127f1ca88",
    "createdAt": "2016-04-23T02:41:35Z",
    "diffHunk": "@@ -184,12 +184,9 @@ public void testFetchThreeSort() throws Exception {\n     exec0Fetch.releaseBuffers();\n   }\n \n-  @Test\n-  public void testFetchInvalidShuffle() throws Exception {\n+  @Test (expected = RuntimeException.class)",
    "line": 17
  }],
  "prId": 12568
}]