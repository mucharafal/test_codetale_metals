[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why do we compare 2 ints with `Objects.equal`?",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-07-04T08:25:26Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle.protocol;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+// Needed by ScalaDoc. See SPARK-7726\n+import static org.apache.spark.network.shuffle.protocol.BlockTransferMessage.Type;\n+\n+/** The reply to remove blocks giving back the number of removed blocks. */\n+public class BlocksRemoved extends BlockTransferMessage {\n+  public final int numRemovedBlocks;\n+\n+  public BlocksRemoved(int numRemovedBlocks) {\n+    this.numRemovedBlocks = numRemovedBlocks;\n+  }\n+\n+  @Override\n+  protected Type type() { return Type.BLOCKS_REMOVED; }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(numRemovedBlocks);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Objects.toStringHelper(this)\n+      .add(\"numRemovedBlocks\", numRemovedBlocks)\n+      .toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other != null && other instanceof BlocksRemoved) {\n+      BlocksRemoved o = (BlocksRemoved) other;\n+      return Objects.equal(numRemovedBlocks, o.numRemovedBlocks);",
    "line": 53
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "IDEs are usually good at generating `equals` and `hashCode` for java classes, maybe we can use the generated version.",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-07-04T08:26:54Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle.protocol;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+// Needed by ScalaDoc. See SPARK-7726\n+import static org.apache.spark.network.shuffle.protocol.BlockTransferMessage.Type;\n+\n+/** The reply to remove blocks giving back the number of removed blocks. */\n+public class BlocksRemoved extends BlockTransferMessage {\n+  public final int numRemovedBlocks;\n+\n+  public BlocksRemoved(int numRemovedBlocks) {\n+    this.numRemovedBlocks = numRemovedBlocks;\n+  }\n+\n+  @Override\n+  protected Type type() { return Type.BLOCKS_REMOVED; }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(numRemovedBlocks);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Objects.toStringHelper(this)\n+      .add(\"numRemovedBlocks\", numRemovedBlocks)\n+      .toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other != null && other instanceof BlocksRemoved) {\n+      BlocksRemoved o = (BlocksRemoved) other;\n+      return Objects.equal(numRemovedBlocks, o.numRemovedBlocks);",
    "line": 53
  }, {
    "author": {
      "login": "attilapiros"
    },
    "body": "You are right (I followed the pattern used within the same package like in ExecutorShuffleInfo).\r\nI can open a minor PR with fixing these two or I can add it this tiny change into my next PR which might be opened next week or the week after. It is about avoiding the network at fetching shuffle blocks from the block manager running on the same host, so it is just loosely related.\r\n\r\nWhich one is preferred by you?",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-07-04T16:24:49Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle.protocol;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+// Needed by ScalaDoc. See SPARK-7726\n+import static org.apache.spark.network.shuffle.protocol.BlockTransferMessage.Type;\n+\n+/** The reply to remove blocks giving back the number of removed blocks. */\n+public class BlocksRemoved extends BlockTransferMessage {\n+  public final int numRemovedBlocks;\n+\n+  public BlocksRemoved(int numRemovedBlocks) {\n+    this.numRemovedBlocks = numRemovedBlocks;\n+  }\n+\n+  @Override\n+  protected Type type() { return Type.BLOCKS_REMOVED; }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(numRemovedBlocks);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Objects.toStringHelper(this)\n+      .add(\"numRemovedBlocks\", numRemovedBlocks)\n+      .toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other != null && other instanceof BlocksRemoved) {\n+      BlocksRemoved o = (BlocksRemoved) other;\n+      return Objects.equal(numRemovedBlocks, o.numRemovedBlocks);",
    "line": 53
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "both are fine, this is really trivial",
    "commit": "faa583f88b410fc7ededafe36bcb1ef878482d44",
    "createdAt": "2019-07-05T00:55:41Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle.protocol;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+// Needed by ScalaDoc. See SPARK-7726\n+import static org.apache.spark.network.shuffle.protocol.BlockTransferMessage.Type;\n+\n+/** The reply to remove blocks giving back the number of removed blocks. */\n+public class BlocksRemoved extends BlockTransferMessage {\n+  public final int numRemovedBlocks;\n+\n+  public BlocksRemoved(int numRemovedBlocks) {\n+    this.numRemovedBlocks = numRemovedBlocks;\n+  }\n+\n+  @Override\n+  protected Type type() { return Type.BLOCKS_REMOVED; }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(numRemovedBlocks);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Objects.toStringHelper(this)\n+      .add(\"numRemovedBlocks\", numRemovedBlocks)\n+      .toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other != null && other instanceof BlocksRemoved) {\n+      BlocksRemoved o = (BlocksRemoved) other;\n+      return Objects.equal(numRemovedBlocks, o.numRemovedBlocks);",
    "line": 53
  }],
  "prId": 24499
}]