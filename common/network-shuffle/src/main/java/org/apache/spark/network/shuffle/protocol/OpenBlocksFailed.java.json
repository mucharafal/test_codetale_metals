[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `this.reason == o.reason`?",
    "commit": "3a018b14ce4c5bbb894df8a85ce3ec0586f276fb",
    "createdAt": "2017-06-29T05:54:23Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.network.shuffle.protocol;\n+\n+import com.google.common.base.Objects;\n+import io.netty.buffer.ByteBuf;\n+\n+// Needed by ScalaDoc. See SPARK-7726\n+import static org.apache.spark.network.shuffle.protocol.BlockTransferMessage.Type;\n+\n+/**\n+ * This message is responded from shuffle service when client failed to \"open blocks\" due to\n+ * some reason(e.g. the shuffle service is suffering from high memory cost).\n+ */\n+public class OpenBlocksFailed extends BlockTransferMessage {\n+\n+  public final int reason;\n+\n+  public OpenBlocksFailed(int reason) {\n+    this.reason = reason;\n+  }\n+\n+  @Override\n+  protected Type type() { return Type.OPEN_BLOCKS_FAILED; }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(reason);\n+  }\n+\n+  public String toString() {\n+    String reasonStr = null;\n+    switch (reason) {\n+      case 1:\n+        reasonStr = \"shuffle service is suffering high memory cost\";\n+        break;\n+      default:\n+        reasonStr = \"unknown\";\n+        break;\n+    }\n+    return Objects.toStringHelper(this)\n+      .add(\"reason\", reasonStr)\n+      .toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other != null && other instanceof OpenBlocksFailed) {\n+      OpenBlocksFailed o = (OpenBlocksFailed) other;\n+      return Objects.equal(reason, o.reason);"
  }],
  "prId": 18388
}]