[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "More nits, would put blank lines around this",
    "commit": "38dd9d89d32a55f8ad77ed0acca1f45cb0671aea",
    "createdAt": "2018-09-12T19:06:24Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.shuffle;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+\n+/**\n+ * A DownloadFile that does not take any encryption settings into account for reading and\n+ * writing data.\n+ *\n+ * This does *not* mean the data in the file is un-encrypted -- it could be that the data is\n+ * already encrypted when its written, and subsequent layer is responsible for decrypting.\n+ */\n+public class SimpleDownloadFile implements DownloadFile {\n+  private final File file;\n+  private final TransportConf transportConf;\n+\n+  public SimpleDownloadFile(File file, TransportConf transportConf) {\n+    this.file = file;\n+    this.transportConf = transportConf;\n+  }\n+\n+  @Override\n+  public boolean delete() {\n+    return file.delete();\n+  }\n+\n+  @Override\n+  public DownloadFileWritableChannel openForWriting() {\n+    try {\n+      return new SimpleDownloadWritableChannel();\n+    } catch (FileNotFoundException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Override\n+  public String path() {\n+    return file.getAbsolutePath();\n+  }\n+\n+  private class SimpleDownloadWritableChannel implements DownloadFileWritableChannel {\n+    private final WritableByteChannel channel;"
  }],
  "prId": 22404
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Usually we unroll star imports, but not a big deal",
    "commit": "38dd9d89d32a55f8ad77ed0acca1f45cb0671aea",
    "createdAt": "2018-09-12T19:06:41Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.shuffle;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+import java.io.*;"
  }],
  "prId": 22404
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Is it bad to just let the method declare that it throws IOException for FileNotFoundException? I know they're checked, but it's more precise",
    "commit": "38dd9d89d32a55f8ad77ed0acca1f45cb0671aea",
    "createdAt": "2018-09-12T19:07:09Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.network.shuffle;\n+\n+import org.apache.spark.network.buffer.FileSegmentManagedBuffer;\n+import org.apache.spark.network.buffer.ManagedBuffer;\n+import org.apache.spark.network.util.TransportConf;\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+\n+/**\n+ * A DownloadFile that does not take any encryption settings into account for reading and\n+ * writing data.\n+ *\n+ * This does *not* mean the data in the file is un-encrypted -- it could be that the data is\n+ * already encrypted when its written, and subsequent layer is responsible for decrypting.\n+ */\n+public class SimpleDownloadFile implements DownloadFile {\n+  private final File file;\n+  private final TransportConf transportConf;\n+\n+  public SimpleDownloadFile(File file, TransportConf transportConf) {\n+    this.file = file;\n+    this.transportConf = transportConf;\n+  }\n+\n+  @Override\n+  public boolean delete() {\n+    return file.delete();\n+  }\n+\n+  @Override\n+  public DownloadFileWritableChannel openForWriting() {\n+    try {\n+      return new SimpleDownloadWritableChannel();\n+    } catch (FileNotFoundException e) {\n+      throw new RuntimeException(e);"
  }],
  "prId": 22404
}]