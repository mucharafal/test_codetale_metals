[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we should avoid creating the 0-size array again and again.",
    "commit": "92c0ab616c202dd0847f703e3c5afb4a2e196a92",
    "createdAt": "2019-01-14T07:00:00Z",
    "diffHunk": "@@ -57,25 +67,31 @@ public boolean equals(Object other) {\n     if (other != null && other instanceof StreamHandle) {\n       StreamHandle o = (StreamHandle) other;\n       return Objects.equal(streamId, o.streamId)\n-        && Objects.equal(numChunks, o.numChunks);\n+        && Objects.equal(numChunks, o.numChunks)\n+        && Arrays.equals(chunkSizes, o.chunkSizes);\n     }\n     return false;\n   }\n \n   @Override\n   public int encodedLength() {\n-    return 8 + 4;\n+    return 8 + 4 + Encoders.IntArrays.encodedLength(chunkSizes);\n   }\n \n   @Override\n   public void encode(ByteBuf buf) {\n     buf.writeLong(streamId);\n     buf.writeInt(numChunks);\n+    Encoders.IntArrays.encode(buf, chunkSizes);\n   }\n \n   public static StreamHandle decode(ByteBuf buf) {\n     long streamId = buf.readLong();\n     int numChunks = buf.readInt();\n-    return new StreamHandle(streamId, numChunks);\n+    int[] chunkSizes = new int[0];"
  }, {
    "author": {
      "login": "yucai"
    },
    "body": "Got it, many place in this PR has this issue, I will fix them.",
    "commit": "92c0ab616c202dd0847f703e3c5afb4a2e196a92",
    "createdAt": "2019-01-14T07:05:30Z",
    "diffHunk": "@@ -57,25 +67,31 @@ public boolean equals(Object other) {\n     if (other != null && other instanceof StreamHandle) {\n       StreamHandle o = (StreamHandle) other;\n       return Objects.equal(streamId, o.streamId)\n-        && Objects.equal(numChunks, o.numChunks);\n+        && Objects.equal(numChunks, o.numChunks)\n+        && Arrays.equals(chunkSizes, o.chunkSizes);\n     }\n     return false;\n   }\n \n   @Override\n   public int encodedLength() {\n-    return 8 + 4;\n+    return 8 + 4 + Encoders.IntArrays.encodedLength(chunkSizes);\n   }\n \n   @Override\n   public void encode(ByteBuf buf) {\n     buf.writeLong(streamId);\n     buf.writeInt(numChunks);\n+    Encoders.IntArrays.encode(buf, chunkSizes);\n   }\n \n   public static StreamHandle decode(ByteBuf buf) {\n     long streamId = buf.readLong();\n     int numChunks = buf.readInt();\n-    return new StreamHandle(streamId, numChunks);\n+    int[] chunkSizes = new int[0];"
  }],
  "prId": 19788
}]