[{
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "Just want to let you know that SPARK-28867 may also want to dump KVStore to HDFS-support filesystem.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-20T15:14:03Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Nice catch! Thanks for pointing out. \r\n\r\nMaybe we need to have InputStream/OutputStream (or more specific types) as a parameter instead of File so that it can be worked with any filesystem. kvstore module doesn't have Hadoop dependency so it would be ideal to avoid depending on Hadoop directly.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-20T19:32:30Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "Well, `InputStream/OutputStream` could work around this case. But I'm afraid it brings troublesome usage for the caller, as they needs to prepare their own streams(local or HDFS, in or out). And I believe, currently, KVStore is only designed to persist in filesystems and underlying streams should always be file streams. So, exposing InputStream/OutputStream seems an overkill here.\r\n\r\nI'd prefer to use HDFS API to support dump to both local and HDFS-supported filesystem and caller could only pass in a `Path` to indicate where they want to dump (just as previous `File` does). And since we're introducing a **dump** feature here, so I think it would be OK to depend on Hadoop directly now. If we don't depend on Hadoop here, we'll still depend it elsewhere.\r\n\r\nWDYT ? @HeartSaVioR",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-21T15:47:47Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "> Well, InputStream/OutputStream could work around this case. But I'm afraid it brings troublesome usage for the caller, as they needs to prepare their own streams(local or HDFS, in or out). And I believe, currently, KVStore is only designed to persist in filesystems and underlying streams should always be file streams. So, exposing InputStream/OutputStream seems an overkill here.\r\n\r\nSorry I totally disagree this is an workaround - especially the parameter here depending on is pure Java API, which any Java developers must know and familiar with how to deal with.\r\n\r\nhttps://github.com/apache/spark/blob/c7c6b642dccb3fbd5f82b81cff7f88a776976c7d/core/src/main/scala/org/apache/spark/scheduler/ReplayListenerBus.scala#L52-L59\r\n\r\nJust look at ReplayListenerBus. What exactly it requires caller to prepare? InputStream. Does it use something other than file except some case of UT? Well, no. That's consideration on API level to open extension.\r\n\r\nI'll leave the decision to the committers.\r\n\r\nEven if we turn out to agree directly depend on Hadoop, I would just move this to core module and rewrite this as Scala. Writing this to Java was the intentional effort to put this along with other classes in common/kvstore, and I don't think modules in common depend on hadoop - except network-yarn which even define Hadoop dependency as provided. common modules are trying to avoid depending on Hadoop.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-21T22:40:30Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }, {
    "author": {
      "login": "Ngone51"
    },
    "body": "That's fine. If we want to follow `ReplayListenerBus` ' s way, I think it would be better if  we could provides read/write helper method later, which just return inputStream/outputStream, similar as `EventLoggingListener.openEventLog()` do.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-22T03:56:03Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "> If we want to follow ReplayListenerBus ' s way, I think it would be better if we could provides read/write helper method later, which just return inputStream/outputStream, similar as EventLoggingListener.openEventLog() do.\r\n\r\nThat's a good idea. As the PR intends to touch only common-kvstore module, we would be better to deal with this in next PR (FOLLOWUP or include in next work).",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-23T07:51:28Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {"
  }],
  "prId": 25811
}, {
  "comments": [{
    "author": {
      "login": "Ngone51"
    },
    "body": "I'm wondering will there be a type with empty objects in the KVStore. Normally, it seems impossible.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-20T15:17:20Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {\n+    DataOutputStream output = new DataOutputStream(new FileOutputStream(snapshotFile));\n+\n+    // store metadata if it exists\n+    Class<?> metadataType = store.metadataType();\n+    if (metadataType != null) {\n+      writeClassName(metadataType, output);\n+      Object metadata = store.getMetadata(metadataType);\n+      writeObject(metadata, output);\n+      writeEndOfType(output);\n+    } else {\n+      writeEndOfType(output);\n+    }\n+\n+    Set<Class<?>> types = store.types();\n+    for (Class<?> clazz : types) {\n+      writeClassName(clazz, output);\n+\n+      KVStoreView<?> view = store.view(clazz);",
    "line": 58
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'm not sure any implementations allow type with empty objects.\r\n\r\nI see what you say - if there's some implementation allow the case like types() returning Class<A> but view(A.class) contains nothing, we don't provide the way to only add type to KVStore. We may want to be clear in the interface javadoc that \"type with empty objects are ignored while recovering, so implementations should not rely on this\", as thinking theoretically, but I'm afraid I might be over-thinking.",
    "commit": "b6e65f84eaba813217bbae1264d3560da7c677e9",
    "createdAt": "2019-09-20T19:56:57Z",
    "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Set;\n+\n+public class KVStoreSnapshotter {\n+  private static final int MARKER_END_OF_TYPE = -2;\n+  private static final int MARKER_END_OF_FILE = -1;\n+\n+  private final KVStoreSerializer serializer;\n+\n+  public KVStoreSnapshotter(KVStoreSerializer serializer) {\n+    this.serializer = serializer;\n+  }\n+\n+  public void dump(KVStore store, File snapshotFile) throws Exception {\n+    DataOutputStream output = new DataOutputStream(new FileOutputStream(snapshotFile));\n+\n+    // store metadata if it exists\n+    Class<?> metadataType = store.metadataType();\n+    if (metadataType != null) {\n+      writeClassName(metadataType, output);\n+      Object metadata = store.getMetadata(metadataType);\n+      writeObject(metadata, output);\n+      writeEndOfType(output);\n+    } else {\n+      writeEndOfType(output);\n+    }\n+\n+    Set<Class<?>> types = store.types();\n+    for (Class<?> clazz : types) {\n+      writeClassName(clazz, output);\n+\n+      KVStoreView<?> view = store.view(clazz);",
    "line": 58
  }],
  "prId": 25811
}]