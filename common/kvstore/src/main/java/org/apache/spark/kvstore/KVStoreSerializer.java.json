[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "this only handles top-level string right? How about string field in a class?",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-21T07:32:13Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Serializer used to translate between app-defined types and the LevelDB store.\n+ *\n+ * <p>\n+ * The serializer is based on Jackson, so values are written as JSON. It also allows \"naked strings\"\n+ * and integers to be written as values directly, which will be written as UTF-8 strings.\n+ * </p>\n+ */\n+public class KVStoreSerializer {\n+\n+  /**\n+   * Object mapper used to process app-specific types. If an application requires a specific\n+   * configuration of the mapper, it can subclass this serializer and add custom configuration\n+   * to this object.\n+   */\n+  protected final ObjectMapper mapper;\n+\n+  public KVStoreSerializer() {\n+    this.mapper = new ObjectMapper();\n+  }\n+\n+  public final byte[] serialize(Object o) throws Exception {\n+    if (o instanceof String) {",
    "line": 50
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Classes are handled by Jackson (the \"else\").",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-21T16:19:01Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Serializer used to translate between app-defined types and the LevelDB store.\n+ *\n+ * <p>\n+ * The serializer is based on Jackson, so values are written as JSON. It also allows \"naked strings\"\n+ * and integers to be written as values directly, which will be written as UTF-8 strings.\n+ * </p>\n+ */\n+public class KVStoreSerializer {\n+\n+  /**\n+   * Object mapper used to process app-specific types. If an application requires a specific\n+   * configuration of the mapper, it can subclass this serializer and add custom configuration\n+   * to this object.\n+   */\n+  protected final ObjectMapper mapper;\n+\n+  public KVStoreSerializer() {\n+    this.mapper = new ObjectMapper();\n+  }\n+\n+  public final byte[] serialize(Object o) throws Exception {\n+    if (o instanceof String) {",
    "line": 50
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "yea, but then we don't have the efficient UTF8 encoding, isn't it?",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-25T13:36:09Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Serializer used to translate between app-defined types and the LevelDB store.\n+ *\n+ * <p>\n+ * The serializer is based on Jackson, so values are written as JSON. It also allows \"naked strings\"\n+ * and integers to be written as values directly, which will be written as UTF-8 strings.\n+ * </p>\n+ */\n+public class KVStoreSerializer {\n+\n+  /**\n+   * Object mapper used to process app-specific types. If an application requires a specific\n+   * configuration of the mapper, it can subclass this serializer and add custom configuration\n+   * to this object.\n+   */\n+  protected final ObjectMapper mapper;\n+\n+  public KVStoreSerializer() {\n+    this.mapper = new ObjectMapper();\n+  }\n+\n+  public final byte[] serialize(Object o) throws Exception {\n+    if (o instanceof String) {",
    "line": 50
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Why does that matter? Objects are written as JSON, it's not like the goal there is efficiency.",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-25T16:26:39Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Serializer used to translate between app-defined types and the LevelDB store.\n+ *\n+ * <p>\n+ * The serializer is based on Jackson, so values are written as JSON. It also allows \"naked strings\"\n+ * and integers to be written as values directly, which will be written as UTF-8 strings.\n+ * </p>\n+ */\n+public class KVStoreSerializer {\n+\n+  /**\n+   * Object mapper used to process app-specific types. If an application requires a specific\n+   * configuration of the mapper, it can subclass this serializer and add custom configuration\n+   * to this object.\n+   */\n+  protected final ObjectMapper mapper;\n+\n+  public KVStoreSerializer() {\n+    this.mapper = new ObjectMapper();\n+  }\n+\n+  public final byte[] serialize(Object o) throws Exception {\n+    if (o instanceof String) {",
    "line": 50
  }],
  "prId": 17902
}]