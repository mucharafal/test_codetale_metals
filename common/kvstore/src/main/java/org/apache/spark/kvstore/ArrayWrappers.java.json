[{
  "comments": [{
    "author": {
      "login": "tejasapatil"
    },
    "body": "> meant to compare really small arrays\r\n\r\ncan you quantify how much \"small\" are we talking about here ?",
    "commit": "cb96ac16f17c2abc788c2e3ba7ccf3acb22ea785",
    "createdAt": "2017-06-07T05:07:00Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.util.Arrays;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A factory for array wrappers so that arrays can be used as a key in a map, sorted or not.\n+ *\n+ * The comparator implementation makes two assumptions:\n+ * - All elements are instances of Comparable\n+ * - When comparing two arrays, they both contain elements of the same type in corresponding\n+ *   indices.\n+ *\n+ * Otherwise, ClassCastExceptions may occur. The equality method can compare any two arrays.\n+ *\n+ * This class is not efficient and is mostly meant to compare really small arrays, like those",
    "line": 35
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "I think the largest array used by the listeners that capture app data is 3 elements.",
    "commit": "cb96ac16f17c2abc788c2e3ba7ccf3acb22ea785",
    "createdAt": "2017-06-07T16:32:31Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.util.Arrays;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A factory for array wrappers so that arrays can be used as a key in a map, sorted or not.\n+ *\n+ * The comparator implementation makes two assumptions:\n+ * - All elements are instances of Comparable\n+ * - When comparing two arrays, they both contain elements of the same type in corresponding\n+ *   indices.\n+ *\n+ * Otherwise, ClassCastExceptions may occur. The equality method can compare any two arrays.\n+ *\n+ * This class is not efficient and is mostly meant to compare really small arrays, like those",
    "line": 35
  }],
  "prId": 18221
}, {
  "comments": [{
    "author": {
      "login": "tejasapatil"
    },
    "body": "For input array with same data but different ordering, this will produce the same hash. Honestly I am not able to see how this will fit in the bigger picture so not sure if that will happen. Would recommend doing `code = (code * 31) + array[i];`",
    "commit": "cb96ac16f17c2abc788c2e3ba7ccf3acb22ea785",
    "createdAt": "2017-06-07T05:53:29Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.util.Arrays;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A factory for array wrappers so that arrays can be used as a key in a map, sorted or not.\n+ *\n+ * The comparator implementation makes two assumptions:\n+ * - All elements are instances of Comparable\n+ * - When comparing two arrays, they both contain elements of the same type in corresponding\n+ *   indices.\n+ *\n+ * Otherwise, ClassCastExceptions may occur. The equality method can compare any two arrays.\n+ *\n+ * This class is not efficient and is mostly meant to compare really small arrays, like those\n+ * generally used as indices and keys in a KVStore.\n+ */\n+class ArrayWrappers {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static Comparable<Object> forArray(Object a) {\n+    Preconditions.checkArgument(a.getClass().isArray());\n+    Comparable<?> ret;\n+    if (a instanceof int[]) {\n+      ret = new ComparableIntArray((int[]) a);\n+    } else if (a instanceof long[]) {\n+      ret = new ComparableLongArray((long[]) a);\n+    } else if (a instanceof byte[]) {\n+      ret = new ComparableByteArray((byte[]) a);\n+    } else {\n+      Preconditions.checkArgument(!a.getClass().getComponentType().isPrimitive());\n+      ret = new ComparableObjectArray((Object[]) a);\n+    }\n+    return (Comparable<Object>) ret;\n+  }\n+\n+  private static class ComparableIntArray implements Comparable<ComparableIntArray> {\n+\n+    private final int[] array;\n+\n+    ComparableIntArray(int[] array) {\n+      this.array = array;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+      if (!(other instanceof ComparableIntArray)) {\n+        return false;\n+      }\n+      return Arrays.equals(array, ((ComparableIntArray) other).array);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int code = 0;\n+      for (int i = 0; i < array.length; i++) {\n+        code += array[i];"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "Sure, that's easy enough.",
    "commit": "cb96ac16f17c2abc788c2e3ba7ccf3acb22ea785",
    "createdAt": "2017-06-07T16:32:42Z",
    "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.util.Arrays;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A factory for array wrappers so that arrays can be used as a key in a map, sorted or not.\n+ *\n+ * The comparator implementation makes two assumptions:\n+ * - All elements are instances of Comparable\n+ * - When comparing two arrays, they both contain elements of the same type in corresponding\n+ *   indices.\n+ *\n+ * Otherwise, ClassCastExceptions may occur. The equality method can compare any two arrays.\n+ *\n+ * This class is not efficient and is mostly meant to compare really small arrays, like those\n+ * generally used as indices and keys in a KVStore.\n+ */\n+class ArrayWrappers {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static Comparable<Object> forArray(Object a) {\n+    Preconditions.checkArgument(a.getClass().isArray());\n+    Comparable<?> ret;\n+    if (a instanceof int[]) {\n+      ret = new ComparableIntArray((int[]) a);\n+    } else if (a instanceof long[]) {\n+      ret = new ComparableLongArray((long[]) a);\n+    } else if (a instanceof byte[]) {\n+      ret = new ComparableByteArray((byte[]) a);\n+    } else {\n+      Preconditions.checkArgument(!a.getClass().getComponentType().isPrimitive());\n+      ret = new ComparableObjectArray((Object[]) a);\n+    }\n+    return (Comparable<Object>) ret;\n+  }\n+\n+  private static class ComparableIntArray implements Comparable<ComparableIntArray> {\n+\n+    private final int[] array;\n+\n+    ComparableIntArray(int[] array) {\n+      this.array = array;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+      if (!(other instanceof ComparableIntArray)) {\n+        return false;\n+      }\n+      return Arrays.equals(array, ((ComparableIntArray) other).array);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int code = 0;\n+      for (int i = 0; i < array.length; i++) {\n+        code += array[i];"
  }],
  "prId": 18221
}]