[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "The problem here is you aren't just skipping n elements that match the predicate. Do you need this wrapper? it's not going to save looking at every element.",
    "commit": "dac3fe3ba6bd8ee270f92109333279d6510a6c43",
    "createdAt": "2019-06-28T12:59:59Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.function.Predicate;\n+\n+class LevelDBFilterIterator<T> implements KVStoreIterator<T>  {\n+\n+  /** The LevelDBIterator being used */\n+  private final LevelDBIterator<T> iterator;\n+  private final Predicate<? super T> predicate;\n+\n+  /** The next object in the iteration */\n+  private T nextObject;\n+  /** Whether the next object has been calculated yet */\n+  private boolean nextObjectSet = false;\n+\n+  LevelDBFilterIterator(LevelDBIterator<T> iterator, Predicate<T> predicate) {\n+    this.iterator = iterator;\n+    this.predicate = predicate;\n+  }\n+\n+  /**\n+   * Returns true if the underlying iterator contains an object that\n+   * matches the predicate.\n+   */\n+  @Override\n+  public boolean hasNext() {\n+    return nextObjectSet || setNextObject();\n+  }\n+\n+  /**\n+   * Returns the next object that matches the predicate.\n+   */\n+  @Override\n+  public T next() {\n+    if (!nextObjectSet && !setNextObject()) {\n+      throw new NoSuchElementException();\n+    }\n+    nextObjectSet = false;\n+    return nextObject;\n+  }\n+\n+  @Override\n+  public List<T> next(int max) {\n+    List<T> list = new ArrayList<>(max);\n+    while (hasNext() && list.size() < max) {\n+      list.add(next());\n+    }\n+    return list;\n+  }\n+\n+  @Override\n+  public boolean skip(long n) {\n+    return iterator.skip(n);",
    "line": 74
  }, {
    "author": {
      "login": "LantaoJin"
    },
    "body": "> But, nit, I think you need to return a new iterator each time in the lambda here, not return `base` every time, technically.\r\n\r\nI thought that is what you mean. Return a new iterator. \r\n",
    "commit": "dac3fe3ba6bd8ee270f92109333279d6510a6c43",
    "createdAt": "2019-06-28T15:41:48Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.kvstore;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.function.Predicate;\n+\n+class LevelDBFilterIterator<T> implements KVStoreIterator<T>  {\n+\n+  /** The LevelDBIterator being used */\n+  private final LevelDBIterator<T> iterator;\n+  private final Predicate<? super T> predicate;\n+\n+  /** The next object in the iteration */\n+  private T nextObject;\n+  /** Whether the next object has been calculated yet */\n+  private boolean nextObjectSet = false;\n+\n+  LevelDBFilterIterator(LevelDBIterator<T> iterator, Predicate<T> predicate) {\n+    this.iterator = iterator;\n+    this.predicate = predicate;\n+  }\n+\n+  /**\n+   * Returns true if the underlying iterator contains an object that\n+   * matches the predicate.\n+   */\n+  @Override\n+  public boolean hasNext() {\n+    return nextObjectSet || setNextObject();\n+  }\n+\n+  /**\n+   * Returns the next object that matches the predicate.\n+   */\n+  @Override\n+  public T next() {\n+    if (!nextObjectSet && !setNextObject()) {\n+      throw new NoSuchElementException();\n+    }\n+    nextObjectSet = false;\n+    return nextObject;\n+  }\n+\n+  @Override\n+  public List<T> next(int max) {\n+    List<T> list = new ArrayList<>(max);\n+    while (hasNext() && list.size() < max) {\n+      list.add(next());\n+    }\n+    return list;\n+  }\n+\n+  @Override\n+  public boolean skip(long n) {\n+    return iterator.skip(n);",
    "line": 74
  }],
  "prId": 24982
}]