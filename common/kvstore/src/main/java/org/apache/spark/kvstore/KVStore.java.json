[{
  "comments": [{
    "author": {
      "login": "squito"
    },
    "body": "add that key cannot be null, and if the key does not exist, you throw a NoSuchElementException (otherwise I might think you'd return null)",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-05-31T16:47:35Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.Closeable;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * Abstraction for a local key/value store for storing app data.\n+ *\n+ * <p>\n+ * There are two main features provided by the implementations of this interface:\n+ * </p>\n+ *\n+ * <h3>Serialization</h3>\n+ *\n+ * <p>\n+ * Data will be serialized to and deserialized from the underlying data store using a\n+ * {@link KVStoreSerializer}, which can be customized by the application. The serializer is\n+ * based on Jackson, so it supports all the Jackson annotations for controlling the serialization\n+ * of app-defined types.\n+ * </p>\n+ *\n+ * <p>\n+ * Data is also automatically compressed to save disk space.\n+ * </p>\n+ *\n+ * <h3>Automatic Key Management</h3>\n+ *\n+ * <p>\n+ * When using the built-in key management, the implementation will automatically create unique\n+ * keys for each type written to the store. Keys are based on the type name, and always start\n+ * with the \"+\" prefix character (so that it's easy to use both manual and automatic key\n+ * management APIs without conflicts).\n+ * </p>\n+ *\n+ * <p>\n+ * Another feature of automatic key management is indexing; by annotating fields or methods of\n+ * objects written to the store with {@link KVIndex}, indices are created to sort the data\n+ * by the values of those properties. This makes it possible to provide sorting without having\n+ * to load all instances of those types from the store.\n+ * </p>\n+ *\n+ * <p>\n+ * KVStore instances are thread-safe for both reads and writes.\n+ * </p>\n+ */\n+public interface KVStore extends Closeable {\n+\n+  /**\n+   * Returns app-specific metadata from the store, or null if it's not currently set.\n+   *\n+   * <p>\n+   * The metadata type is application-specific. This is a convenience method so that applications\n+   * don't need to define their own keys for this information.\n+   * </p>\n+   */\n+  <T> T getMetadata(Class<T> klass) throws Exception;\n+\n+  /**\n+   * Writes the given value in the store metadata key.\n+   */\n+  void setMetadata(Object value) throws Exception;\n+\n+  /**\n+   * Read a specific instance of an object.\n+   */\n+  <T> T read(Class<T> klass, Object naturalKey) throws Exception;"
  }],
  "prId": 17902
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "it will be better to have some examples, as I get confused here. What does `Automatic` mean? I thought users have to provide a natural index.",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-26T14:46:54Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.Closeable;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstraction for a local key/value store for storing app data.\n+ *\n+ * <p>\n+ * There are two main features provided by the implementations of this interface:\n+ * </p>\n+ *\n+ * <h3>Serialization</h3>\n+ *\n+ * <p>\n+ * If the underlying data store requires serialization, data will be serialized to and deserialized\n+ * using a {@link KVStoreSerializer}, which can be customized by the application. The serializer is\n+ * based on Jackson, so it supports all the Jackson annotations for controlling the serialization of\n+ * app-defined types.\n+ * </p>\n+ *\n+ * <p>\n+ * Data is also automatically compressed to save disk space.\n+ * </p>\n+ *\n+ * <h3>Automatic Key Management</h3>",
    "line": 45
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "First, you do realize this PR has been merged a long time ago, right?\r\n\r\nAutomatic means you don't have to manually create keys. You're writing objects to the store, not calling something like `.put(key, object)`.",
    "commit": "53d7d57196317ef406875f73d6e806f3b7956ee7",
    "createdAt": "2017-09-26T17:01:26Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.kvstore;\n+\n+import java.io.Closeable;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstraction for a local key/value store for storing app data.\n+ *\n+ * <p>\n+ * There are two main features provided by the implementations of this interface:\n+ * </p>\n+ *\n+ * <h3>Serialization</h3>\n+ *\n+ * <p>\n+ * If the underlying data store requires serialization, data will be serialized to and deserialized\n+ * using a {@link KVStoreSerializer}, which can be customized by the application. The serializer is\n+ * based on Jackson, so it supports all the Jackson annotations for controlling the serialization of\n+ * app-defined types.\n+ * </p>\n+ *\n+ * <p>\n+ * Data is also automatically compressed to save disk space.\n+ * </p>\n+ *\n+ * <h3>Automatic Key Management</h3>",
    "line": 45
  }],
  "prId": 17902
}]