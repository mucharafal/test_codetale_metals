[{
  "comments": [{
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "@juliuszsompolski \r\nSince server end didn't pass detail construct of these Type.\r\nAnd we have discussed before that hive jdbc treat it as string and CLIServiceClient also. \r\nSo we won't get the detail of these complex construct.  And just get a string\r\nThe same as jdbc and origin CLIServiceClient, here and return default DataType of these complex construct \r\nand let client just know it's a `Array/Map/Struct`. It's ok to do like this?",
    "commit": "d0de49f814a896bbfa4f2c1fbd074e7ac5e354ec",
    "createdAt": "2019-11-01T11:22:16Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.thriftserver.cli\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.thriftserver.cli.thrift.{TCLIServiceConstants, TTableSchema, TTypeEntry, TTypeId}\n+import org.apache.spark.sql.types._\n+\n+private[thriftserver] object SchemaMapper {\n+\n+  def toTTableSchema(fields: StructType): TTableSchema = {\n+    val tTableSchema = new TTableSchema\n+    if (fields != null) {\n+      fields.zipWithIndex.map {\n+        case (field, i) => ColumnDescriptor(field, i)\n+      }.map(_.toTColumnDesc).foreach(tTableSchema.addToColumns)\n+    }\n+    tTableSchema\n+  }\n+\n+  def toStructType(fields: TTableSchema): StructType = {\n+    var schema = new StructType()\n+    if (fields != null) {\n+      val posToField: Map[Int, StructField] = fields.getColumns.asScala.map { tColumn =>\n+        tColumn.position ->\n+          new StructField(tColumn.columnName,\n+            toDataType(tColumn.typeDesc.getTypes.get(0)))\n+      }.toMap\n+      posToField.keys.toSeq.sorted.foreach { pos =>\n+        schema = schema.add(posToField(pos))\n+      }\n+    }\n+    schema\n+  }\n+\n+  def toTTypeId(typ: DataType): TTypeId = typ match {\n+    case NullType => TTypeId.NULL_TYPE\n+    case BooleanType => TTypeId.BOOLEAN_TYPE\n+    case ByteType => TTypeId.TINYINT_TYPE\n+    case ShortType => TTypeId.SMALLINT_TYPE\n+    case IntegerType => TTypeId.INT_TYPE\n+    case LongType => TTypeId.BIGINT_TYPE\n+    case FloatType => TTypeId.FLOAT_TYPE\n+    case DoubleType => TTypeId.DOUBLE_TYPE\n+    case StringType => TTypeId.STRING_TYPE\n+    case DecimalType() => TTypeId.DECIMAL_TYPE\n+    case DateType => TTypeId.DATE_TYPE\n+    case TimestampType => TTypeId.TIMESTAMP_TYPE\n+    case BinaryType => TTypeId.BINARY_TYPE\n+    case _: ArrayType => TTypeId.ARRAY_TYPE\n+    case _: MapType => TTypeId.MAP_TYPE\n+    case _: StructType => TTypeId.STRUCT_TYPE\n+    case _: CalendarIntervalType => TTypeId.STRING_TYPE\n+    case _: UserDefinedType[_] => TTypeId.USER_DEFINED_TYPE\n+    case other =>\n+      val catalogString = if (other != null) {\n+        other.catalogString\n+      } else {\n+        null\n+      }\n+      throw new IllegalArgumentException(\"Unrecognized type name: \" + catalogString)\n+  }\n+\n+  def toDataType(entry: TTypeEntry): DataType =\n+    entry.getPrimitiveEntry.`type` match {\n+      case TTypeId.NULL_TYPE => NullType\n+      case TTypeId.BOOLEAN_TYPE => BooleanType\n+      case TTypeId.TINYINT_TYPE => ByteType\n+      case TTypeId.SMALLINT_TYPE => ShortType\n+      case TTypeId.INT_TYPE => IntegerType\n+      case TTypeId.BIGINT_TYPE => LongType\n+      case TTypeId.FLOAT_TYPE => FloatType\n+      case TTypeId.DOUBLE_TYPE => DoubleType\n+      case TTypeId.STRING_TYPE => StringType\n+      case TTypeId.DECIMAL_TYPE =>\n+        val tQualifiers = entry.getPrimitiveEntry\n+          .getTypeQualifiers.qualifiers\n+        DecimalType(tQualifiers.get(TCLIServiceConstants.PRECISION).getI32Value,\n+          tQualifiers.get(TCLIServiceConstants.SCALE).getI32Value)\n+      case TTypeId.DATE_TYPE => DateType\n+      case TTypeId.TIMESTAMP_TYPE => TimestampType\n+      case TTypeId.BINARY_TYPE => BinaryType\n+      case TTypeId.ARRAY_TYPE =>"
  }],
  "prId": 26340
}]