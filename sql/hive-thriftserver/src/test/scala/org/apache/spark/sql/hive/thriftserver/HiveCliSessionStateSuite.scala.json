[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "is it safe to just compare `toString` result?",
    "commit": "c6ed2d7d0c5a8f3dc1e09f0a7d9991ede4a60a76",
    "createdAt": "2017-08-08T03:38:56Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.hadoop.hive.cli.CliSessionState\n+import org.apache.hadoop.hive.conf.HiveConf\n+import org.apache.hadoop.hive.ql.session.SessionState\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.sql.hive.HiveUtils\n+\n+class HiveCliSessionStateSuite extends SparkFunSuite {\n+\n+  test(\"CliSessionState will be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new CliSessionState(hiveConf)\n+    doTest(sessionState, true)\n+  }\n+\n+  test(\"SessionState will not be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new SessionState(hiveConf)\n+    doTest(sessionState, false)\n+  }\n+\n+  def doTest(state: SessionState, expected: Boolean): Unit = {\n+    SessionState.start(state)\n+    val s1 = SessionState.get\n+    val sparkConf = new SparkConf()\n+    val hadoopConf = SparkHadoopUtil.get.newConfiguration(sparkConf)\n+    val hiveClient = HiveUtils.newClientForMetadata(sparkConf, hadoopConf)\n+    assert((hiveClient.toString == s1.toString) === expected)"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "updated",
    "commit": "c6ed2d7d0c5a8f3dc1e09f0a7d9991ede4a60a76",
    "createdAt": "2017-08-08T08:34:42Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.hadoop.hive.cli.CliSessionState\n+import org.apache.hadoop.hive.conf.HiveConf\n+import org.apache.hadoop.hive.ql.session.SessionState\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.sql.hive.HiveUtils\n+\n+class HiveCliSessionStateSuite extends SparkFunSuite {\n+\n+  test(\"CliSessionState will be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new CliSessionState(hiveConf)\n+    doTest(sessionState, true)\n+  }\n+\n+  test(\"SessionState will not be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new SessionState(hiveConf)\n+    doTest(sessionState, false)\n+  }\n+\n+  def doTest(state: SessionState, expected: Boolean): Unit = {\n+    SessionState.start(state)\n+    val s1 = SessionState.get\n+    val sparkConf = new SparkConf()\n+    val hadoopConf = SparkHadoopUtil.get.newConfiguration(sparkConf)\n+    val hiveClient = HiveUtils.newClientForMetadata(sparkConf, hadoopConf)\n+    assert((hiveClient.toString == s1.toString) === expected)"
  }],
  "prId": 18648
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about `HiveUtils.newClientForMetadata(sparkConf, hadoopConf).asInstanceOf[HiveClientImpl].state`? then we don't need to add `getState`",
    "commit": "c6ed2d7d0c5a8f3dc1e09f0a7d9991ede4a60a76",
    "createdAt": "2017-08-08T11:26:25Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.hadoop.hive.cli.CliSessionState\n+import org.apache.hadoop.hive.conf.HiveConf\n+import org.apache.hadoop.hive.ql.session.SessionState\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.sql.hive.HiveUtils\n+\n+class HiveCliSessionStateSuite extends SparkFunSuite {\n+\n+  test(\"CliSessionState will be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new CliSessionState(hiveConf)\n+    SessionState.start(sessionState)\n+    val s1 = SessionState.get\n+    val sparkConf = new SparkConf()\n+    val hadoopConf = SparkHadoopUtil.get.newConfiguration(sparkConf)\n+    val s2 = HiveUtils.newClientForMetadata(sparkConf, hadoopConf).getState"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "with IsolateClientClassload, this seems to cause ClassCastException",
    "commit": "c6ed2d7d0c5a8f3dc1e09f0a7d9991ede4a60a76",
    "createdAt": "2017-08-09T02:54:18Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.hadoop.hive.cli.CliSessionState\n+import org.apache.hadoop.hive.conf.HiveConf\n+import org.apache.hadoop.hive.ql.session.SessionState\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.sql.hive.HiveUtils\n+\n+class HiveCliSessionStateSuite extends SparkFunSuite {\n+\n+  test(\"CliSessionState will be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new CliSessionState(hiveConf)\n+    SessionState.start(sessionState)\n+    val s1 = SessionState.get\n+    val sparkConf = new SparkConf()\n+    val hadoopConf = SparkHadoopUtil.get.newConfiguration(sparkConf)\n+    val s2 = HiveUtils.newClientForMetadata(sparkConf, hadoopConf).getState"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "weird, `HiveClientImpl` is the only implementation of the `HiveClient` interface.",
    "commit": "c6ed2d7d0c5a8f3dc1e09f0a7d9991ede4a60a76",
    "createdAt": "2017-08-09T05:31:12Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.hadoop.hive.cli.CliSessionState\n+import org.apache.hadoop.hive.conf.HiveConf\n+import org.apache.hadoop.hive.ql.session.SessionState\n+\n+import org.apache.spark.{SparkConf, SparkFunSuite}\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.sql.hive.HiveUtils\n+\n+class HiveCliSessionStateSuite extends SparkFunSuite {\n+\n+  test(\"CliSessionState will be reused\") {\n+    val hiveConf = new HiveConf(classOf[SessionState])\n+    HiveUtils.newTemporaryConfiguration(useInMemoryDerby = false).foreach {\n+      case (key, value) => hiveConf.set(key, value)\n+    }\n+    val sessionState: SessionState = new CliSessionState(hiveConf)\n+    SessionState.start(sessionState)\n+    val s1 = SessionState.get\n+    val sparkConf = new SparkConf()\n+    val hadoopConf = SparkHadoopUtil.get.newConfiguration(sparkConf)\n+    val s2 = HiveUtils.newClientForMetadata(sparkConf, hadoopConf).getState"
  }],
  "prId": 18648
}]