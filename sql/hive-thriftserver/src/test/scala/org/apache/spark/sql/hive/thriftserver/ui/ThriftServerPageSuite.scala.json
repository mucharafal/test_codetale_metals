[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Maybe separate the asserts so that it's easier to find what failed, if it does?",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T21:29:43Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Done",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T22:31:54Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))"
  }],
  "prId": 26403
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Maybe also separate these assertions, or drop the second part on the next line, so as not to depend on whitespace",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T21:33:44Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))\n+    assert(html.contains(\"dummy query\") && html.contains(\"dummy plan\"))\n+\n+    // Pagination support\n+    assert(html.contains(\"name=\\\"sessionstat.pagesize\\\" value=\\\"100\\\" class=\\\"span1\\\"/>\\n\" +"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Yes, removed the multiline to avoid space issues",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T22:32:32Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))\n+    assert(html.contains(\"dummy query\") && html.contains(\"dummy plan\"))\n+\n+    // Pagination support\n+    assert(html.contains(\"name=\\\"sessionstat.pagesize\\\" value=\\\"100\\\" class=\\\"span1\\\"/>\\n\" +"
  }],
  "prId": 26403
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Here and below I think the indent is off",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T21:33:54Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))\n+    assert(html.contains(\"dummy query\") && html.contains(\"dummy plan\"))\n+\n+    // Pagination support\n+    assert(html.contains(\"name=\\\"sessionstat.pagesize\\\" value=\\\"100\\\" class=\\\"span1\\\"/>\\n\" +\n+      \"          <label>items in a page.</label>\"))\n+\n+      // Hiding table support"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Done",
    "commit": "d08561153c1e43e1dbba64e130ea7fc4d43be55b",
    "createdAt": "2019-11-05T22:32:42Z",
    "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import java.util.Locale\n+import javax.servlet.http.HttpServletRequest\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.scheduler.SparkListenerJobStart\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2\n+import org.apache.spark.sql.hive.thriftserver.HiveThriftServer2.HiveThriftServer2Listener\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ThriftServerPageSuite extends SparkFunSuite {\n+\n+  /**\n+   * Run a dummy session and return the listener\n+   */\n+  private def getListener: HiveThriftServer2Listener = {\n+    val listener = new HiveThriftServer2Listener(mock(classOf[HiveThriftServer2]), new SQLConf)\n+\n+    listener.onSessionCreated(\"localhost\", \"sessionid\", \"user\")\n+    listener.onStatementStart(\"id\", \"sessionid\", \"dummy query\", \"groupid\", \"user\")\n+    listener.onStatementParsed(\"id\", \"dummy plan\")\n+    listener.onJobStart(SparkListenerJobStart(0, System.currentTimeMillis(), Seq()))\n+    listener.onStatementFinish(\"id\")\n+    listener.onOperationClosed(\"id\")\n+    listener.onSessionClosed(\"sessionid\")\n+    listener\n+  }\n+\n+  test(\"thriftserver page should load successfully\") {\n+    val request = mock(classOf[HttpServletRequest])\n+    val tab = mock(classOf[ThriftServerTab], RETURNS_SMART_NULLS)\n+    when(tab.listener).thenReturn(getListener)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    val page = new ThriftServerPage(tab)\n+    val html = page.render(request).toString().toLowerCase(Locale.ROOT)\n+\n+    // session statistics and sql statistics tables should load successfully\n+    assert(html.contains(\"session statistics (1)\") && html.contains(\"sql statistics (1)\"))\n+    assert(html.contains(\"dummy query\") && html.contains(\"dummy plan\"))\n+\n+    // Pagination support\n+    assert(html.contains(\"name=\\\"sessionstat.pagesize\\\" value=\\\"100\\\" class=\\\"span1\\\"/>\\n\" +\n+      \"          <label>items in a page.</label>\"))\n+\n+      // Hiding table support"
  }],
  "prId": 26403
}]