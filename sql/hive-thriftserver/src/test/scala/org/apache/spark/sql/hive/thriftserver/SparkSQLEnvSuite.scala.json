[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`import test.custom.listener...`",
    "commit": "23c197b741cc4e1fa129d27e34c2011f13ae94b9",
    "createdAt": "2019-10-28T16:48:38Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.launcher.SparkLauncher\n+import org.apache.spark.sql.hive.HiveUtils.{HIVE_METASTORE_JARS, HIVE_METASTORE_VERSION}\n+import org.apache.spark.sql.hive.test.TestHiveContext\n+import org.apache.spark.sql.hive.thriftserver.__root__.test.custom.listener.{DummyQueryExecutionListener, DummyStreamingQueryListener}"
  }],
  "prId": 26258
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Sorry, my bad, I tested this again and it's not working as I first thought. Not sure what I did the first time.\r\n\r\nSeems you do have to keep these in a separate file; but I'd keep both classes in the same file, and place the file in this same directory (Scala doesn't enforce the package to match the directory structure), instead of having them in a completely separate tree like before.",
    "commit": "23c197b741cc4e1fa129d27e34c2011f13ae94b9",
    "createdAt": "2019-10-28T16:53:38Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.launcher.SparkLauncher\n+import org.apache.spark.sql.hive.HiveUtils.{HIVE_METASTORE_JARS, HIVE_METASTORE_VERSION}\n+import org.apache.spark.sql.hive.test.TestHiveContext\n+import org.apache.spark.sql.hive.thriftserver.__root__.test.custom.listener.{DummyQueryExecutionListener, DummyStreamingQueryListener}\n+import org.apache.spark.sql.internal.StaticSQLConf.{QUERY_EXECUTION_LISTENERS, STREAMING_QUERY_LISTENERS, WAREHOUSE_PATH}\n+\n+class SparkSQLEnvSuite extends SparkFunSuite {\n+  test(\"SPARK-29604 external listeners should be initialized with Spark classloader\") {\n+    withSystemProperties(\n+      QUERY_EXECUTION_LISTENERS.key -> classOf[DummyQueryExecutionListener].getCanonicalName,\n+      STREAMING_QUERY_LISTENERS.key -> classOf[DummyStreamingQueryListener].getCanonicalName,\n+      WAREHOUSE_PATH.key -> TestHiveContext.makeWarehouseDir().toURI.getPath,\n+      // The issue occured from \"maven\" and list of custom jars, but providing list of custom\n+      // jars to initialize HiveClient isn't trivial, so just use \"maven\".\n+      HIVE_METASTORE_JARS.key -> \"maven\",\n+      HIVE_METASTORE_VERSION.key -> null,\n+      SparkLauncher.SPARK_MASTER -> \"local[2]\",\n+      \"spark.app.name\" -> \"testApp\") {\n+\n+      try {\n+        SparkSQLEnv.init()\n+      } finally {\n+        SparkSQLEnv.stop()\n+      }\n+    }\n+  }\n+\n+  private def withSystemProperties(pairs: (String, String)*)(f: => Unit): Unit = {\n+    def setProperties(properties: Seq[(String, String)]): Unit = {\n+      properties.foreach { case (key, value) =>\n+        if (value != null) {\n+          System.setProperty(key, value)\n+        } else {\n+          System.clearProperty(key)\n+        }\n+      }\n+    }\n+\n+    val oldValues = pairs.map { kv => kv._1 -> System.getProperty(kv._1) }\n+    try {\n+      setProperties(pairs)\n+      f\n+    } finally {\n+      setProperties(oldValues)\n+    }\n+  }\n+}\n+\n+/**\n+ * These classes in this package are intentionally placed to the outer package of spark,\n+ * because IsolatedClientLoader leverages Spark classloader for shared classess including\n+ * spark package, and the test should fail if Spark initializes these listeners with\n+ * IsolatedClientLoader.\n+ */\n+package __root__.test.custom.listener {"
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "(for the curious, the correct is actually `_root_`, one underscore; and it only seems to work as intended in imports.)",
    "commit": "23c197b741cc4e1fa129d27e34c2011f13ae94b9",
    "createdAt": "2019-10-28T16:56:16Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.launcher.SparkLauncher\n+import org.apache.spark.sql.hive.HiveUtils.{HIVE_METASTORE_JARS, HIVE_METASTORE_VERSION}\n+import org.apache.spark.sql.hive.test.TestHiveContext\n+import org.apache.spark.sql.hive.thriftserver.__root__.test.custom.listener.{DummyQueryExecutionListener, DummyStreamingQueryListener}\n+import org.apache.spark.sql.internal.StaticSQLConf.{QUERY_EXECUTION_LISTENERS, STREAMING_QUERY_LISTENERS, WAREHOUSE_PATH}\n+\n+class SparkSQLEnvSuite extends SparkFunSuite {\n+  test(\"SPARK-29604 external listeners should be initialized with Spark classloader\") {\n+    withSystemProperties(\n+      QUERY_EXECUTION_LISTENERS.key -> classOf[DummyQueryExecutionListener].getCanonicalName,\n+      STREAMING_QUERY_LISTENERS.key -> classOf[DummyStreamingQueryListener].getCanonicalName,\n+      WAREHOUSE_PATH.key -> TestHiveContext.makeWarehouseDir().toURI.getPath,\n+      // The issue occured from \"maven\" and list of custom jars, but providing list of custom\n+      // jars to initialize HiveClient isn't trivial, so just use \"maven\".\n+      HIVE_METASTORE_JARS.key -> \"maven\",\n+      HIVE_METASTORE_VERSION.key -> null,\n+      SparkLauncher.SPARK_MASTER -> \"local[2]\",\n+      \"spark.app.name\" -> \"testApp\") {\n+\n+      try {\n+        SparkSQLEnv.init()\n+      } finally {\n+        SparkSQLEnv.stop()\n+      }\n+    }\n+  }\n+\n+  private def withSystemProperties(pairs: (String, String)*)(f: => Unit): Unit = {\n+    def setProperties(properties: Seq[(String, String)]): Unit = {\n+      properties.foreach { case (key, value) =>\n+        if (value != null) {\n+          System.setProperty(key, value)\n+        } else {\n+          System.clearProperty(key)\n+        }\n+      }\n+    }\n+\n+    val oldValues = pairs.map { kv => kv._1 -> System.getProperty(kv._1) }\n+    try {\n+      setProperties(pairs)\n+      f\n+    } finally {\n+      setProperties(oldValues)\n+    }\n+  }\n+}\n+\n+/**\n+ * These classes in this package are intentionally placed to the outer package of spark,\n+ * because IsolatedClientLoader leverages Spark classloader for shared classess including\n+ * spark package, and the test should fail if Spark initializes these listeners with\n+ * IsolatedClientLoader.\n+ */\n+package __root__.test.custom.listener {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Ah OK I thought I ran test to see whether the test fails on master, but I might missed that. After commenting out for change in SparkSQLEnv it still passes (as its package is belong to shared class)\r\n\r\nI'll create a new file reflecting it.",
    "commit": "23c197b741cc4e1fa129d27e34c2011f13ae94b9",
    "createdAt": "2019-10-28T20:06:34Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.launcher.SparkLauncher\n+import org.apache.spark.sql.hive.HiveUtils.{HIVE_METASTORE_JARS, HIVE_METASTORE_VERSION}\n+import org.apache.spark.sql.hive.test.TestHiveContext\n+import org.apache.spark.sql.hive.thriftserver.__root__.test.custom.listener.{DummyQueryExecutionListener, DummyStreamingQueryListener}\n+import org.apache.spark.sql.internal.StaticSQLConf.{QUERY_EXECUTION_LISTENERS, STREAMING_QUERY_LISTENERS, WAREHOUSE_PATH}\n+\n+class SparkSQLEnvSuite extends SparkFunSuite {\n+  test(\"SPARK-29604 external listeners should be initialized with Spark classloader\") {\n+    withSystemProperties(\n+      QUERY_EXECUTION_LISTENERS.key -> classOf[DummyQueryExecutionListener].getCanonicalName,\n+      STREAMING_QUERY_LISTENERS.key -> classOf[DummyStreamingQueryListener].getCanonicalName,\n+      WAREHOUSE_PATH.key -> TestHiveContext.makeWarehouseDir().toURI.getPath,\n+      // The issue occured from \"maven\" and list of custom jars, but providing list of custom\n+      // jars to initialize HiveClient isn't trivial, so just use \"maven\".\n+      HIVE_METASTORE_JARS.key -> \"maven\",\n+      HIVE_METASTORE_VERSION.key -> null,\n+      SparkLauncher.SPARK_MASTER -> \"local[2]\",\n+      \"spark.app.name\" -> \"testApp\") {\n+\n+      try {\n+        SparkSQLEnv.init()\n+      } finally {\n+        SparkSQLEnv.stop()\n+      }\n+    }\n+  }\n+\n+  private def withSystemProperties(pairs: (String, String)*)(f: => Unit): Unit = {\n+    def setProperties(properties: Seq[(String, String)]): Unit = {\n+      properties.foreach { case (key, value) =>\n+        if (value != null) {\n+          System.setProperty(key, value)\n+        } else {\n+          System.clearProperty(key)\n+        }\n+      }\n+    }\n+\n+    val oldValues = pairs.map { kv => kv._1 -> System.getProperty(kv._1) }\n+    try {\n+      setProperties(pairs)\n+      f\n+    } finally {\n+      setProperties(oldValues)\n+    }\n+  }\n+}\n+\n+/**\n+ * These classes in this package are intentionally placed to the outer package of spark,\n+ * because IsolatedClientLoader leverages Spark classloader for shared classess including\n+ * spark package, and the test should fail if Spark initializes these listeners with\n+ * IsolatedClientLoader.\n+ */\n+package __root__.test.custom.listener {"
  }],
  "prId": 26258
}]