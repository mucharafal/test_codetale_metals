[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "should we refactor createBackgroundOperationPool to call this?",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2017-12-22T07:00:34Z",
    "diffHunk": "@@ -148,6 +148,15 @@ public synchronized void start() {\n     }\n   }\n \n+  private void initSessionTimeoutCheckerConfig() {"
  }, {
    "author": {
      "login": "zuotingbing"
    },
    "body": "Thanks @felixcheung . In my opinion you can create a new or follow-up PR if it is necessary. This PR is to fix the bug about the Session Timeout Checker does not work currently.",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2017-12-25T08:02:44Z",
    "diffHunk": "@@ -148,6 +148,15 @@ public synchronized void start() {\n     }\n   }\n \n+  private void initSessionTimeoutCheckerConfig() {"
  }, {
    "author": {
      "login": "felixcheung"
    },
    "body": "I asked because these lines are duplicated\r\nhttps://github.com/zuotingbing/spark/blob/34b7680dfd915449087b8f5541c682b02df5dfbc/sql/hive-thriftserver/src/main/java/org/apache/hive/service/cli/session/SessionManager.java#L105\r\n",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2017-12-28T08:20:58Z",
    "diffHunk": "@@ -148,6 +148,15 @@ public synchronized void start() {\n     }\n   }\n \n+  private void initSessionTimeoutCheckerConfig() {"
  }],
  "prId": 20025
}, {
  "comments": [{
    "author": {
      "login": "liufengdb"
    },
    "body": " I think we can keep this file unchanged. Looks like the hive thread pool is more flexible than the spark one. ",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-18T18:18:08Z",
    "diffHunk": "@@ -79,35 +75,19 @@ public synchronized void init(HiveConf hiveConf) {\n       initOperationLogRootDir();\n     }\n     createBackgroundOperationPool();\n-    addService(operationManager);\n-    super.init(hiveConf);\n-  }\n-\n-  private void createBackgroundOperationPool() {\n-    int poolSize = hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_THREADS);\n-    LOG.info(\"HiveServer2: Background operation thread pool size: \" + poolSize);\n-    int poolQueueSize = hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_WAIT_QUEUE_SIZE);\n-    LOG.info(\"HiveServer2: Background operation thread wait queue size: \" + poolQueueSize);\n-    long keepAliveTime = HiveConf.getTimeVar(\n-        hiveConf, ConfVars.HIVE_SERVER2_ASYNC_EXEC_KEEPALIVE_TIME, TimeUnit.SECONDS);\n-    LOG.info(\n-        \"HiveServer2: Background operation thread keepalive time: \" + keepAliveTime + \" seconds\");\n-\n-    // Create a thread pool with #poolSize threads\n-    // Threads terminate when they are idle for more than the keepAliveTime\n-    // A bounded blocking queue is used to queue incoming operations, if #operations > poolSize\n-    String threadPoolName = \"HiveServer2-Background-Pool\";\n-    backgroundOperationPool = new ThreadPoolExecutor(poolSize, poolSize,\n-        keepAliveTime, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(poolQueueSize),\n-        new ThreadFactoryWithGarbageCleanup(threadPoolName));\n-    backgroundOperationPool.allowCoreThreadTimeOut(true);\n-"
  }, {
    "author": {
      "login": "zuotingbing"
    },
    "body": "yes, i will update it . Thanks!",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-19T03:02:56Z",
    "diffHunk": "@@ -79,35 +75,19 @@ public synchronized void init(HiveConf hiveConf) {\n       initOperationLogRootDir();\n     }\n     createBackgroundOperationPool();\n-    addService(operationManager);\n-    super.init(hiveConf);\n-  }\n-\n-  private void createBackgroundOperationPool() {\n-    int poolSize = hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_THREADS);\n-    LOG.info(\"HiveServer2: Background operation thread pool size: \" + poolSize);\n-    int poolQueueSize = hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_WAIT_QUEUE_SIZE);\n-    LOG.info(\"HiveServer2: Background operation thread wait queue size: \" + poolQueueSize);\n-    long keepAliveTime = HiveConf.getTimeVar(\n-        hiveConf, ConfVars.HIVE_SERVER2_ASYNC_EXEC_KEEPALIVE_TIME, TimeUnit.SECONDS);\n-    LOG.info(\n-        \"HiveServer2: Background operation thread keepalive time: \" + keepAliveTime + \" seconds\");\n-\n-    // Create a thread pool with #poolSize threads\n-    // Threads terminate when they are idle for more than the keepAliveTime\n-    // A bounded blocking queue is used to queue incoming operations, if #operations > poolSize\n-    String threadPoolName = \"HiveServer2-Background-Pool\";\n-    backgroundOperationPool = new ThreadPoolExecutor(poolSize, poolSize,\n-        keepAliveTime, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(poolQueueSize),\n-        new ThreadFactoryWithGarbageCleanup(threadPoolName));\n-    backgroundOperationPool.allowCoreThreadTimeOut(true);\n-"
  }],
  "prId": 20025
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "revert this back. ",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-19T16:47:46Z",
    "diffHunk": "@@ -23,11 +23,7 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;"
  }, {
    "author": {
      "login": "zuotingbing"
    },
    "body": "yes, thanks",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-23T02:11:27Z",
    "diffHunk": "@@ -23,11 +23,7 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;"
  }],
  "prId": 20025
}, {
  "comments": [{
    "author": {
      "login": "liufengdb"
    },
    "body": "hmm, I think we revert keep this line too.",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-19T18:33:39Z",
    "diffHunk": "@@ -80,7 +76,6 @@ public synchronized void init(HiveConf hiveConf) {\n     }\n     createBackgroundOperationPool();\n     addService(operationManager);\n-    super.init(hiveConf);"
  }, {
    "author": {
      "login": "zuotingbing"
    },
    "body": "yes, we could keep super.init() here and remove initCompositeService in SparkSQLSessionManager.init(). thanks",
    "commit": "883deb2309a7581178c8de8b53d92ba309f6b4b9",
    "createdAt": "2018-01-23T03:38:15Z",
    "diffHunk": "@@ -80,7 +76,6 @@ public synchronized void init(HiveConf hiveConf) {\n     }\n     createBackgroundOperationPool();\n     addService(operationManager);\n-    super.init(hiveConf);"
  }],
  "prId": 20025
}]