[{
  "comments": [{
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "This is essentially copied from Hive Type.java, removing the types that we don't support, right?\r\n\r\nMaybe instead of cloning it like that, still use the Hive types that Hive's GetTypeInfoOperation uses, and just have a filter like\r\n```\r\nval unsupportedTypes = Set(\"INTERVAL_YEAR_MONTH\", \"INTERVAL_DAY_TIME\", \"ARRAY\", \"MAP\", \"STRUCT\", \"UNIONTYPE\", \"USER_DEFINED\")\r\n...\r\nif (!unsupportedTypes.contains(typeInfoGetName)) {\r\n  val rowData = ...\r\n}\r\n```\r\n\r\nThere may be value in the future in cloning that, if our types would diverge more from Hive types, but I think for now we can just reuse it instead of cloning these several hundred lines of code.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T09:39:17Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "emmmm since for Hive.\r\nIn 1.2.1 Type class is `org.apache.hive.service.cli.Type`\r\nIn 2.3.x Type class is `org.apache.hadoop.hive.serde2.thrift.Type`\r\n\r\nSpark only return it's DataType, I add a new Class(Type) for Spark.\r\nIf not we may need to add more method to ThriftServerShimUtils.\r\n",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:00:31Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "I am working on make Spark's own ThriftServer, don't rely on hive version. \r\nIn my subconsciousï¼Œdon't want to add method on ThriftserverShimUtils.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:18:53Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "If this only clones the Hive types, skipping the ones we don't support, I'd prefer adding it to the shim and not cloning the code.\r\nI don't think Spark would further diverge from Hive types. If it happens, we could clone it at that point.\r\n@wangyum what do you think?",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:20:32Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "Not all same, such as `INTEGER`, Spark IntegerType's simpleStringName is INTEGER, in hive Types, there is INT. for `NULL`, change the name to `NULL`, in hive is `void`.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:26:43Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "Ok. That seems like a good enough argument to just clone it.\r\nPlease list these differences in the PR description.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:31:42Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "OK, I will add to description.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:36:21Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli"
  }],
  "prId": 25694
}, {
  "comments": [{
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "out of curiosity (I know it's copied from Hive): shouldn't a type like e.g. String be searchable?",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T09:39:47Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli\n+\n+import java.sql.DatabaseMetaData\n+\n+import org.apache.spark.sql.types.DecimalType\n+\n+trait Type {\n+\n+  def getName: String\n+\n+  def isComplex: Boolean\n+\n+  def isQualifiedType: Boolean\n+\n+  def isCollectionType: Boolean\n+\n+  def isPrimitiveType: Boolean = !isComplex\n+\n+  def isComplexType: Boolean = isComplex\n+\n+  /**\n+   * Radix for this type (typically either 2 or 10)\n+   * Null is returned for data types where this is not applicable.\n+   */\n+  def getNumPrecRadix: Integer = {\n+    if (this.isNumericType) {\n+      10\n+    } else {\n+      null\n+    }\n+  }\n+\n+  def getMaxPrecision(): Option[Int]\n+\n+  def isNumericType(): Boolean = false\n+\n+  /**\n+   * Prefix used to quote a literal of this type (may be null)\n+   */\n+  def getLiteralPrefix: String = null\n+\n+  /**\n+   * Suffix used to quote a literal of this type (may be null)\n+   *\n+   * @return\n+   */\n+  def getLiteralSuffix: String = null\n+\n+  /**\n+   * Can you use NULL for this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typeNoNulls - does not allow NULL values\n+   * DatabaseMetaData.typeNullable - allows NULL values\n+   * DatabaseMetaData.typeNullableUnknown - nullability unknown\n+   */\n+  def getNullable: Short = {\n+    // All Hive types are nullable\n+    DatabaseMetaData.typeNullable.toShort\n+  }\n+\n+  /**\n+   * Is the type case sensitive?\n+   *\n+   * @return\n+   */\n+  def isCaseSensitive: Boolean = false\n+\n+  /**\n+   * Parameters used in creating the type (may be null)\n+   *\n+   * @return\n+   */\n+  def getCreateParams: String = null\n+\n+  /**\n+   * Can you use WHERE based on this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typePredNone - No support\n+   * DatabaseMetaData.typePredChar - Only support with WHERE .. LIKE\n+   * DatabaseMetaData.typePredBasic - Supported except for WHERE .. LIKE\n+   * DatabaseMetaData.typeSearchable - Supported for all WHERE ..\n+   */\n+  def getSearchable: Short = {\n+    if (isPrimitiveType) {\n+      DatabaseMetaData.typeSearchable.toShort\n+    } else {\n+      DatabaseMetaData.typePredNone.toShort"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "String is searchable. In my return it's 3, means searchable.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T09:57:02Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli\n+\n+import java.sql.DatabaseMetaData\n+\n+import org.apache.spark.sql.types.DecimalType\n+\n+trait Type {\n+\n+  def getName: String\n+\n+  def isComplex: Boolean\n+\n+  def isQualifiedType: Boolean\n+\n+  def isCollectionType: Boolean\n+\n+  def isPrimitiveType: Boolean = !isComplex\n+\n+  def isComplexType: Boolean = isComplex\n+\n+  /**\n+   * Radix for this type (typically either 2 or 10)\n+   * Null is returned for data types where this is not applicable.\n+   */\n+  def getNumPrecRadix: Integer = {\n+    if (this.isNumericType) {\n+      10\n+    } else {\n+      null\n+    }\n+  }\n+\n+  def getMaxPrecision(): Option[Int]\n+\n+  def isNumericType(): Boolean = false\n+\n+  /**\n+   * Prefix used to quote a literal of this type (may be null)\n+   */\n+  def getLiteralPrefix: String = null\n+\n+  /**\n+   * Suffix used to quote a literal of this type (may be null)\n+   *\n+   * @return\n+   */\n+  def getLiteralSuffix: String = null\n+\n+  /**\n+   * Can you use NULL for this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typeNoNulls - does not allow NULL values\n+   * DatabaseMetaData.typeNullable - allows NULL values\n+   * DatabaseMetaData.typeNullableUnknown - nullability unknown\n+   */\n+  def getNullable: Short = {\n+    // All Hive types are nullable\n+    DatabaseMetaData.typeNullable.toShort\n+  }\n+\n+  /**\n+   * Is the type case sensitive?\n+   *\n+   * @return\n+   */\n+  def isCaseSensitive: Boolean = false\n+\n+  /**\n+   * Parameters used in creating the type (may be null)\n+   *\n+   * @return\n+   */\n+  def getCreateParams: String = null\n+\n+  /**\n+   * Can you use WHERE based on this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typePredNone - No support\n+   * DatabaseMetaData.typePredChar - Only support with WHERE .. LIKE\n+   * DatabaseMetaData.typePredBasic - Supported except for WHERE .. LIKE\n+   * DatabaseMetaData.typeSearchable - Supported for all WHERE ..\n+   */\n+  def getSearchable: Short = {\n+    if (isPrimitiveType) {\n+      DatabaseMetaData.typeSearchable.toShort\n+    } else {\n+      DatabaseMetaData.typePredNone.toShort"
  }, {
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "Sorry, I misread \"isPrimitiveType\" and somehow read \"isNumericType\".",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:13:34Z",
    "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli\n+\n+import java.sql.DatabaseMetaData\n+\n+import org.apache.spark.sql.types.DecimalType\n+\n+trait Type {\n+\n+  def getName: String\n+\n+  def isComplex: Boolean\n+\n+  def isQualifiedType: Boolean\n+\n+  def isCollectionType: Boolean\n+\n+  def isPrimitiveType: Boolean = !isComplex\n+\n+  def isComplexType: Boolean = isComplex\n+\n+  /**\n+   * Radix for this type (typically either 2 or 10)\n+   * Null is returned for data types where this is not applicable.\n+   */\n+  def getNumPrecRadix: Integer = {\n+    if (this.isNumericType) {\n+      10\n+    } else {\n+      null\n+    }\n+  }\n+\n+  def getMaxPrecision(): Option[Int]\n+\n+  def isNumericType(): Boolean = false\n+\n+  /**\n+   * Prefix used to quote a literal of this type (may be null)\n+   */\n+  def getLiteralPrefix: String = null\n+\n+  /**\n+   * Suffix used to quote a literal of this type (may be null)\n+   *\n+   * @return\n+   */\n+  def getLiteralSuffix: String = null\n+\n+  /**\n+   * Can you use NULL for this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typeNoNulls - does not allow NULL values\n+   * DatabaseMetaData.typeNullable - allows NULL values\n+   * DatabaseMetaData.typeNullableUnknown - nullability unknown\n+   */\n+  def getNullable: Short = {\n+    // All Hive types are nullable\n+    DatabaseMetaData.typeNullable.toShort\n+  }\n+\n+  /**\n+   * Is the type case sensitive?\n+   *\n+   * @return\n+   */\n+  def isCaseSensitive: Boolean = false\n+\n+  /**\n+   * Parameters used in creating the type (may be null)\n+   *\n+   * @return\n+   */\n+  def getCreateParams: String = null\n+\n+  /**\n+   * Can you use WHERE based on this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typePredNone - No support\n+   * DatabaseMetaData.typePredChar - Only support with WHERE .. LIKE\n+   * DatabaseMetaData.typePredBasic - Supported except for WHERE .. LIKE\n+   * DatabaseMetaData.typeSearchable - Supported for all WHERE ..\n+   */\n+  def getSearchable: Short = {\n+    if (isPrimitiveType) {\n+      DatabaseMetaData.typeSearchable.toShort\n+    } else {\n+      DatabaseMetaData.typePredNone.toShort"
  }],
  "prId": 25694
}, {
  "comments": [{
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "Out of curiosity: where is this actually defined?\r\n`IntergerType.simpleString` is \"int\", but parser definitely accepts INTEGER and I can't seem to find where it's defined.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T10:40:18Z",
    "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli\n+\n+import java.sql.DatabaseMetaData\n+\n+import org.apache.spark.sql.types.DecimalType\n+\n+trait Type {\n+\n+  def getName: String\n+\n+  def isComplex: Boolean\n+\n+  def isQualifiedType: Boolean\n+\n+  def isCollectionType: Boolean\n+\n+  def isPrimitiveType: Boolean = !isComplex\n+\n+  def isComplexType: Boolean = isComplex\n+\n+  /**\n+   * Radix for this type (typically either 2 or 10)\n+   * Null is returned for data types where this is not applicable.\n+   */\n+  def getNumPrecRadix: Integer = {\n+    if (this.isNumericType) {\n+      10\n+    } else {\n+      null\n+    }\n+  }\n+\n+  def getMaxPrecision(): Option[Int]\n+\n+  def isNumericType(): Boolean = false\n+\n+  /**\n+   * Prefix used to quote a literal of this type (may be null)\n+   */\n+  def getLiteralPrefix: String = null\n+\n+  /**\n+   * Suffix used to quote a literal of this type (may be null)\n+   *\n+   * @return\n+   */\n+  def getLiteralSuffix: String = null\n+\n+  /**\n+   * Can you use NULL for this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typeNoNulls - does not allow NULL values\n+   * DatabaseMetaData.typeNullable - allows NULL values\n+   * DatabaseMetaData.typeNullableUnknown - nullability unknown\n+   */\n+  def getNullable: Short = {\n+    // All Hive types are nullable\n+    DatabaseMetaData.typeNullable.toShort\n+  }\n+\n+  /**\n+   * Is the type case sensitive?\n+   *\n+   * @return\n+   */\n+  def isCaseSensitive: Boolean = false\n+\n+  /**\n+   * Parameters used in creating the type (may be null)\n+   *\n+   * @return\n+   */\n+  def getCreateParams: String = null\n+\n+  /**\n+   * Can you use WHERE based on this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typePredNone - No support\n+   * DatabaseMetaData.typePredChar - Only support with WHERE .. LIKE\n+   * DatabaseMetaData.typePredBasic - Supported except for WHERE .. LIKE\n+   * DatabaseMetaData.typeSearchable - Supported for all WHERE ..\n+   */\n+  def getSearchable: Short = {\n+    if (isPrimitiveType) {\n+      DatabaseMetaData.typeSearchable.toShort\n+    } else {\n+      DatabaseMetaData.typePredNone.toShort\n+    }\n+  }\n+\n+  /**\n+   * Is this type unsigned?\n+   *\n+   * @return\n+   */\n+  def isUnsignedAttribute: Boolean = {\n+    if (isNumericType) {\n+      false\n+    } else {\n+      true\n+    }\n+  }\n+\n+  /**\n+   * Can this type represent money?\n+   *\n+   * @return\n+   */\n+  def isFixedPrecScale: Boolean = false\n+\n+  /**\n+   * Can this type be used for an auto-increment value?\n+   *\n+   * @return\n+   */\n+  def isAutoIncrement: Boolean = false\n+\n+  /**\n+   * Localized version of type name (may be null).\n+   *\n+   * @return\n+   */\n+  def getLocalizedName: String = null\n+\n+  /**\n+   * Minimum scale supported for this type\n+   *\n+   * @return\n+   */\n+  def getMinimumScale: Short = 0.toShort\n+\n+  /**\n+   * Maximum scale supported for this type\n+   *\n+   * @return\n+   */\n+  def getMaximumScale: Short = 0.toShort\n+\n+  def javaSQLType: Int\n+\n+  def toJavaSQLType: Int = javaSQLType\n+}\n+\n+object Type {\n+\n+  val typeMap: Map[String, Type] = Map(\n+    NULL.getName -> NULL,\n+    STRING.getName -> STRING,\n+    INTEGER.getName -> INTEGER,\n+    BOOLEAN.getName -> BOOLEAN,\n+    DOUBLE.getName -> DOUBLE,\n+    FLOAT.getName -> FLOAT,\n+    DECIMAL.getName -> DECIMAL,\n+    LONG.getName -> LONG,\n+    BYTE.getName -> BYTE,\n+    SHORT.getName -> SHORT,\n+    DATE.getName -> DATE,\n+    TIMESTAMP.getName -> TIMESTAMP,\n+    BINARY.getName -> BINARY\n+  )\n+\n+  def values: Seq[Type] = typeMap.values.toSeq\n+\n+  case object NULL extends Type() {\n+    override def getName: String = \"NULL\"\n+\n+    override def isComplex: Boolean = false\n+\n+    override def isQualifiedType: Boolean = false\n+\n+    override def isCollectionType: Boolean = false\n+\n+    override def getMaxPrecision(): Option[Int] = None\n+\n+    override def javaSQLType: Int = java.sql.Types.NULL\n+  }\n+\n+  case object STRING extends Type {\n+    override def getName: String = \"STRING\"\n+\n+    override def isComplex: Boolean = false\n+\n+    override def isQualifiedType: Boolean = false\n+\n+    override def isCollectionType: Boolean = false\n+\n+    override def getMaxPrecision(): Option[Int] = None\n+\n+    override def javaSQLType: Int = java.sql.Types.VARCHAR\n+\n+    override def isCaseSensitive: Boolean = true\n+  }\n+\n+  case object INTEGER extends Type {\n+    override def getName: String = \"INTEGER\""
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "> Out of curiosity: where is this actually defined?\r\n> `IntergerType.simpleString` is \"int\", but parser definitely accepts INTEGER and I can't seem to find where it's defined.\r\n\r\nWhen I check for simpleString, miss this place, then through `IntergerType.simpleString` is Integer. \r\nSo add a method of filter un-support  Type is better.",
    "commit": "3c488fcfc5a6e97db25f417d0dd8bdb339c99525",
    "createdAt": "2019-09-06T12:52:40Z",
    "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.thriftserver.cli\n+\n+import java.sql.DatabaseMetaData\n+\n+import org.apache.spark.sql.types.DecimalType\n+\n+trait Type {\n+\n+  def getName: String\n+\n+  def isComplex: Boolean\n+\n+  def isQualifiedType: Boolean\n+\n+  def isCollectionType: Boolean\n+\n+  def isPrimitiveType: Boolean = !isComplex\n+\n+  def isComplexType: Boolean = isComplex\n+\n+  /**\n+   * Radix for this type (typically either 2 or 10)\n+   * Null is returned for data types where this is not applicable.\n+   */\n+  def getNumPrecRadix: Integer = {\n+    if (this.isNumericType) {\n+      10\n+    } else {\n+      null\n+    }\n+  }\n+\n+  def getMaxPrecision(): Option[Int]\n+\n+  def isNumericType(): Boolean = false\n+\n+  /**\n+   * Prefix used to quote a literal of this type (may be null)\n+   */\n+  def getLiteralPrefix: String = null\n+\n+  /**\n+   * Suffix used to quote a literal of this type (may be null)\n+   *\n+   * @return\n+   */\n+  def getLiteralSuffix: String = null\n+\n+  /**\n+   * Can you use NULL for this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typeNoNulls - does not allow NULL values\n+   * DatabaseMetaData.typeNullable - allows NULL values\n+   * DatabaseMetaData.typeNullableUnknown - nullability unknown\n+   */\n+  def getNullable: Short = {\n+    // All Hive types are nullable\n+    DatabaseMetaData.typeNullable.toShort\n+  }\n+\n+  /**\n+   * Is the type case sensitive?\n+   *\n+   * @return\n+   */\n+  def isCaseSensitive: Boolean = false\n+\n+  /**\n+   * Parameters used in creating the type (may be null)\n+   *\n+   * @return\n+   */\n+  def getCreateParams: String = null\n+\n+  /**\n+   * Can you use WHERE based on this type?\n+   *\n+   * @return\n+   * DatabaseMetaData.typePredNone - No support\n+   * DatabaseMetaData.typePredChar - Only support with WHERE .. LIKE\n+   * DatabaseMetaData.typePredBasic - Supported except for WHERE .. LIKE\n+   * DatabaseMetaData.typeSearchable - Supported for all WHERE ..\n+   */\n+  def getSearchable: Short = {\n+    if (isPrimitiveType) {\n+      DatabaseMetaData.typeSearchable.toShort\n+    } else {\n+      DatabaseMetaData.typePredNone.toShort\n+    }\n+  }\n+\n+  /**\n+   * Is this type unsigned?\n+   *\n+   * @return\n+   */\n+  def isUnsignedAttribute: Boolean = {\n+    if (isNumericType) {\n+      false\n+    } else {\n+      true\n+    }\n+  }\n+\n+  /**\n+   * Can this type represent money?\n+   *\n+   * @return\n+   */\n+  def isFixedPrecScale: Boolean = false\n+\n+  /**\n+   * Can this type be used for an auto-increment value?\n+   *\n+   * @return\n+   */\n+  def isAutoIncrement: Boolean = false\n+\n+  /**\n+   * Localized version of type name (may be null).\n+   *\n+   * @return\n+   */\n+  def getLocalizedName: String = null\n+\n+  /**\n+   * Minimum scale supported for this type\n+   *\n+   * @return\n+   */\n+  def getMinimumScale: Short = 0.toShort\n+\n+  /**\n+   * Maximum scale supported for this type\n+   *\n+   * @return\n+   */\n+  def getMaximumScale: Short = 0.toShort\n+\n+  def javaSQLType: Int\n+\n+  def toJavaSQLType: Int = javaSQLType\n+}\n+\n+object Type {\n+\n+  val typeMap: Map[String, Type] = Map(\n+    NULL.getName -> NULL,\n+    STRING.getName -> STRING,\n+    INTEGER.getName -> INTEGER,\n+    BOOLEAN.getName -> BOOLEAN,\n+    DOUBLE.getName -> DOUBLE,\n+    FLOAT.getName -> FLOAT,\n+    DECIMAL.getName -> DECIMAL,\n+    LONG.getName -> LONG,\n+    BYTE.getName -> BYTE,\n+    SHORT.getName -> SHORT,\n+    DATE.getName -> DATE,\n+    TIMESTAMP.getName -> TIMESTAMP,\n+    BINARY.getName -> BINARY\n+  )\n+\n+  def values: Seq[Type] = typeMap.values.toSeq\n+\n+  case object NULL extends Type() {\n+    override def getName: String = \"NULL\"\n+\n+    override def isComplex: Boolean = false\n+\n+    override def isQualifiedType: Boolean = false\n+\n+    override def isCollectionType: Boolean = false\n+\n+    override def getMaxPrecision(): Option[Int] = None\n+\n+    override def javaSQLType: Int = java.sql.Types.NULL\n+  }\n+\n+  case object STRING extends Type {\n+    override def getName: String = \"STRING\"\n+\n+    override def isComplex: Boolean = false\n+\n+    override def isQualifiedType: Boolean = false\n+\n+    override def isCollectionType: Boolean = false\n+\n+    override def getMaxPrecision(): Option[Int] = None\n+\n+    override def javaSQLType: Int = java.sql.Types.VARCHAR\n+\n+    override def isCaseSensitive: Boolean = true\n+  }\n+\n+  case object INTEGER extends Type {\n+    override def getName: String = \"INTEGER\""
  }],
  "prId": 25694
}]