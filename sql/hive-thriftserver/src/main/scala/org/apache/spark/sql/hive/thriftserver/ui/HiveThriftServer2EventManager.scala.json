[{
  "comments": [{
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "nit: 2 space indent",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-25T10:50:24Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+      sc.listenerBus.post(event)"
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Done.",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-25T19:01:05Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+      sc.listenerBus.post(event)"
  }],
  "prId": 26378
}, {
  "comments": [{
    "author": {
      "login": "juliuszsompolski"
    },
    "body": "Maybe better to add `ThriftServer` in the name of all events, just like the SQL ones are names `SparkListenerSQL...`",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-25T10:52:58Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+      sc.listenerBus.post(event)\n+  }\n+\n+  def onSessionCreated(ip: String, sessionId: String, userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerSessionCreated(ip, sessionId,\n+      userName, System.currentTimeMillis()))\n+  }\n+\n+  def onSessionClosed(sessionId: String): Unit = {\n+    postLiveListenerBus(SparkListenerSessionClosed(sessionId, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementStart(\n+      id: String,\n+      sessionId: String,\n+      statement: String,\n+      groupId: String,\n+      userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerOperationStart(id, sessionId, statement, groupId,\n+      System.currentTimeMillis(), userName))\n+  }\n+\n+  def onStatementParsed(id: String, executionPlan: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationParsed(id, executionPlan))\n+  }\n+\n+  def onStatementCanceled(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationCanceled(id, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementError(id: String, errorMsg: String, errorTrace: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationError(id, errorMsg, errorTrace,\n+      System.currentTimeMillis()))\n+  }\n+\n+  def onStatementFinish(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationFinish(id, System.currentTimeMillis()))\n+\n+  }\n+\n+  def onOperationClosed(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationClosed(id, System.currentTimeMillis()))\n+  }\n+}\n+\n+private[thriftserver] case class SparkListenerSessionCreated("
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Yes, updated",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-25T19:01:16Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+      sc.listenerBus.post(event)\n+  }\n+\n+  def onSessionCreated(ip: String, sessionId: String, userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerSessionCreated(ip, sessionId,\n+      userName, System.currentTimeMillis()))\n+  }\n+\n+  def onSessionClosed(sessionId: String): Unit = {\n+    postLiveListenerBus(SparkListenerSessionClosed(sessionId, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementStart(\n+      id: String,\n+      sessionId: String,\n+      statement: String,\n+      groupId: String,\n+      userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerOperationStart(id, sessionId, statement, groupId,\n+      System.currentTimeMillis(), userName))\n+  }\n+\n+  def onStatementParsed(id: String, executionPlan: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationParsed(id, executionPlan))\n+  }\n+\n+  def onStatementCanceled(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationCanceled(id, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementError(id: String, errorMsg: String, errorTrace: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationError(id, errorMsg, errorTrace,\n+      System.currentTimeMillis()))\n+  }\n+\n+  def onStatementFinish(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationFinish(id, System.currentTimeMillis()))\n+\n+  }\n+\n+  def onOperationClosed(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerOperationClosed(id, System.currentTimeMillis()))\n+  }\n+}\n+\n+private[thriftserver] case class SparkListenerSessionCreated("
  }],
  "prId": 26378
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "Why this one doesn't start with `SparkListenerThriftServer...`",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-27T01:33:32Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+    sc.listenerBus.post(event)\n+  }\n+\n+  def onSessionCreated(ip: String, sessionId: String, userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerSessionCreated(ip, sessionId,\n+      userName, System.currentTimeMillis()))\n+  }\n+\n+  def onSessionClosed(sessionId: String): Unit = {\n+    postLiveListenerBus(SparkListenerSessionClosed(sessionId, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementStart(\n+      id: String,\n+      sessionId: String,\n+      statement: String,\n+      groupId: String,\n+      userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationStart(id, sessionId, statement, groupId,\n+      System.currentTimeMillis(), userName))\n+  }\n+\n+  def onStatementParsed(id: String, executionPlan: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationParsed(id, executionPlan))\n+  }\n+\n+  def onStatementCanceled(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationCanceled(id, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementError(id: String, errorMsg: String, errorTrace: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationError(id, errorMsg, errorTrace,\n+      System.currentTimeMillis()))\n+  }\n+\n+  def onStatementFinish(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationFinish(id, System.currentTimeMillis()))\n+\n+  }\n+\n+  def onOperationClosed(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationClosed(id, System.currentTimeMillis()))\n+  }\n+}\n+\n+private[thriftserver] case class SparkListenerThriftServerSessionCreated(\n+    ip: String,\n+    sessionId: String,\n+    userName: String,\n+    startTime: Long) extends SparkListenerEvent\n+\n+private[thriftserver] case class SparkListenerSessionClosed("
  }, {
    "author": {
      "login": "shahidki31"
    },
    "body": "Thanks. I missed that. Updated",
    "commit": "39ddc891582db48a7d5e2ece771aac064cd41f1f",
    "createdAt": "2019-11-27T01:42:10Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.hive.thriftserver.ui\n+\n+import org.apache.spark.SparkContext\n+import org.apache.spark.scheduler.SparkListenerEvent\n+\n+/**\n+ * This class manages events generated by the thriftserver application. It converts the\n+ * operation and session events to listener events and post it into the live listener bus.\n+ */\n+private[thriftserver] class HiveThriftServer2EventManager(sc: SparkContext) {\n+\n+  def postLiveListenerBus(event: SparkListenerEvent): Unit = {\n+    sc.listenerBus.post(event)\n+  }\n+\n+  def onSessionCreated(ip: String, sessionId: String, userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerSessionCreated(ip, sessionId,\n+      userName, System.currentTimeMillis()))\n+  }\n+\n+  def onSessionClosed(sessionId: String): Unit = {\n+    postLiveListenerBus(SparkListenerSessionClosed(sessionId, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementStart(\n+      id: String,\n+      sessionId: String,\n+      statement: String,\n+      groupId: String,\n+      userName: String = \"UNKNOWN\"): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationStart(id, sessionId, statement, groupId,\n+      System.currentTimeMillis(), userName))\n+  }\n+\n+  def onStatementParsed(id: String, executionPlan: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationParsed(id, executionPlan))\n+  }\n+\n+  def onStatementCanceled(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationCanceled(id, System.currentTimeMillis()))\n+  }\n+\n+  def onStatementError(id: String, errorMsg: String, errorTrace: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationError(id, errorMsg, errorTrace,\n+      System.currentTimeMillis()))\n+  }\n+\n+  def onStatementFinish(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationFinish(id, System.currentTimeMillis()))\n+\n+  }\n+\n+  def onOperationClosed(id: String): Unit = {\n+    postLiveListenerBus(SparkListenerThriftServerOperationClosed(id, System.currentTimeMillis()))\n+  }\n+}\n+\n+private[thriftserver] case class SparkListenerThriftServerSessionCreated(\n+    ip: String,\n+    sessionId: String,\n+    userName: String,\n+    startTime: Long) extends SparkListenerEvent\n+\n+private[thriftserver] case class SparkListenerSessionClosed("
  }],
  "prId": 26378
}]