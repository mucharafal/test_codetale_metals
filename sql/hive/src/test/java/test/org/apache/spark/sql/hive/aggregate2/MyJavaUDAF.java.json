[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "@marmbrus @rxin @davies This is an example UDAF in JAVA.\n",
    "commit": "7865f5ef072d1877b73276f28e84afa98c247a82",
    "createdAt": "2015-07-17T08:15:03Z",
    "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package test.org.apache.spark.sql.hive.aggregate2;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.spark.sql.catalyst.expressions.aggregate2.MutableAggregationBuffer;\n+import org.apache.spark.sql.execution.expressions.aggregate2.UserDefinedAggregateFunction;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.apache.spark.sql.types.DataType;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.Row;\n+\n+public class MyJavaUDAF extends UserDefinedAggregateFunction {\n+\n+  private StructType _inputDataType;\n+\n+  private StructType _bufferSchema;\n+\n+  private DataType _returnDataType;\n+\n+  public MyJavaUDAF() {\n+    List<StructField> inputfields = new ArrayList<StructField>();\n+    inputfields.add(DataTypes.createStructField(\"inputDouble\", DataTypes.DoubleType, true));\n+    _inputDataType = DataTypes.createStructType(inputfields);\n+\n+    List<StructField> bufferFields = new ArrayList<StructField>();\n+    bufferFields.add(DataTypes.createStructField(\"bufferDouble\", DataTypes.DoubleType, true));\n+    _bufferSchema = DataTypes.createStructType(bufferFields);\n+\n+    _returnDataType = DataTypes.DoubleType;\n+  }\n+\n+  @Override public StructType inputDataType() {\n+    return _inputDataType;\n+  }\n+\n+  @Override public StructType bufferSchema() {\n+    return _bufferSchema;\n+  }\n+\n+  @Override public DataType returnDataType() {\n+    return _returnDataType;\n+  }\n+\n+  @Override public boolean deterministic() {\n+    return true;\n+  }\n+\n+  @Override public void initialize(MutableAggregationBuffer buffer) {\n+    buffer.update(0, null);\n+  }\n+\n+  @Override public void update(MutableAggregationBuffer buffer, Row input) {\n+    if (!input.isNullAt(0)) {\n+      if (buffer.isNullAt(0)) {\n+        buffer.update(0, input.getDouble(0));\n+      } else {\n+        Double newValue = input.getDouble(0) * buffer.getDouble(0);\n+        buffer.update(0, newValue);\n+      }\n+    }\n+  }\n+\n+  @Override public void merge(MutableAggregationBuffer buffer1, Row buffer2) {\n+    if (!buffer2.isNullAt(0)) {\n+      if (buffer1.isNullAt(0)) {\n+        buffer1.update(0, buffer2.getDouble(0));\n+      } else {\n+        Double newValue = buffer2.getDouble(0) * buffer1.getDouble(0);\n+        buffer1.update(0, newValue);\n+      }\n+    }\n+  }\n+\n+  @Override public Object evaluate(Row buffer) {\n+    if (buffer.isNullAt(0)) {\n+      return null;\n+    } else {\n+      return buffer.getDouble(0);\n+    }\n+  }\n+}"
  }],
  "prId": 7458
}]