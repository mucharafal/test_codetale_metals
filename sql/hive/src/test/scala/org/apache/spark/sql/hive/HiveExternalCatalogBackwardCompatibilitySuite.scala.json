[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "I briefly checked 1.6. Most of them are the same, but some changes are only available in 2.0. For example, `locationUri = Some(defaultTablePath(\"tbl7\") + \"-__PLACEHOLDER__\"),` was added in https://github.com/apache/spark/pull/13270",
    "commit": "117f5321cac62f01a5726c308efaf7369a9cdc9d",
    "createdAt": "2016-11-27T22:16:48Z",
    "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive\n+\n+import java.net.URI\n+\n+import org.scalatest.BeforeAndAfterEach\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.{CatalogStorageFormat, CatalogTable, CatalogTableType}\n+import org.apache.spark.sql.hive.client.HiveClient\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.util.Utils\n+\n+\n+class HiveExternalCatalogBackwardCompatibilitySuite extends QueryTest\n+  with SQLTestUtils with TestHiveSingleton with BeforeAndAfterEach {\n+\n+  // To test `HiveExternalCatalog`, we need to read/write the raw table meta from/to hive client.\n+  val hiveClient: HiveClient =\n+    spark.sharedState.externalCatalog.asInstanceOf[HiveExternalCatalog].client\n+\n+  val tempDir = Utils.createTempDir().getCanonicalFile\n+\n+  override def beforeEach(): Unit = {\n+    sql(\"CREATE DATABASE test_db\")\n+    for ((tbl, _) <- rawTablesAndExpectations) {\n+      hiveClient.createTable(tbl, ignoreIfExists = false)\n+    }\n+  }\n+\n+  override def afterEach(): Unit = {\n+    Utils.deleteRecursively(tempDir)\n+    hiveClient.dropDatabase(\"test_db\", ignoreIfNotExists = false, cascade = true)\n+  }\n+\n+  private def getTableMetadata(tableName: String): CatalogTable = {\n+    spark.sharedState.externalCatalog.getTable(\"test_db\", tableName)\n+  }\n+\n+  private def defaultTablePath(tableName: String): String = {\n+    spark.sessionState.catalog.defaultTablePath(TableIdentifier(tableName, Some(\"test_db\")))\n+  }\n+\n+\n+  // Raw table metadata that are dumped from tables created by Spark 2.0. Note that, all spark\n+  // versions prior to 2.1 would generate same raw table metadata for a specific table."
  }],
  "prId": 16003
}]