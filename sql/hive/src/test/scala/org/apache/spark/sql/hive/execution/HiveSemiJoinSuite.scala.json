[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Sorry if I missed something. We do not have sort merge semi join, right?\n",
    "commit": "cb69166b1aad6f43a6cb9d400f7b36155d845367",
    "createdAt": "2015-10-21T04:14:29Z",
    "diffHunk": "@@ -0,0 +1,450 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.execution\n+\n+import org.apache.spark.sql.{SQLConf, AnalysisException}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.hive.test.TestHive\n+\n+/**\n+ * A test suite about the IN /NOT IN /EXISTS / NOT EXISTS subquery.\n+ */\n+abstract class HiveSemiJoinSuite extends HiveComparisonTest with BeforeAndAfter {\n+  import org.apache.spark.sql.hive.test.TestHive.implicits._\n+  import org.apache.spark.sql.hive.test.TestHive._\n+\n+  private val confSortMerge = TestHive.getConf(SQLConf.SORTMERGE_JOIN)\n+  private val confBroadcastJoin = TestHive.getConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD)\n+  private val confCodegen = TestHive.getConf(SQLConf.CODEGEN_ENABLED)\n+  private val confTungsten = TestHive.getConf(SQLConf.TUNGSTEN_ENABLED)\n+\n+  def enableSortMerge(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.SORTMERGE_JOIN, enable)\n+  }\n+\n+  def enableBroadcastJoin(enable: Boolean): Unit = {\n+    if (enable) {\n+      TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, -1)\n+    } else {\n+      TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, Int.MaxValue)\n+    }\n+  }\n+\n+  def enableCodeGen(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.CODEGEN_ENABLED, enable)\n+  }\n+\n+  def enableTungsten(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.TUNGSTEN_ENABLED, enable)\n+  }\n+\n+  override def beforeAll() {\n+    // override this method to update the configuration\n+    TestHive.cacheTables = true\n+  }\n+\n+  override def afterAll() {\n+    // restore the configuration\n+    TestHive.setConf(SQLConf.SORTMERGE_JOIN, confSortMerge)\n+    TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, confBroadcastJoin)\n+    TestHive.setConf(SQLConf.CODEGEN_ENABLED, confCodegen)\n+    TestHive.setConf(SQLConf.TUNGSTEN_ENABLED, confTungsten)\n+    TestHive.cacheTables = false\n+  }\n+\n+  ignore(\"reference the expression `min(b.value)` that required implicit change the outer query\") {\n+    sql(\"\"\"select b.key, min(b.value)\n+      |from src b\n+      |group by b.key\n+      |having exists ( select a.key\n+      |from src a\n+      |where a.value > 'val_9' and a.value = min(b.value))\"\"\".stripMargin)\n+  }\n+\n+  ignore(\"multiple reference the outer query variables\") {\n+    sql(\"\"\"select key, value, count(*)\n+      |from src b\n+      |group by key, value\n+      |having count(*) in (\n+      |  select count(*)\n+      |  from src s1\n+      |  where s1.key > '9' and s1.value = b.value\n+      |  group by s1.key)\"\"\".stripMargin)\n+  }\n+\n+  // IN Subquery Unit tests\n+  createQueryTest(\"(unrelated)WHERE clause with IN #1\",\n+    \"\"\"select *\n+    |from src\n+    |where key in (select key from src)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with NOT IN #1\",\n+    \"\"\"select *\n+    |from src\n+    |where key not in (select key from src)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with IN #2\",\n+    \"\"\"select *\n+    |from src\n+    |where src.key in (select t.key from src t)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with NOT IN #2\",\n+    \"\"\"select *\n+    |from src\n+    |where src.key not in (select t.key % 193 from src t)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #3\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in (select key from src s1 where s1.key > 9)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #3\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in (select key from src s1 where s1.key > 9)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #4\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in (select max(s1.key) from src s1 group by s1.value)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #4\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in (select max(s1.key) % 31 from src s1 group by s1.value)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #5\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #5\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #6\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |      and src.key > 10\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #6\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in\n+      |(select max(s1.key) % 31 from src s1 group by s1.value having max(s1.key) > 3)\n+      |      and src.key > 10\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #7\",\n+    \"\"\"select *\n+      |  from src b\n+      |where b.key in\n+      |(select count(*)\n+      |  from src a\n+      |  where a.key > 100\n+      |) and b.key < 200\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #7\",\n+    \"\"\"select *\n+      |  from src b\n+      |where b.key not in\n+      |(select count(*)\n+      |  from src a\n+      |  where a.key > 100\n+      |) and b.key < 200\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with IN #1\",\n+    \"\"\"select *\n+      |from src b\n+      |where b.key in\n+      |        (select a.key\n+      |         from src a\n+      |         where b.value = a.value and a.key > 9\n+      |        )\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT IN #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key not in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\"\n+      .stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with IN #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT IN #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key not in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with EXISTS #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT EXISTS #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where NOT EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with EXISTS #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT EXISTS #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where NOT EXISTS\n+    |        (select a.key % 291\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+}\n+\n+class SemiJoinHashJoin extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(false)\n+    enableTungsten(false)\n+    enableCodeGen(false)\n+  }\n+}\n+\n+class SemiJoinHashJoinTungsten extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(false)\n+    enableTungsten(true)\n+    enableCodeGen(true)\n+  }\n+}\n+\n+class SemiJoinSortMerge extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(true)\n+    enableTungsten(false)\n+    enableCodeGen(false)\n+  }\n+}\n+\n+class SemiJoinSortMergeTungsten extends HiveSemiJoinSuite {",
    "line": 335
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Oh, even I am not so sure, but more unit test is harmless, just in cases people will add the sort merge semi join support in the future.\n",
    "commit": "cb69166b1aad6f43a6cb9d400f7b36155d845367",
    "createdAt": "2015-10-21T12:43:14Z",
    "diffHunk": "@@ -0,0 +1,450 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.execution\n+\n+import org.apache.spark.sql.{SQLConf, AnalysisException}\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.hive.test.TestHive\n+\n+/**\n+ * A test suite about the IN /NOT IN /EXISTS / NOT EXISTS subquery.\n+ */\n+abstract class HiveSemiJoinSuite extends HiveComparisonTest with BeforeAndAfter {\n+  import org.apache.spark.sql.hive.test.TestHive.implicits._\n+  import org.apache.spark.sql.hive.test.TestHive._\n+\n+  private val confSortMerge = TestHive.getConf(SQLConf.SORTMERGE_JOIN)\n+  private val confBroadcastJoin = TestHive.getConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD)\n+  private val confCodegen = TestHive.getConf(SQLConf.CODEGEN_ENABLED)\n+  private val confTungsten = TestHive.getConf(SQLConf.TUNGSTEN_ENABLED)\n+\n+  def enableSortMerge(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.SORTMERGE_JOIN, enable)\n+  }\n+\n+  def enableBroadcastJoin(enable: Boolean): Unit = {\n+    if (enable) {\n+      TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, -1)\n+    } else {\n+      TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, Int.MaxValue)\n+    }\n+  }\n+\n+  def enableCodeGen(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.CODEGEN_ENABLED, enable)\n+  }\n+\n+  def enableTungsten(enable: Boolean): Unit = {\n+    TestHive.setConf(SQLConf.TUNGSTEN_ENABLED, enable)\n+  }\n+\n+  override def beforeAll() {\n+    // override this method to update the configuration\n+    TestHive.cacheTables = true\n+  }\n+\n+  override def afterAll() {\n+    // restore the configuration\n+    TestHive.setConf(SQLConf.SORTMERGE_JOIN, confSortMerge)\n+    TestHive.setConf(SQLConf.AUTO_BROADCASTJOIN_THRESHOLD, confBroadcastJoin)\n+    TestHive.setConf(SQLConf.CODEGEN_ENABLED, confCodegen)\n+    TestHive.setConf(SQLConf.TUNGSTEN_ENABLED, confTungsten)\n+    TestHive.cacheTables = false\n+  }\n+\n+  ignore(\"reference the expression `min(b.value)` that required implicit change the outer query\") {\n+    sql(\"\"\"select b.key, min(b.value)\n+      |from src b\n+      |group by b.key\n+      |having exists ( select a.key\n+      |from src a\n+      |where a.value > 'val_9' and a.value = min(b.value))\"\"\".stripMargin)\n+  }\n+\n+  ignore(\"multiple reference the outer query variables\") {\n+    sql(\"\"\"select key, value, count(*)\n+      |from src b\n+      |group by key, value\n+      |having count(*) in (\n+      |  select count(*)\n+      |  from src s1\n+      |  where s1.key > '9' and s1.value = b.value\n+      |  group by s1.key)\"\"\".stripMargin)\n+  }\n+\n+  // IN Subquery Unit tests\n+  createQueryTest(\"(unrelated)WHERE clause with IN #1\",\n+    \"\"\"select *\n+    |from src\n+    |where key in (select key from src)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with NOT IN #1\",\n+    \"\"\"select *\n+    |from src\n+    |where key not in (select key from src)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with IN #2\",\n+    \"\"\"select *\n+    |from src\n+    |where src.key in (select t.key from src t)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\"(unrelated)WHERE clause with NOT IN #2\",\n+    \"\"\"select *\n+    |from src\n+    |where src.key not in (select t.key % 193 from src t)\n+    |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #3\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in (select key from src s1 where s1.key > 9)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #3\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in (select key from src s1 where s1.key > 9)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #4\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in (select max(s1.key) from src s1 group by s1.value)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #4\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in (select max(s1.key) % 31 from src s1 group by s1.value)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #5\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #5\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #6\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key in\n+      |(select max(s1.key) from src s1 group by s1.value having max(s1.key) > 3)\n+      |      and src.key > 10\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #6\",\n+    \"\"\"select *\n+      |from src\n+      |where src.key not in\n+      |(select max(s1.key) % 31 from src s1 group by s1.value having max(s1.key) > 3)\n+      |      and src.key > 10\n+      |order by key, value LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with IN #7\",\n+    \"\"\"select *\n+      |  from src b\n+      |where b.key in\n+      |(select count(*)\n+      |  from src a\n+      |  where a.key > 100\n+      |) and b.key < 200\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(unrelated)WHERE clause with NOT IN #7\",\n+    \"\"\"select *\n+      |  from src b\n+      |where b.key not in\n+      |(select count(*)\n+      |  from src a\n+      |  where a.key > 100\n+      |) and b.key < 200\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with IN #1\",\n+    \"\"\"select *\n+      |from src b\n+      |where b.key in\n+      |        (select a.key\n+      |         from src a\n+      |         where b.value = a.value and a.key > 9\n+      |        )\n+      |order by key, value\n+      |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT IN #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key not in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\"\n+      .stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with IN #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT IN #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where b.key not in\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with EXISTS #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT EXISTS #1\",\n+    \"\"\"select *\n+    |from src b\n+    |where NOT EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |order by key, value\n+    |LIMIT 5\"\"\".stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with EXISTS #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where EXISTS\n+    |        (select a.key\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+\n+  createQueryTest(\n+    \"(correlated)WHERE clause with NOT EXISTS #2\",\n+    \"\"\"select *\n+    |from src b\n+    |where NOT EXISTS\n+    |        (select a.key % 291\n+    |         from src a\n+    |         where b.value = a.value and a.key > 9\n+    |        )\n+    |and b.key > 15\n+    |order by key, value\n+    |LIMIT 5\"\"\".\n+      stripMargin)\n+}\n+\n+class SemiJoinHashJoin extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(false)\n+    enableTungsten(false)\n+    enableCodeGen(false)\n+  }\n+}\n+\n+class SemiJoinHashJoinTungsten extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(false)\n+    enableTungsten(true)\n+    enableCodeGen(true)\n+  }\n+}\n+\n+class SemiJoinSortMerge extends HiveSemiJoinSuite {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    enableSortMerge(true)\n+    enableTungsten(false)\n+    enableCodeGen(false)\n+  }\n+}\n+\n+class SemiJoinSortMergeTungsten extends HiveSemiJoinSuite {",
    "line": 335
  }],
  "prId": 9055
}]