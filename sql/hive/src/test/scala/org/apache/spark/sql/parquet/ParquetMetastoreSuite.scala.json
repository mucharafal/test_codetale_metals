[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "If we execute setup queries in the constructor, will we introduce any issue to mvn tests? It looks similar with what we originally did for `HiveTableScanSuite`. Then, we have to use `createQueryTest` to atomically run setup and execution.\n",
    "commit": "162007913f962910d40be7f03a39cf2541ab8dcc",
    "createdAt": "2014-08-07T17:21:10Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import java.io.File\n+\n+import org.apache.spark.sql.hive.execution.HiveTableScan\n+import org.scalatest.BeforeAndAfterAll\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.execution.{BroadcastHashJoin, ShuffledHashJoin}\n+import org.apache.spark.sql.hive.test.TestHive\n+import org.apache.spark.sql.hive.test.TestHive._\n+\n+case class ParquetData(intField: Int, stringField: String)\n+\n+/**\n+ * Tests for our SerDe -> Native parquet scan conversion.\n+ */\n+class ParquetMetastoreSuite extends QueryTest with BeforeAndAfterAll {\n+\n+  override def beforeAll(): Unit = {\n+    setConf(\"spark.sql.hive.convertMetastoreParquet\", \"true\")\n+  }\n+\n+  override def afterAll(): Unit = {\n+    setConf(\"spark.sql.hive.convertMetastoreParquet\", \"false\")\n+  }\n+\n+  val partitionedTableDir = File.createTempFile(\"parquettests\", \"sparksql\")\n+  partitionedTableDir.delete()\n+  partitionedTableDir.mkdir()\n+\n+  (1 to 10).foreach { p =>\n+    val partDir = new File(partitionedTableDir, s\"p=$p\")\n+    sparkContext.makeRDD(1 to 10)\n+      .map(i => ParquetData(i, s\"part-$p\"))\n+      .saveAsParquetFile(partDir.getCanonicalPath)\n+  }\n+\n+  sql(s\"\"\"",
    "line": 59
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "I think we are okay as long as we don't use createQueryTest anywhere, since it runs `reset()`.  I can try to move the DDL into each test to be safe though.\n",
    "commit": "162007913f962910d40be7f03a39cf2541ab8dcc",
    "createdAt": "2014-08-16T18:56:31Z",
    "diffHunk": "@@ -0,0 +1,138 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import java.io.File\n+\n+import org.apache.spark.sql.hive.execution.HiveTableScan\n+import org.scalatest.BeforeAndAfterAll\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.execution.{BroadcastHashJoin, ShuffledHashJoin}\n+import org.apache.spark.sql.hive.test.TestHive\n+import org.apache.spark.sql.hive.test.TestHive._\n+\n+case class ParquetData(intField: Int, stringField: String)\n+\n+/**\n+ * Tests for our SerDe -> Native parquet scan conversion.\n+ */\n+class ParquetMetastoreSuite extends QueryTest with BeforeAndAfterAll {\n+\n+  override def beforeAll(): Unit = {\n+    setConf(\"spark.sql.hive.convertMetastoreParquet\", \"true\")\n+  }\n+\n+  override def afterAll(): Unit = {\n+    setConf(\"spark.sql.hive.convertMetastoreParquet\", \"false\")\n+  }\n+\n+  val partitionedTableDir = File.createTempFile(\"parquettests\", \"sparksql\")\n+  partitionedTableDir.delete()\n+  partitionedTableDir.mkdir()\n+\n+  (1 to 10).foreach { p =>\n+    val partDir = new File(partitionedTableDir, s\"p=$p\")\n+    sparkContext.makeRDD(1 to 10)\n+      .map(i => ParquetData(i, s\"part-$p\"))\n+      .saveAsParquetFile(partDir.getCanonicalPath)\n+  }\n+\n+  sql(s\"\"\"",
    "line": 59
  }],
  "prId": 1819
}]