[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Looks like wrapper approach is usually faster than copy approach.",
    "commit": "b78c6ec6e7579f861ddc95ed12de647992de8d0e",
    "createdAt": "2018-01-10T08:29:05Z",
    "diffHunk": "@@ -331,40 +378,50 @@ object OrcReadBenchmark {\n             \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n         }\n \n+        benchmark.addCase(\"Native ORC Vectorized with copy\") { _ =>\n+          withSQLConf(SQLConf.ORC_COPY_BATCH_TO_SPARK.key -> \"true\") {\n+            spark.sql(\"SELECT SUM(LENGTH(c2)) FROM nativeOrcTable \" +\n+              \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n+          }\n+        }\n+\n         benchmark.addCase(\"Hive built-in ORC\") { _ =>\n           spark.sql(\"SELECT SUM(LENGTH(c2)) FROM hiveOrcTable \" +\n             \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n         }\n \n         /*\n-        Java HotSpot(TM) 64-Bit Server VM 1.8.0_152-b16 on Mac OS X 10.13.2\n-        Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz\n+        Java HotSpot(TM) 64-Bit Server VM 1.8.0_60-b27 on Mac OS X 10.13.1\n+        Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n \n         String with Nulls Scan (0.0%):           Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n         ------------------------------------------------------------------------------------------------\n-        Native ORC MR                                 2553 / 2554          4.1         243.4       1.0X\n-        Native ORC Vectorized                          953 /  954         11.0          90.9       2.7X\n-        Hive built-in ORC                             3875 / 3898          2.7         369.6       0.7X\n+        Native ORC MR                                 2394 / 2886          4.4         228.3       1.0X\n+        Native ORC Vectorized                          699 /  729         15.0          66.7       3.4X\n+        Native ORC Vectorized with copy                959 / 1025         10.9          91.5       2.5X\n+        Hive built-in ORC                             3899 / 3901          2.7         371.9       0.6X\n \n         String with Nulls Scan (0.5%):           Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n         ------------------------------------------------------------------------------------------------\n-        Native ORC MR                                 2389 / 2408          4.4         227.8       1.0X\n-        Native ORC Vectorized                         1208 / 1209          8.7         115.2       2.0X\n-        Hive built-in ORC                             2940 / 2952          3.6         280.4       0.8X\n+        Native ORC MR                                 2234 / 2255          4.7         213.1       1.0X\n+        Native ORC Vectorized                          854 /  869         12.3          81.4       2.6X\n+        Native ORC Vectorized with copy               1099 / 1128          9.5         104.8       2.0X",
    "line": 315
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "For long term, maybe we can consider remove copy approach to simplify the codes.",
    "commit": "b78c6ec6e7579f861ddc95ed12de647992de8d0e",
    "createdAt": "2018-01-10T08:32:01Z",
    "diffHunk": "@@ -331,40 +378,50 @@ object OrcReadBenchmark {\n             \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n         }\n \n+        benchmark.addCase(\"Native ORC Vectorized with copy\") { _ =>\n+          withSQLConf(SQLConf.ORC_COPY_BATCH_TO_SPARK.key -> \"true\") {\n+            spark.sql(\"SELECT SUM(LENGTH(c2)) FROM nativeOrcTable \" +\n+              \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n+          }\n+        }\n+\n         benchmark.addCase(\"Hive built-in ORC\") { _ =>\n           spark.sql(\"SELECT SUM(LENGTH(c2)) FROM hiveOrcTable \" +\n             \"WHERE c1 IS NOT NULL AND c2 IS NOT NULL\").collect()\n         }\n \n         /*\n-        Java HotSpot(TM) 64-Bit Server VM 1.8.0_152-b16 on Mac OS X 10.13.2\n-        Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz\n+        Java HotSpot(TM) 64-Bit Server VM 1.8.0_60-b27 on Mac OS X 10.13.1\n+        Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n \n         String with Nulls Scan (0.0%):           Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n         ------------------------------------------------------------------------------------------------\n-        Native ORC MR                                 2553 / 2554          4.1         243.4       1.0X\n-        Native ORC Vectorized                          953 /  954         11.0          90.9       2.7X\n-        Hive built-in ORC                             3875 / 3898          2.7         369.6       0.7X\n+        Native ORC MR                                 2394 / 2886          4.4         228.3       1.0X\n+        Native ORC Vectorized                          699 /  729         15.0          66.7       3.4X\n+        Native ORC Vectorized with copy                959 / 1025         10.9          91.5       2.5X\n+        Hive built-in ORC                             3899 / 3901          2.7         371.9       0.6X\n \n         String with Nulls Scan (0.5%):           Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n         ------------------------------------------------------------------------------------------------\n-        Native ORC MR                                 2389 / 2408          4.4         227.8       1.0X\n-        Native ORC Vectorized                         1208 / 1209          8.7         115.2       2.0X\n-        Hive built-in ORC                             2940 / 2952          3.6         280.4       0.8X\n+        Native ORC MR                                 2234 / 2255          4.7         213.1       1.0X\n+        Native ORC Vectorized                          854 /  869         12.3          81.4       2.6X\n+        Native ORC Vectorized with copy               1099 / 1128          9.5         104.8       2.0X",
    "line": 315
  }],
  "prId": 20205
}]