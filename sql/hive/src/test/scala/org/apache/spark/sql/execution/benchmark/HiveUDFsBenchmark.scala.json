[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "3 vs 1 ms? The results are probably not realistic. Can you make the benchmark at least 3000x bigger?",
    "commit": "d7be870d338e70882b7fc000e450a6d20787c70d",
    "createdAt": "2017-02-10T15:38:41Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.hadoop.hive.ql.udf.UDFToDouble\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFAbs\n+\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+\n+class HiveUDFsBenchmark extends BenchmarkBase with TestHiveSingleton {\n+\n+  ignore(\"HiveSimpleUDF\") {\n+    val N = 2L << 26\n+    sparkSession.range(N).createOrReplaceTempView(\"t\")\n+    sparkSession.sql(s\"CREATE TEMPORARY FUNCTION f AS '${classOf[UDFToDouble].getName}'\")\n+\n+    /*\n+     Java HotSpot(TM) 64-Bit Server VM 1.8.0_31-b13 on Mac OS X 10.10.2\n+     Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz\n+\n+     Call Hive UDF:                         Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n+     ----------------------------------------------------------------------------------------------\n+     Call Hive UDF wholestage off                   3 /    3      43794.0           0.0       1.0X\n+     Call Hive UDF wholestage on                    1 /    2     101551.3           0.0       2.3X",
    "line": 39
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "okay, I'll update",
    "commit": "d7be870d338e70882b7fc000e450a6d20787c70d",
    "createdAt": "2017-02-10T16:56:28Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.hadoop.hive.ql.udf.UDFToDouble\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFAbs\n+\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+\n+class HiveUDFsBenchmark extends BenchmarkBase with TestHiveSingleton {\n+\n+  ignore(\"HiveSimpleUDF\") {\n+    val N = 2L << 26\n+    sparkSession.range(N).createOrReplaceTempView(\"t\")\n+    sparkSession.sql(s\"CREATE TEMPORARY FUNCTION f AS '${classOf[UDFToDouble].getName}'\")\n+\n+    /*\n+     Java HotSpot(TM) 64-Bit Server VM 1.8.0_31-b13 on Mac OS X 10.10.2\n+     Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz\n+\n+     Call Hive UDF:                         Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n+     ----------------------------------------------------------------------------------------------\n+     Call Hive UDF wholestage off                   3 /    3      43794.0           0.0       1.0X\n+     Call Hive UDF wholestage on                    1 /    2     101551.3           0.0       2.3X",
    "line": 39
  }],
  "prId": 15928
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Same comment. 3 vs 1 ms???",
    "commit": "d7be870d338e70882b7fc000e450a6d20787c70d",
    "createdAt": "2017-02-10T15:47:30Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.hadoop.hive.ql.udf.UDFToDouble\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDFAbs\n+\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+\n+class HiveUDFsBenchmark extends BenchmarkBase with TestHiveSingleton {\n+\n+  ignore(\"HiveSimpleUDF\") {\n+    val N = 2L << 26\n+    sparkSession.range(N).createOrReplaceTempView(\"t\")\n+    sparkSession.sql(s\"CREATE TEMPORARY FUNCTION f AS '${classOf[UDFToDouble].getName}'\")\n+\n+    /*\n+     Java HotSpot(TM) 64-Bit Server VM 1.8.0_31-b13 on Mac OS X 10.10.2\n+     Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz\n+\n+     Call Hive UDF:                         Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n+     ----------------------------------------------------------------------------------------------\n+     Call Hive UDF wholestage off                   3 /    3      43794.0           0.0       1.0X\n+     Call Hive UDF wholestage on                    1 /    2     101551.3           0.0       2.3X\n+     */\n+    runBenchmark(\"Call Hive UDF\", N) {\n+      sparkSession.sql(\"SELECT f(id) FROM t\")\n+    }\n+    sparkSession.sql(\"DROP TEMPORARY FUNCTION IF EXISTS f\")\n+  }\n+\n+  ignore(\"HiveGenericUDF\") {\n+    val N = 2L << 26\n+    sparkSession.range(N).createOrReplaceTempView(\"t\")\n+    sparkSession.sql(s\"CREATE TEMPORARY FUNCTION f AS '${classOf[GenericUDFAbs].getName}'\")\n+\n+    /*\n+     Java HotSpot(TM) 64-Bit Server VM 1.8.0_31-b13 on Mac OS X 10.10.2\n+     Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz\n+\n+     Call Hive generic UDF:                 Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n+     ----------------------------------------------------------------------------------------------\n+     Call Hive generic UDF wholestage off           2 /    2      86919.9           0.0       1.0X",
    "line": 58
  }],
  "prId": 15928
}]