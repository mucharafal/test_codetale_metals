[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Please change this to `CREATE EXTERNAL TABLE with subdirectories`, too.",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-05T06:29:26Z",
    "diffHunk": "@@ -190,4 +190,12 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       }\n     }\n   }\n+\n+  test(\"SPARK-25993 Add test cases for resolution of ORC table location\") {"
  }, {
    "author": {
      "login": "kevinyu98"
    },
    "body": "Changed.",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-05T22:44:10Z",
    "diffHunk": "@@ -190,4 +190,12 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       }\n     }\n   }\n+\n+  test(\"SPARK-25993 Add test cases for resolution of ORC table location\") {"
  }],
  "prId": 23108
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "The above change in line 76 ~ 80 looks strange and irrelevant. Let's revert this change.",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-06T08:26:23Z",
    "diffHunk": "@@ -73,9 +73,11 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       sql(\n         s\"\"\"\n           |CREATE TABLE $tableName\n+\n           |USING org.apache.spark.sql.hive.orc\n           |OPTIONS (\n-          |  PATH '${new File(orcTableAsDir.getAbsolutePath).toURI}'\n+          |  PATH '${new File(orcTableAsDir.getAbsolutePath\n+        ).toURI}'"
  }, {
    "author": {
      "login": "kevinyu98"
    },
    "body": "good catch, I didn't notice my changes affect the formatting in the file. I have revert the change.  Thanks",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-06T19:12:11Z",
    "diffHunk": "@@ -73,9 +73,11 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       sql(\n         s\"\"\"\n           |CREATE TABLE $tableName\n+\n           |USING org.apache.spark.sql.hive.orc\n           |OPTIONS (\n-          |  PATH '${new File(orcTableAsDir.getAbsolutePath).toURI}'\n+          |  PATH '${new File(orcTableAsDir.getAbsolutePath\n+        ).toURI}'"
  }],
  "prId": 23108
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "It seems that we need to clean up `tbl1` ~ `tbl4`, too.",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-06T08:39:04Z",
    "diffHunk": "@@ -190,4 +192,103 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       }\n     }\n   }\n+\n+  test(\"SPARK-25993 CREATE EXTERNAL TABLE with subdirectories\") {\n+    Seq(true, false).foreach { convertMetastore =>\n+      withSQLConf(HiveUtils.CONVERT_METASTORE_ORC.key -> s\"$convertMetastore\") {\n+        withTempDir { dir =>\n+          val dataDir = new File(s\"${dir.getCanonicalPath}/l3/l2/l1/\").toURI\n+          val parentDir = s\"${dir.getCanonicalPath}/l3/l2/\"\n+          val l3Dir = s\"${dir.getCanonicalPath}/l3/\"\n+          val wildcardParentDir = new File(s\"${dir}/l3/l2/*\").toURI\n+          val wildcardL3Dir = new File(s\"${dir}/l3/*\").toURI\n+\n+          try {\n+            hiveClient.runSqlHive(\"USE default\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |CREATE EXTERNAL TABLE hive_orc(\n+                |  C1 INT,\n+                |  C2 INT,\n+                |  C3 STRING)\n+                |STORED AS orc\"\"\".stripMargin)\n+            // Hive throws an exception if I assign the location in the create table statement.\n+            hiveClient.runSqlHive(\n+              s\"ALTER TABLE hive_orc SET LOCATION '$dataDir'\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |INSERT INTO TABLE hive_orc\n+                |VALUES (1, 1, 'orc1'), (2, 2, 'orc2')\"\"\".stripMargin)\n+\n+            withTable(\"tbl1\", \"tbl2\", \"tbl3\", \"tbl4\") {\n+              val parentDirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl1(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${parentDir}'\"\"\".stripMargin\n+              sql(parentDirStatement)\n+              val parentDirSqlStatement = s\"select * from tbl1\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(parentDirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(parentDirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val l3DirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl2(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${l3Dir}'\"\"\".stripMargin\n+              sql(l3DirStatement)\n+              val l3DirSqlStatement = s\"select * from tbl2\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(l3DirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(l3DirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val wildcardStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl3(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardParentDir'\"\"\".stripMargin\n+              sql(wildcardStatement)\n+              val wildcardSqlStatement = s\"select * from tbl3\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(wildcardSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              } else {\n+                checkAnswer(sql(wildcardSqlStatement), Nil)\n+              }\n+\n+              val wildcardL3Statement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl4(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardL3Dir'\"\"\".stripMargin\n+              sql(wildcardL3Statement)\n+              val wildcardL3SqlStatement = s\"select * from tbl4\"\n+              checkAnswer(sql(wildcardL3SqlStatement), Nil)\n+            }\n+          } finally {\n+            hiveClient.runSqlHive(\"DROP TABLE IF EXISTS hive_orc\")",
    "line": 149
  }, {
    "author": {
      "login": "kevinyu98"
    },
    "body": "@dongjoon-hyun at line 221, I put the `tbl1` ~ `tbl4` with the `withTable`, I think it will get dropped. I tried to run it couple time in intellij, it seems work fine. what do you think?",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-06T22:17:48Z",
    "diffHunk": "@@ -190,4 +192,103 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       }\n     }\n   }\n+\n+  test(\"SPARK-25993 CREATE EXTERNAL TABLE with subdirectories\") {\n+    Seq(true, false).foreach { convertMetastore =>\n+      withSQLConf(HiveUtils.CONVERT_METASTORE_ORC.key -> s\"$convertMetastore\") {\n+        withTempDir { dir =>\n+          val dataDir = new File(s\"${dir.getCanonicalPath}/l3/l2/l1/\").toURI\n+          val parentDir = s\"${dir.getCanonicalPath}/l3/l2/\"\n+          val l3Dir = s\"${dir.getCanonicalPath}/l3/\"\n+          val wildcardParentDir = new File(s\"${dir}/l3/l2/*\").toURI\n+          val wildcardL3Dir = new File(s\"${dir}/l3/*\").toURI\n+\n+          try {\n+            hiveClient.runSqlHive(\"USE default\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |CREATE EXTERNAL TABLE hive_orc(\n+                |  C1 INT,\n+                |  C2 INT,\n+                |  C3 STRING)\n+                |STORED AS orc\"\"\".stripMargin)\n+            // Hive throws an exception if I assign the location in the create table statement.\n+            hiveClient.runSqlHive(\n+              s\"ALTER TABLE hive_orc SET LOCATION '$dataDir'\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |INSERT INTO TABLE hive_orc\n+                |VALUES (1, 1, 'orc1'), (2, 2, 'orc2')\"\"\".stripMargin)\n+\n+            withTable(\"tbl1\", \"tbl2\", \"tbl3\", \"tbl4\") {\n+              val parentDirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl1(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${parentDir}'\"\"\".stripMargin\n+              sql(parentDirStatement)\n+              val parentDirSqlStatement = s\"select * from tbl1\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(parentDirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(parentDirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val l3DirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl2(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${l3Dir}'\"\"\".stripMargin\n+              sql(l3DirStatement)\n+              val l3DirSqlStatement = s\"select * from tbl2\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(l3DirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(l3DirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val wildcardStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl3(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardParentDir'\"\"\".stripMargin\n+              sql(wildcardStatement)\n+              val wildcardSqlStatement = s\"select * from tbl3\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(wildcardSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              } else {\n+                checkAnswer(sql(wildcardSqlStatement), Nil)\n+              }\n+\n+              val wildcardL3Statement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl4(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardL3Dir'\"\"\".stripMargin\n+              sql(wildcardL3Statement)\n+              val wildcardL3SqlStatement = s\"select * from tbl4\"\n+              checkAnswer(sql(wildcardL3SqlStatement), Nil)\n+            }\n+          } finally {\n+            hiveClient.runSqlHive(\"DROP TABLE IF EXISTS hive_orc\")",
    "line": 149
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Got it. I missed that.",
    "commit": "fef8c6845ccce792474a8c65ee6ebfd9624bb4b4",
    "createdAt": "2018-12-08T19:40:32Z",
    "diffHunk": "@@ -190,4 +192,103 @@ class HiveOrcSourceSuite extends OrcSuite with TestHiveSingleton {\n       }\n     }\n   }\n+\n+  test(\"SPARK-25993 CREATE EXTERNAL TABLE with subdirectories\") {\n+    Seq(true, false).foreach { convertMetastore =>\n+      withSQLConf(HiveUtils.CONVERT_METASTORE_ORC.key -> s\"$convertMetastore\") {\n+        withTempDir { dir =>\n+          val dataDir = new File(s\"${dir.getCanonicalPath}/l3/l2/l1/\").toURI\n+          val parentDir = s\"${dir.getCanonicalPath}/l3/l2/\"\n+          val l3Dir = s\"${dir.getCanonicalPath}/l3/\"\n+          val wildcardParentDir = new File(s\"${dir}/l3/l2/*\").toURI\n+          val wildcardL3Dir = new File(s\"${dir}/l3/*\").toURI\n+\n+          try {\n+            hiveClient.runSqlHive(\"USE default\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |CREATE EXTERNAL TABLE hive_orc(\n+                |  C1 INT,\n+                |  C2 INT,\n+                |  C3 STRING)\n+                |STORED AS orc\"\"\".stripMargin)\n+            // Hive throws an exception if I assign the location in the create table statement.\n+            hiveClient.runSqlHive(\n+              s\"ALTER TABLE hive_orc SET LOCATION '$dataDir'\")\n+            hiveClient.runSqlHive(\n+              \"\"\"\n+                |INSERT INTO TABLE hive_orc\n+                |VALUES (1, 1, 'orc1'), (2, 2, 'orc2')\"\"\".stripMargin)\n+\n+            withTable(\"tbl1\", \"tbl2\", \"tbl3\", \"tbl4\") {\n+              val parentDirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl1(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${parentDir}'\"\"\".stripMargin\n+              sql(parentDirStatement)\n+              val parentDirSqlStatement = s\"select * from tbl1\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(parentDirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(parentDirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val l3DirStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl2(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '${l3Dir}'\"\"\".stripMargin\n+              sql(l3DirStatement)\n+              val l3DirSqlStatement = s\"select * from tbl2\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(l3DirSqlStatement), Nil)\n+              } else {\n+                checkAnswer(sql(l3DirSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              }\n+\n+              val wildcardStatement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl3(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardParentDir'\"\"\".stripMargin\n+              sql(wildcardStatement)\n+              val wildcardSqlStatement = s\"select * from tbl3\"\n+              if (convertMetastore) {\n+                checkAnswer(sql(wildcardSqlStatement),\n+                  (1 to 2).map(i => Row(i, i, s\"orc$i\")))\n+              } else {\n+                checkAnswer(sql(wildcardSqlStatement), Nil)\n+              }\n+\n+              val wildcardL3Statement =\n+                s\"\"\"\n+                   |CREATE EXTERNAL TABLE tbl4(\n+                   |  c1 int,\n+                   |  c2 int,\n+                   |  c3 string)\n+                   |STORED AS orc\n+                   |LOCATION '$wildcardL3Dir'\"\"\".stripMargin\n+              sql(wildcardL3Statement)\n+              val wildcardL3SqlStatement = s\"select * from tbl4\"\n+              checkAnswer(sql(wildcardL3SqlStatement), Nil)\n+            }\n+          } finally {\n+            hiveClient.runSqlHive(\"DROP TABLE IF EXISTS hive_orc\")",
    "line": 149
  }],
  "prId": 23108
}]