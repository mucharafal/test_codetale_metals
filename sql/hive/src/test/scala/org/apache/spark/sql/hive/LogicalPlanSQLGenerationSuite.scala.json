[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think we need some complex test cases like projection over aggregation.\n",
    "commit": "97cd39e146ce1a4b49e3ca01b8a44906d7b19351",
    "createdAt": "2016-01-04T15:01:31Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive\n+\n+import org.apache.spark.sql.catalyst.plans.logical.OneRowRelation\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+// All test cases in this test suite are ignored for now because currently `SQLBuilder` only handles\n+// resolved logical plans parsed directly from HiveQL query strings.\n+class LogicalPlanSQLGenerationSuite extends SQLGenerationTest with SQLTestUtils {\n+  import hiveContext.implicits._\n+\n+  protected override def beforeAll(): Unit = {\n+    super.beforeAll()\n+\n+    sqlContext.range(10).select('id alias \"a\").registerTempTable(\"t0\")\n+    sqlContext.range(10).select('id alias \"b\").registerTempTable(\"t1\")\n+  }\n+\n+  protected override def afterAll(): Unit = {\n+    sqlContext.dropTempTable(\"t0\")\n+    sqlContext.dropTempTable(\"t1\")\n+\n+    super.afterAll()\n+  }\n+\n+  ignore(\"single row project\") {\n+    checkSQL(OneRowRelation.select(lit(1)), \"SELECT 1 AS `1`\")\n+    checkSQL(OneRowRelation.select(lit(1) as 'a), \"SELECT 1 AS `a`\")\n+  }\n+\n+  ignore(\"project with limit\") {\n+    checkSQL(OneRowRelation.select(lit(1)).limit(1), \"SELECT 1 AS `1` LIMIT 1\")\n+    checkSQL(OneRowRelation.select(lit(1) as 'a).limit(1), \"SELECT 1 AS `a` LIMIT 1\")\n+  }\n+\n+  ignore(\"table lookup\") {\n+    checkSQL(sqlContext.table(\"t0\"), \"SELECT `t0`.`a` FROM `t0`\")\n+    checkSQL(sqlContext.table(\"t1\").select('b alias \"c\"), \"SELECT `t1`.`id` AS `c` FROM `t1`\")\n+  }\n+}"
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "Currently I mostly use the existing `HiveCompatibilitySuite` for testing SQL generation.  This test suite meant to test query plans built by arbitrary DataFrame API call combinations, which are not supported for now. That's why all test cases are ignored.\n",
    "commit": "97cd39e146ce1a4b49e3ca01b8a44906d7b19351",
    "createdAt": "2016-01-04T15:06:45Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive\n+\n+import org.apache.spark.sql.catalyst.plans.logical.OneRowRelation\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+// All test cases in this test suite are ignored for now because currently `SQLBuilder` only handles\n+// resolved logical plans parsed directly from HiveQL query strings.\n+class LogicalPlanSQLGenerationSuite extends SQLGenerationTest with SQLTestUtils {\n+  import hiveContext.implicits._\n+\n+  protected override def beforeAll(): Unit = {\n+    super.beforeAll()\n+\n+    sqlContext.range(10).select('id alias \"a\").registerTempTable(\"t0\")\n+    sqlContext.range(10).select('id alias \"b\").registerTempTable(\"t1\")\n+  }\n+\n+  protected override def afterAll(): Unit = {\n+    sqlContext.dropTempTable(\"t0\")\n+    sqlContext.dropTempTable(\"t1\")\n+\n+    super.afterAll()\n+  }\n+\n+  ignore(\"single row project\") {\n+    checkSQL(OneRowRelation.select(lit(1)), \"SELECT 1 AS `1`\")\n+    checkSQL(OneRowRelation.select(lit(1) as 'a), \"SELECT 1 AS `a`\")\n+  }\n+\n+  ignore(\"project with limit\") {\n+    checkSQL(OneRowRelation.select(lit(1)).limit(1), \"SELECT 1 AS `1` LIMIT 1\")\n+    checkSQL(OneRowRelation.select(lit(1) as 'a).limit(1), \"SELECT 1 AS `a` LIMIT 1\")\n+  }\n+\n+  ignore(\"table lookup\") {\n+    checkSQL(sqlContext.table(\"t0\"), \"SELECT `t0`.`a` FROM `t0`\")\n+    checkSQL(sqlContext.table(\"t1\").select('b alias \"c\"), \"SELECT `t1`.`id` AS `c` FROM `t1`\")\n+  }\n+}"
  }],
  "prId": 10541
}]