[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Why do we need to check different source tables?",
    "commit": "3a6dd3e0185423a88541dd83e313690afdcd2543",
    "createdAt": "2017-01-07T18:23:45Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.execution\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.{CatalogStorageFormat, CatalogTable, CatalogTableType}\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A suite for testing resolve the views defined by older versions of Spark(before 2.2)\n+ */\n+class SQLViewBackwardCompatibilitySuite extends QueryTest\n+  with SQLTestUtils with TestHiveSingleton {\n+\n+  private val DATABASE_NAME = \"test_db\"\n+\n+  override def beforeAll(): Unit = {\n+    sql(s\"CREATE DATABASE $DATABASE_NAME\")\n+    for ((tbl, _) <- rawTablesAndExpectations) {\n+      spark.sessionState.catalog.createTable(tbl, ignoreIfExists = false)\n+    }\n+  }\n+\n+  override def afterAll(): Unit = {\n+    sql(s\"DROP DATABASE IF EXISTS $DATABASE_NAME CASCADE\")\n+  }\n+\n+  private val simpleSchema = new StructType().add(\"id\", \"int\").add(\"id1\", \"int\")\n+\n+  lazy val jsonTable = CatalogTable(\n+    identifier = TableIdentifier(\"json_table\", Some(DATABASE_NAME)),\n+    tableType = CatalogTableType.MANAGED,\n+    provider = Some(\"json\"),\n+    storage = CatalogStorageFormat.empty,\n+    schema = simpleSchema)\n+\n+  lazy val parquetTable = CatalogTable(\n+    identifier = TableIdentifier(\"parquet_table\", Some(DATABASE_NAME)),\n+    tableType = CatalogTableType.MANAGED,\n+    provider = Some(\"parquet\"),\n+    storage = CatalogStorageFormat.empty,\n+    schema = simpleSchema,\n+    partitionColumnNames = Seq(\"id\"))\n+\n+  lazy val hiveParquetTable = CatalogTable(\n+    identifier = TableIdentifier(\"hive_parquet_table\", Some(DATABASE_NAME)),\n+    tableType = CatalogTableType.MANAGED,\n+    provider = Some(\"hive\"),\n+    storage = CatalogStorageFormat.empty.copy(\n+      inputFormat = Some(\"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"),\n+      outputFormat = Some(\"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"),\n+      serde = Some(\"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\")),\n+    schema = simpleSchema)\n+\n+  lazy val hiveOrcTable = CatalogTable(\n+    identifier = TableIdentifier(\"hive_orc_table\", Some(DATABASE_NAME)),\n+    tableType = CatalogTableType.MANAGED,\n+    provider = Some(\"hive\"),\n+    storage = CatalogStorageFormat.empty.copy(\n+      inputFormat = Some(\"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\"),\n+      outputFormat = Some(\"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\"),\n+      serde = Some(\"org.apache.hadoop.hive.ql.io.orc.OrcSerde\")),\n+    schema = simpleSchema)\n+\n+  // A list of all raw tables we want to test, with their expected schema.\n+  lazy val rawTablesAndExpectations = Seq("
  }],
  "prId": 16233
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Why the string interpolation? Do we need a way to generify this?",
    "commit": "3a6dd3e0185423a88541dd83e313690afdcd2543",
    "createdAt": "2017-01-07T18:27:13Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.execution\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.{CatalogStorageFormat, CatalogTable, CatalogTableType}\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A suite for testing resolve the views defined by older versions of Spark(before 2.2)\n+ */\n+class SQLViewBackwardCompatibilitySuite extends QueryTest\n+  with SQLTestUtils with TestHiveSingleton {\n+\n+  private val DATABASE_NAME = \"test_db\""
  }],
  "prId": 16233
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Just simplify this test to a single test case.",
    "commit": "3a6dd3e0185423a88541dd83e313690afdcd2543",
    "createdAt": "2017-01-07T18:59:22Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.execution\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.{CatalogStorageFormat, CatalogTable, CatalogTableType}\n+import org.apache.spark.sql.hive.test.TestHiveSingleton\n+import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A suite for testing resolve the views defined by older versions of Spark(before 2.2)\n+ */\n+class SQLViewBackwardCompatibilitySuite extends QueryTest"
  }],
  "prId": 16233
}]