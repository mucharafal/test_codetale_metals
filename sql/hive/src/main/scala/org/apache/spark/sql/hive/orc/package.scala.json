[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please use `def orcFile(path: String, paths: String*)` to make it more Java friendly.\n",
    "commit": "4dbea6ee3feafd549938aebf7bba4181b5a097ae",
    "createdAt": "2015-05-14T17:39:03Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive\n+\n+import com.esotericsoftware.kryo.io.Output\n+import com.esotericsoftware.kryo.Kryo\n+import org.apache.commons.codec.binary.Base64\n+import org.apache.spark.sql.{SaveMode, DataFrame}\n+import scala.reflect.runtime.universe.{TypeTag, typeTag}\n+\n+package object orc {\n+  implicit class OrcContext(sqlContext: HiveContext) {\n+    import sqlContext._\n+    @scala.annotation.varargs\n+    def orcFile(paths: String*): DataFrame = {"
  }],
  "prId": 6135
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "This can be removed.\n",
    "commit": "4dbea6ee3feafd549938aebf7bba4181b5a097ae",
    "createdAt": "2015-05-14T17:39:57Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive\n+\n+import com.esotericsoftware.kryo.io.Output\n+import com.esotericsoftware.kryo.Kryo\n+import org.apache.commons.codec.binary.Base64\n+import org.apache.spark.sql.{SaveMode, DataFrame}\n+import scala.reflect.runtime.universe.{TypeTag, typeTag}\n+\n+package object orc {\n+  implicit class OrcContext(sqlContext: HiveContext) {\n+    import sqlContext._\n+    @scala.annotation.varargs\n+    def orcFile(paths: String*): DataFrame = {\n+      if (paths.isEmpty) {\n+        emptyDataFrame\n+      } else {\n+        val orcRelation = OrcRelation(paths.toArray, Map.empty)(sqlContext)\n+        sqlContext.baseRelationToDataFrame(orcRelation)\n+      }\n+    }\n+  }\n+\n+  implicit class OrcSchemaRDD(dataFrame: DataFrame) {\n+    def saveAsOrcFile(path: String, mode: SaveMode = SaveMode.Overwrite): Unit = {\n+      dataFrame.save(\n+          path,\n+          source = classOf[DefaultSource].getCanonicalName,\n+          mode)\n+    }\n+  }\n+\n+  // Flags for orc copression, predicates pushdown, etc.\n+  val orcDefaultCompressVar = \"hive.exec.orc.default.compress\"\n+  var ORC_FILTER_PUSHDOWN_ENABLED = true\n+  val SARG_PUSHDOWN = \"sarg.pushdown\";\n+  val INDEX_FILTER = \"hive.optimize.index.filter\""
  }],
  "prId": 6135
}]