[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @maropu .\r\nThis seems to be improvement, too. Could you add some description about this?\r\nThe current description only mentions `hiveUDFs.scala`.",
    "commit": "efd3628f66d37cb9c5dfca34694f0206907e08f9",
    "createdAt": "2017-03-12T10:55:39Z",
    "diffHunk": "@@ -208,10 +215,8 @@ private[orc] class OrcSerializer(dataSchema: StructType, conf: Configuration)\n       oi.setStructFieldData(\n         struct,\n         fieldRefs.get(i),\n-        wrap(\n-          row.get(i, dataSchema(i).dataType),\n-          fieldRefs.get(i).getFieldObjectInspector,\n-          dataSchema(i).dataType))\n+        wrappers(i)(row.get(i, dataSchema(i).dataType))",
    "line": 29
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Added the description to explain `wrappers`: https://github.com/apache/spark/pull/17264/files#diff-01999ccbf13e95a0ea2d223f69d8ae23R201",
    "commit": "efd3628f66d37cb9c5dfca34694f0206907e08f9",
    "createdAt": "2017-03-14T16:11:03Z",
    "diffHunk": "@@ -208,10 +215,8 @@ private[orc] class OrcSerializer(dataSchema: StructType, conf: Configuration)\n       oi.setStructFieldData(\n         struct,\n         fieldRefs.get(i),\n-        wrap(\n-          row.get(i, dataSchema(i).dataType),\n-          fieldRefs.get(i).getFieldObjectInspector,\n-          dataSchema(i).dataType))\n+        wrappers(i)(row.get(i, dataSchema(i).dataType))",
    "line": 29
  }],
  "prId": 17264
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "(my personal taste that might be worth considering.. \r\n\r\n```scala\r\nprivate[this] val wrappers = dataSchema\r\n  .zip(structOI.getAllStructFieldRefs.asScala.toSeq)\r\n  .map { case (f, i) => wrapperFor(i.getFieldObjectInspector, f.dataType) }\r\n```\r\n\r\nor maybe\r\n\r\n```scala\r\nprivate[this] val wrappers = \r\n  structOI.getAllStructFieldRefs.asScala.toSeq.zip(dataSchema).map { case (ref, field) =>\r\n    wrapperFor(ref.getFieldObjectInspector, field.dataType)\r\n  }\r\n```\r\n\r\nwhich resembles https://github.com/apache/spark/blob/226d38840c8d3f40639715d755df6fb4fee2715f/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveInspectors.scala#L364-L366\r\n)",
    "commit": "efd3628f66d37cb9c5dfca34694f0206907e08f9",
    "createdAt": "2017-03-12T12:01:30Z",
    "diffHunk": "@@ -196,6 +198,11 @@ private[orc] class OrcSerializer(dataSchema: StructType, conf: Configuration)\n \n   private[this] val cachedOrcStruct = structOI.create().asInstanceOf[OrcStruct]\n \n+  private[this] val wrappers = dataSchema.zip(structOI.getAllStructFieldRefs().asScala.toSeq)\n+      .map { case (f, i) =>\n+    wrapperFor(i.getFieldObjectInspector, f.dataType)\n+  }"
  }],
  "prId": 17264
}]