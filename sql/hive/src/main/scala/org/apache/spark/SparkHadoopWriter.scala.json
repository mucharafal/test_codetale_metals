[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "What about `.stripPrefix(\"/\")`?\n",
    "commit": "e69ce883ee9d337a81d4aae3a63943937f771e84",
    "createdAt": "2014-09-08T23:25:00Z",
    "diffHunk": "@@ -93,6 +93,33 @@ private[hive] class SparkHiveHadoopWriter(\n       null)\n   }\n \n+  def open(dynamicPartPath: String) {\n+    val numfmt = SparkHiveHadoopWriter.threadLocalNumberFormat.get()\n+    numfmt.setMinimumIntegerDigits(5)\n+    numfmt.setGroupingUsed(false)\n+\n+    val extension = Utilities.getFileExtension(\n+      conf.value,\n+      fileSinkConf.getCompressed,\n+      getOutputFormat())\n+\n+    val outputName = \"part-\"  + numfmt.format(splitID) + extension\n+    val outputPath: Path = FileOutputFormat.getOutputPath(conf.value)\n+    if (outputPath == null) {\n+      throw new IOException(\"Undefined job output-path\")\n+    }\n+    val workPath = new Path(outputPath, dynamicPartPath.substring(1)) // remove \"/\""
  }],
  "prId": 2226
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Can you add some scala doc here?  This code is pretty complicated.\n",
    "commit": "e69ce883ee9d337a81d4aae3a63943937f771e84",
    "createdAt": "2014-09-08T23:26:44Z",
    "diffHunk": "@@ -93,6 +93,33 @@ private[hive] class SparkHiveHadoopWriter(\n       null)\n   }\n \n+  def open(dynamicPartPath: String) {"
  }],
  "prId": 2226
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Do we really need a thread local number format?  The creation of path names is only used from a single thread and not in the critical path.  I'd just allocate a new one there.\n",
    "commit": "e69ce883ee9d337a81d4aae3a63943937f771e84",
    "createdAt": "2014-09-08T23:28:05Z",
    "diffHunk": "@@ -192,4 +219,10 @@ private[hive] object SparkHiveHadoopWriter {\n     }\n     outputPath.makeQualified(fs)\n   }\n+\n+  val threadLocalNumberFormat = new ThreadLocal[NumberFormat] {"
  }],
  "prId": 2226
}]