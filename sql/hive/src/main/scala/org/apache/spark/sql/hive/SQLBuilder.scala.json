[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Please add an assert here. \n\n``` scala\nassert(join == true || plan.projectList == 1)\n```\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T04:28:45Z",
    "diffHunk": "@@ -297,6 +303,60 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     )\n   }\n \n+  /* This function handles the SQL generation when generators.\n+   * sample plan :\n+   *   +- Project [mycol2#192]\n+   *     +- Generate explode(myCol#191), true, false, Some(mytable2), [mycol2#192]\n+   *       +- Generate explode(array(array(1, 2, 3))), true, false, Some(mytable), [mycol#191]\n+   *         +- MetastoreRelation default, src, None\n+   *\n+   */\n+  private def generateToSQL(plan: Generate): String = {\n+    val columnAliases = plan.generatorOutput.map(a => quoteIdentifier(a.name)).mkString(\",\")\n+    val generatorAlias = if (plan.qualifier.isEmpty) \"\" else plan.qualifier.get\n+    val outerClause = if (plan.outer) \"OUTER\" else \"\"\n+    build(\n+      if (plan.child == OneRowRelation) s\"(SELECT 1) ${SQLBuilder.newSubqueryName}\" else toSQL(plan.child),\n+      \"LATERAL VIEW\",\n+      outerClause,\n+      plan.generator.sql,\n+      quoteIdentifier(generatorAlias),\n+      \"AS\",\n+      columnAliases\n+    )\n+  }\n+\n+  private def generateToSQL(plan: Project): String = {\n+    // assert if child is a generate or not."
  }],
  "prId": 11596
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: added a space after `p`\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T04:31:56Z",
    "diffHunk": "@@ -94,6 +94,12 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     case Distinct(p: Project) =>\n       projectToSQL(p, isDistinct = true)\n \n+    case p@ Project(_, g: Generate) =>"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "Will do. Thanks.\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T06:14:17Z",
    "diffHunk": "@@ -94,6 +94,12 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     case Distinct(p: Project) =>\n       projectToSQL(p, isDistinct = true)\n \n+    case p@ Project(_, g: Generate) =>"
  }],
  "prId": 11596
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "style issue: please use `/**` \n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T04:34:05Z",
    "diffHunk": "@@ -297,6 +303,60 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     )\n   }\n \n+  /* This function handles the SQL generation when generators."
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "Will do. Thanks.\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T06:14:18Z",
    "diffHunk": "@@ -297,6 +303,60 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     )\n   }\n \n+  /* This function handles the SQL generation when generators."
  }],
  "prId": 11596
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "you can just do `plan.generatorOutput.map(_.sql).mkString(\", \")`\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T08:12:51Z",
    "diffHunk": "@@ -297,6 +303,65 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     )\n   }\n \n+  /* This function handles the SQL generation when generators.\n+   * sample plan :\n+   *   +- Project [mycol2#192]\n+   *     +- Generate explode(myCol#191), true, false, Some(mytable2), [mycol2#192]\n+   *       +- Generate explode(array(array(1, 2, 3))), true, false, Some(mytable), [mycol#191]\n+   *         +- MetastoreRelation default, src, None\n+   *\n+   */\n+  private def generateToSQL(plan: Generate): String = {\n+    val columnAliases = plan.generatorOutput.map(a => quoteIdentifier(a.name)).mkString(\",\")"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "Sure. Thx\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T08:19:31Z",
    "diffHunk": "@@ -297,6 +303,65 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     )\n   }\n \n+  /* This function handles the SQL generation when generators.\n+   * sample plan :\n+   *   +- Project [mycol2#192]\n+   *     +- Generate explode(myCol#191), true, false, Some(mytable2), [mycol2#192]\n+   *       +- Generate explode(array(array(1, 2, 3))), true, false, Some(mytable), [mycol#191]\n+   *         +- MetastoreRelation default, src, None\n+   *\n+   */\n+  private def generateToSQL(plan: Generate): String = {\n+    val columnAliases = plan.generatorOutput.map(a => quoteIdentifier(a.name)).mkString(\",\")"
  }],
  "prId": 11596
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "not quite sure, but can we convert this to `Project(g.output, g)` and share the same code path with the above case?\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-09T09:37:58Z",
    "diffHunk": "@@ -94,6 +94,12 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     case Distinct(p: Project) =>\n       projectToSQL(p, isDistinct = true)\n \n+    case p@ Project(_, g: Generate) =>\n+      generateToSQL(p)\n+\n+    case g: Generate =>"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan Sorry Wenchen for getting back to you a bit late. Actually the two cases do different things. First one builds the top level SELECT clause and the second one builds the LATERAL VIEW clause. Do you have any suggestion for a better name for these two functions ? :-)\n",
    "commit": "bea871f6b43de7ffcb6c58089521401ca39a7145",
    "createdAt": "2016-03-11T05:50:25Z",
    "diffHunk": "@@ -94,6 +94,12 @@ class SQLBuilder(logicalPlan: LogicalPlan, sqlContext: SQLContext) extends Loggi\n     case Distinct(p: Project) =>\n       projectToSQL(p, isDistinct = true)\n \n+    case p@ Project(_, g: Generate) =>\n+      generateToSQL(p)\n+\n+    case g: Generate =>"
  }],
  "prId": 11596
}]