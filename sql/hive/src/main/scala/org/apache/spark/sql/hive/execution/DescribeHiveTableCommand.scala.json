[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Why `_output`?  I think we can just expose the value directly.\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T20:26:27Z",
    "diffHunk": "@@ -36,13 +36,13 @@ import org.apache.spark.sql.hive.HiveShim\n @DeveloperApi\n case class DescribeHiveTableCommand(\n     table: MetastoreRelation,\n-    output: Seq[Attribute],\n+    _output: Seq[Attribute],"
  }],
  "prId": 3712
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Can we just move this to the place in the unit tests where we need it?\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-17T23:28:09Z",
    "diffHunk": "@@ -36,13 +36,11 @@ import org.apache.spark.sql.hive.HiveShim\n @DeveloperApi\n case class DescribeHiveTableCommand(\n     table: MetastoreRelation,\n-    output: Seq[Attribute],\n-    isExtended: Boolean)(\n-    @transient context: HiveContext)\n-  extends LeafNode with Command {\n+    override val output: Seq[Attribute],\n+    isExtended: Boolean) extends RunnableCommand {\n \n   // Strings with the format like Hive. It is used for result comparison in our unit tests.\n-  lazy val hiveString: Seq[String] = sideEffectResult.map {\n+  lazy val hiveString: Seq[String] = run(SparkPlan.currentContext.get()).map {"
  }],
  "prId": 3712
}]