[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "This assumes all the `testTables` are lower case. We should not call `contains`",
    "commit": "a30b75ae9dc86fd79833e95a143efc2909a6386c",
    "createdAt": "2017-07-03T02:17:41Z",
    "diffHunk": "@@ -553,7 +555,10 @@ private[hive] class TestHiveQueryExecution(\n     val referencedTables =\n       describedTables ++\n         logical.collect { case UnresolvedRelation(tableIdent, _) => tableIdent.table }\n-    val referencedTestTables = referencedTables.filter(sparkSession.testTables.contains)\n+    val formattedRefTables = referencedTables.map { t =>\n+      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) t else t.toLowerCase(Locale.ROOT)\n+    }\n+    val referencedTestTables = formattedRefTables.filter(sparkSession.testTables.contains)"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Try `sparkSession.sessionState.conf.resolver`",
    "commit": "a30b75ae9dc86fd79833e95a143efc2909a6386c",
    "createdAt": "2017-07-03T02:18:44Z",
    "diffHunk": "@@ -553,7 +555,10 @@ private[hive] class TestHiveQueryExecution(\n     val referencedTables =\n       describedTables ++\n         logical.collect { case UnresolvedRelation(tableIdent, _) => tableIdent.table }\n-    val referencedTestTables = referencedTables.filter(sparkSession.testTables.contains)\n+    val formattedRefTables = referencedTables.map { t =>\n+      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) t else t.toLowerCase(Locale.ROOT)\n+    }\n+    val referencedTestTables = formattedRefTables.filter(sparkSession.testTables.contains)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "It would be an `O(N^2)` operation, but since the number of referenced tables should be small, I think that's ok.",
    "commit": "a30b75ae9dc86fd79833e95a143efc2909a6386c",
    "createdAt": "2017-07-03T13:49:57Z",
    "diffHunk": "@@ -553,7 +555,10 @@ private[hive] class TestHiveQueryExecution(\n     val referencedTables =\n       describedTables ++\n         logical.collect { case UnresolvedRelation(tableIdent, _) => tableIdent.table }\n-    val referencedTestTables = referencedTables.filter(sparkSession.testTables.contains)\n+    val formattedRefTables = referencedTables.map { t =>\n+      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) t else t.toLowerCase(Locale.ROOT)\n+    }\n+    val referencedTestTables = formattedRefTables.filter(sparkSession.testTables.contains)"
  }],
  "prId": 18504
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "This is not needed.",
    "commit": "a30b75ae9dc86fd79833e95a143efc2909a6386c",
    "createdAt": "2017-07-03T02:19:00Z",
    "diffHunk": "@@ -553,7 +555,10 @@ private[hive] class TestHiveQueryExecution(\n     val referencedTables =\n       describedTables ++\n         logical.collect { case UnresolvedRelation(tableIdent, _) => tableIdent.table }\n-    val referencedTestTables = referencedTables.filter(sparkSession.testTables.contains)\n+    val formattedRefTables = referencedTables.map { t =>\n+      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) t else t.toLowerCase(Locale.ROOT)\n+    }"
  }],
  "prId": 18504
}]