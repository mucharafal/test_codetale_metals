[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Will that be more helpful if we sort the `splitsPerNode` by the split length?\n",
    "commit": "085ce5feca2294f81f9ec7a5660635be13c70a4a",
    "createdAt": "2015-10-16T01:30:18Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.mapred;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import org.apache.hadoop.mapred.*;\n+\n+public class CombineSplitInputFormat<K, V> implements InputFormat<K, V> {\n+\n+  private InputFormat<K, V> inputformat;\n+  private long splitSize = 0;\n+\n+  public CombineSplitInputFormat(InputFormat<K, V> inputformat, long splitSize) {\n+    this.inputformat = inputformat;\n+    this.splitSize = splitSize;\n+  }\n+\n+  /**\n+   * Create a single split from the list of blocks specified in validBlocks\n+   * Add this new split into splitList.\n+   */\n+  private void addCreatedSplit(List<CombineSplit> splitList,\n+                               long totalLen,\n+                               Collection<String> locations,\n+                               List<InputSplit> validSplits) {\n+    CombineSplit combineSparkSplit =\n+      new CombineSplit(validSplits.toArray(new InputSplit[0]),\n+        totalLen, locations.toArray(new String[0]));\n+    splitList.add(combineSparkSplit);\n+  }\n+\n+  @Override\n+  public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException {\n+    InputSplit[] splits = inputformat.getSplits(job, numSplits);\n+    // populate nodeToSplits and splitsSet\n+    Map<String, List<InputSplit>> nodeToSplits = Maps.newHashMap();\n+    Set<InputSplit> splitsSet = Sets.newHashSet();\n+    for (InputSplit split: splits) {\n+      for (String node: split.getLocations()) {\n+        if (!nodeToSplits.containsKey(node)) {\n+          nodeToSplits.put(node, new ArrayList<InputSplit>());\n+        }\n+        nodeToSplits.get(node).add(split);\n+      }\n+      splitsSet.add(split);\n+    }\n+    // Iterate the nodes to combine in order to evenly distributing the splits\n+    List<CombineSplit> combineSparkSplits = Lists.newArrayList();\n+    List<InputSplit> oneCombinedSplits = Lists.newArrayList();\n+    long currentSplitSize = 0L;\n+    for (Map.Entry<String, List<InputSplit>> entry: nodeToSplits.entrySet()) {\n+      String node = entry.getKey();\n+      List<InputSplit> splitsPerNode = entry.getValue();"
  }],
  "prId": 9097
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Put the checking a little bit ahead?\n",
    "commit": "085ce5feca2294f81f9ec7a5660635be13c70a4a",
    "createdAt": "2015-10-16T01:33:26Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.mapred;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import org.apache.hadoop.mapred.*;\n+\n+public class CombineSplitInputFormat<K, V> implements InputFormat<K, V> {\n+\n+  private InputFormat<K, V> inputformat;\n+  private long splitSize = 0;\n+\n+  public CombineSplitInputFormat(InputFormat<K, V> inputformat, long splitSize) {\n+    this.inputformat = inputformat;\n+    this.splitSize = splitSize;\n+  }\n+\n+  /**\n+   * Create a single split from the list of blocks specified in validBlocks\n+   * Add this new split into splitList.\n+   */\n+  private void addCreatedSplit(List<CombineSplit> splitList,\n+                               long totalLen,\n+                               Collection<String> locations,\n+                               List<InputSplit> validSplits) {\n+    CombineSplit combineSparkSplit =\n+      new CombineSplit(validSplits.toArray(new InputSplit[0]),\n+        totalLen, locations.toArray(new String[0]));\n+    splitList.add(combineSparkSplit);\n+  }\n+\n+  @Override\n+  public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException {\n+    InputSplit[] splits = inputformat.getSplits(job, numSplits);\n+    // populate nodeToSplits and splitsSet\n+    Map<String, List<InputSplit>> nodeToSplits = Maps.newHashMap();\n+    Set<InputSplit> splitsSet = Sets.newHashSet();\n+    for (InputSplit split: splits) {\n+      for (String node: split.getLocations()) {\n+        if (!nodeToSplits.containsKey(node)) {\n+          nodeToSplits.put(node, new ArrayList<InputSplit>());\n+        }\n+        nodeToSplits.get(node).add(split);\n+      }\n+      splitsSet.add(split);\n+    }\n+    // Iterate the nodes to combine in order to evenly distributing the splits\n+    List<CombineSplit> combineSparkSplits = Lists.newArrayList();\n+    List<InputSplit> oneCombinedSplits = Lists.newArrayList();\n+    long currentSplitSize = 0L;\n+    for (Map.Entry<String, List<InputSplit>> entry: nodeToSplits.entrySet()) {\n+      String node = entry.getKey();\n+      List<InputSplit> splitsPerNode = entry.getValue();\n+      for (InputSplit split: splitsPerNode) {\n+        if (splitSize != 0 && currentSplitSize > splitSize) {\n+          addCreatedSplit(combineSparkSplits,\n+            currentSplitSize, Collections.singleton(node), oneCombinedSplits);\n+          currentSplitSize = 0;\n+          oneCombinedSplits.clear();\n+        }\n+        // this split has been combined\n+        if (!splitsSet.contains(split)) {"
  }],
  "prId": 9097
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Leave a TODO, we probably can optimize this by providing the second/third optimal locations.\n",
    "commit": "085ce5feca2294f81f9ec7a5660635be13c70a4a",
    "createdAt": "2015-10-16T01:37:33Z",
    "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.mapred;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import org.apache.hadoop.mapred.*;\n+\n+public class CombineSplitInputFormat<K, V> implements InputFormat<K, V> {\n+\n+  private InputFormat<K, V> inputformat;\n+  private long splitSize = 0;\n+\n+  public CombineSplitInputFormat(InputFormat<K, V> inputformat, long splitSize) {\n+    this.inputformat = inputformat;\n+    this.splitSize = splitSize;\n+  }\n+\n+  /**\n+   * Create a single split from the list of blocks specified in validBlocks\n+   * Add this new split into splitList.\n+   */\n+  private void addCreatedSplit(List<CombineSplit> splitList,\n+                               long totalLen,\n+                               Collection<String> locations,\n+                               List<InputSplit> validSplits) {\n+    CombineSplit combineSparkSplit =\n+      new CombineSplit(validSplits.toArray(new InputSplit[0]),\n+        totalLen, locations.toArray(new String[0]));"
  }],
  "prId": 9097
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please add a comment here to point out which version of Hive/Hadoop this implementation is based on.\n",
    "commit": "085ce5feca2294f81f9ec7a5660635be13c70a4a",
    "createdAt": "2016-02-02T00:17:04Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.mapred;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import org.apache.hadoop.mapred.*;\n+\n+public class CombineSplitInputFormat<K, V> implements InputFormat<K, V> {"
  }, {
    "author": {
      "login": "zhichao-li"
    },
    "body": "I think it's not strictly tie up with a specific Hive/Hadoop version. Just borrow some idea from `CombineFileInputformat` from Hadoop version 2.2.0. \nAnd this PR share a similar idea with https://github.com/apache/spark/pull/10572, which try to create a new proxy inputformat only that there's little bit diff with the combination logic in `getSplits`. \nWill try to clean this code a bit. \n",
    "commit": "085ce5feca2294f81f9ec7a5660635be13c70a4a",
    "createdAt": "2016-02-18T06:31:05Z",
    "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.hive.mapred;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import org.apache.hadoop.mapred.*;\n+\n+public class CombineSplitInputFormat<K, V> implements InputFormat<K, V> {"
  }],
  "prId": 9097
}]