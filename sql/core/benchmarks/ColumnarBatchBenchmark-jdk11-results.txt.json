[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For JDK8, `DirectByteBuffer` took `743 (Best)` and `744 (Avg)`. JDK11 seems to be affected due to Apache Spark's `Platform.java` implementation which depends on `java.version` for now. How do you think about this?\r\n\r\ncc @srowen and @wangyum . ",
    "commit": "98bb24354e62b9c23f8c9267b1da051d55af545a",
    "createdAt": "2019-10-01T16:23:01Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+================================================================================================\n+Int Read/Write\n+================================================================================================\n+\n+OpenJDK 64-Bit Server VM 11.0.4+11-LTS on Linux 3.10.0-862.3.2.el7.x86_64\n+Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\n+Int Read/Write:                           Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\n+------------------------------------------------------------------------------------------------------------------------\n+Java Array                                          232            234           1       1409.7           0.7       1.0X\n+ByteBuffer Unsafe                                   396            396           0        827.9           1.2       0.6X\n+ByteBuffer API                                      602            603           0        544.0           1.8       0.4X\n+DirectByteBuffer                                   1185           1186           2        276.6           3.6       0.2X",
    "line": 12
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Hm, I don't know. The cleaner hack that works in JDK 8 only works around an internal JVM check on max off heap limit. I would not imagine it causes slower performance, just may mean a user has to increase the off heap limit manually in extreme cases. That said, who knows what all the subtle implications are.\r\n\r\nIt could be some other cause too, of course, simply some difference in JDK behavior.\r\n\r\nI don't think we want to force `--add-opens` or require people to use it of course, so I'd not benchmark that way. It's a valid observation in the benchmark, at least, to note that something seems to make it slower in JDK 11.",
    "commit": "98bb24354e62b9c23f8c9267b1da051d55af545a",
    "createdAt": "2019-10-01T17:03:35Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+================================================================================================\n+Int Read/Write\n+================================================================================================\n+\n+OpenJDK 64-Bit Server VM 11.0.4+11-LTS on Linux 3.10.0-862.3.2.el7.x86_64\n+Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\n+Int Read/Write:                           Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\n+------------------------------------------------------------------------------------------------------------------------\n+Java Array                                          232            234           1       1409.7           0.7       1.0X\n+ByteBuffer Unsafe                                   396            396           0        827.9           1.2       0.6X\n+ByteBuffer API                                      602            603           0        544.0           1.8       0.4X\n+DirectByteBuffer                                   1185           1186           2        276.6           3.6       0.2X",
    "line": 12
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oh, got it. Thanks!",
    "commit": "98bb24354e62b9c23f8c9267b1da051d55af545a",
    "createdAt": "2019-10-01T17:43:37Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+================================================================================================\n+Int Read/Write\n+================================================================================================\n+\n+OpenJDK 64-Bit Server VM 11.0.4+11-LTS on Linux 3.10.0-862.3.2.el7.x86_64\n+Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\n+Int Read/Write:                           Best Time(ms)   Avg Time(ms)   Stdev(ms)    Rate(M/s)   Per Row(ns)   Relative\n+------------------------------------------------------------------------------------------------------------------------\n+Java Array                                          232            234           1       1409.7           0.7       1.0X\n+ByteBuffer Unsafe                                   396            396           0        827.9           1.2       0.6X\n+ByteBuffer API                                      602            603           0        544.0           1.8       0.4X\n+DirectByteBuffer                                   1185           1186           2        276.6           3.6       0.2X",
    "line": 12
  }],
  "prId": 25992
}]