[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "since this may change the number of exchanges, we should put it in `queryStagePreparationRules`\r\nThen the AQE framework can check the cost and give up the optimization if extra changes are introduced.\r\n\r\nNote that, the current approach (check number of exchanges at the end of rule) is suboptimal. It's possible that the local shuffle reader can avoid exchanges downstream, which changes the stage boundaries.",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-09-18T07:59:41Z",
    "diffHunk": "@@ -91,6 +91,7 @@ case class AdaptiveSparkPlanExec(\n   // optimizations should be stage-independent.\n   @transient private val queryStageOptimizerRules: Seq[Rule[SparkPlan]] = Seq(\n     ReuseAdaptiveSubquery(conf, subqueryCache),\n+    OptimizedLocalShuffleReader(conf),"
  }, {
    "author": {
      "login": "JkSelf"
    },
    "body": "Already move it in `queryStagePreparationRules`.",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-08T02:57:04Z",
    "diffHunk": "@@ -91,6 +91,7 @@ case class AdaptiveSparkPlanExec(\n   // optimizations should be stage-independent.\n   @transient private val queryStageOptimizerRules: Seq[Rule[SparkPlan]] = Seq(\n     ReuseAdaptiveSubquery(conf, subqueryCache),\n+    OptimizedLocalShuffleReader(conf),"
  }],
  "prId": 25295
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why disable it?",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-08T10:11:29Z",
    "diffHunk": "@@ -74,7 +74,7 @@ case class AdaptiveSparkPlanExec(\n   @transient private val optimizer = new RuleExecutor[LogicalPlan] {\n     // TODO add more optimization rules\n     override protected def batches: Seq[Batch] = Seq(\n-      Batch(\"Demote BroadcastHashJoin\", Once, DemoteBroadcastHashJoin(conf))\n+      // Batch(\"Demote BroadcastHashJoin\", Once, DemoteBroadcastHashJoin(conf))"
  }],
  "prId": 25295
}]