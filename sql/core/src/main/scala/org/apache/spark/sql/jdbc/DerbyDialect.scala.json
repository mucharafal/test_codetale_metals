[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Indentation.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-17T17:22:49Z",
    "diffHunk": "@@ -41,4 +41,16 @@ private object DerbyDialect extends JdbcDialect {\n       Option(JdbcType(\"DECIMAL(31,5)\", java.sql.Types.DECIMAL))\n     case _ => None\n   }\n+\n+  /**\n+  * The SQL query used to truncate a table."
  }],
  "prId": 20057
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "indentation.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-17T17:22:57Z",
    "diffHunk": "@@ -41,4 +41,16 @@ private object DerbyDialect extends JdbcDialect {\n       Option(JdbcType(\"DECIMAL(31,5)\", java.sql.Types.DECIMAL))\n     case _ => None\n   }\n+\n+  /**\n+  * The SQL query used to truncate a table.\n+  * @param table The JDBCOptions.\n+  * @param cascade Whether or not to cascade the truncation. Default value is the\n+  *                value of isCascadingTruncateTable(). Ignored for Derby as it is unsupported.\n+  * @return The SQL query to use for truncating a table\n+  */\n+  override def getTruncateQuery(table: String,\n+                                cascade: Option[Boolean] = isCascadingTruncateTable): String = {"
  }],
  "prId": 20057
}]