[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "super nit: rename to readerRDD to avoid confusion with other v2 reader classes.",
    "commit": "f77b12ba92a868274ecdfea331786addb2d9ca83",
    "createdAt": "2018-06-19T21:28:47Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import java.util.UUID\n+\n+import org.apache.spark.{HashPartitioner, SparkEnv}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, UnsafeRow}\n+import org.apache.spark.sql.catalyst.plans.physical.{Partitioning, SinglePartition}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.streaming.continuous.shuffle.{ContinuousShuffleReadPartition, ContinuousShuffleReadRDD}\n+\n+/**\n+ * Physical plan for coalescing a continuous processing plan.\n+ *\n+ * Currently, only coalesces to a single partition are supported. `numPartitions` must be 1.\n+ */\n+case class ContinuousCoalesceExec(numPartitions: Int, child: SparkPlan) extends SparkPlan {\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def children: Seq[SparkPlan] = child :: Nil\n+\n+  override def outputPartitioning: Partitioning = SinglePartition\n+\n+  override def doExecute(): RDD[InternalRow] = {\n+    assert(numPartitions == 1)\n+\n+    val childRdd = child.execute()\n+    val endpointName = s\"RPCContinuousShuffleReader-${UUID.randomUUID()}\"\n+    val reader = new ContinuousShuffleReadRDD("
  }],
  "prId": 21560
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: Dont need this variable. And merge remove excess empty lines.",
    "commit": "f77b12ba92a868274ecdfea331786addb2d9ca83",
    "createdAt": "2018-06-26T08:19:09Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import java.util.UUID\n+\n+import org.apache.spark.{HashPartitioner, SparkEnv}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, UnsafeRow}\n+import org.apache.spark.sql.catalyst.plans.physical.{Partitioning, SinglePartition}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.streaming.continuous.shuffle.{ContinuousShuffleReadPartition, ContinuousShuffleReadRDD}\n+\n+/**\n+ * Physical plan for coalescing a continuous processing plan.\n+ *\n+ * Currently, only coalesces to a single partition are supported. `numPartitions` must be 1.\n+ */\n+case class ContinuousCoalesceExec(numPartitions: Int, child: SparkPlan) extends SparkPlan {\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def children: Seq[SparkPlan] = child :: Nil\n+\n+  override def outputPartitioning: Partitioning = SinglePartition\n+\n+  override def doExecute(): RDD[InternalRow] = {\n+    assert(numPartitions == 1)\n+\n+    val childRdd = child.execute()"
  }],
  "prId": 21560
}]