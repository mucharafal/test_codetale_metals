[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I don't think this works?",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-09T00:41:13Z",
    "diffHunk": "@@ -38,6 +38,26 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "yes. this doesnt. please fix them.",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-19T05:50:17Z",
    "diffHunk": "@@ -38,6 +38,26 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())"
  }],
  "prId": 17219
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "You need python APIs as well. ",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-17T21:54:05Z",
    "diffHunk": "@@ -38,6 +38,51 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())\n+ * }}}\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+case class OneTime() extends Trigger"
  }],
  "prId": 17219
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "fix version to 2.2",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-19T05:44:36Z",
    "diffHunk": "@@ -38,6 +38,51 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())\n+ * }}}\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+case class OneTime() extends Trigger\n+\n+/**\n+ * :: Experimental ::\n+ * Used to create [[OneTime]] triggers for [[StreamingQuery]]s.\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+object OneTime {\n+\n+  /**\n+   * Create a [[OneTime]] trigger.\n+   *\n+   * Example:\n+   * {{{\n+   *   df.write.trigger(OneTime.create())\n+   * }}}\n+   *\n+   * @since 2.0.0"
  }],
  "prId": 17219
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "df.writeStream\r\n(also fix if this is present anywhere else)",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-19T05:45:10Z",
    "diffHunk": "@@ -38,6 +38,51 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())\n+ * }}}\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+case class OneTime() extends Trigger\n+\n+/**\n+ * :: Experimental ::\n+ * Used to create [[OneTime]] triggers for [[StreamingQuery]]s.\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+object OneTime {\n+\n+  /**\n+   * Create a [[OneTime]] trigger.\n+   *\n+   * Example:\n+   * {{{\n+   *   df.write.trigger(OneTime.create())"
  }],
  "prId": 17219
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Explain that does one time mean.",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-19T05:45:39Z",
    "diffHunk": "@@ -38,6 +38,51 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())\n+ * }}}\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+case class OneTime() extends Trigger\n+\n+/**\n+ * :: Experimental ::\n+ * Used to create [[OneTime]] triggers for [[StreamingQuery]]s."
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "The explanation of OneTime trigger is given in the OneTime class definition. Does that suffice, or should the explanation be reiterated in the object definition?\r\n\r\nIf it should be reiterated, then I can do the same with ProcessingTime.",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-20T23:57:29Z",
    "diffHunk": "@@ -38,6 +38,51 @@ sealed trait Trigger\n \n /**\n  * :: Experimental ::\n+ * A trigger that runs a query once then terminates\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   df.write.trigger(OneTime)\n+ * }}}\n+ *\n+ * Java Example:\n+ * {{{\n+ *   df.write.trigger(OneTime.create())\n+ * }}}\n+ *\n+ * @since 2.2.0\n+ */\n+@Experimental\n+@InterfaceStability.Evolving\n+case class OneTime() extends Trigger\n+\n+/**\n+ * :: Experimental ::\n+ * Used to create [[OneTime]] triggers for [[StreamingQuery]]s."
  }],
  "prId": 17219
}]