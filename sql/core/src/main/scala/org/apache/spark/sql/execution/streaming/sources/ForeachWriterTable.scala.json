[{
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nit:\r\n`new RuntimeException(\"Foreach writer...`\r\nor\r\n`new RuntimeException(\"ForEachWriter...`",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-04-30T08:37:57Z",
    "diffHunk": "@@ -139,16 +140,22 @@ class ForeachDataWriter[T](\n     } catch {\n       case t: Throwable =>\n         writer.close(t)\n+        isClosed = true\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n     writer.close(null)\n+    isClosed = true\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    if (!isClosed) {\n+      writer.close(new RuntimeException(\"For each writer has been aborted\"))"
  }, {
    "author": {
      "login": "eyalzit"
    },
    "body": "Fixed",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-05-01T08:41:30Z",
    "diffHunk": "@@ -139,16 +140,22 @@ class ForeachDataWriter[T](\n     } catch {\n       case t: Throwable =>\n         writer.close(t)\n+        isClosed = true\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n     writer.close(null)\n+    isClosed = true\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    if (!isClosed) {\n+      writer.close(new RuntimeException(\"For each writer has been aborted\"))"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nit: `...var closed...`",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-04-30T08:47:08Z",
    "diffHunk": "@@ -130,6 +130,7 @@ class ForeachDataWriter[T](\n \n   // If open returns false, we should skip writing rows.\n   private val opened = writer.open(partitionId, epochId)\n+  private var isClosed: Boolean = false"
  }, {
    "author": {
      "login": "eyalzit"
    },
    "body": "Fixed",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-05-01T08:41:40Z",
    "diffHunk": "@@ -130,6 +130,7 @@ class ForeachDataWriter[T](\n \n   // If open returns false, we should skip writing rows.\n   private val opened = writer.open(partitionId, epochId)\n+  private var isClosed: Boolean = false"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Nit: `with Logging {`",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-07-08T12:01:05Z",
    "diffHunk": "@@ -129,10 +130,11 @@ class ForeachDataWriter[T](\n     rowConverter: InternalRow => T,\n     partitionId: Int,\n     epochId: Long)\n-  extends DataWriter[InternalRow] {\n+  extends DataWriter[InternalRow] with Logging{"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "I think it's better to change `DataWriter.abort` to pass the cause of failure in rather than creating this `RuntimeException`. An implementation may care about the error and do different stuff. @cloud-fan what do you think?",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-07-30T20:04:17Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new RuntimeException(\"Foreach writer has been aborted\"))"
  }, {
    "author": {
      "login": "eyalzit"
    },
    "body": "@zsxwing I agree that it will be valuable to pass the original cause to the abort but i think that in order to due that, i will have to change the Utils.tryWithSafeFinallyAndFailureCallbacks such that the cause block will have the Throwable as an argument \r\nsomething like:\r\n def tryWithSafeFinallyAndFailureCallbacks[T](block: => T)\r\n      (catchBlock: Throwable => Unit = _ => Unit, finallyBlock: => Unit = ()): T\r\n\r\nit will require some further changes wherever the catch block is used\r\n\r\nis it make sense?\r\n",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-07-31T09:25:19Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new RuntimeException(\"Foreach writer has been aborted\"))"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "It looks to me that `abort` should know the exception, so that it knows why the task failed and how to do the clean up. What do you think? @rdblue ",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-07-31T16:07:14Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "What is the use case for passing the exception to the writer? Shouldn't the writer always take the same action on abort, no matter what the reason to abort was?",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-07-31T20:44:31Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "This issue is fixing a regression bug introduced by migration ForeachSink to DSv2, we need to pass the exception to the writer in the whole iteration process, just like the original behavior [here](https://github.com/apache/spark/pull/20951/files#diff-98acda846a9dd63efc42e0957594e05dL57). As current logic, we can only get the exception in `writer.process`.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T00:13:21Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "@xuanyuanking, what is the exception used for? I'm trying to understand why the abort would behave differently depending on the exception.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T00:29:45Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "In this case, we need to call `writer.close` in `abort`, the exception is necessary for the close API. https://github.com/apache/spark/blob/b3ffd8be14779cbb824d14b409f0a6eab93444ba/sql/core/src/main/scala/org/apache/spark/sql/ForeachWriter.scala#L129-L141",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T03:15:03Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I can see that the exception is passed to close. My question is: what does the writer do differently based on the exception? If this is to satisfy an API and you can pass any exception, then I don't think it matters. There's effort required to get the exception to pass through and without a reasonable use case I'm wondering why it is necessary to do it.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T04:51:31Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Ah I see, thanks for your explanation Ryan.\r\nGives a scenario of `DataWritingSparkTask`, both dataWriter.wirte, dataWriter.commit, and Spark task self could throw different exceptions. In the close API of DataWriter, I think `CommitDeniedException` and the exception threw by `writer.commit` can deal with separately. Please correct me if I'm wrong, Thanks.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T06:02:11Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "> I think CommitDeniedException and the exception threw by writer.commit can deal with separately\r\n\r\nSure, but what is done differently in close? For example, is the underlying not closed in one path for some reason? I can't think of anything reasonable for close to do differently, so I'd like to know what the specific use case you're support is.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-01T17:53:36Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "The idea is brought up at https://github.com/apache/spark/pull/13342#discussion_r64843903 , but there is no concrete use cases mentioned at that time. cc @tdas ",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-02T04:05:03Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "If there isn't a use case, then I'm very reluctant to change the way v2 works.",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-02T15:50:38Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {",
    "line": 33
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "so we close the writer twice: once when write fails, once when call `abort`. Instead of having the `private var closeCalled: Boolean = false`, shall we have a `private var ex: Throwable = null` and only close the writer in `abort`?",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-02T04:08:45Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)",
    "line": 21
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "It could be moved to `abort`, but we can't remove `closeCalled` since `commit` method could also throw exception and `abort` will be called finally. We shouldn't call `writer.close()` twice in any case, as python app will hang (that's what I fixed in this PR).",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-04T23:19:07Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)",
    "line": 21
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "It's better to use `SparkException`. How about `new SparkException(\"Foreach writer has been aborted due to a task failure\")`?",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-02T18:17:05Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new RuntimeException(\"Foreach writer has been aborted\"))"
  }, {
    "author": {
      "login": "eyalzit"
    },
    "body": "fine by me :)",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-05T06:23:23Z",
    "diffHunk": "@@ -141,17 +143,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new RuntimeException(\"Foreach writer has been aborted\"))"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: could you remove this log? Spark will log it in the task failure log. Not worth to log it twice. ",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-13T17:58:11Z",
    "diffHunk": "@@ -141,17 +144,33 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new SparkException(\"Foreach writer has been aborted due to a task failure\"))\n+  }\n+\n+  private def closeWriter(errorOrNull: Throwable): Unit = {\n+    if (!closeCalled) {\n+      try {\n+        writer.close(errorOrNull)\n+      } catch {\n+        case t: Throwable =>\n+          logWarning(\"Failed closing Foreach writer\", t)"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: could you remove\r\n```\r\ncase t: Throwable =>\r\n  throw t\r\n```",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-15T19:50:41Z",
    "diffHunk": "@@ -141,17 +144,32 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new SparkException(\"Foreach writer has been aborted due to a task failure\"))\n+  }\n+\n+  private def closeWriter(errorOrNull: Throwable): Unit = {\n+    if (!closeCalled) {\n+      try {\n+        writer.close(errorOrNull)\n+      } catch {\n+        case t: Throwable =>"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "you can also write like this to save several lines:\r\n```\r\nif (!closeCalled) {\r\n  closeCalled = true\r\n  writer.close(errorOrNull)\r\n}\r\n\r\n```",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-15T19:52:11Z",
    "diffHunk": "@@ -141,17 +144,32 @@ class ForeachDataWriter[T](\n       writer.process(rowConverter(record))\n     } catch {\n       case t: Throwable =>\n-        writer.close(t)\n+        closeWriter(t)\n         throw t\n     }\n   }\n \n   override def commit(): WriterCommitMessage = {\n-    writer.close(null)\n+    closeWriter(null)\n     ForeachWriterCommitMessage\n   }\n \n-  override def abort(): Unit = {}\n+  override def abort(): Unit = {\n+    closeWriter(new SparkException(\"Foreach writer has been aborted due to a task failure\"))\n+  }\n+\n+  private def closeWriter(errorOrNull: Throwable): Unit = {\n+    if (!closeCalled) {\n+      try {\n+        writer.close(errorOrNull)\n+      } catch {\n+        case t: Throwable =>"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: `with Logging` can be removed",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-15T19:52:46Z",
    "diffHunk": "@@ -129,10 +131,11 @@ class ForeachDataWriter[T](\n     rowConverter: InternalRow => T,\n     partitionId: Int,\n     epochId: Long)\n-  extends DataWriter[InternalRow] {\n+  extends DataWriter[InternalRow] with Logging {"
  }],
  "prId": 24382
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: this line can be removed",
    "commit": "b237009671fda5728353ee19a9fe90be8e6c1ba3",
    "createdAt": "2019-08-15T19:52:57Z",
    "diffHunk": "@@ -21,6 +21,8 @@ import java.util\n \n import scala.collection.JavaConverters._\n \n+import org.apache.spark.SparkException\n+import org.apache.spark.internal.Logging"
  }],
  "prId": 24382
}]