[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Why this change?",
    "commit": "8fe3f116f20bad86d341a65f827fe7a7516bed38",
    "createdAt": "2018-06-18T00:05:43Z",
    "diffHunk": "@@ -223,6 +223,6 @@ class OrcSerializer(dataSchema: StructType) {\n    * Return a Orc value object for the given Spark schema.\n    */\n   private def createOrcValue(dataType: DataType) = {\n-    OrcStruct.createValue(TypeDescription.fromString(dataType.catalogString))\n+    OrcStruct.createValue(TypeDescription.fromString(OrcFileFormat.getQuotedSchemaString(dataType)))",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for review, @viirya . ORC 1.5 checks the field name syntax more strictly. For example, a field name having `dot`.",
    "commit": "8fe3f116f20bad86d341a65f827fe7a7516bed38",
    "createdAt": "2018-06-18T00:35:20Z",
    "diffHunk": "@@ -223,6 +223,6 @@ class OrcSerializer(dataSchema: StructType) {\n    * Return a Orc value object for the given Spark schema.\n    */\n   private def createOrcValue(dataType: DataType) = {\n-    OrcStruct.createValue(TypeDescription.fromString(dataType.catalogString))\n+    OrcStruct.createValue(TypeDescription.fromString(OrcFileFormat.getQuotedSchemaString(dataType)))",
    "line": 5
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "@dongjoon-hyun Thanks for explaining it.",
    "commit": "8fe3f116f20bad86d341a65f827fe7a7516bed38",
    "createdAt": "2018-06-18T03:40:53Z",
    "diffHunk": "@@ -223,6 +223,6 @@ class OrcSerializer(dataSchema: StructType) {\n    * Return a Orc value object for the given Spark schema.\n    */\n   private def createOrcValue(dataType: DataType) = {\n-    OrcStruct.createValue(TypeDescription.fromString(dataType.catalogString))\n+    OrcStruct.createValue(TypeDescription.fromString(OrcFileFormat.getQuotedSchemaString(dataType)))",
    "line": 5
  }],
  "prId": 21582
}]