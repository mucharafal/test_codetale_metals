[{
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "add: since the same committer instance setup on the driver will be used for tasks.\n",
    "commit": "cd23d2f7bdf7a3ef9b93e77a3ae540d553398267",
    "createdAt": "2016-11-01T00:17:53Z",
    "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.util.{Date, UUID}\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+\n+import org.apache.spark.SparkHadoopWriter\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.sql.internal.SQLConf\n+\n+\n+object FileCommitProtocol {\n+  class TaskCommitMessage(obj: Any) extends Serializable\n+\n+  object EmptyTaskCommitMessage extends TaskCommitMessage(Unit)\n+}\n+\n+\n+/**\n+ * An interface to define how a Spark job commits its outputs. Implementations must be serializable.",
    "line": 65
  }],
  "prId": 15696
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "s/add/new?\n",
    "commit": "cd23d2f7bdf7a3ef9b93e77a3ae540d553398267",
    "createdAt": "2016-11-01T00:17:59Z",
    "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.util.{Date, UUID}\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+\n+import org.apache.spark.SparkHadoopWriter\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.sql.internal.SQLConf\n+\n+\n+object FileCommitProtocol {\n+  class TaskCommitMessage(obj: Any) extends Serializable\n+\n+  object EmptyTaskCommitMessage extends TaskCommitMessage(Unit)\n+}\n+\n+\n+/**\n+ * An interface to define how a Spark job commits its outputs. Implementations must be serializable.\n+ *\n+ * The proper call sequence is:\n+ *\n+ * 1. Driver calls setupJob.\n+ * 2. As part of each task's execution, executor calls setupTask and then commitTask\n+ *    (or abortTask if task failed).\n+ * 3. When all necessary tasks completed successfully, the driver calls commitJob. If the job\n+ *    failed to execute (e.g. too many failed tasks), the job should call abortJob.\n+ */\n+abstract class FileCommitProtocol {\n+  import FileCommitProtocol._\n+\n+  /**\n+   * Setups up a job. Must be called on the driver before any other methods can be invoked.\n+   */\n+  def setupJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Commits a job after the writes succeed. Must be called on the driver.\n+   */\n+  def commitJob(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit\n+\n+  /**\n+   * Aborts a job after the writes fail. Must be called on the driver.\n+   *\n+   * Calling this function is a best-effort attempt, because it is possible that the driver\n+   * just crashes (or killed) before it can call abort.\n+   */\n+  def abortJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Sets up a task within a job.\n+   * Must be called before any other task related methods can be invoked.\n+   */\n+  def setupTask(taskContext: TaskAttemptContext): Unit\n+\n+  /**\n+   * Notifies the commit protocol to add a new file, and gets back the full path that should be\n+   * used. Must be called on the executors when running tasks.\n+   *\n+   * A full file path consists of the following parts:\n+   *  1. the base path\n+   *  2. some sub-directory within the base path, used to specify partitioning\n+   *  3. file prefix, usually some unique job id with the task id\n+   *  4. bucket id\n+   *  5. source specific file extension, e.g. \".snappy.parquet\"\n+   *\n+   * The \"dir\" parameter specifies 2, and \"ext\" parameter specifies both 4 and 5, and the rest\n+   * are left to the commit protocol implementation to decide.\n+   */\n+  def addTaskTempFile(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String",
    "line": 116
  }],
  "prId": 15696
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "add: Note that the returned temp file may have an arbitrary path. The commit protocol only promises that the file will be at the location specified by the arguments after job commit.\n",
    "commit": "cd23d2f7bdf7a3ef9b93e77a3ae540d553398267",
    "createdAt": "2016-11-01T00:20:12Z",
    "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.util.{Date, UUID}\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+\n+import org.apache.spark.SparkHadoopWriter\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.sql.internal.SQLConf\n+\n+\n+object FileCommitProtocol {\n+  class TaskCommitMessage(obj: Any) extends Serializable\n+\n+  object EmptyTaskCommitMessage extends TaskCommitMessage(Unit)\n+}\n+\n+\n+/**\n+ * An interface to define how a Spark job commits its outputs. Implementations must be serializable.\n+ *\n+ * The proper call sequence is:\n+ *\n+ * 1. Driver calls setupJob.\n+ * 2. As part of each task's execution, executor calls setupTask and then commitTask\n+ *    (or abortTask if task failed).\n+ * 3. When all necessary tasks completed successfully, the driver calls commitJob. If the job\n+ *    failed to execute (e.g. too many failed tasks), the job should call abortJob.\n+ */\n+abstract class FileCommitProtocol {\n+  import FileCommitProtocol._\n+\n+  /**\n+   * Setups up a job. Must be called on the driver before any other methods can be invoked.\n+   */\n+  def setupJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Commits a job after the writes succeed. Must be called on the driver.\n+   */\n+  def commitJob(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit\n+\n+  /**\n+   * Aborts a job after the writes fail. Must be called on the driver.\n+   *\n+   * Calling this function is a best-effort attempt, because it is possible that the driver\n+   * just crashes (or killed) before it can call abort.\n+   */\n+  def abortJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Sets up a task within a job.\n+   * Must be called before any other task related methods can be invoked.\n+   */\n+  def setupTask(taskContext: TaskAttemptContext): Unit\n+\n+  /**\n+   * Notifies the commit protocol to add a new file, and gets back the full path that should be\n+   * used. Must be called on the executors when running tasks.",
    "line": 104
  }],
  "prId": 15696
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "Is this also best-effort?\n",
    "commit": "cd23d2f7bdf7a3ef9b93e77a3ae540d553398267",
    "createdAt": "2016-11-01T00:22:28Z",
    "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.util.{Date, UUID}\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+\n+import org.apache.spark.SparkHadoopWriter\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.sql.internal.SQLConf\n+\n+\n+object FileCommitProtocol {\n+  class TaskCommitMessage(obj: Any) extends Serializable\n+\n+  object EmptyTaskCommitMessage extends TaskCommitMessage(Unit)\n+}\n+\n+\n+/**\n+ * An interface to define how a Spark job commits its outputs. Implementations must be serializable.\n+ *\n+ * The proper call sequence is:\n+ *\n+ * 1. Driver calls setupJob.\n+ * 2. As part of each task's execution, executor calls setupTask and then commitTask\n+ *    (or abortTask if task failed).\n+ * 3. When all necessary tasks completed successfully, the driver calls commitJob. If the job\n+ *    failed to execute (e.g. too many failed tasks), the job should call abortJob.\n+ */\n+abstract class FileCommitProtocol {\n+  import FileCommitProtocol._\n+\n+  /**\n+   * Setups up a job. Must be called on the driver before any other methods can be invoked.\n+   */\n+  def setupJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Commits a job after the writes succeed. Must be called on the driver.\n+   */\n+  def commitJob(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit\n+\n+  /**\n+   * Aborts a job after the writes fail. Must be called on the driver.\n+   *\n+   * Calling this function is a best-effort attempt, because it is possible that the driver\n+   * just crashes (or killed) before it can call abort.\n+   */\n+  def abortJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Sets up a task within a job.\n+   * Must be called before any other task related methods can be invoked.\n+   */\n+  def setupTask(taskContext: TaskAttemptContext): Unit\n+\n+  /**\n+   * Notifies the commit protocol to add a new file, and gets back the full path that should be\n+   * used. Must be called on the executors when running tasks.\n+   *\n+   * A full file path consists of the following parts:\n+   *  1. the base path\n+   *  2. some sub-directory within the base path, used to specify partitioning\n+   *  3. file prefix, usually some unique job id with the task id\n+   *  4. bucket id\n+   *  5. source specific file extension, e.g. \".snappy.parquet\"\n+   *\n+   * The \"dir\" parameter specifies 2, and \"ext\" parameter specifies both 4 and 5, and the rest\n+   * are left to the commit protocol implementation to decide.\n+   */\n+  def addTaskTempFile(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String\n+\n+  /**\n+   * Commits a task after the writes succeed. Must be called on the executors when running tasks.\n+   */\n+  def commitTask(taskContext: TaskAttemptContext): TaskCommitMessage\n+\n+  /**\n+   * Aborts a task after the writes have failed. Must be called on the executors when running tasks.\n+   */\n+  def abortTask(taskContext: TaskAttemptContext): Unit",
    "line": 126
  }],
  "prId": 15696
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "Should we call this HadoopCommitProtocolWrapper or something to be more clear?\n",
    "commit": "cd23d2f7bdf7a3ef9b93e77a3ae540d553398267",
    "createdAt": "2016-11-01T00:34:48Z",
    "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.util.{Date, UUID}\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+\n+import org.apache.spark.SparkHadoopWriter\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.sql.internal.SQLConf\n+\n+\n+object FileCommitProtocol {\n+  class TaskCommitMessage(obj: Any) extends Serializable\n+\n+  object EmptyTaskCommitMessage extends TaskCommitMessage(Unit)\n+}\n+\n+\n+/**\n+ * An interface to define how a Spark job commits its outputs. Implementations must be serializable.\n+ *\n+ * The proper call sequence is:\n+ *\n+ * 1. Driver calls setupJob.\n+ * 2. As part of each task's execution, executor calls setupTask and then commitTask\n+ *    (or abortTask if task failed).\n+ * 3. When all necessary tasks completed successfully, the driver calls commitJob. If the job\n+ *    failed to execute (e.g. too many failed tasks), the job should call abortJob.\n+ */\n+abstract class FileCommitProtocol {\n+  import FileCommitProtocol._\n+\n+  /**\n+   * Setups up a job. Must be called on the driver before any other methods can be invoked.\n+   */\n+  def setupJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Commits a job after the writes succeed. Must be called on the driver.\n+   */\n+  def commitJob(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit\n+\n+  /**\n+   * Aborts a job after the writes fail. Must be called on the driver.\n+   *\n+   * Calling this function is a best-effort attempt, because it is possible that the driver\n+   * just crashes (or killed) before it can call abort.\n+   */\n+  def abortJob(jobContext: JobContext): Unit\n+\n+  /**\n+   * Sets up a task within a job.\n+   * Must be called before any other task related methods can be invoked.\n+   */\n+  def setupTask(taskContext: TaskAttemptContext): Unit\n+\n+  /**\n+   * Notifies the commit protocol to add a new file, and gets back the full path that should be\n+   * used. Must be called on the executors when running tasks.\n+   *\n+   * A full file path consists of the following parts:\n+   *  1. the base path\n+   *  2. some sub-directory within the base path, used to specify partitioning\n+   *  3. file prefix, usually some unique job id with the task id\n+   *  4. bucket id\n+   *  5. source specific file extension, e.g. \".snappy.parquet\"\n+   *\n+   * The \"dir\" parameter specifies 2, and \"ext\" parameter specifies both 4 and 5, and the rest\n+   * are left to the commit protocol implementation to decide.\n+   */\n+  def addTaskTempFile(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String\n+\n+  /**\n+   * Commits a task after the writes succeed. Must be called on the executors when running tasks.\n+   */\n+  def commitTask(taskContext: TaskAttemptContext): TaskCommitMessage\n+\n+  /**\n+   * Aborts a task after the writes have failed. Must be called on the executors when running tasks.\n+   */\n+  def abortTask(taskContext: TaskAttemptContext): Unit\n+}\n+\n+\n+/**\n+ * An [[FileCommitProtocol]] implementation backed by an underlying Hadoop OutputCommitter\n+ * (from the newer mapreduce API, not the old mapred API).\n+ *\n+ * Unlike Hadoop's OutputCommitter, this implementation is serializable.\n+ */\n+class MapReduceFileCommitterProtocol(path: String, isAppend: Boolean)",
    "line": 136
  }],
  "prId": 15696
}]