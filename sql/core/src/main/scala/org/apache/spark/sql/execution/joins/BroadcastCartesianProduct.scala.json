[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "How is this different from a [BroadcastNestedLoopJoin](https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/joins/BroadcastNestedLoopJoin.scala)?\n",
    "commit": "ce6ad25bede45c13e4325293b260a3301c1aceca",
    "createdAt": "2015-07-21T13:01:27Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.joins\n+\n+import scala.concurrent._\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, JoinedRow}\n+import org.apache.spark.sql.execution.{BinaryNode, SparkPlan}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * :: DeveloperApi ::\n+ */\n+@DeveloperApi\n+case class BroadcastCartesianProduct("
  }, {
    "author": {
      "login": "Sephiroth-Lin"
    },
    "body": "BroadcastNestedLoopJoin just used for out join right? But this is used for cartesian.\n",
    "commit": "ce6ad25bede45c13e4325293b260a3301c1aceca",
    "createdAt": "2015-07-22T04:24:19Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.joins\n+\n+import scala.concurrent._\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, JoinedRow}\n+import org.apache.spark.sql.execution.{BinaryNode, SparkPlan}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * :: DeveloperApi ::\n+ */\n+@DeveloperApi\n+case class BroadcastCartesianProduct("
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "The inner join variant with (degenerate) condition `1 = 1` would do the same.\n\nAll I am saying is that this also a way to get a broadcasting cartesian join going, and it saves some lines of code.\n",
    "commit": "ce6ad25bede45c13e4325293b260a3301c1aceca",
    "createdAt": "2015-07-24T13:37:33Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.joins\n+\n+import scala.concurrent._\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, JoinedRow}\n+import org.apache.spark.sql.execution.{BinaryNode, SparkPlan}\n+import org.apache.spark.util.ThreadUtils\n+\n+/**\n+ * :: DeveloperApi ::\n+ */\n+@DeveloperApi\n+case class BroadcastCartesianProduct("
  }],
  "prId": 7417
}]