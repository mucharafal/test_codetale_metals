[{
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "nit: remove empty line",
    "commit": "846e21a96e106f44fa0b88ab71d07095995b3790",
    "createdAt": "2019-11-08T16:12:16Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.connector.catalog.Table;\n+\n+/**\n+ * Physical plan node for showing tblproperties.\n+ */\n+case class ShowTblpropertiesExec(\n+    output: Seq[Attribute],\n+    catalogTable: Table,\n+    propertyKey: Option[String]) extends V2CommandExec {\n+\n+  override protected def run(): Seq[InternalRow] = {\n+    import scala.collection.JavaConverters._\n+    val encoder = RowEncoder(schema).resolveAndBind()\n+\n+    val properties = catalogTable.properties.asScala\n+    propertyKey match {\n+      case Some(p) =>\n+        val propValue = properties\n+          .getOrElse(p, s\"Table ${catalogTable.name} does not have property: $p\")\n+        Seq(encoder.toRow(new GenericRowWithSchema(Array(p, propValue), schema)).copy())\n+      case None =>\n+        properties.keys.map(k =>\n+          encoder.toRow(new GenericRowWithSchema(Array(k, properties(k)), schema)).copy()).toSeq\n+    }\n+  }\n+"
  }],
  "prId": 26176
}, {
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "`ShowTablePropertiesExec` to match with the statement, etc. Same applies to other places below.",
    "commit": "846e21a96e106f44fa0b88ab71d07095995b3790",
    "createdAt": "2019-11-08T16:16:32Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.connector.catalog.Table;\n+\n+/**\n+ * Physical plan node for showing tblproperties.\n+ */\n+case class ShowTblpropertiesExec("
  }],
  "prId": 26176
}]