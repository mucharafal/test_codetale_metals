[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we need the `super` keyword here?",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-17T08:03:54Z",
    "diffHunk": "@@ -53,219 +53,297 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      super.gatherNullStats"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Good catch. done.",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-17T19:49:20Z",
    "diffHunk": "@@ -53,219 +53,297 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      super.gatherNullStats"
  }],
  "prId": 18002
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Nit: we may not need `gatherValueStats`  here. Simply inline:\r\n\r\n    sizeInBytes += BINARY.actualSize(row, ordinal)\r\n    count += 1",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-17T08:26:27Z",
    "diffHunk": "@@ -53,219 +53,297 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      super.gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      gatherValueStats(size)"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Thanks, done.",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-17T19:48:52Z",
    "diffHunk": "@@ -53,219 +53,297 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      super.gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      gatherValueStats(size)"
  }],
  "prId": 18002
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Nit: we can inline this too.",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-17T08:31:48Z",
    "diffHunk": "@@ -53,219 +53,297 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      super.gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      gatherValueStats(size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](null, null, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n+private[columnar] final class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n   def this(dt: DecimalType) = this(dt.precision, dt.scale)\n \n   protected var upper: Decimal = null\n   protected var lower: Decimal = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDecimal(ordinal, precision, scale)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value\n-      if (lower == null || value.compareTo(lower) < 0) lower = value\n       // TODO: this is not right for DecimalType with precision > 18\n-      sizeInBytes += 8\n+      val size = 8\n+      gatherValueStats(value, size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Decimal, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value\n+    if (lower == null || value.compareTo(lower) < 0) lower = value\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ObjectColumnStats(dataType: DataType) extends ColumnStats {\n+private[columnar] final class ObjectColumnStats(dataType: DataType) extends ColumnStats {\n   val columnType = ColumnType(dataType)\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += columnType.actualSize(row, ordinal)\n+      val size = columnType.actualSize(row, ordinal)\n+      gatherValueStats(size)\n+    } else {\n+      super.gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {"
  }],
  "prId": 18002
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "not related, but `STRING.actualSize` should just take `UTF8String`",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T03:08:33Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "I may not understand your point.\r\nDo you want to use `row.getUTF8String(ordinal).numBytes() + 4` instead of calling `STRING.actualSize()`? (i.e. method inlining).",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T06:09:14Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I mean we can just pass the UTF8String to STRING.actualSize",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T06:11:37Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "In `STRING.actualSize`, we call `row.getUTF8String(ordinal)`, so why not we pass in the UTF8String directly?",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T07:11:00Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Do you want to add the new method `STRING.actualSize(s: UTF8String)`? The current signature `actualSize(row: InternalRow, ordinal: Int)` cannot be changed since it is declared at the super class.\r\n",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T07:30:10Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah i see, nvm",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T16:52:35Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)",
    "line": 288
  }],
  "prId": 18002
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "is this method used?",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T03:09:03Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      sizeInBytes += size\n+      count += 1\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Sure, removed.",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T06:19:04Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      sizeInBytes += size\n+      count += 1\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {"
  }],
  "prId": 18002
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we just hardcode `8` in `gatherValueStats`?",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T03:10:14Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      sizeInBytes += size\n+      count += 1\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](null, null, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n+private[columnar] final class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n   def this(dt: DecimalType) = this(dt.precision, dt.scale)\n \n   protected var upper: Decimal = null\n   protected var lower: Decimal = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDecimal(ordinal, precision, scale)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value\n-      if (lower == null || value.compareTo(lower) < 0) lower = value\n       // TODO: this is not right for DecimalType with precision > 18\n-      sizeInBytes += 8\n+      val size = 8"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Thanks, done",
    "commit": "66fefb6a8a0ddf1d1dc9318e5320506987da9c59",
    "createdAt": "2017-05-18T06:18:54Z",
    "diffHunk": "@@ -53,219 +53,299 @@ private[columnar] sealed trait ColumnStats extends Serializable {\n   /**\n    * Gathers statistics information from `row(ordinal)`.\n    */\n-  def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    if (row.isNullAt(ordinal)) {\n-      nullCount += 1\n-      // 4 bytes for null position\n-      sizeInBytes += 4\n-    }\n+  def gatherStats(row: InternalRow, ordinal: Int): Unit\n+\n+  /**\n+   * Gathers statistics information on `null`.\n+   */\n+  def gatherNullStats(): Unit = {\n+    nullCount += 1\n+    // 4 bytes for null position\n+    sizeInBytes += 4\n     count += 1\n   }\n \n   /**\n-   * Column statistics represented as a single row, currently including closed lower bound, closed\n+   * Column statistics represented as an array, currently including closed lower bound, closed\n    * upper bound and null count.\n    */\n-  def collectedStatistics: GenericInternalRow\n+  def collectedStatistics: Array[Any]\n }\n \n /**\n  * A no-op ColumnStats only used for testing purposes.\n  */\n-private[columnar] class NoopColumnStats extends ColumnStats {\n-  override def gatherStats(row: InternalRow, ordinal: Int): Unit = super.gatherStats(row, ordinal)\n+private[columnar] final class NoopColumnStats extends ColumnStats {\n+  override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n+    if (!row.isNullAt(ordinal)) {\n+      count += 1\n+    } else {\n+      gatherNullStats\n+    }\n+  }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, 0L))\n+  override def collectedStatistics: Array[Any] = Array[Any](null, null, nullCount, count, 0L)\n }\n \n-private[columnar] class BooleanColumnStats extends ColumnStats {\n+private[columnar] final class BooleanColumnStats extends ColumnStats {\n   protected var upper = false\n   protected var lower = true\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getBoolean(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BOOLEAN.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Boolean): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BOOLEAN.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ByteColumnStats extends ColumnStats {\n+private[columnar] final class ByteColumnStats extends ColumnStats {\n   protected var upper = Byte.MinValue\n   protected var lower = Byte.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getByte(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += BYTE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Byte): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += BYTE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class ShortColumnStats extends ColumnStats {\n+private[columnar] final class ShortColumnStats extends ColumnStats {\n   protected var upper = Short.MinValue\n   protected var lower = Short.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getShort(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += SHORT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Short): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += SHORT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class IntColumnStats extends ColumnStats {\n+private[columnar] final class IntColumnStats extends ColumnStats {\n   protected var upper = Int.MinValue\n   protected var lower = Int.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getInt(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += INT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Int): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += INT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class LongColumnStats extends ColumnStats {\n+private[columnar] final class LongColumnStats extends ColumnStats {\n   protected var upper = Long.MinValue\n   protected var lower = Long.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getLong(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += LONG.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Long): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += LONG.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class FloatColumnStats extends ColumnStats {\n+private[columnar] final class FloatColumnStats extends ColumnStats {\n   protected var upper = Float.MinValue\n   protected var lower = Float.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getFloat(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += FLOAT.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Float): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += FLOAT.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DoubleColumnStats extends ColumnStats {\n+private[columnar] final class DoubleColumnStats extends ColumnStats {\n   protected var upper = Double.MinValue\n   protected var lower = Double.MaxValue\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDouble(ordinal)\n-      if (value > upper) upper = value\n-      if (value < lower) lower = value\n-      sizeInBytes += DOUBLE.defaultSize\n+      gatherValueStats(value)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: Double): Unit = {\n+    if (value > upper) upper = value\n+    if (value < lower) lower = value\n+    sizeInBytes += DOUBLE.defaultSize\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class StringColumnStats extends ColumnStats {\n+private[columnar] final class StringColumnStats extends ColumnStats {\n   protected var upper: UTF8String = null\n   protected var lower: UTF8String = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getUTF8String(ordinal)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n-      if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n-      sizeInBytes += STRING.actualSize(row, ordinal)\n+      val size = STRING.actualSize(row, ordinal)\n+      gatherValueStats(value, size)\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](lower, upper, nullCount, count, sizeInBytes))\n+  def gatherValueStats(value: UTF8String, size: Int): Unit = {\n+    if (upper == null || value.compareTo(upper) > 0) upper = value.clone()\n+    if (lower == null || value.compareTo(lower) < 0) lower = value.clone()\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](lower, upper, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class BinaryColumnStats extends ColumnStats {\n+private[columnar] final class BinaryColumnStats extends ColumnStats {\n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n-      sizeInBytes += BINARY.actualSize(row, ordinal)\n+      val size = BINARY.actualSize(row, ordinal)\n+      sizeInBytes += size\n+      count += 1\n+    } else {\n+      gatherNullStats\n     }\n   }\n \n-  override def collectedStatistics: GenericInternalRow =\n-    new GenericInternalRow(Array[Any](null, null, nullCount, count, sizeInBytes))\n+  def gatherValueStats(size: Int): Unit = {\n+    sizeInBytes += size\n+    count += 1\n+  }\n+\n+  override def collectedStatistics: Array[Any] =\n+    Array[Any](null, null, nullCount, count, sizeInBytes)\n }\n \n-private[columnar] class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n+private[columnar] final class DecimalColumnStats(precision: Int, scale: Int) extends ColumnStats {\n   def this(dt: DecimalType) = this(dt.precision, dt.scale)\n \n   protected var upper: Decimal = null\n   protected var lower: Decimal = null\n \n   override def gatherStats(row: InternalRow, ordinal: Int): Unit = {\n-    super.gatherStats(row, ordinal)\n     if (!row.isNullAt(ordinal)) {\n       val value = row.getDecimal(ordinal, precision, scale)\n-      if (upper == null || value.compareTo(upper) > 0) upper = value\n-      if (lower == null || value.compareTo(lower) < 0) lower = value\n       // TODO: this is not right for DecimalType with precision > 18\n-      sizeInBytes += 8\n+      val size = 8"
  }],
  "prId": 18002
}]