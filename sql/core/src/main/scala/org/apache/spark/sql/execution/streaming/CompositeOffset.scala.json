[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Change the type to `Array` as jackson-module-scala doesn't support `Seq[Option[X]]`. Probably because of the type erasure.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-05-30T05:40:41Z",
    "diffHunk": "@@ -22,7 +22,7 @@ package org.apache.spark.sql.execution.streaming\n  * [[Source]]s that are present in a streaming query. This is similar to simplified, single-instance\n  * vector clock that must progress linearly forward.\n  */\n-case class CompositeOffset(offsets: Seq[Option[Offset]]) extends Offset {\n+case class CompositeOffset(offsets: Array[Option[Offset]]) extends Offset {"
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Need to redefine `equals` and `hashCode` as `offsets` is an array\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-05-31T23:51:21Z",
    "diffHunk": "@@ -67,6 +67,15 @@ case class CompositeOffset(offsets: Seq[Option[Offset]]) extends Offset {\n \n   override def toString: String =\n     offsets.map(_.map(_.toString).getOrElse(\"-\")).mkString(\"[\", \", \", \"]\")\n+\n+  override def equals(other: Any): Boolean = other match {\n+    case that: CompositeOffset => offsets != null && offsets.sameElements(that.offsets)"
  }],
  "prId": 13335
}]