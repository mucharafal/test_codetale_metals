[{
  "comments": [{
    "author": {
      "login": "keypointt"
    },
    "body": "same upper case `V1` and `V2`?",
    "commit": "8072fc5e4521fd921a5f7fdc7971f289b3439f09",
    "createdAt": "2019-08-21T21:25:51Z",
    "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2.jdbc\n+\n+import java.sql.{Connection, SQLException}\n+import java.util\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.catalog.v2.{Identifier, TableChange}\n+import org.apache.spark.sql.catalog.v2.expressions.Transform\n+import org.apache.spark.sql.catalyst.analysis.{NoSuchNamespaceException, NoSuchTableException}\n+import org.apache.spark.sql.execution.datasources.jdbc.{JDBCOptions, JDBCRDD, JdbcUtils}\n+import org.apache.spark.sql.jdbc.JdbcDialects\n+import org.apache.spark.sql.sources.DataSourceV1TableCatalog\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class JDBCTableCatalog extends DataSourceV1TableCatalog with Logging {\n+\n+  private var _name: String = _\n+  private var options: JDBCOptions = _\n+\n+  override def initialize(name: String, options: CaseInsensitiveStringMap): Unit = {\n+    _name = name\n+    val map = options.asCaseSensitiveMap().asScala.toMap\n+    // The `JDBCOptions` checks the existence of the table option. This is required by JDBC v1, but\n+    // JDBC V2 only knows the table option when loading a table. Here we put a table option with a",
    "line": 45
  }],
  "prId": 25291
}]