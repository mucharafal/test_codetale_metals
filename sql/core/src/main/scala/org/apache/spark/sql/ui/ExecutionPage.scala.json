[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "`private[ui]`\n",
    "commit": "5a2bc9937bc26e014842b720fd2096294c9272b7",
    "createdAt": "2015-08-02T05:45:20Z",
    "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.ui\n+\n+import javax.servlet.http.HttpServletRequest\n+\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.commons.lang3.StringEscapeUtils\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.ui.{UIUtils, WebUIPage}\n+\n+class ExecutionPage(parent: SQLTab) extends WebUIPage(\"execution\") with Logging {"
  }],
  "prId": 7774
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "remove random blank line\n",
    "commit": "5a2bc9937bc26e014842b720fd2096294c9272b7",
    "createdAt": "2015-08-03T20:57:21Z",
    "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.ui\n+\n+import javax.servlet.http.HttpServletRequest\n+\n+import scala.xml.{Node, Unparsed}\n+\n+import org.apache.commons.lang3.StringEscapeUtils\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.ui.{UIUtils, WebUIPage}\n+\n+private[sql] class ExecutionPage(parent: SQLTab) extends WebUIPage(\"execution\") with Logging {\n+\n+  private val listener = parent.listener\n+\n+  override def render(request: HttpServletRequest): Seq[Node] = listener.synchronized {\n+    val parameterExecutionId = request.getParameter(\"id\")\n+    require(parameterExecutionId != null && parameterExecutionId.nonEmpty,\n+      \"Missing execution id parameter\")\n+\n+    val executionId = parameterExecutionId.toLong\n+    val content = listener.getExecution(executionId).map { executionUIData =>\n+      val currentTime = System.currentTimeMillis()\n+      val duration =\n+        executionUIData.completionTime.getOrElse(currentTime) - executionUIData.submissionTime\n+\n+      val summary =\n+        <div>\n+          <ul class=\"unstyled\">\n+            <li>\n+              <strong>Submitted Time: </strong>{UIUtils.formatDate(executionUIData.submissionTime)}\n+            </li>\n+            <li>\n+              <strong>Duration: </strong>{UIUtils.formatDuration(duration)}\n+            </li>\n+            {if (executionUIData.runningJobs.nonEmpty) {\n+              <li>\n+                <strong>Running Jobs: </strong>\n+                {executionUIData.runningJobs.sorted.map { jobId =>\n+                <a href={jobURL(jobId)}>{jobId.toString}</a><span>&nbsp;</span>\n+              }}\n+              </li>\n+            }}\n+            {if (executionUIData.succeededJobs.nonEmpty) {\n+              <li>\n+                <strong>Succeeded Jobs: </strong>\n+                {executionUIData.succeededJobs.sorted.map { jobId =>\n+                  <a href={jobURL(jobId)}>{jobId.toString}</a><span>&nbsp;</span>\n+                }}\n+              </li>\n+            }}\n+            {if (executionUIData.failedJobs.nonEmpty) {\n+              <li>\n+                <strong>Failed Jobs: </strong>\n+                {executionUIData.failedJobs.sorted.map { jobId =>\n+                  <a href={jobURL(jobId)}>{jobId.toString}</a><span>&nbsp;</span>\n+                }}\n+              </li>\n+            }}\n+            <li>\n+              <strong>Detail: </strong><br/>\n+              <pre>{executionUIData.physicalPlanDescription}</pre>\n+            </li>\n+          </ul>\n+        </div>\n+\n+      val metrics = listener.getExecutionMetrics(executionId)\n+\n+      summary ++ planVisualization(metrics, executionUIData.physicalPlanGraph)\n+    }.getOrElse {\n+      <div>No information to display for Plan {executionId}</div>\n+    }\n+\n+    UIUtils.headerSparkPage(s\"Details for Query $executionId\", content, parent, Some(5000))\n+  }\n+\n+\n+  private def planVisualizationResources: Seq[Node] = {\n+    // scalastyle:off\n+    <link rel=\"stylesheet\" href={UIUtils.prependBaseUri(\"/static/sql/spark-sql-viz.css\")} type=\"text/css\"/>\n+    <script src={UIUtils.prependBaseUri(\"/static/d3.min.js\")}></script>\n+    <script src={UIUtils.prependBaseUri(\"/static/dagre-d3.min.js\")}></script>\n+    <script src={UIUtils.prependBaseUri(\"/static/graphlib-dot.min.js\")}></script>\n+    <script src={UIUtils.prependBaseUri(\"/static/sql/spark-sql-viz.js\")}></script>\n+    // scalastyle:on\n+  }\n+\n+  private def planVisualization(metrics: Map[Long, Any], graph: SparkPlanGraph): Seq[Node] = {\n+    val metadata = graph.nodes.flatMap { node =>\n+      val nodeId = s\"plan-meta-data-${node.id}\"\n+"
  }],
  "prId": 7774
}]