[{
  "comments": [{
    "author": {
      "login": "felixcheung"
    },
    "body": "`map/flatMap]` -> `[map/flatMap]`",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-15T23:49:16Z",
    "diffHunk": "@@ -119,32 +115,39 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (timeoutConf != EventTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling event time timeout in \" +\n+          \"[map/flatMap]GroupsWithState\")\n+    }\n+    eventTimeWatermarkMs\n+  }\n+\n+  override def getCurrentProcessingTimeMs(): Long = {\n+    if (timeoutConf != ProcessingTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get processing time timestamp without enabling processing time timeout in \" +\n+          \"map/flatMap]GroupsWithState\")"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "uber nit: should we be consistent with `/` and `|` half the places we use `[map/flatMap]` and in the other half there is `[map|flatMap]`. I prefer `|`",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T18:54:28Z",
    "diffHunk": "@@ -119,32 +115,39 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (timeoutConf != EventTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling event time timeout in \" +\n+          \"[map/flatMap]GroupsWithState\")"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "right.",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T20:43:57Z",
    "diffHunk": "@@ -119,32 +115,39 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (timeoutConf != EventTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling event time timeout in \" +\n+          \"[map/flatMap]GroupsWithState\")"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: `[`",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T23:06:13Z",
    "diffHunk": "@@ -119,32 +115,39 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (timeoutConf != EventTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling event time timeout in \" +\n+          \"[map|flatMap]GroupsWithState\")\n+    }\n+    eventTimeWatermarkMs\n+  }\n+\n+  override def getCurrentProcessingTimeMs(): Long = {\n+    if (timeoutConf != ProcessingTimeTimeout) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get processing time timestamp without enabling processing time timeout in \" +\n+          \"map|flatMap]GroupsWithState\")"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "`[map|flatMap]`",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T23:06:26Z",
    "diffHunk": "@@ -187,7 +190,7 @@ private[sql] class GroupStateImpl[S] private(\n     if (timeoutConf != EventTimeTimeout) {\n       throw new UnsupportedOperationException(\n         \"Cannot set timeout timestamp without enabling event time timeout in \" +\n-          \"map/flatMapGroupsWithState\")\n+          \"map|flatMapGroupsWithState\")"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "`without enabling setting watermark` sounds too convoluted. You probably meant `without setting watermark`?",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T23:23:51Z",
    "diffHunk": "@@ -119,32 +116,34 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (!watermarkPresent) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling setting watermark before \" +"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "yes.",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T23:32:08Z",
    "diffHunk": "@@ -119,32 +116,34 @@ private[sql] class GroupStateImpl[S] private(\n     timeoutTimestamp = timestampMs\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(parseDuration(additionalDuration) + timestampMs)\n   }\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime)\n   }\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n   override def setTimeoutTimestamp(timestamp: Date, additionalDuration: String): Unit = {\n     checkTimeoutTimestampAllowed()\n     setTimeoutTimestamp(timestamp.getTime + parseDuration(additionalDuration))\n   }\n \n+  override def getCurrentWatermarkMs(): Long = {\n+    if (!watermarkPresent) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot get event time watermark timestamp without enabling setting watermark before \" +"
  }],
  "prId": 19495
}]