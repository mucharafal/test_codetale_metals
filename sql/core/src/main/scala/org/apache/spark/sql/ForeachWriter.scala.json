[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Looks like doc is duplicated between `foreach()` and `ForeachWriter`. I'm not sure how we can leave some reference on Python doc instead of duplicating content, but even Python doc doesn't support some kind of reference, some part of content seems to be OK to be placed to either place, not both.",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-06T04:39:01Z",
    "diffHunk": "@@ -20,10 +20,48 @@ package org.apache.spark.sql\n import org.apache.spark.annotation.InterfaceStability\n \n /**\n- * A class to consume data generated by a `StreamingQuery`. Typically this is used to send the\n- * generated data to external systems. Each partition will use a new deserialized instance, so you\n- * usually should do all the initialization (e.g. opening a connection or initiating a transaction)\n- * in the `open` method.\n+ * The abstract class for writing custom logic to process data generated by a query.\n+ * This is often used to write the output of a streaming query to arbitrary storage systems.",
    "line": 9
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I don't think there's a easy way to reference doc across other languages. It's unfortunate but usually we have duplicated the docs between other language API docs ... ",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-06T05:19:36Z",
    "diffHunk": "@@ -20,10 +20,48 @@ package org.apache.spark.sql\n import org.apache.spark.annotation.InterfaceStability\n \n /**\n- * A class to consume data generated by a `StreamingQuery`. Typically this is used to send the\n- * generated data to external systems. Each partition will use a new deserialized instance, so you\n- * usually should do all the initialization (e.g. opening a connection or initiating a transaction)\n- * in the `open` method.\n+ * The abstract class for writing custom logic to process data generated by a query.\n+ * This is often used to write the output of a streaming query to arbitrary storage systems.",
    "line": 9
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Ah yes my bad. I confused this as python.",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-06T06:31:42Z",
    "diffHunk": "@@ -20,10 +20,48 @@ package org.apache.spark.sql\n import org.apache.spark.annotation.InterfaceStability\n \n /**\n- * A class to consume data generated by a `StreamingQuery`. Typically this is used to send the\n- * generated data to external systems. Each partition will use a new deserialized instance, so you\n- * usually should do all the initialization (e.g. opening a connection or initiating a transaction)\n- * in the `open` method.\n+ * The abstract class for writing custom logic to process data generated by a query.\n+ * This is often used to write the output of a streaming query to arbitrary storage systems.",
    "line": 9
  }],
  "prId": 21477
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Renaming a parameter breaks Scala source compatibility. I'm totally fine to change this since it's not a stable API, just point this out.",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-07T18:06:08Z",
    "diffHunk": "@@ -71,23 +110,17 @@ abstract class ForeachWriter[T] extends Serializable {\n   // TODO: Move this to org.apache.spark.sql.util or consolidate this with batch API.\n \n   /**\n-   * Called when starting to process one partition of new data in the executor. The `version` is\n-   * for data deduplication when there are failures. When recovering from a failure, some data may\n-   * be generated multiple times but they will always have the same version.\n-   *\n-   * If this method finds using the `partitionId` and `version` that this partition has already been\n-   * processed, it can return `false` to skip the further data processing. However, `close` still\n-   * will be called for cleaning up resources.\n+   * Called when starting to process one partition of new data in the executor.\n    *\n    * @param partitionId the partition id.\n-   * @param version a unique id for data deduplication.\n+   * @param epochId a unique id for data deduplication.\n    * @return `true` if the corresponding partition and version id should be processed. `false`\n    *         indicates the partition should be skipped.\n    */\n-  def open(partitionId: Long, version: Long): Boolean\n+  def open(partitionId: Long, epochId: Long): Boolean",
    "line": 82
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "oh right... it probably breaks source compatibility. I dont think that is fine :( especially in the 2.x line, even though it is marked as experimental (its been out there for over 2 years now, this is hardly experimental and we should not remove the experimental tag, but that's a different discussion).",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-07T20:58:13Z",
    "diffHunk": "@@ -71,23 +110,17 @@ abstract class ForeachWriter[T] extends Serializable {\n   // TODO: Move this to org.apache.spark.sql.util or consolidate this with batch API.\n \n   /**\n-   * Called when starting to process one partition of new data in the executor. The `version` is\n-   * for data deduplication when there are failures. When recovering from a failure, some data may\n-   * be generated multiple times but they will always have the same version.\n-   *\n-   * If this method finds using the `partitionId` and `version` that this partition has already been\n-   * processed, it can return `false` to skip the further data processing. However, `close` still\n-   * will be called for cleaning up resources.\n+   * Called when starting to process one partition of new data in the executor.\n    *\n    * @param partitionId the partition id.\n-   * @param version a unique id for data deduplication.\n+   * @param epochId a unique id for data deduplication.\n    * @return `true` if the corresponding partition and version id should be processed. `false`\n    *         indicates the partition should be skipped.\n    */\n-  def open(partitionId: Long, version: Long): Boolean\n+  def open(partitionId: Long, epochId: Long): Boolean",
    "line": 82
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "okay. I checked but there is no compatibility issue in this case. The source compatibility issue arises when a code calls a method with param name (e.g. `func(paramName=value)`) and the param name changes. In this case, users are overriding the method (overriding does not care about the exact name, only the types) and Spark is internally calling the method (not by param name). So this is fine.",
    "commit": "1ab612f3d965cc6cad2b24c309bb7f11f931ea1e",
    "createdAt": "2018-06-07T21:19:11Z",
    "diffHunk": "@@ -71,23 +110,17 @@ abstract class ForeachWriter[T] extends Serializable {\n   // TODO: Move this to org.apache.spark.sql.util or consolidate this with batch API.\n \n   /**\n-   * Called when starting to process one partition of new data in the executor. The `version` is\n-   * for data deduplication when there are failures. When recovering from a failure, some data may\n-   * be generated multiple times but they will always have the same version.\n-   *\n-   * If this method finds using the `partitionId` and `version` that this partition has already been\n-   * processed, it can return `false` to skip the further data processing. However, `close` still\n-   * will be called for cleaning up resources.\n+   * Called when starting to process one partition of new data in the executor.\n    *\n    * @param partitionId the partition id.\n-   * @param version a unique id for data deduplication.\n+   * @param epochId a unique id for data deduplication.\n    * @return `true` if the corresponding partition and version id should be processed. `false`\n    *         indicates the partition should be skipped.\n    */\n-  def open(partitionId: Long, version: Long): Boolean\n+  def open(partitionId: Long, epochId: Long): Boolean",
    "line": 82
  }],
  "prId": 21477
}]