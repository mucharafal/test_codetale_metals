[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we move it out and make it a member variable?",
    "commit": "52923296a946ac734c988fe10725921ea3c2b313",
    "createdAt": "2017-12-14T08:51:58Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import java.util.regex.Pattern\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+\n+private[sql] object Utils extends Logging {\n+\n+  /**\n+   * Helper method that turns session configs with config keys that start with\n+   * `spark.datasource.$keyPrefix` into k/v pairs, the k/v pairs will be used to create data source\n+   * options.\n+   * A session config `spark.datasource.$keyPrefix.xxx -> yyy` will be transformed into\n+   * `xxx -> yyy`.\n+   *\n+   * @param keyPrefix the data source config key prefix to be matched\n+   * @param conf the session conf\n+   * @return an immutable map that contains all the extracted and transformed k/v pairs.\n+   */\n+  def withSessionConfig(\n+      keyPrefix: String,\n+      conf: SQLConf): Map[String, String] = {\n+    require(keyPrefix != null, \"The data source config key prefix can't be null.\")\n+\n+    val pattern = Pattern.compile(s\"^spark\\\\.datasource\\\\.$keyPrefix\\\\.(.*)\")"
  }],
  "prId": 19861
}]