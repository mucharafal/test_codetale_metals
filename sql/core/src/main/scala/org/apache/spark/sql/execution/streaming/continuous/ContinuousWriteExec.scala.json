[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "add docs",
    "commit": "bf1bef4a40d18fbc55f2a905dee7c01649af47ca",
    "createdAt": "2018-03-26T21:38:37Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.{SparkEnv, SparkException, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.datasources.v2.{DataWritingSparkTask, InternalRowDataWriterFactory}\n+import org.apache.spark.sql.execution.datasources.v2.DataWritingSparkTask.{logError, logInfo}\n+import org.apache.spark.sql.execution.streaming.StreamExecution\n+import org.apache.spark.sql.sources.v2.writer._\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.util.Utils\n+\n+case class ContinuousWriteExec(writer: StreamWriter, query: SparkPlan)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Isnt it better to keep the name consistent with WriterToDataSource? Say, WriteToContinuousDataSourceExec?",
    "commit": "bf1bef4a40d18fbc55f2a905dee7c01649af47ca",
    "createdAt": "2018-03-26T21:45:46Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.{SparkEnv, SparkException, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.datasources.v2.{DataWritingSparkTask, InternalRowDataWriterFactory}\n+import org.apache.spark.sql.execution.datasources.v2.DataWritingSparkTask.{logError, logInfo}\n+import org.apache.spark.sql.execution.streaming.StreamExecution\n+import org.apache.spark.sql.sources.v2.writer._\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.util.Utils\n+\n+case class ContinuousWriteExec(writer: StreamWriter, query: SparkPlan)"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "Sure, works for me.",
    "commit": "bf1bef4a40d18fbc55f2a905dee7c01649af47ca",
    "createdAt": "2018-03-27T02:16:44Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.{SparkEnv, SparkException, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.datasources.v2.{DataWritingSparkTask, InternalRowDataWriterFactory}\n+import org.apache.spark.sql.execution.datasources.v2.DataWritingSparkTask.{logError, logInfo}\n+import org.apache.spark.sql.execution.streaming.StreamExecution\n+import org.apache.spark.sql.sources.v2.writer._\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.util.Utils\n+\n+case class ContinuousWriteExec(writer: StreamWriter, query: SparkPlan)"
  }],
  "prId": 20906
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: Add comment on what this does.",
    "commit": "bf1bef4a40d18fbc55f2a905dee7c01649af47ca",
    "createdAt": "2018-03-26T21:44:27Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.{SparkEnv, SparkException, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.datasources.v2.{DataWritingSparkTask, InternalRowDataWriterFactory}\n+import org.apache.spark.sql.execution.datasources.v2.DataWritingSparkTask.{logError, logInfo}\n+import org.apache.spark.sql.execution.streaming.StreamExecution\n+import org.apache.spark.sql.sources.v2.writer._\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.util.Utils\n+\n+case class ContinuousWriteExec(writer: StreamWriter, query: SparkPlan)\n+    extends SparkPlan with Logging {\n+  override def children: Seq[SparkPlan] = Seq(query)\n+  override def output: Seq[Attribute] = Nil\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val writerFactory = writer match {\n+      case w: SupportsWriteInternalRow => w.createInternalRowWriterFactory()\n+      case _ => new InternalRowDataWriterFactory(writer.createWriterFactory(), query.schema)\n+    }\n+\n+    val rdd = query.execute()\n+    val messages = new Array[WriterCommitMessage](rdd.partitions.length)\n+\n+    logInfo(s\"Start processing data source writer: $writer. \" +\n+      s\"The input RDD has ${messages.length} partitions.\")\n+    EpochCoordinatorRef.get("
  }],
  "prId": 20906
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: this indentation looks weird.",
    "commit": "bf1bef4a40d18fbc55f2a905dee7c01649af47ca",
    "createdAt": "2018-03-27T00:33:33Z",
    "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous\n+\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.{SparkEnv, SparkException, TaskContext}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.datasources.v2.{DataWritingSparkTask, InternalRowDataWriterFactory}\n+import org.apache.spark.sql.execution.datasources.v2.DataWritingSparkTask.{logError, logInfo}\n+import org.apache.spark.sql.execution.streaming.StreamExecution\n+import org.apache.spark.sql.sources.v2.writer._\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.util.Utils\n+\n+case class ContinuousWriteExec(writer: StreamWriter, query: SparkPlan)\n+    extends SparkPlan with Logging {\n+  override def children: Seq[SparkPlan] = Seq(query)\n+  override def output: Seq[Attribute] = Nil\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val writerFactory = writer match {\n+      case w: SupportsWriteInternalRow => w.createInternalRowWriterFactory()\n+      case _ => new InternalRowDataWriterFactory(writer.createWriterFactory(), query.schema)\n+    }\n+\n+    val rdd = query.execute()\n+    val messages = new Array[WriterCommitMessage](rdd.partitions.length)\n+\n+    logInfo(s\"Start processing data source writer: $writer. \" +\n+      s\"The input RDD has ${messages.length} partitions.\")\n+    EpochCoordinatorRef.get(\n+      sparkContext.getLocalProperty(ContinuousExecution.EPOCH_COORDINATOR_ID_KEY),\n+      sparkContext.env)\n+      .askSync[Unit](SetWriterPartitions(rdd.getNumPartitions))"
  }],
  "prId": 20906
}]