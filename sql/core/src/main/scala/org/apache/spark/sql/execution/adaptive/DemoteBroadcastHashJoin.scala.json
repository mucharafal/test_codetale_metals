[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "we can avoid `var`?\r\n```\r\n      val maybeNewHint = if (!hint.leftHint.exists(_.strategy.isDefined) && shouldDemote(left)) {\r\n        hint.copy(leftHint =\r\n          Some(hint.leftHint.getOrElse(HintInfo()).copy(strategy = Some(NO_BROADCAST_HASH))))\r\n      } else if (!hint.rightHint.exists(_.strategy.isDefined) && shouldDemote(right)) {\r\n        hint.copy(rightHint =\r\n          Some(hint.rightHint.getOrElse(HintInfo()).copy(strategy = Some(NO_BROADCAST_HASH))))\r\n      } else {\r\n        hint\r\n      }\r\n      if (maybeNewHint.ne(hint)) {\r\n        j.copy(hint = maybeNewHint)\r\n      } else {\r\n        j\r\n      }\r\n```",
    "commit": "4b011ab3570f3d9ae3f30e88987cd05a47ec1a87",
    "createdAt": "2019-09-05T23:52:46Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.MapOutputStatistics\n+import org.apache.spark.sql.catalyst.plans.logical.{HintInfo, Join, LogicalPlan, NO_BROADCAST_HASH}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * This optimization rule detects a join child that has a high ratio of empty partitions and\n+ * adds a no-broadcast-hash-join hint to avoid it being broadcast.\n+ */\n+case class DemoteBroadcastHashJoin(conf: SQLConf) extends Rule[LogicalPlan] {\n+\n+  private def shouldDemote(plan: LogicalPlan): Boolean = plan match {\n+    case LogicalQueryStage(_, stage: QueryStageExec)\n+      if stage.resultOption.isDefined &&\n+        stage.resultOption.get.isInstanceOf[MapOutputStatistics] =>\n+      val mapOutputStatistics = stage.resultOption.get.asInstanceOf[MapOutputStatistics]\n+      val partitionCnt = mapOutputStatistics.bytesByPartitionId.length\n+      val nonZeroCnt = mapOutputStatistics.bytesByPartitionId.count(_ > 0)\n+      partitionCnt > 0 && nonZeroCnt > 0 &&\n+        (nonZeroCnt * 1.0 / partitionCnt) < conf.nonEmptyPartitionRatioForBroadcastJoin\n+    case _ => false\n+  }\n+\n+  def apply(plan: LogicalPlan): LogicalPlan = plan.transformDown {\n+    case j @ Join(left, right, _, _, hint) =>\n+      var newHint = hint",
    "line": 45
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "You might have misunderstood the logic here. Left and right aren't exclusive here, so it's not an \"if-else\" logic. ",
    "commit": "4b011ab3570f3d9ae3f30e88987cd05a47ec1a87",
    "createdAt": "2019-09-06T02:21:30Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.MapOutputStatistics\n+import org.apache.spark.sql.catalyst.plans.logical.{HintInfo, Join, LogicalPlan, NO_BROADCAST_HASH}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * This optimization rule detects a join child that has a high ratio of empty partitions and\n+ * adds a no-broadcast-hash-join hint to avoid it being broadcast.\n+ */\n+case class DemoteBroadcastHashJoin(conf: SQLConf) extends Rule[LogicalPlan] {\n+\n+  private def shouldDemote(plan: LogicalPlan): Boolean = plan match {\n+    case LogicalQueryStage(_, stage: QueryStageExec)\n+      if stage.resultOption.isDefined &&\n+        stage.resultOption.get.isInstanceOf[MapOutputStatistics] =>\n+      val mapOutputStatistics = stage.resultOption.get.asInstanceOf[MapOutputStatistics]\n+      val partitionCnt = mapOutputStatistics.bytesByPartitionId.length\n+      val nonZeroCnt = mapOutputStatistics.bytesByPartitionId.count(_ > 0)\n+      partitionCnt > 0 && nonZeroCnt > 0 &&\n+        (nonZeroCnt * 1.0 / partitionCnt) < conf.nonEmptyPartitionRatioForBroadcastJoin\n+    case _ => false\n+  }\n+\n+  def apply(plan: LogicalPlan): LogicalPlan = plan.transformDown {\n+    case j @ Join(left, right, _, _, hint) =>\n+      var newHint = hint",
    "line": 45
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Ur, I see.",
    "commit": "4b011ab3570f3d9ae3f30e88987cd05a47ec1a87",
    "createdAt": "2019-09-06T02:25:44Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.MapOutputStatistics\n+import org.apache.spark.sql.catalyst.plans.logical.{HintInfo, Join, LogicalPlan, NO_BROADCAST_HASH}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * This optimization rule detects a join child that has a high ratio of empty partitions and\n+ * adds a no-broadcast-hash-join hint to avoid it being broadcast.\n+ */\n+case class DemoteBroadcastHashJoin(conf: SQLConf) extends Rule[LogicalPlan] {\n+\n+  private def shouldDemote(plan: LogicalPlan): Boolean = plan match {\n+    case LogicalQueryStage(_, stage: QueryStageExec)\n+      if stage.resultOption.isDefined &&\n+        stage.resultOption.get.isInstanceOf[MapOutputStatistics] =>\n+      val mapOutputStatistics = stage.resultOption.get.asInstanceOf[MapOutputStatistics]\n+      val partitionCnt = mapOutputStatistics.bytesByPartitionId.length\n+      val nonZeroCnt = mapOutputStatistics.bytesByPartitionId.count(_ > 0)\n+      partitionCnt > 0 && nonZeroCnt > 0 &&\n+        (nonZeroCnt * 1.0 / partitionCnt) < conf.nonEmptyPartitionRatioForBroadcastJoin\n+    case _ => false\n+  }\n+\n+  def apply(plan: LogicalPlan): LogicalPlan = plan.transformDown {\n+    case j @ Join(left, right, _, _, hint) =>\n+      var newHint = hint",
    "line": 45
  }],
  "prId": 25703
}]