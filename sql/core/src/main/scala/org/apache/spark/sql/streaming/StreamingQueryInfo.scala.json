[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I think we were leaving `case` out to avoid binary incompatibility of the `unapply` method.\n",
    "commit": "59722126a74a03ca2e0b0e8c2f3e3477a302aad0",
    "createdAt": "2016-10-04T23:06:38Z",
    "diffHunk": "@@ -30,8 +30,15 @@ import org.apache.spark.annotation.Experimental\n  * @param sinkStatus The current status of the [[StreamingQuery]]'s sink.\n  */\n @Experimental\n-class StreamingQueryInfo private[sql](\n+case class StreamingQueryInfo private("
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I put it back because the toString of case class is incredibly helpful. How about I make the companion object private[sql] to avoid those being exposed to public? \n",
    "commit": "59722126a74a03ca2e0b0e8c2f3e3477a302aad0",
    "createdAt": "2016-10-05T00:55:01Z",
    "diffHunk": "@@ -30,8 +30,15 @@ import org.apache.spark.annotation.Experimental\n  * @param sinkStatus The current status of the [[StreamingQuery]]'s sink.\n  */\n @Experimental\n-class StreamingQueryInfo private[sql](\n+case class StreamingQueryInfo private("
  }],
  "prId": 15307
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "missing from the docs.\n",
    "commit": "59722126a74a03ca2e0b0e8c2f3e3477a302aad0",
    "createdAt": "2016-10-05T00:39:05Z",
    "diffHunk": "@@ -30,8 +30,15 @@ import org.apache.spark.annotation.Experimental\n  * @param sinkStatus The current status of the [[StreamingQuery]]'s sink.\n  */\n @Experimental\n-class StreamingQueryInfo private[sql](\n+case class StreamingQueryInfo private(\n   val name: String,\n   val id: Long,\n+  val timestamp: Long,\n+  val inputRate: Double,\n+  val processingRate: Double,\n+  val outputRate: Double,\n+  val latencyMs: Option[Double],"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "added\n",
    "commit": "59722126a74a03ca2e0b0e8c2f3e3477a302aad0",
    "createdAt": "2016-10-05T01:21:33Z",
    "diffHunk": "@@ -30,8 +30,15 @@ import org.apache.spark.annotation.Experimental\n  * @param sinkStatus The current status of the [[StreamingQuery]]'s sink.\n  */\n @Experimental\n-class StreamingQueryInfo private[sql](\n+case class StreamingQueryInfo private(\n   val name: String,\n   val id: Long,\n+  val timestamp: Long,\n+  val inputRate: Double,\n+  val processingRate: Double,\n+  val outputRate: Double,\n+  val latencyMs: Option[Double],"
  }],
  "prId": 15307
}]