[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we release itself before releasing the children?",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-18T14:53:16Z",
    "diffHunk": "@@ -181,4 +189,17 @@ case class SortExec(\n        |$sorterVariable.insertRow((UnsafeRow)${row.value});\n      \"\"\".stripMargin\n   }\n+\n+  /**\n+   * In SortExec, we overwrites cleanupResources to close UnsafeExternalRowSorter.\n+   */\n+  override protected[sql] def cleanupResources(): Unit = {\n+    super.cleanupResources()"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Copy, done in 631f3cb.",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-19T03:35:02Z",
    "diffHunk": "@@ -181,4 +189,17 @@ case class SortExec(\n        |$sorterVariable.insertRow((UnsafeRow)${row.value});\n      \"\"\".stripMargin\n   }\n+\n+  /**\n+   * In SortExec, we overwrites cleanupResources to close UnsafeExternalRowSorter.\n+   */\n+  override protected[sql] def cleanupResources(): Unit = {\n+    super.cleanupResources()"
  }],
  "prId": 26164
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Although createSorter should be called just once, it is better to check if rowSorter was already set.",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-18T20:43:55Z",
    "diffHunk": "@@ -87,13 +95,13 @@ case class SortExec(\n     }\n \n     val pageSize = SparkEnv.get.memoryManager.pageSizeBytes\n-    val sorter = UnsafeExternalRowSorter.create(\n+    rowSorter = UnsafeExternalRowSorter.create(",
    "line": 20
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Thanks, done in 631f3cb.",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-19T03:38:28Z",
    "diffHunk": "@@ -87,13 +95,13 @@ case class SortExec(\n     }\n \n     val pageSize = SparkEnv.get.memoryManager.pageSizeBytes\n-    val sorter = UnsafeExternalRowSorter.create(\n+    rowSorter = UnsafeExternalRowSorter.create(",
    "line": 20
  }],
  "prId": 26164
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "We don't need this change now.",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-21T07:41:08Z",
    "diffHunk": "@@ -127,7 +135,7 @@ case class SortExec(\n   // Name of sorter variable used in codegen.\n   private var sorterVariable: String = _\n \n-  override protected def doProduce(ctx: CodegenContext): String = {\n+  override protected[sql] def doProduce(ctx: CodegenContext): String = {"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Thanks, done in b41f33a.",
    "commit": "6d6dd5a942eb04e33a2b9d6e47a5ac041b8281b8",
    "createdAt": "2019-10-21T08:07:31Z",
    "diffHunk": "@@ -127,7 +135,7 @@ case class SortExec(\n   // Name of sorter variable used in codegen.\n   private var sorterVariable: String = _\n \n-  override protected def doProduce(ctx: CodegenContext): String = {\n+  override protected[sql] def doProduce(ctx: CodegenContext): String = {"
  }],
  "prId": 26164
}]