[{
  "comments": [{
    "author": {
      "login": "lw-lin"
    },
    "body": "nit: _s_\"KeyedState($value)\"\r\n:)",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-02T06:37:48Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.sql.KeyedState\n+\n+/** Internal implementation of the [[KeyedState]] interface */\n+private[sql] case class KeyedStateImpl[S](private var value: S) extends KeyedState[S] {\n+  private var updated: Boolean = false  // whether value has been updated (but not removed)\n+  private var removed: Boolean = false  // whether value has been removed\n+\n+  // ========= Public API =========\n+  override def exists: Boolean = { value != null }\n+\n+  override def get: S = value\n+\n+  override def update(newValue: S): Unit = {\n+    if (newValue == null) {\n+      remove()\n+    } else {\n+      value = newValue\n+      updated = true\n+      removed = false\n+    }\n+  }\n+\n+  override def remove(): Unit = {\n+    value = null.asInstanceOf[S]\n+    updated = false\n+    removed = true\n+  }\n+\n+  override def toString: String = \"KeyedState($value)\""
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "done",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-07T05:20:10Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.sql.KeyedState\n+\n+/** Internal implementation of the [[KeyedState]] interface */\n+private[sql] case class KeyedStateImpl[S](private var value: S) extends KeyedState[S] {\n+  private var updated: Boolean = false  // whether value has been updated (but not removed)\n+  private var removed: Boolean = false  // whether value has been removed\n+\n+  // ========= Public API =========\n+  override def exists: Boolean = { value != null }\n+\n+  override def get: S = value\n+\n+  override def update(newValue: S): Unit = {\n+    if (newValue == null) {\n+      remove()\n+    } else {\n+      value = newValue\n+      updated = true\n+      removed = false\n+    }\n+  }\n+\n+  override def remove(): Unit = {\n+    value = null.asInstanceOf[S]\n+    updated = false\n+    removed = true\n+  }\n+\n+  override def toString: String = \"KeyedState($value)\""
  }],
  "prId": 16758
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "Would be nice to note here that this implementation is not thread safe",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-03T00:54:42Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.sql.KeyedState\n+\n+/** Internal implementation of the [[KeyedState]] interface */"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "i have mentioned that the trait KeyedState is not thread-safe",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-07T05:41:11Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.sql.KeyedState\n+\n+/** Internal implementation of the [[KeyedState]] interface */"
  }],
  "prId": 16758
}]