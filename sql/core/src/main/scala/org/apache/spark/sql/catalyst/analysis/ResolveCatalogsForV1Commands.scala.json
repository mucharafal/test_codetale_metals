[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "If the catalog is not the session catalog, then the plan should always be v2. At least that case can be moved into catalyst, right?",
    "commit": "9ad516ea9a0ec7525308c9ca64d36d4069531ae0",
    "createdAt": "2019-09-25T19:16:58Z",
    "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.{AnalysisException, SaveMode}\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.{BucketSpec, CatalogTable, CatalogTableType, CatalogUtils}\n+import org.apache.spark.sql.catalyst.plans.logical.{CreateTableAsSelect, CreateV2Table, LogicalPlan, ReplaceTable, ReplaceTableAsSelect}\n+import org.apache.spark.sql.catalyst.plans.logical.sql.{CreateTableAsSelectStatement, CreateTableStatement, DropTableStatement, DropViewStatement, ReplaceTableAsSelectStatement, ReplaceTableStatement, ShowNamespacesStatement, ShowTablesStatement}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.connector.catalog.{CatalogManager, LookupCatalog}\n+import org.apache.spark.sql.connector.expressions.Transform\n+import org.apache.spark.sql.execution.command.{DropTableCommand, ShowTablesCommand}\n+import org.apache.spark.sql.execution.datasources.{CreateTable, DataSource}\n+import org.apache.spark.sql.execution.datasources.v2.FileDataSourceV2\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Resolves catalogs from the multi-part identifiers in SQL statements, and convert the statements\n+ * to the corresponding v1 commands if the resolved catalog is not the session catalog.\n+ *\n+ * We can remove this rule once we implement all the catalog functionality in `V2SessionCatalog`.\n+ */\n+class ResolveCatalogsForV1Commands(val catalogManager: CatalogManager, conf: SQLConf)\n+  extends Rule[LogicalPlan] with LookupCatalog {\n+  import org.apache.spark.sql.connector.catalog.CatalogV2Implicits._\n+  import org.apache.spark.sql.connector.catalog.CatalogV2Util.isSessionCatalog\n+\n+  override def apply(plan: LogicalPlan): LogicalPlan = plan.resolveOperatorsUp {\n+    // TODO: we should convert CREATE/REPLACE TABLE statements to v2 commands in the rule\n+    //       `ResolveCatalogs`. However, it's not doable right now because we need to look up the\n+    //       table provider. Table provider lookup is implemented in sql/core and relies on a v1\n+    //       interface `DataSourceRegister`."
  }],
  "prId": 25747
}]