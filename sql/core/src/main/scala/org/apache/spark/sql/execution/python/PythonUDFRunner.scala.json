[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Looks like this implementation is no different than the `writeCommand` in `ArrowPythonRunner`? If so, I think we don't need to duplicate this.",
    "commit": "7cd78b2aa44e830e0b8b466d1ca80e54359a3c3c",
    "createdAt": "2017-09-27T04:31:36Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import java.io._\n+import java.net._\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark._\n+import org.apache.spark.api.python._\n+\n+/**\n+ * A helper class to run Python UDFs in Spark.\n+ */\n+class PythonUDFRunner(\n+    funcs: Seq[ChainedPythonFunctions],\n+    bufferSize: Int,\n+    reuseWorker: Boolean,\n+    evalType: Int,\n+    argOffsets: Array[Array[Int]])\n+  extends BasePythonRunner[Array[Byte], Array[Byte]](\n+    funcs, bufferSize, reuseWorker, evalType, argOffsets) {\n+\n+  protected override def newWriterThread(\n+      env: SparkEnv,\n+      worker: Socket,\n+      inputIterator: Iterator[Array[Byte]],\n+      partitionIndex: Int,\n+      context: TaskContext): WriterThread = {\n+    new WriterThread(env, worker, inputIterator, partitionIndex, context) {\n+\n+      override def writeCommand(dataOut: DataOutputStream): Unit = {"
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "Sure, I'll try to avoid duplicate.",
    "commit": "7cd78b2aa44e830e0b8b466d1ca80e54359a3c3c",
    "createdAt": "2017-09-27T06:02:00Z",
    "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import java.io._\n+import java.net._\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark._\n+import org.apache.spark.api.python._\n+\n+/**\n+ * A helper class to run Python UDFs in Spark.\n+ */\n+class PythonUDFRunner(\n+    funcs: Seq[ChainedPythonFunctions],\n+    bufferSize: Int,\n+    reuseWorker: Boolean,\n+    evalType: Int,\n+    argOffsets: Array[Array[Int]])\n+  extends BasePythonRunner[Array[Byte], Array[Byte]](\n+    funcs, bufferSize, reuseWorker, evalType, argOffsets) {\n+\n+  protected override def newWriterThread(\n+      env: SparkEnv,\n+      worker: Socket,\n+      inputIterator: Iterator[Array[Byte]],\n+      partitionIndex: Int,\n+      context: TaskContext): WriterThread = {\n+    new WriterThread(env, worker, inputIterator, partitionIndex, context) {\n+\n+      override def writeCommand(dataOut: DataOutputStream): Unit = {"
  }],
  "prId": 19349
}]