[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "cc @dongjoon-hyun ",
    "commit": "e4aac502d58972063a1ab25f17a1c217abe97b97",
    "createdAt": "2017-08-07T05:28:11Z",
    "diffHunk": "@@ -29,17 +29,22 @@ class JdbcRelationProvider extends CreatableRelationProvider\n   override def createRelation(\n       sqlContext: SQLContext,\n       parameters: Map[String, String]): BaseRelation = {\n+    import JDBCOptions._\n+\n     val jdbcOptions = new JDBCOptions(parameters)\n     val partitionColumn = jdbcOptions.partitionColumn\n     val lowerBound = jdbcOptions.lowerBound\n     val upperBound = jdbcOptions.upperBound\n     val numPartitions = jdbcOptions.numPartitions\n \n     val partitionInfo = if (partitionColumn.isEmpty) {\n-      assert(lowerBound.isEmpty && upperBound.isEmpty)",
    "line": 13
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for pinging me, @gatorsmile .",
    "commit": "e4aac502d58972063a1ab25f17a1c217abe97b97",
    "createdAt": "2017-08-07T15:29:45Z",
    "diffHunk": "@@ -29,17 +29,22 @@ class JdbcRelationProvider extends CreatableRelationProvider\n   override def createRelation(\n       sqlContext: SQLContext,\n       parameters: Map[String, String]): BaseRelation = {\n+    import JDBCOptions._\n+\n     val jdbcOptions = new JDBCOptions(parameters)\n     val partitionColumn = jdbcOptions.partitionColumn\n     val lowerBound = jdbcOptions.lowerBound\n     val upperBound = jdbcOptions.upperBound\n     val numPartitions = jdbcOptions.numPartitions\n \n     val partitionInfo = if (partitionColumn.isEmpty) {\n-      assert(lowerBound.isEmpty && upperBound.isEmpty)",
    "line": 13
  }],
  "prId": 18864
}]