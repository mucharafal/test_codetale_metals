[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "should we log a warning for this case?\n",
    "commit": "dec3d8167c862385a489b999feb7af6c03316cfa",
    "createdAt": "2016-03-16T07:23:43Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+private[datasources] object ParseModes {\n+  val PERMISSIVE_MODE = \"PERMISSIVE\"\n+  val DROP_MALFORMED_MODE = \"DROPMALFORMED\"\n+  val FAIL_FAST_MODE = \"FAILFAST\"\n+\n+  val DEFAULT = PERMISSIVE_MODE\n+\n+  def isValidMode(mode: String): Boolean = {\n+    mode.toUpperCase match {\n+      case PERMISSIVE_MODE | DROP_MALFORMED_MODE | FAIL_FAST_MODE => true\n+      case _ => false\n+    }\n+  }\n+\n+  def isDropMalformedMode(mode: String): Boolean = mode.toUpperCase == DROP_MALFORMED_MODE\n+  def isFailFastMode(mode: String): Boolean = mode.toUpperCase == FAIL_FAST_MODE\n+  def isPermissiveMode(mode: String): Boolean = if (isValidMode(mode))  {\n+    mode.toUpperCase == PERMISSIVE_MODE\n+  } else {\n+    true // We default to permissive is the mode string is not valid",
    "line": 39
  }],
  "prId": 11756
}]