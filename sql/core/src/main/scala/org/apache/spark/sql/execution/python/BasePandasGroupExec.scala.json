[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "I think this file has some formatting issues also",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-07-10T22:46:41Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.api.python.{BasePythonRunner, ChainedPythonFunctions}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, Expression, PythonUDF, UnsafeProjection}\n+import org.apache.spark.sql.execution.{GroupedIterator, SparkPlan}\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.ArrowUtils\n+import org.apache.spark.sql.vectorized.{ArrowColumnVector, ColumnarBatch}\n+\n+\n+abstract class BasePandasGroupExec(func: Expression,\n+                                   output: Seq[Attribute]) extends SparkPlan {\n+\n+  protected val sessionLocalTimeZone = conf.sessionLocalTimeZone\n+\n+  protected val pythonRunnerConf = ArrowUtils.getPythonRunnerConfMap(conf)\n+\n+  protected val pandasFunction = func.asInstanceOf[PythonUDF].func\n+\n+  protected val chainedFunc = Seq(ChainedPythonFunctions(Seq(pandasFunction)))\n+\n+  override def producedAttributes: AttributeSet = AttributeSet(output)\n+\n+\n+  protected def executePython[T]\n+  (data: Iterator[T], runner: BasePythonRunner[T, ColumnarBatch]): Iterator[InternalRow] = {"
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: style.",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-08-27T20:31:23Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.api.python.{BasePythonRunner, ChainedPythonFunctions}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, Expression, PythonUDF, UnsafeProjection}\n+import org.apache.spark.sql.execution.{GroupedIterator, SparkPlan}\n+import org.apache.spark.sql.util.ArrowUtils\n+import org.apache.spark.sql.vectorized.{ArrowColumnVector, ColumnarBatch}\n+\n+/**\n+ * Base functionality for plans which execute grouped python udfs.\n+ */\n+abstract class BasePandasGroupExec(func: Expression,\n+                                   output: Seq[Attribute]) extends SparkPlan {"
  }],
  "prId": 24981
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Hey, I think I am pretty against this refactoring. There are multiple duplicated codes in R vectorization too (which I added). I didn't intentionally yet refactor those. Plus, I don't think it's good idea to have both refactoring and feature implementation in one PR.",
    "commit": "1b966fda46c5334cf7963bae0bece159c9568622",
    "createdAt": "2019-09-22T12:50:58Z",
    "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import scala.collection.JavaConverters._\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.api.python.{BasePythonRunner, ChainedPythonFunctions}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, Expression, PythonUDF, UnsafeProjection}\n+import org.apache.spark.sql.execution.{GroupedIterator, SparkPlan}\n+import org.apache.spark.sql.util.ArrowUtils\n+import org.apache.spark.sql.vectorized.{ArrowColumnVector, ColumnarBatch}\n+\n+/**\n+ * Base functionality for plans which execute grouped python udfs.\n+ */\n+abstract class BasePandasGroupExec(",
    "line": 34
  }],
  "prId": 24981
}]