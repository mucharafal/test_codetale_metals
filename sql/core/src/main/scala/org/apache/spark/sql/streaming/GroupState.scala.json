[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I'm wondering if we should expose these individually or expose them one layer deeper like Flink and Kafka Streams, where these are wrapped in a `ProcessingContext` object",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T18:51:12Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method returns -1 when calling inside a batch query.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Introducing a new API for that purpose is a bigger question. In general, if we want to expose a general piece of information that may be used in any operation, then we introduce it as a sql function like \"current_timestamp\". That is orthogonal to requirement here, we can still add that if we find the need for them",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T21:21:23Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method returns -1 when calling inside a batch query.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: extra line",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T23:06:56Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "thats intentional. visually makes it easier to read. ",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T17:41:57Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: extra line",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-16T23:07:10Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method returns -1 when calling inside a batch query.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long\n+"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "intentional, easier to read",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T17:41:53Z",
    "diffHunk": "@@ -205,92 +205,127 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method returns -1 when calling inside a batch query.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long\n+"
  }],
  "prId": 19495
}, {
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "`Get the current processing time`? This is equivalent to having `current_timestamp()` as a column right? Will it also be a constant value across the trigger, or will it be static for the duration of the trigger?",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T23:26:17Z",
    "diffHunk": "@@ -205,92 +205,122 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note In a streaming query, this can be called only when watermark is set before calling\n+   *       `[map/flatmap]GroupsWithState`. In a batch query, this method always returns -1.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if watermark has not been set before in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long\n+\n+\n+  /**\n+   * Get the current event time watermark."
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Constant across a trigger. But currently the output is different from current_timestamp as in batch it will return -1. Fixing this.",
    "commit": "ed9d3a2e4fd4b1a0ec0e0ceb34419ede4e2303b8",
    "createdAt": "2017-10-17T23:44:48Z",
    "diffHunk": "@@ -205,92 +205,122 @@ trait GroupState[S] extends LogicalGroupState[S] {\n   /** Get the state value as a scala Option. */\n   def getOption: Option[S]\n \n-  /**\n-   * Update the value of the state. Note that `null` is not a valid value, and it throws\n-   * IllegalArgumentException.\n-   */\n-  @throws[IllegalArgumentException](\"when updating with null\")\n+  /** Update the value of the state. */\n   def update(newState: S): Unit\n \n   /** Remove this state. */\n   def remove(): Unit\n \n   /**\n    * Whether the function has been called because the key has timed out.\n-   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note This can return true only when timeouts are enabled in `[map/flatmap]GroupsWithState`.\n    */\n   def hasTimedOut: Boolean\n \n+\n   /**\n    * Set the timeout duration in ms for this key.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'durationMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(durationMs: Long): Unit\n \n+\n   /**\n    * Set the timeout duration for this key as a string. For example, \"1 hour\", \"2 days\", etc.\n    *\n-   * @note ProcessingTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Processing time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n   @throws[IllegalArgumentException](\"if 'duration' is not a valid duration\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n   @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutDuration(duration: String): Unit\n \n-  @throws[IllegalArgumentException](\"if 'timestampMs' is not positive\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'timestampMs' is not positive or less than the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if processing time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as milliseconds in epoch time and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\n+    \"if 'additionalDuration' is invalid or the final timeout timestamp is less than \" +\n+      \"the current watermark in a streaming query\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestampMs: Long, additionalDuration: String): Unit\n \n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date.\n    * This timestamp cannot be older than the current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *       `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date): Unit\n \n-  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n-  @throws[IllegalStateException](\"when state is either not initialized, or already removed\")\n-  @throws[UnsupportedOperationException](\n-    \"if 'timeout' has not been enabled in [map|flatMap]GroupsWithState in a streaming query\")\n+\n   /**\n    * Set the timeout timestamp for this key as a java.sql.Date and an additional\n    * duration as a string (e.g. \"1 hour\", \"2 days\", etc.).\n    * The final timestamp (including the additional duration) cannot be older than the\n    * current watermark.\n    *\n-   * @note EventTimeTimeout must be enabled in `[map/flatmap]GroupsWithStates`.\n+   * @note [[GroupStateTimeout Event time timeout]] must be enabled in\n+   *      `[map/flatmap]GroupsWithState` for calling this method.\n+   * @note This method has no side effect when used in a batch query.\n    */\n+  @throws[IllegalArgumentException](\"if 'additionalDuration' is invalid\")\n+  @throws[UnsupportedOperationException](\n+    \"if event time timeout has not been enabled in [map|flatMap]GroupsWithState\")\n   def setTimeoutTimestamp(timestamp: java.sql.Date, additionalDuration: String): Unit\n+\n+\n+  /**\n+   * Get the current event time watermark as milliseconds in epoch time.\n+   *\n+   * @note In a streaming query, this can be called only when watermark is set before calling\n+   *       `[map/flatmap]GroupsWithState`. In a batch query, this method always returns -1.\n+   */\n+  @throws[UnsupportedOperationException](\n+    \"if watermark has not been set before in [map|flatMap]GroupsWithState\")\n+  def getCurrentWatermarkMs(): Long\n+\n+\n+  /**\n+   * Get the current event time watermark."
  }],
  "prId": 19495
}]