[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should allow `pow(l: Column, r: Double)` and `pow(l: Double, r: Column)`.\n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-22T05:00:22Z",
    "diffHunk": "@@ -0,0 +1,472 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import scala.language.implicitConversions\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.sql.catalyst.expressions._\n+\n+/**\n+ * :: Experimental ::\n+ * Mathematical Functions available for [[DataFrame]].\n+ *\n+ * @groupname double_funcs Functions that require DoubleType as an input\n+ * @groupname int_funcs Functions that require IntegerType as an input\n+ * @groupname float_funcs Functions that require FloatType as an input\n+ * @groupname long_funcs Functions that require LongType as an input\n+ */\n+@Experimental\n+// scalastyle:off\n+object mathfunctions {\n+// scalastyle:on\n+\n+  private[this] implicit def toColumn(expr: Expression): Column = Column(expr)\n+\n+  /**\n+   * Computes the sine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def sin(e: Column): Column = Sin(e.expr)\n+\n+  /**\n+   * Computes the sine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def sin(columnName: String): Column = sin(Column(columnName))\n+\n+  /**\n+   * Computes the sine inverse of the given value; the returned angle is in the range\n+   * -pi/2 through pi/2.\n+   *\n+   * @group double_funcs\n+   */\n+  def asin(e: Column): Column = Asin(e.expr)\n+\n+  /**\n+   * Computes the sine inverse of the given column; the returned angle is in the range\n+   * -pi/2 through pi/2.\n+   *\n+   * @group double_funcs\n+   */\n+  def asin(columnName: String): Column = asin(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic sine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def sinh(e: Column): Column = Sinh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic sine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def sinh(columnName: String): Column = sinh(Column(columnName))\n+\n+  /**\n+   * Computes the cosine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cos(e: Column): Column = Cos(e.expr)\n+\n+  /**\n+   * Computes the cosine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cos(columnName: String): Column = cos(Column(columnName))\n+\n+  /**\n+   * Computes the cosine inverse of the given value; the returned angle is in the range\n+   * 0.0 through pi.\n+   *\n+   * @group double_funcs\n+   */\n+  def acos(e: Column): Column = Acos(e.expr)\n+\n+  /**\n+   * Computes the cosine inverse of the given column; the returned angle is in the range\n+   * 0.0 through pi.\n+   *\n+   * @group double_funcs\n+   */\n+  def acos(columnName: String): Column = acos(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic cosine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cosh(e: Column): Column = Cosh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic cosine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cosh(columnName: String): Column = cosh(Column(columnName))\n+  \n+  /**\n+   * Computes the tangent of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def tan(e: Column): Column = Tan(e.expr)\n+\n+  /**\n+   * Computes the tangent of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def tan(columnName: String): Column = tan(Column(columnName))\n+\n+  /**\n+   * Computes the tangent inverse of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def atan(e: Column): Column = Atan(e.expr)\n+\n+  /**\n+   * Computes the tangent inverse of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def atan(columnName: String): Column = atan(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic tangent of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def tanh(e: Column): Column = Tanh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic tangent of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def tanh(columnName: String): Column = tanh(Column(columnName))\n+\n+  /**\n+   * Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\n+   *\n+   * @group double_funcs\n+   */\n+  def toDeg(e: Column): Column = ToDegrees(e.expr)\n+\n+  /**\n+   * Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\n+   *\n+   * @group double_funcs\n+   */\n+  def toDeg(columnName: String): Column = toDeg(Column(columnName))\n+\n+  /**\n+   * Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\n+   *\n+   * @group double_funcs\n+   */\n+  def toRad(e: Column): Column = ToRadians(e.expr)\n+\n+  /**\n+   * Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\n+   *\n+   * @group double_funcs\n+   */\n+  def toRad(columnName: String): Column = toRad(Column(columnName))\n+\n+  /**\n+   * Computes the ceiling of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def ceil(e: Column): Column = Ceil(e.expr)\n+\n+  /**\n+   * Computes the ceiling of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def ceil(columnName: String): Column = ceil(Column(columnName))\n+\n+  /**\n+   * Computes the floor of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def floor(e: Column): Column = Floor(e.expr)\n+\n+  /**\n+   * Computes the floor of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def floor(columnName: String): Column = floor(Column(columnName))\n+\n+  /**\n+   * Returns the double value that is closest in value to the argument and\n+   * is equal to a mathematical integer.\n+   *\n+   * @group double_funcs\n+   */\n+  def rint(e: Column): Column = Rint(e.expr)\n+\n+  /**\n+   * Returns the double value that is closest in value to the argument and\n+   * is equal to a mathematical integer.\n+   *\n+   * @group double_funcs\n+   */\n+  def rint(columnName: String): Column = rint(Column(columnName))\n+\n+  /**\n+   * Computes the cube-root of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cbrt(e: Column): Column = Cbrt(e.expr)\n+\n+  /**\n+   * Computes the cube-root of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cbrt(columnName: String): Column = cbrt(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def signum(e: Column): Column = Signum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def signum(columnName: String): Column = signum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For IntegerType.\n+   *\n+   * @group int_funcs\n+   */\n+  def isignum(e: Column): Column = ISignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For IntegerType.\n+   *\n+   * @group int_funcs\n+   */\n+  def isignum(columnName: String): Column = isignum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For FloatType.\n+   *\n+   * @group float_funcs\n+   */\n+  def fsignum(e: Column): Column = FSignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For FloatType.\n+   *\n+   * @group float_funcs\n+   */\n+  def fsignum(columnName: String): Column = fsignum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For LongType.\n+   *\n+   * @group long_funcs\n+   */\n+  def lsignum(e: Column): Column = LSignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For FloatType.\n+   *\n+   * @group long_funcs\n+   */\n+  def lsignum(columnName: String): Column = lsignum(Column(columnName))\n+\n+  /**\n+   * Computes the natural logarithm of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def log(e: Column): Column = Log(e.expr)\n+\n+  /**\n+   * Computes the natural logarithm of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def log(columnName: String): Column = log(Column(columnName))\n+\n+  /**\n+   * Computes the logarithm of the given value in Base 10.\n+   *\n+   * @group double_funcs\n+   */\n+  def log10(e: Column): Column = Log10(e.expr)\n+\n+  /**\n+   * Computes the logarithm of the given value in Base 10.\n+   *\n+   * @group double_funcs\n+   */\n+  def log10(columnName: String): Column = log10(Column(columnName))\n+\n+  /**\n+   * Computes the natural logarithm of the given value plus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def log1p(e: Column): Column = Log1p(e.expr)\n+\n+  /**\n+   * Computes the natural logarithm of the given column plus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def log1p(columnName: String): Column = log1p(Column(columnName))\n+\n+  /**\n+   * Computes the exponential of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def exp(e: Column): Column = Exp(e.expr)\n+\n+  /**\n+   * Computes the exponential of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def exp(columnName: String): Column = exp(Column(columnName))\n+\n+  /**\n+   * Computes the exponential of the given value minus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def expm1(e: Column): Column = Expm1(e.expr)\n+\n+  /**\n+   * Computes the exponential of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def expm1(columnName: String): Column = expm1(Column(columnName))\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Column, r: Column): Column = Pow(l.expr, r.expr)",
    "line": 390
  }],
  "prId": 5616
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "```\n`sqrt(a^2^ + b^2^)`\n```\n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-28T01:59:26Z",
    "diffHunk": "@@ -0,0 +1,562 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import scala.language.implicitConversions\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.mathfuncs._\n+import org.apache.spark.sql.functions.lit\n+\n+/**\n+ * :: Experimental ::\n+ * Mathematical Functions available for [[DataFrame]].\n+ *\n+ * @groupname double_funcs Functions that require DoubleType as an input\n+ * @groupname int_funcs Functions that require IntegerType as an input\n+ * @groupname float_funcs Functions that require FloatType as an input\n+ * @groupname long_funcs Functions that require LongType as an input\n+ */\n+@Experimental\n+// scalastyle:off\n+object mathfunctions {\n+// scalastyle:on\n+\n+  private[this] implicit def toColumn(expr: Expression): Column = Column(expr)\n+\n+  /**\n+   * Computes the sine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def sin(e: Column): Column = Sin(e.expr)\n+\n+  /**\n+   * Computes the sine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def sin(columnName: String): Column = sin(Column(columnName))\n+\n+  /**\n+   * Computes the sine inverse of the given value; the returned angle is in the range\n+   * -pi/2 through pi/2.\n+   *\n+   * @group double_funcs\n+   */\n+  def asin(e: Column): Column = Asin(e.expr)\n+\n+  /**\n+   * Computes the sine inverse of the given column; the returned angle is in the range\n+   * -pi/2 through pi/2.\n+   *\n+   * @group double_funcs\n+   */\n+  def asin(columnName: String): Column = asin(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic sine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def sinh(e: Column): Column = Sinh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic sine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def sinh(columnName: String): Column = sinh(Column(columnName))\n+\n+  /**\n+   * Computes the cosine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cos(e: Column): Column = Cos(e.expr)\n+\n+  /**\n+   * Computes the cosine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cos(columnName: String): Column = cos(Column(columnName))\n+\n+  /**\n+   * Computes the cosine inverse of the given value; the returned angle is in the range\n+   * 0.0 through pi.\n+   *\n+   * @group double_funcs\n+   */\n+  def acos(e: Column): Column = Acos(e.expr)\n+\n+  /**\n+   * Computes the cosine inverse of the given column; the returned angle is in the range\n+   * 0.0 through pi.\n+   *\n+   * @group double_funcs\n+   */\n+  def acos(columnName: String): Column = acos(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic cosine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cosh(e: Column): Column = Cosh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic cosine of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cosh(columnName: String): Column = cosh(Column(columnName))\n+  \n+  /**\n+   * Computes the tangent of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def tan(e: Column): Column = Tan(e.expr)\n+\n+  /**\n+   * Computes the tangent of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def tan(columnName: String): Column = tan(Column(columnName))\n+\n+  /**\n+   * Computes the tangent inverse of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def atan(e: Column): Column = Atan(e.expr)\n+\n+  /**\n+   * Computes the tangent inverse of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def atan(columnName: String): Column = atan(Column(columnName))\n+\n+  /**\n+   * Computes the hyperbolic tangent of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def tanh(e: Column): Column = Tanh(e.expr)\n+\n+  /**\n+   * Computes the hyperbolic tangent of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def tanh(columnName: String): Column = tanh(Column(columnName))\n+\n+  /**\n+   * Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\n+   *\n+   * @group double_funcs\n+   */\n+  def toDeg(e: Column): Column = ToDegrees(e.expr)\n+\n+  /**\n+   * Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\n+   *\n+   * @group double_funcs\n+   */\n+  def toDeg(columnName: String): Column = toDeg(Column(columnName))\n+\n+  /**\n+   * Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\n+   *\n+   * @group double_funcs\n+   */\n+  def toRad(e: Column): Column = ToRadians(e.expr)\n+\n+  /**\n+   * Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\n+   *\n+   * @group double_funcs\n+   */\n+  def toRad(columnName: String): Column = toRad(Column(columnName))\n+\n+  /**\n+   * Computes the ceiling of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def ceil(e: Column): Column = Ceil(e.expr)\n+\n+  /**\n+   * Computes the ceiling of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def ceil(columnName: String): Column = ceil(Column(columnName))\n+\n+  /**\n+   * Computes the floor of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def floor(e: Column): Column = Floor(e.expr)\n+\n+  /**\n+   * Computes the floor of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def floor(columnName: String): Column = floor(Column(columnName))\n+\n+  /**\n+   * Returns the double value that is closest in value to the argument and\n+   * is equal to a mathematical integer.\n+   *\n+   * @group double_funcs\n+   */\n+  def rint(e: Column): Column = Rint(e.expr)\n+\n+  /**\n+   * Returns the double value that is closest in value to the argument and\n+   * is equal to a mathematical integer.\n+   *\n+   * @group double_funcs\n+   */\n+  def rint(columnName: String): Column = rint(Column(columnName))\n+\n+  /**\n+   * Computes the cube-root of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def cbrt(e: Column): Column = Cbrt(e.expr)\n+\n+  /**\n+   * Computes the cube-root of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def cbrt(columnName: String): Column = cbrt(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def signum(e: Column): Column = Signum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def signum(columnName: String): Column = signum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For IntegerType.\n+   *\n+   * @group int_funcs\n+   */\n+  def isignum(e: Column): Column = ISignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For IntegerType.\n+   *\n+   * @group int_funcs\n+   */\n+  def isignum(columnName: String): Column = isignum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For FloatType.\n+   *\n+   * @group float_funcs\n+   */\n+  def fsignum(e: Column): Column = FSignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For FloatType.\n+   *\n+   * @group float_funcs\n+   */\n+  def fsignum(columnName: String): Column = fsignum(Column(columnName))\n+\n+  /**\n+   * Computes the signum of the given value. For LongType.\n+   *\n+   * @group long_funcs\n+   */\n+  def lsignum(e: Column): Column = LSignum(e.expr)\n+\n+  /**\n+   * Computes the signum of the given column. For FloatType.\n+   *\n+   * @group long_funcs\n+   */\n+  def lsignum(columnName: String): Column = lsignum(Column(columnName))\n+\n+  /**\n+   * Computes the natural logarithm of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def log(e: Column): Column = Log(e.expr)\n+\n+  /**\n+   * Computes the natural logarithm of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def log(columnName: String): Column = log(Column(columnName))\n+\n+  /**\n+   * Computes the logarithm of the given value in Base 10.\n+   *\n+   * @group double_funcs\n+   */\n+  def log10(e: Column): Column = Log10(e.expr)\n+\n+  /**\n+   * Computes the logarithm of the given value in Base 10.\n+   *\n+   * @group double_funcs\n+   */\n+  def log10(columnName: String): Column = log10(Column(columnName))\n+\n+  /**\n+   * Computes the natural logarithm of the given value plus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def log1p(e: Column): Column = Log1p(e.expr)\n+\n+  /**\n+   * Computes the natural logarithm of the given column plus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def log1p(columnName: String): Column = log1p(Column(columnName))\n+\n+  /**\n+   * Computes the exponential of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def exp(e: Column): Column = Exp(e.expr)\n+\n+  /**\n+   * Computes the exponential of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def exp(columnName: String): Column = exp(Column(columnName))\n+\n+  /**\n+   * Computes the exponential of the given value minus one.\n+   *\n+   * @group double_funcs\n+   */\n+  def expm1(e: Column): Column = Expm1(e.expr)\n+\n+  /**\n+   * Computes the exponential of the given column.\n+   *\n+   * @group double_funcs\n+   */\n+  def expm1(columnName: String): Column = expm1(Column(columnName))\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Column, r: Column): Column = Pow(l.expr, r.expr)\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Column, rightName: String): Column = pow(l, Column(rightName))\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(leftName: String, r: Column): Column = pow(Column(leftName), r)\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(leftName: String, rightName: String): Column = pow(Column(leftName), Column(rightName))\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Column, r: Double): Column = pow(l, lit(r).expr)\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(leftName: String, r: Double): Column = pow(Column(leftName), r)\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Double, r: Column): Column = pow(lit(l).expr, r)\n+\n+  /**\n+   * Returns the value of the first argument raised to the power of the second argument.\n+   *\n+   * @group double_funcs\n+   */\n+  def pow(l: Double, rightName: String): Column = pow(l, Column(rightName))\n+\n+  /**\n+   * Computes sqrt(a^2^ + b^2^) without intermediate overflow or underflow."
  }],
  "prId": 5616
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "would be great to sort these functions alphabetically \n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-28T06:14:20Z",
    "diffHunk": "@@ -0,0 +1,562 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import scala.language.implicitConversions\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.mathfuncs._\n+import org.apache.spark.sql.functions.lit\n+\n+/**\n+ * :: Experimental ::\n+ * Mathematical Functions available for [[DataFrame]].\n+ *\n+ * @groupname double_funcs Functions that require DoubleType as an input\n+ * @groupname int_funcs Functions that require IntegerType as an input\n+ * @groupname float_funcs Functions that require FloatType as an input\n+ * @groupname long_funcs Functions that require LongType as an input\n+ */\n+@Experimental\n+// scalastyle:off\n+object mathfunctions {\n+// scalastyle:on\n+\n+  private[this] implicit def toColumn(expr: Expression): Column = Column(expr)\n+\n+  /**\n+   * Computes the sine of the given value.\n+   *\n+   * @group double_funcs\n+   */\n+  def sin(e: Column): Column = Sin(e.expr)",
    "line": 48
  }],
  "prId": 5616
}]