[{
  "comments": [{
    "author": {
      "login": "jkbradley"
    },
    "body": "Check xy length here too?\n",
    "commit": "3a0b6e5fe8458b89cd5fb3fffc0536aa6c1b4b4d",
    "createdAt": "2014-11-04T01:27:04Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.test\n+\n+import java.util\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.catalyst.annotation.SQLUserDefinedType\n+import org.apache.spark.sql.catalyst.types._\n+\n+/**\n+ * An example class to demonstrate UDT in Scala, Java, and Python.\n+ * @param x x coordinate\n+ * @param y y coordinate\n+ */\n+@SQLUserDefinedType(udt = classOf[ExamplePointUDT])\n+private[sql] class ExamplePoint(val x: Double, val y: Double)\n+\n+/**\n+ * User-defined type for [[ExamplePoint]].\n+ */\n+private[sql] class ExamplePointUDT extends UserDefinedType[ExamplePoint] {\n+\n+  override def sqlType: DataType = ArrayType(DoubleType, false)\n+\n+  override def pyUDT: String = \"pyspark.tests.ExamplePointUDT\"\n+\n+  override def serialize(obj: Any): Seq[Double] = {\n+    obj match {\n+      case p: ExamplePoint =>\n+        Seq(p.x, p.y)\n+    }\n+  }\n+\n+  override def deserialize(datum: Any): ExamplePoint = {\n+    datum match {\n+      case values: Seq[_] =>\n+        val xy = values.asInstanceOf[Seq[Double]]\n+        assert(xy.length == 2)\n+        new ExamplePoint(xy(0), xy(1))\n+      case values: util.ArrayList[_] =>\n+        val xy = values.asInstanceOf[util.ArrayList[Double]].asScala\n+        new ExamplePoint(xy(0), xy(1))"
  }],
  "prId": 3070
}]