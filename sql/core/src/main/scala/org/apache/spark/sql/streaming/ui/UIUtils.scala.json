[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Two values and `formatBatchTime` are just basically copied and pasted from UIUtils in `streaming` package. I would just lessen the scope to `spark` and reuse `formatBatchTime` if possible, but never mind if you copied it because of technical reason. Then we would leave it as it is as of now and find the solution.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-22T21:56:27Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.ui\n+\n+import java.text.SimpleDateFormat\n+import java.util.{Locale, TimeZone}\n+\n+import org.apache.commons.lang3.StringEscapeUtils\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+private[sql] object UIUtils {\n+  // SimpleDateFormat is not thread-safe. Don't expose it to avoid improper use."
  }],
  "prId": 26201
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Seems like HttpSecurityFilter already does it, so not sure we really need to have this in here.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-22T22:01:21Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.ui\n+\n+import java.text.SimpleDateFormat\n+import java.util.{Locale, TimeZone}\n+\n+import org.apache.commons.lang3.StringEscapeUtils\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+private[sql] object UIUtils {\n+  // SimpleDateFormat is not thread-safe. Don't expose it to avoid improper use.\n+  private val batchTimeFormat = new ThreadLocal[SimpleDateFormat]() {\n+    override def initialValue(): SimpleDateFormat =\n+      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\", Locale.US)\n+  }\n+\n+  private val batchTimeFormatWithMilliseconds = new ThreadLocal[SimpleDateFormat]() {\n+    override def initialValue(): SimpleDateFormat =\n+      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\", Locale.US)\n+  }\n+\n+  /**\n+   * If `batchInterval` is less than 1 second, format `batchTime` with milliseconds. Otherwise,\n+   * format `batchTime` without milliseconds.\n+   *\n+   * @param batchTime the batch time to be formatted\n+   * @param batchInterval the batch interval\n+   * @param showYYYYMMSS if showing the `yyyy/MM/dd` part. If it's false, the return value wll be\n+   *                     only `HH:mm:ss` or `HH:mm:ss.SSS` depending on `batchInterval`\n+   * @param timezone only for test\n+   */\n+  def formatBatchTime(\n+      batchTime: Long,\n+      batchInterval: Long,\n+      showYYYYMMSS: Boolean = true,\n+      timezone: TimeZone = null): String = {\n+    val oldTimezones =\n+      (batchTimeFormat.get.getTimeZone, batchTimeFormatWithMilliseconds.get.getTimeZone)\n+    if (timezone != null) {\n+      batchTimeFormat.get.setTimeZone(timezone)\n+      batchTimeFormatWithMilliseconds.get.setTimeZone(timezone)\n+    }\n+    try {\n+      val formattedBatchTime =\n+        if (batchInterval < 1000) {\n+          batchTimeFormatWithMilliseconds.get.format(batchTime)\n+        } else {\n+          // If batchInterval >= 1 second, don't show milliseconds\n+          batchTimeFormat.get.format(batchTime)\n+        }\n+      if (showYYYYMMSS) {\n+        formattedBatchTime\n+      } else {\n+        formattedBatchTime.substring(formattedBatchTime.indexOf(' ') + 1)\n+      }\n+    } finally {\n+      if (timezone != null) {\n+        batchTimeFormat.get.setTimeZone(oldTimezones._1)\n+        batchTimeFormatWithMilliseconds.get.setTimeZone(oldTimezones._2)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Remove suspicious characters of user input to prevent Cross-Site scripting (XSS) attacks\n+   *\n+   * For more information about XSS testing:\n+   * https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet and\n+   * https://www.owasp.org/index.php/Testing_for_Reflected_Cross_site_scripting_(OTG-INPVAL-001)\n+   */\n+  def stripXSS(requestParameter: String): String = {"
  }, {
    "author": {
      "login": "uncleGen"
    },
    "body": "Yes, let me remove this.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-23T02:26:46Z",
    "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.ui\n+\n+import java.text.SimpleDateFormat\n+import java.util.{Locale, TimeZone}\n+\n+import org.apache.commons.lang3.StringEscapeUtils\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+private[sql] object UIUtils {\n+  // SimpleDateFormat is not thread-safe. Don't expose it to avoid improper use.\n+  private val batchTimeFormat = new ThreadLocal[SimpleDateFormat]() {\n+    override def initialValue(): SimpleDateFormat =\n+      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\", Locale.US)\n+  }\n+\n+  private val batchTimeFormatWithMilliseconds = new ThreadLocal[SimpleDateFormat]() {\n+    override def initialValue(): SimpleDateFormat =\n+      new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\", Locale.US)\n+  }\n+\n+  /**\n+   * If `batchInterval` is less than 1 second, format `batchTime` with milliseconds. Otherwise,\n+   * format `batchTime` without milliseconds.\n+   *\n+   * @param batchTime the batch time to be formatted\n+   * @param batchInterval the batch interval\n+   * @param showYYYYMMSS if showing the `yyyy/MM/dd` part. If it's false, the return value wll be\n+   *                     only `HH:mm:ss` or `HH:mm:ss.SSS` depending on `batchInterval`\n+   * @param timezone only for test\n+   */\n+  def formatBatchTime(\n+      batchTime: Long,\n+      batchInterval: Long,\n+      showYYYYMMSS: Boolean = true,\n+      timezone: TimeZone = null): String = {\n+    val oldTimezones =\n+      (batchTimeFormat.get.getTimeZone, batchTimeFormatWithMilliseconds.get.getTimeZone)\n+    if (timezone != null) {\n+      batchTimeFormat.get.setTimeZone(timezone)\n+      batchTimeFormatWithMilliseconds.get.setTimeZone(timezone)\n+    }\n+    try {\n+      val formattedBatchTime =\n+        if (batchInterval < 1000) {\n+          batchTimeFormatWithMilliseconds.get.format(batchTime)\n+        } else {\n+          // If batchInterval >= 1 second, don't show milliseconds\n+          batchTimeFormat.get.format(batchTime)\n+        }\n+      if (showYYYYMMSS) {\n+        formattedBatchTime\n+      } else {\n+        formattedBatchTime.substring(formattedBatchTime.indexOf(' ') + 1)\n+      }\n+    } finally {\n+      if (timezone != null) {\n+        batchTimeFormat.get.setTimeZone(oldTimezones._1)\n+        batchTimeFormatWithMilliseconds.get.setTimeZone(oldTimezones._2)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Remove suspicious characters of user input to prevent Cross-Site scripting (XSS) attacks\n+   *\n+   * For more information about XSS testing:\n+   * https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet and\n+   * https://www.owasp.org/index.php/Testing_for_Reflected_Cross_site_scripting_(OTG-INPVAL-001)\n+   */\n+  def stripXSS(requestParameter: String): String = {"
  }],
  "prId": 26201
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "In this PR, we moved many classes from `streaming.ui` to `spark.ui`.\r\nInstead of making this new class, I'd like to recommend to put the below two functions to `spark.ui.UIUtils`.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-24T20:05:50Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.ui\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+private[ui] object UIUtils {",
    "line": 22
  }, {
    "author": {
      "login": "uncleGen"
    },
    "body": "IMHO, there is no need to move these two functions to `spark.ui.UIUtils`, as they are only used in `sql` package. Besides if we moved them to `spark.ui.UIUtils`, there will be a dependency cycle, as `withNoProgress` used `StreamingQuery` class",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-28T02:52:57Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.ui\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+private[ui] object UIUtils {",
    "line": 22
  }],
  "prId": 26201
}]