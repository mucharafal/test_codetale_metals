[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Why we need to check `tableExists` at the beginning? \n\nHere, the reason is to avoid issuing a confusing message. Without the change, users might get a confusing error message `table 'abc' does not exist`, although they issue a command `DROP VIEW`.\n",
    "commit": "9271a03ccaf2f86db5e543ac6f87ba7f541c4f7d",
    "createdAt": "2016-04-10T06:23:10Z",
    "diffHunk": "@@ -191,34 +191,40 @@ case class DropTable(\n \n   override def run(sqlContext: SQLContext): Seq[Row] = {\n     val catalog = sqlContext.sessionState.catalog\n-    if (isView && !catalog.isViewSupported) {\n-      throw new AnalysisException(s\"Not supported object: views\")\n-    }\n-    // If the command DROP VIEW is to drop a table or DROP TABLE is to drop a view\n-    // issue an exception.\n-    catalog.getTableMetadataOption(tableName).map(_.tableType match {\n-      case CatalogTableType.VIRTUAL_VIEW if !isView =>\n-        throw new AnalysisException(\n-          \"Cannot drop a view with DROP TABLE. Please use DROP VIEW instead\")\n-      case o if o != CatalogTableType.VIRTUAL_VIEW && isView =>\n-        throw new AnalysisException(\n-          s\"Cannot drop a table with DROP VIEW. Please use DROP TABLE instead\")\n-      case _ =>\n-    })\n-\n-    try {\n-      sqlContext.cacheManager.tryUncacheQuery(sqlContext.table(tableName.quotedString))\n-    } catch {\n-      // This table's metadata is not in Hive metastore (e.g. the table does not exist).\n-      case e if e.getClass.getName == \"org.apache.hadoop.hive.ql.metadata.InvalidTableException\" =>\n-      case _: org.apache.spark.sql.catalyst.analysis.NoSuchTableException =>\n-      // Other Throwables can be caused by users providing wrong parameters in OPTIONS\n-      // (e.g. invalid paths). We catch it and log a warning message.\n-      // Users should be able to drop such kinds of tables regardless if there is an error.\n-      case e: Throwable => log.warn(s\"${e.getMessage}\", e)\n+    if (!catalog.tableExists(tableName)) {\n+      if (!ifExists) {\n+        // When ifExists is false, no exception is issued when the table does not exist.\n+        // Instead, log it as an error message.\n+        val objectName = if (isView) \"View\" else \"Table\"\n+        logError(s\"$objectName '${tableName.quotedString}' does not exist\")"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Should we just let SessionCatalog to log something like `Table or View ${name.quotedString} does not exist`?\n",
    "commit": "9271a03ccaf2f86db5e543ac6f87ba7f541c4f7d",
    "createdAt": "2016-04-10T18:31:04Z",
    "diffHunk": "@@ -191,34 +191,40 @@ case class DropTable(\n \n   override def run(sqlContext: SQLContext): Seq[Row] = {\n     val catalog = sqlContext.sessionState.catalog\n-    if (isView && !catalog.isViewSupported) {\n-      throw new AnalysisException(s\"Not supported object: views\")\n-    }\n-    // If the command DROP VIEW is to drop a table or DROP TABLE is to drop a view\n-    // issue an exception.\n-    catalog.getTableMetadataOption(tableName).map(_.tableType match {\n-      case CatalogTableType.VIRTUAL_VIEW if !isView =>\n-        throw new AnalysisException(\n-          \"Cannot drop a view with DROP TABLE. Please use DROP VIEW instead\")\n-      case o if o != CatalogTableType.VIRTUAL_VIEW && isView =>\n-        throw new AnalysisException(\n-          s\"Cannot drop a table with DROP VIEW. Please use DROP TABLE instead\")\n-      case _ =>\n-    })\n-\n-    try {\n-      sqlContext.cacheManager.tryUncacheQuery(sqlContext.table(tableName.quotedString))\n-    } catch {\n-      // This table's metadata is not in Hive metastore (e.g. the table does not exist).\n-      case e if e.getClass.getName == \"org.apache.hadoop.hive.ql.metadata.InvalidTableException\" =>\n-      case _: org.apache.spark.sql.catalyst.analysis.NoSuchTableException =>\n-      // Other Throwables can be caused by users providing wrong parameters in OPTIONS\n-      // (e.g. invalid paths). We catch it and log a warning message.\n-      // Users should be able to drop such kinds of tables regardless if there is an error.\n-      case e: Throwable => log.warn(s\"${e.getMessage}\", e)\n+    if (!catalog.tableExists(tableName)) {\n+      if (!ifExists) {\n+        // When ifExists is false, no exception is issued when the table does not exist.\n+        // Instead, log it as an error message.\n+        val objectName = if (isView) \"View\" else \"Table\"\n+        logError(s\"$objectName '${tableName.quotedString}' does not exist\")"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Sure, we might need to change a couple of messages for it. Let me try it. Thanks!\n",
    "commit": "9271a03ccaf2f86db5e543ac6f87ba7f541c4f7d",
    "createdAt": "2016-04-10T18:53:00Z",
    "diffHunk": "@@ -191,34 +191,40 @@ case class DropTable(\n \n   override def run(sqlContext: SQLContext): Seq[Row] = {\n     val catalog = sqlContext.sessionState.catalog\n-    if (isView && !catalog.isViewSupported) {\n-      throw new AnalysisException(s\"Not supported object: views\")\n-    }\n-    // If the command DROP VIEW is to drop a table or DROP TABLE is to drop a view\n-    // issue an exception.\n-    catalog.getTableMetadataOption(tableName).map(_.tableType match {\n-      case CatalogTableType.VIRTUAL_VIEW if !isView =>\n-        throw new AnalysisException(\n-          \"Cannot drop a view with DROP TABLE. Please use DROP VIEW instead\")\n-      case o if o != CatalogTableType.VIRTUAL_VIEW && isView =>\n-        throw new AnalysisException(\n-          s\"Cannot drop a table with DROP VIEW. Please use DROP TABLE instead\")\n-      case _ =>\n-    })\n-\n-    try {\n-      sqlContext.cacheManager.tryUncacheQuery(sqlContext.table(tableName.quotedString))\n-    } catch {\n-      // This table's metadata is not in Hive metastore (e.g. the table does not exist).\n-      case e if e.getClass.getName == \"org.apache.hadoop.hive.ql.metadata.InvalidTableException\" =>\n-      case _: org.apache.spark.sql.catalyst.analysis.NoSuchTableException =>\n-      // Other Throwables can be caused by users providing wrong parameters in OPTIONS\n-      // (e.g. invalid paths). We catch it and log a warning message.\n-      // Users should be able to drop such kinds of tables regardless if there is an error.\n-      case e: Throwable => log.warn(s\"${e.getMessage}\", e)\n+    if (!catalog.tableExists(tableName)) {\n+      if (!ifExists) {\n+        // When ifExists is false, no exception is issued when the table does not exist.\n+        // Instead, log it as an error message.\n+        val objectName = if (isView) \"View\" else \"Table\"\n+        logError(s\"$objectName '${tableName.quotedString}' does not exist\")"
  }],
  "prId": 12284
}]