[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "I moved this below to keep the StreamingQueryProgress class first in the file. More important code first.",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-13T01:03:53Z",
    "diffHunk": "@@ -33,27 +34,6 @@ import org.apache.spark.sql.catalyst.util.DateTimeUtils\n \n /**\n  * :: Experimental ::\n- * Information about updates made to stateful operators in a [[StreamingQuery]] during a trigger."
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Thats actually the opposite of how most code in SQL is laid out, so I think it would be better to avoid this change.  The logic here is declarations that are use later should come first (references before declaration make it harder to read), and stuff at the end of the file is kind of hidden.",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-13T01:07:03Z",
    "diffHunk": "@@ -33,27 +34,6 @@ import org.apache.spark.sql.catalyst.util.DateTimeUtils\n \n /**\n  * :: Experimental ::\n- * Information about updates made to stateful operators in a [[StreamingQuery]] during a trigger."
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "aah, then for consistency, SourceProgress and SinkProgress should also be before StreamingQueryProgress. But thats a bigger change should be done in a different PR. ",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-13T01:09:59Z",
    "diffHunk": "@@ -33,27 +34,6 @@ import org.apache.spark.sql.catalyst.util.DateTimeUtils\n \n /**\n  * :: Experimental ::\n- * Information about updates made to stateful operators in a [[StreamingQuery]] during a trigger."
  }],
  "prId": 16258
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: since you are touching this file, could you also fix the comment of `@param timestamp`? It's better to document the format as well, such as, `The beginning time of the trigger in ISO8601 format. (e.g., 2016-12-05T20:54:20.827Z)`",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-13T02:20:53Z",
    "diffHunk": "@@ -67,7 +67,7 @@ class StateOperatorProgress private[sql](\n  *                Similarly, when there is no data to be processed, the batchId will not be\n  *                incremented.\n  * @param durationMs The amount of time taken to perform various operations in milliseconds.\n- * @param currentWatermark The current event time watermark in milliseconds\n+ * @param eventTime Statistics of event time seen in this batch"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "In addition, could you also add an example in the comment of `eventTime`?",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-13T02:25:19Z",
    "diffHunk": "@@ -67,7 +67,7 @@ class StateOperatorProgress private[sql](\n  *                Similarly, when there is no data to be processed, the batchId will not be\n  *                incremented.\n  * @param durationMs The amount of time taken to perform various operations in milliseconds.\n- * @param currentWatermark The current event time watermark in milliseconds\n+ * @param eventTime Statistics of event time seen in this batch"
  }],
  "prId": 16258
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Hi all, I am just leaving a comment as a gentle reminder to note that we probably should replace `<` or `>` to other ones such as `{@literal <}` or `{@literal >}` in the future. Please refer https://github.com/apache/spark/pull/16013#discussion_r89666914. This causes javadoc8 break.\r\n\r\n```\r\n[error] .../java/org/apache/spark/sql/streaming/StreamingQueryProgress.java:19: error: bad use of '>'\r\n[error]  *                   \"max\" -> \"2016-12-05T20:54:20.827Z\"  // maximum event time seen in this trigger\r\n[error]                             ^\r\n[error] .../java/org/apache/spark/sql/streaming/StreamingQueryProgress.java:20: error: bad use of '>'\r\n[error]  *                   \"min\" -> \"2016-12-05T20:54:20.827Z\"  // minimum event time seen in this trigger\r\n[error]                             ^\r\n[error] .../java/org/apache/spark/sql/streaming/StreamingQueryProgress.java:21: error: bad use of '>'\r\n[error]  *                   \"avg\" -> \"2016-12-05T20:54:20.827Z\"  // average event time seen in this trigger\r\n[error]                             ^\r\n[error] .../java/org/apache/spark/sql/streaming/StreamingQueryProgress.java:22: error: bad use of '>'\r\n[error]  *                   \"watermark\" -> \"2016-12-05T20:54:20.827Z\"  // watermark used in this trigger\r\n[error]                                   ^\r\n```\r\n",
    "commit": "b59ab8083de3f2441133fed35658dea39cd4a759",
    "createdAt": "2016-12-14T08:05:42Z",
    "diffHunk": "@@ -61,13 +61,20 @@ class StateOperatorProgress private[sql](\n  * @param id An unique query id that persists across restarts. See `StreamingQuery.id()`.\n  * @param runId A query id that is unique for every start/restart. See `StreamingQuery.runId()`.\n  * @param name User-specified name of the query, null if not specified.\n- * @param timestamp Timestamp (ms) of the beginning of the trigger.\n+ * @param timestamp Beginning time of the trigger in ISO8601 format, i.e. UTC timestamps.\n  * @param batchId A unique id for the current batch of data being processed.  Note that in the\n  *                case of retries after a failure a given batchId my be executed more than once.\n  *                Similarly, when there is no data to be processed, the batchId will not be\n  *                incremented.\n  * @param durationMs The amount of time taken to perform various operations in milliseconds.\n- * @param currentWatermark The current event time watermark in milliseconds\n+ * @param eventTime Statistics of event time seen in this batch. It may contain the following keys:\n+ *                 {\n+ *                   \"max\" -> \"2016-12-05T20:54:20.827Z\"  // maximum event time seen in this trigger",
    "line": 30
  }],
  "prId": 16258
}]