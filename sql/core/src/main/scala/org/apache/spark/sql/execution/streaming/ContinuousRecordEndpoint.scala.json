[{
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "nit: probably better to elaborate on what these are for, Seq[Seq[Any]] and Object aren't very informative types",
    "commit": "f4a39d9ebae2d6f6ae59caf3140310b17e75b602",
    "createdAt": "2018-05-17T18:43:30Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.sources.v2.reader.streaming.PartitionOffset\n+\n+case class ContinuousRecordPartitionOffset(partitionId: Int, offset: Int) extends PartitionOffset\n+case class GetRecord(offset: ContinuousRecordPartitionOffset)\n+\n+/**\n+ * A RPC end point for continuous readers to poll for\n+ * records from the driver.\n+ *\n+ * @param buckets the data buckets"
  }, {
    "author": {
      "login": "arunmahadevan"
    },
    "body": "Added more comments to clarify.",
    "commit": "f4a39d9ebae2d6f6ae59caf3140310b17e75b602",
    "createdAt": "2018-05-17T21:49:45Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.SparkEnv\n+import org.apache.spark.rpc.{RpcCallContext, RpcEnv, ThreadSafeRpcEndpoint}\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.sources.v2.reader.streaming.PartitionOffset\n+\n+case class ContinuousRecordPartitionOffset(partitionId: Int, offset: Int) extends PartitionOffset\n+case class GetRecord(offset: ContinuousRecordPartitionOffset)\n+\n+/**\n+ * A RPC end point for continuous readers to poll for\n+ * records from the driver.\n+ *\n+ * @param buckets the data buckets"
  }],
  "prId": 21199
}]