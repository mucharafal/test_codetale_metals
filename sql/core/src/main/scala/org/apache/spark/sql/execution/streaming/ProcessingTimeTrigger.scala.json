[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I see, if this is basically an implementation class, I wonder if it belongs in the (unfortunately named) `Triggers.scala` class, which only now has `OneTimeTrigger`, but at least is just another implementation class too? No big deal.",
    "commit": "f42e3b5a4e41b1068d891f0c467cda93cd0d0b0c",
    "createdAt": "2019-07-01T19:11:36Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.sql.streaming.Trigger\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A [[Trigger]] that runs a query periodically based on the processing time. If `interval` is 0,\n+ * the query will run as fast as possible.\n+ */\n+@Evolving\n+private[sql] case class ProcessingTimeTrigger(intervalMs: Long) extends Trigger {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Once we decide to move this class to `Triggers.scala`, I guess `ContinuousTrigger` has to be moved too. No big deal for me too, so please let me know which feels cleaner for you.",
    "commit": "f42e3b5a4e41b1068d891f0c467cda93cd0d0b0c",
    "createdAt": "2019-07-01T21:14:27Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.sql.streaming.Trigger\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A [[Trigger]] that runs a query periodically based on the processing time. If `interval` is 0,\n+ * the query will run as fast as possible.\n+ */\n+@Evolving\n+private[sql] case class ProcessingTimeTrigger(intervalMs: Long) extends Trigger {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I think I'd move it, to rationalize `Triggers.scala` and avoid another file. It doesn't matter much. I see there is `ContinuousTrigger` too but I guess it belongs in the `.continuous` subpackage.",
    "commit": "f42e3b5a4e41b1068d891f0c467cda93cd0d0b0c",
    "createdAt": "2019-07-01T21:18:38Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.sql.streaming.Trigger\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A [[Trigger]] that runs a query periodically based on the processing time. If `interval` is 0,\n+ * the query will run as fast as possible.\n+ */\n+@Evolving\n+private[sql] case class ProcessingTimeTrigger(intervalMs: Long) extends Trigger {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Thanks for your voice on this. Agreed on both points, I'll leave ContinuousTrigger as it is, and move ProcessingTimeTrigger.",
    "commit": "f42e3b5a4e41b1068d891f0c467cda93cd0d0b0c",
    "createdAt": "2019-07-01T21:44:45Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.spark.annotation.Evolving\n+import org.apache.spark.sql.streaming.Trigger\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A [[Trigger]] that runs a query periodically based on the processing time. If `interval` is 0,\n+ * the query will run as fast as possible.\n+ */\n+@Evolving\n+private[sql] case class ProcessingTimeTrigger(intervalMs: Long) extends Trigger {"
  }],
  "prId": 24996
}]