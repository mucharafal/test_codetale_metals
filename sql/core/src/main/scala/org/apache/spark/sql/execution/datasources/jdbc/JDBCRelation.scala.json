[{
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "The indentation here seems off (you may wish to run ./dev/lint-scala)\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-09-17T00:42:45Z",
    "diffHunk": "@@ -75,6 +76,19 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+                                        connectionProperties: Properties,"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "holdenk"
    },
    "body": "this indentation is still a little funky, see https://cwiki.apache.org/confluence/display/SPARK/Spark+Code+Style+Guide \n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-09-18T18:36:25Z",
    "diffHunk": "@@ -75,6 +76,19 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(",
    "line": 15
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "@tribbloid I think Holden's comment still stands -- see how other methods wrap args. I also don't think you need to fully-qualify `scala.collection.Map` here?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-10T09:55:14Z",
    "diffHunk": "@@ -75,6 +76,19 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(",
    "line": 15
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "+1 on Sean's comments. Also, could you add a one- or two-line comment to explain what's going on here? Maybe give this method Scaladoc?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:38:14Z",
    "diffHunk": "@@ -75,6 +76,19 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(",
    "line": 15
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Sorry, only now really thinking through this -- if you import `scala.collection.JavaConverters._` then this clause can just be `props.putAll(extraOptions.asJava)`\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-10T09:55:50Z",
    "diffHunk": "@@ -75,6 +75,18 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    val props = new Properties()\n+    extraOptions.foreach { case (key, value) =>"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Totally agree, changed\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T02:39:52Z",
    "diffHunk": "@@ -75,6 +75,18 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    val props = new Properties()\n+    extraOptions.foreach { case (key, value) =>"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Same, I think we may need to wrap this differently. Does it go on one line if `JDBCRDD` starts a new line?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-10T09:56:40Z",
    "diffHunk": "@@ -88,7 +100,11 @@ private[sql] case class JDBCRelation(\n \n   override val needConversion: Boolean = false\n \n-  override val schema: StructType = JDBCRDD.resolveTable(url, table, properties)\n+  override val schema: StructType = JDBCRDD.resolveTable(\n+    url,"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Yes it does, changed\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T02:40:07Z",
    "diffHunk": "@@ -88,7 +100,11 @@ private[sql] case class JDBCRelation(\n \n   override val needConversion: Boolean = false\n \n-  override val schema: StructType = JDBCRDD.resolveTable(url, table, properties)\n+  override val schema: StructType = JDBCRDD.resolveTable(\n+    url,"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Here and below I don't see a need to scope this import so locally. \n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T13:10:55Z",
    "diffHunk": "@@ -75,6 +75,18 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    import scala.collection.JavaConverters._"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "already corrected by moving to object-level scope\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T15:38:31Z",
    "diffHunk": "@@ -75,6 +75,18 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    import scala.collection.JavaConverters._"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Still need not be qualified; then I think this need not wrap?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-21T21:36:40Z",
    "diffHunk": "@@ -75,6 +78,16 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {",
    "line": 17
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Qualifier removed, but if without wrap the line exceeds 100 characters.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T02:16:18Z",
    "diffHunk": "@@ -75,6 +78,16 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {",
    "line": 17
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "The non-serializability doesn't come into play here since this runs entirely on the driver, right? Or can this method wind up being called on executors?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:39:51Z",
    "diffHunk": "@@ -88,7 +101,8 @@ private[sql] case class JDBCRelation(\n \n   override val needConversion: Boolean = false\n \n-  override val schema: StructType = JDBCRDD.resolveTable(url, table, properties)\n+  override val schema: StructType =\n+    JDBCRDD.resolveTable(url, table, JDBCRelation.getEffectiveProperties(properties))"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Yes, you are right, I removed the getEffectiveProperties() and all tests passed. This may be attributed to changes in getConnectionFactory()\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-27T19:26:53Z",
    "diffHunk": "@@ -88,7 +101,8 @@ private[sql] case class JDBCRelation(\n \n   override val needConversion: Boolean = false\n \n-  override val schema: StructType = JDBCRDD.resolveTable(url, table, properties)\n+  override val schema: StructType =\n+    JDBCRDD.resolveTable(url, table, JDBCRelation.getEffectiveProperties(properties))"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This call is effectively just cloning the properties, but we're already doing the clone inside of `.jdbc()` itself, so we don't need this.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:41:51Z",
    "diffHunk": "@@ -108,6 +122,6 @@ private[sql] case class JDBCRelation(\n   override def insert(data: DataFrame, overwrite: Boolean): Unit = {\n     data.write\n       .mode(if (overwrite) SaveMode.Overwrite else SaveMode.Append)\n-      .jdbc(url, table, properties)\n+      .jdbc(url, table, JDBCRelation.getEffectiveProperties(properties))"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "yes, reverted without breaking any test.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-27T19:27:36Z",
    "diffHunk": "@@ -108,6 +122,6 @@ private[sql] case class JDBCRelation(\n   override def insert(data: DataFrame, overwrite: Boolean): Unit = {\n     data.write\n       .mode(if (overwrite) SaveMode.Overwrite else SaveMode.Append)\n-      .jdbc(url, table, properties)\n+      .jdbc(url, table, JDBCRelation.getEffectiveProperties(properties))"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "How does this handle inherited properties? E.g. if `connectionProperties` was defined by inheriting defaults from a parent set of properties, would those inherited defaults be preserved here or would they be lost? This concern existed in the old code as well, but just thought I'd ask since we're using this method in a few places in order to do defensive copying of property objects.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:45:13Z",
    "diffHunk": "@@ -75,6 +78,16 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    val props = new Properties()\n+    props.putAll(extraOptions.asJava)\n+    // connectionProperties should override settings in extraOptions\n+    props.putAll(connectionProperties)",
    "line": 21
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "yes they can be preserved by the deep copy, but unfortunately any changes on parent properties AFTER the deep copy won't be preserved in returned value. I expect callers of this function to use its returned value transiently.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-27T19:39:56Z",
    "diffHunk": "@@ -75,6 +78,16 @@ private[sql] object JDBCRelation {\n     }\n     ans.toArray\n   }\n+\n+  def getEffectiveProperties(\n+      connectionProperties: Properties,\n+      extraOptions: scala.collection.Map[String, String] = Map()): Properties = {\n+    val props = new Properties()\n+    props.putAll(extraOptions.asJava)\n+    // connectionProperties should override settings in extraOptions\n+    props.putAll(connectionProperties)",
    "line": 21
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Same here; move this to the top with the other Scala import.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:49:06Z",
    "diffHunk": "@@ -37,6 +37,9 @@ private[sql] case class JDBCPartitioningInfo(\n     numPartitions: Int)\n \n private[sql] object JDBCRelation {\n+\n+  import scala.collection.JavaConverters._"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "OK, I'll merge after #10519 is closed, right now I see some changes that pretty much did what I did\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T22:19:15Z",
    "diffHunk": "@@ -37,6 +37,9 @@ private[sql] case class JDBCPartitioningInfo(\n     numPartitions: Int)\n \n private[sql] object JDBCRelation {\n+\n+  import scala.collection.JavaConverters._"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Hey @tribbloid, #10519 has now been merged, so I think things should be in a much more testable state now in case you want to revive this PR and try to get it merged.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-24T20:06:17Z",
    "diffHunk": "@@ -37,6 +37,9 @@ private[sql] case class JDBCPartitioningInfo(\n     numPartitions: Int)\n \n private[sql] object JDBCRelation {\n+\n+  import scala.collection.JavaConverters._"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": " import scala.collection.JavaConverters._ moved to the top with other non-wildcard imports\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-27T19:30:08Z",
    "diffHunk": "@@ -37,6 +37,9 @@ private[sql] case class JDBCPartitioningInfo(\n     numPartitions: Int)\n \n private[sql] object JDBCRelation {\n+\n+  import scala.collection.JavaConverters._"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "clockfly"
    },
    "body": "scala import should be grouped together with line 22.\nhttps://github.com/apache/spark/pull/8785/files#diff-5f0d0643fcfad315df0fdd7cae52dfaeR22\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-06-14T07:20:48Z",
    "diffHunk": "@@ -27,6 +27,8 @@ import org.apache.spark.sql.{DataFrame, Row, SaveMode, SQLContext}\n import org.apache.spark.sql.sources._\n import org.apache.spark.sql.types.StructType\n \n+import scala.collection.JavaConverters._"
  }],
  "prId": 8785
}]