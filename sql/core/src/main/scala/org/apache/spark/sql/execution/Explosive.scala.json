[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Because of codegen, Projections can't be assumed to be serializable.\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T01:36:47Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)\n+\n+  override def otherCopyArgs = sqlContext :: Nil\n+\n+  override def execute() = attachTree(this, \"execute\") {\n+    child.execute().mapPartitions { iter =>\n+      // TODO InterpretProjection is not Serializable"
  }],
  "prId": 1567
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "This is the default right? I don't think you need this.\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T01:42:16Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)"
  }],
  "prId": 1567
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "All SparkPlan nodes have a `sqlContext` automatically now, so I think you can remove this.\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T01:42:40Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)\n+\n+  override def otherCopyArgs = sqlContext :: Nil"
  }],
  "prId": 1567
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Its clear that its set to `-1`. Instead maybe describe what `-1` means.\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T02:02:28Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)\n+\n+  override def otherCopyArgs = sqlContext :: Nil\n+\n+  override def execute() = attachTree(this, \"execute\") {\n+    child.execute().mapPartitions { iter =>\n+      // TODO InterpretProjection is not Serializable\n+      val projs = projections.map(ee => newProjection(ee.children, output)).toArray\n+\n+      new Iterator[Row] {\n+        private[this] var result: Row = _\n+        private[this] var idx = -1  // initial value is set as -1"
  }],
  "prId": 1567
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I'm a little confused here.  Why are you binding to the output schema of this node and not the input schema?\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T02:03:25Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)\n+\n+  override def otherCopyArgs = sqlContext :: Nil\n+\n+  override def execute() = attachTree(this, \"execute\") {\n+    child.execute().mapPartitions { iter =>\n+      // TODO InterpretProjection is not Serializable\n+      val projs = projections.map(ee => newProjection(ee.children, output)).toArray"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Yes, you're right! \nThe `output` schema is not constructed within the `Explosive`, but passed in as case class argument (with the `grouping__id` attribute appended) in `Analyzer`, it should be more reasonable if we compute the `output` schema within `Explosive`.\n",
    "commit": "fe65fcc7f91ff9ef5b275c5f822ea659b3a54b23",
    "createdAt": "2014-12-17T02:32:24Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.catalyst.errors._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.{UnknownPartitioning, Partitioning}\n+\n+@DeveloperApi\n+case class Explosive(\n+    projections: Seq[GroupExpression],\n+    output: Seq[Attribute],\n+    child: SparkPlan)(@transient sqlContext: SQLContext)\n+  extends UnaryNode {\n+\n+  override def outputPartitioning: Partitioning = UnknownPartitioning(0)\n+\n+  override def otherCopyArgs = sqlContext :: Nil\n+\n+  override def execute() = attachTree(this, \"execute\") {\n+    child.execute().mapPartitions { iter =>\n+      // TODO InterpretProjection is not Serializable\n+      val projs = projections.map(ee => newProjection(ee.children, output)).toArray"
  }],
  "prId": 1567
}]