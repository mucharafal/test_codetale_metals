[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`circumstances please` -> `circumstances, please`",
    "commit": "ce2577d3e160f31272ae2cc34e2fc6fb56e6f218",
    "createdAt": "2019-02-07T17:22:52Z",
    "diffHunk": "@@ -221,9 +221,13 @@ class StreamingQueryManager private[sql] (sparkSession: SparkSession) extends Lo\n       }\n     }.getOrElse {\n       if (useTempCheckpointLocation) {\n-        // Delete the temp checkpoint when a query is being stopped without errors.\n         deleteCheckpointOnStop = true\n-        Utils.createTempDir(namePrefix = s\"temporary\").getCanonicalPath\n+        val tempDir = Utils.createTempDir(namePrefix = s\"temporary\").getCanonicalPath\n+        logWarning(\"Temporary checkpoint location created which is deleted normally when\" +\n+          s\" the query didn't fail: $tempDir. If it's required to delete it under any\" +\n+          s\" circumstances please set ${SQLConf.FORCE_DELETE_TEMP_CHECKPOINT_LOCATION.key} to\" +"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "ce2577d3e160f31272ae2cc34e2fc6fb56e6f218",
    "createdAt": "2019-02-07T20:31:02Z",
    "diffHunk": "@@ -221,9 +221,13 @@ class StreamingQueryManager private[sql] (sparkSession: SparkSession) extends Lo\n       }\n     }.getOrElse {\n       if (useTempCheckpointLocation) {\n-        // Delete the temp checkpoint when a query is being stopped without errors.\n         deleteCheckpointOnStop = true\n-        Utils.createTempDir(namePrefix = s\"temporary\").getCanonicalPath\n+        val tempDir = Utils.createTempDir(namePrefix = s\"temporary\").getCanonicalPath\n+        logWarning(\"Temporary checkpoint location created which is deleted normally when\" +\n+          s\" the query didn't fail: $tempDir. If it's required to delete it under any\" +\n+          s\" circumstances please set ${SQLConf.FORCE_DELETE_TEMP_CHECKPOINT_LOCATION.key} to\" +"
  }],
  "prId": 23732
}]