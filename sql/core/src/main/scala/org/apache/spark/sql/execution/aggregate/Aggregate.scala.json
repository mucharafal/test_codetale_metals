[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Why a trait and not a superclass?\n",
    "commit": "ac6814514e091ffc377fde75d5c79b583c878626",
    "createdAt": "2016-08-22T14:53:21Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+import org.apache.spark.sql.catalyst.plans.physical._\n+import org.apache.spark.sql.execution.SparkPlan\n+\n+/**\n+ * A base class for aggregate implementation.\n+ */\n+trait Aggregate {"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "I just used trait along with the  `HashJoin` trait. A super class is better?\n",
    "commit": "ac6814514e091ffc377fde75d5c79b583c878626",
    "createdAt": "2016-08-22T14:57:26Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+import org.apache.spark.sql.catalyst.plans.physical._\n+import org.apache.spark.sql.execution.SparkPlan\n+\n+/**\n+ * A base class for aggregate implementation.\n+ */\n+trait Aggregate {"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Well I think a super class makes a bit more sense. A trait to me is a way to bolt on functionality. The `Aggregate` contains core functionality for both the Hash and Sort based version, and is the natural parent class of both.\n\nI do have to admit that this is more a personal preference.\n",
    "commit": "ac6814514e091ffc377fde75d5c79b583c878626",
    "createdAt": "2016-08-22T15:42:10Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+import org.apache.spark.sql.catalyst.plans.physical._\n+import org.apache.spark.sql.execution.SparkPlan\n+\n+/**\n+ * A base class for aggregate implementation.\n+ */\n+trait Aggregate {"
  }],
  "prId": 10896
}]