[{
  "comments": [{
    "author": {
      "login": "CodingCat"
    },
    "body": "actually I didn't see any reason to distinguish these two types of event when posting\n",
    "commit": "00dd3ceadf24c17b2d16283a86644a22e4102a88",
    "createdAt": "2016-10-28T20:46:11Z",
    "diffHunk": "@@ -39,12 +39,7 @@ class StreamingQueryListenerBus(sparkListenerBus: LiveListenerBus)\n    * be dispatched to all StreamingQueryListener in the thread of the Spark listener bus.\n    */\n   def post(event: StreamingQueryListener.Event) {\n-    event match {"
  }],
  "prId": 15675
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "This may break the existing spark listeners because they are not thread-safe.\n",
    "commit": "00dd3ceadf24c17b2d16283a86644a22e4102a88",
    "createdAt": "2016-10-31T20:39:09Z",
    "diffHunk": "@@ -41,7 +41,9 @@ class StreamingQueryListenerBus(sparkListenerBus: LiveListenerBus)\n   def post(event: StreamingQueryListener.Event) {\n     event match {\n       case s: QueryStartedEvent =>\n-        postToAll(s)\n+        sparkListenerBus.postToAll(s)"
  }],
  "prId": 15675
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "`QueryStartedEvent` will be sent twice to `StreamingQueryListener`. There is a thread local variable in `LiveListenerBus`. You can use it to ignore duplicated  `QueryStartedEvent` if it's posted in the listener thread.\n",
    "commit": "00dd3ceadf24c17b2d16283a86644a22e4102a88",
    "createdAt": "2016-10-31T20:51:32Z",
    "diffHunk": "@@ -41,6 +41,8 @@ class StreamingQueryListenerBus(sparkListenerBus: LiveListenerBus)\n   def post(event: StreamingQueryListener.Event) {\n     event match {\n       case s: QueryStartedEvent =>\n+        sparkListenerBus.post(s)",
    "line": 4
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Since this is hacky, it's better to have some tests to make sure we won't break things in future when removing the hacky codes.\n",
    "commit": "00dd3ceadf24c17b2d16283a86644a22e4102a88",
    "createdAt": "2016-10-31T20:53:05Z",
    "diffHunk": "@@ -41,6 +41,8 @@ class StreamingQueryListenerBus(sparkListenerBus: LiveListenerBus)\n   def post(event: StreamingQueryListener.Event) {\n     event match {\n       case s: QueryStartedEvent =>\n+        sparkListenerBus.post(s)",
    "line": 4
  }],
  "prId": 15675
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: please use `!LiveListenerBus.withinListenerThread.value` instead.\n",
    "commit": "00dd3ceadf24c17b2d16283a86644a22e4102a88",
    "createdAt": "2016-11-01T21:34:43Z",
    "diffHunk": "@@ -50,7 +52,14 @@ class StreamingQueryListenerBus(sparkListenerBus: LiveListenerBus)\n   override def onOtherEvent(event: SparkListenerEvent): Unit = {\n     event match {\n       case e: StreamingQueryListener.Event =>\n-        postToAll(e)\n+        // SPARK-18144: we broadcast QueryStartedEvent to all listeners attached to this bus\n+        // synchronously and to listeners attached to LiveListenerBus asynchronously. Therefore,\n+        // we need to ignore QueryStartedEvent if this method is called within SparkListenerBus\n+        // thread\n+        if (Thread.currentThread().getName != \"SparkListenerBus\" ||"
  }],
  "prId": 15675
}]