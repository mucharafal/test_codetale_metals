[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "another idea: when we turn broadcast query stage back to logical plan, shall we add a broadcast hint?",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-05-31T14:42:35Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.Strategy\n+import org.apache.spark.sql.catalyst.expressions.PredicateHelper\n+import org.apache.spark.sql.catalyst.planning.ExtractEquiJoinKeys\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.joins.{BroadcastHashJoinExec, BroadcastNestedLoopJoinExec, BuildLeft, BuildRight}\n+\n+/**\n+ * Strategy for plans containing [[LogicalQueryStage]] nodes:\n+ * 1. Transforms [[LogicalQueryStage]] to its corresponding physical plan that is either being\n+ *    executed or has already completed execution.\n+ * 2. Transforms [[Join]] which has one child relation already planned and executed as a",
    "line": 31
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "This is a safer. For hint, in theory, is not a guaranteed promise.",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-05-31T17:34:23Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.Strategy\n+import org.apache.spark.sql.catalyst.expressions.PredicateHelper\n+import org.apache.spark.sql.catalyst.planning.ExtractEquiJoinKeys\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.joins.{BroadcastHashJoinExec, BroadcastNestedLoopJoinExec, BuildLeft, BuildRight}\n+\n+/**\n+ * Strategy for plans containing [[LogicalQueryStage]] nodes:\n+ * 1. Transforms [[LogicalQueryStage]] to its corresponding physical plan that is either being\n+ *    executed or has already completed execution.\n+ * 2. Transforms [[Join]] which has one child relation already planned and executed as a",
    "line": 31
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Then we need to add a note that, this rule must be run before `JoinSelection`.",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-06-01T02:41:52Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.Strategy\n+import org.apache.spark.sql.catalyst.expressions.PredicateHelper\n+import org.apache.spark.sql.catalyst.planning.ExtractEquiJoinKeys\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.joins.{BroadcastHashJoinExec, BroadcastNestedLoopJoinExec, BuildLeft, BuildRight}\n+\n+/**\n+ * Strategy for plans containing [[LogicalQueryStage]] nodes:\n+ * 1. Transforms [[LogicalQueryStage]] to its corresponding physical plan that is either being\n+ *    executed or has already completed execution.\n+ * 2. Transforms [[Join]] which has one child relation already planned and executed as a",
    "line": 31
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "Added.",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-06-03T03:25:20Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.Strategy\n+import org.apache.spark.sql.catalyst.expressions.PredicateHelper\n+import org.apache.spark.sql.catalyst.planning.ExtractEquiJoinKeys\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.joins.{BroadcastHashJoinExec, BroadcastNestedLoopJoinExec, BuildLeft, BuildRight}\n+\n+/**\n+ * Strategy for plans containing [[LogicalQueryStage]] nodes:\n+ * 1. Transforms [[LogicalQueryStage]] to its corresponding physical plan that is either being\n+ *    executed or has already completed execution.\n+ * 2. Transforms [[Join]] which has one child relation already planned and executed as a",
    "line": 31
  }],
  "prId": 24706
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "In this case a pattern match is a bit more concise.",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-06-12T21:02:46Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.Strategy\n+import org.apache.spark.sql.catalyst.expressions.PredicateHelper\n+import org.apache.spark.sql.catalyst.planning.ExtractEquiJoinKeys\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.sql.execution.joins.{BroadcastHashJoinExec, BroadcastNestedLoopJoinExec, BuildLeft, BuildRight}\n+\n+/**\n+ * Strategy for plans containing [[LogicalQueryStage]] nodes:\n+ * 1. Transforms [[LogicalQueryStage]] to its corresponding physical plan that is either being\n+ *    executed or has already completed execution.\n+ * 2. Transforms [[Join]] which has one child relation already planned and executed as a\n+ *    [[BroadcastQueryStageExec]]. This is to prevent reversing a broadcast stage into a shuffle\n+ *    stage in case of the larger join child relation finishes before the smaller relation. Note\n+ *    that this rule needs to applied before regular join strategies.\n+ */\n+object LogicalQueryStageStrategy extends Strategy with PredicateHelper {\n+\n+  private def isBroadcastStage(plan: LogicalPlan): Boolean =\n+    plan.isInstanceOf[LogicalQueryStage] &&"
  }],
  "prId": 24706
}]