[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "What's the purpose of the `skip()` method?",
    "commit": "b85dc231d05f5e1a1a3d8b0bcbc778b85d83c533",
    "createdAt": "2017-07-18T18:57:00Z",
    "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.vectorized\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.arrow.vector._\n+import org.apache.arrow.vector.complex._\n+import org.apache.arrow.vector.util.DecimalUtility\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.SpecializedGetters\n+import org.apache.spark.sql.types._\n+\n+object ArrowWriter {\n+\n+  def create(schema: StructType): ArrowWriter = {\n+    val arrowSchema = ArrowUtils.toArrowSchema(schema)\n+    val root = VectorSchemaRoot.create(arrowSchema, ArrowUtils.rootAllocator)\n+    create(root)\n+  }\n+\n+  def create(root: VectorSchemaRoot): ArrowWriter = {\n+    val children = root.getFieldVectors().asScala.map { vector =>\n+      vector.allocateNew()\n+      createFieldWriter(vector)\n+    }\n+    new ArrowWriter(root, children.toArray)\n+  }\n+\n+  private def createFieldWriter(vector: ValueVector): ArrowFieldWriter = {\n+    val field = vector.getField()\n+    ArrowUtils.fromArrowField(field) match {\n+      case BooleanType =>\n+        new BooleanWriter(vector.asInstanceOf[NullableBitVector])\n+      case ByteType =>\n+        new ByteWriter(vector.asInstanceOf[NullableTinyIntVector])\n+      case ShortType =>\n+        new ShortWriter(vector.asInstanceOf[NullableSmallIntVector])\n+      case IntegerType =>\n+        new IntegerWriter(vector.asInstanceOf[NullableIntVector])\n+      case LongType =>\n+        new LongWriter(vector.asInstanceOf[NullableBigIntVector])\n+      case FloatType =>\n+        new FloatWriter(vector.asInstanceOf[NullableFloat4Vector])\n+      case DoubleType =>\n+        new DoubleWriter(vector.asInstanceOf[NullableFloat8Vector])\n+      case DecimalType.Fixed(precision, scale) =>\n+        new DecimalWriter(vector.asInstanceOf[NullableDecimalVector], precision, scale)\n+      case StringType =>\n+        new StringWriter(vector.asInstanceOf[NullableVarCharVector])\n+      case BinaryType =>\n+        new BinaryWriter(vector.asInstanceOf[NullableVarBinaryVector])\n+      case ArrayType(_, _) =>\n+        val v = vector.asInstanceOf[ListVector]\n+        val elementVector = createFieldWriter(v.getDataVector())\n+        new ArrayWriter(v, elementVector)\n+      case StructType(_) =>\n+        val v = vector.asInstanceOf[NullableMapVector]\n+        val children = (0 until v.size()).map { ordinal =>\n+          createFieldWriter(v.getChildByOrdinal(ordinal))\n+        }\n+        new StructWriter(v, children.toArray)\n+    }\n+  }\n+}\n+\n+class ArrowWriter(\n+    val root: VectorSchemaRoot,\n+    fields: Array[ArrowFieldWriter]) {\n+\n+  def schema: StructType = StructType(fields.map { f =>\n+    StructField(f.name, f.dataType, f.nullable)\n+  })\n+\n+  private var count: Int = 0\n+\n+  def write(row: InternalRow): Unit = {\n+    var i = 0\n+    while (i < fields.size) {\n+      fields(i).write(row, i)\n+      i += 1\n+    }\n+    count += 1\n+  }\n+\n+  def finish(): Unit = {\n+    root.setRowCount(count)\n+    fields.foreach(_.finish())\n+  }\n+\n+  def reset(): Unit = {\n+    root.setRowCount(0)\n+    count = 0\n+    fields.foreach(_.reset())\n+  }\n+}\n+\n+private[sql] abstract class ArrowFieldWriter {\n+\n+  def valueVector: ValueVector\n+  def valueMutator: ValueVector.Mutator\n+\n+  def name: String = valueVector.getField().getName()\n+  def dataType: DataType = ArrowUtils.fromArrowField(valueVector.getField())\n+  def nullable: Boolean = valueVector.getField().isNullable()\n+\n+  def setNull(): Unit\n+  def setValue(input: SpecializedGetters, ordinal: Int): Unit\n+  def skip(): Unit"
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "This is for the case if the value of the struct type is null.\r\nI believe if the value of the struct type, the fields should have some values for the same row.",
    "commit": "b85dc231d05f5e1a1a3d8b0bcbc778b85d83c533",
    "createdAt": "2017-07-19T03:43:39Z",
    "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.vectorized\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.arrow.vector._\n+import org.apache.arrow.vector.complex._\n+import org.apache.arrow.vector.util.DecimalUtility\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.SpecializedGetters\n+import org.apache.spark.sql.types._\n+\n+object ArrowWriter {\n+\n+  def create(schema: StructType): ArrowWriter = {\n+    val arrowSchema = ArrowUtils.toArrowSchema(schema)\n+    val root = VectorSchemaRoot.create(arrowSchema, ArrowUtils.rootAllocator)\n+    create(root)\n+  }\n+\n+  def create(root: VectorSchemaRoot): ArrowWriter = {\n+    val children = root.getFieldVectors().asScala.map { vector =>\n+      vector.allocateNew()\n+      createFieldWriter(vector)\n+    }\n+    new ArrowWriter(root, children.toArray)\n+  }\n+\n+  private def createFieldWriter(vector: ValueVector): ArrowFieldWriter = {\n+    val field = vector.getField()\n+    ArrowUtils.fromArrowField(field) match {\n+      case BooleanType =>\n+        new BooleanWriter(vector.asInstanceOf[NullableBitVector])\n+      case ByteType =>\n+        new ByteWriter(vector.asInstanceOf[NullableTinyIntVector])\n+      case ShortType =>\n+        new ShortWriter(vector.asInstanceOf[NullableSmallIntVector])\n+      case IntegerType =>\n+        new IntegerWriter(vector.asInstanceOf[NullableIntVector])\n+      case LongType =>\n+        new LongWriter(vector.asInstanceOf[NullableBigIntVector])\n+      case FloatType =>\n+        new FloatWriter(vector.asInstanceOf[NullableFloat4Vector])\n+      case DoubleType =>\n+        new DoubleWriter(vector.asInstanceOf[NullableFloat8Vector])\n+      case DecimalType.Fixed(precision, scale) =>\n+        new DecimalWriter(vector.asInstanceOf[NullableDecimalVector], precision, scale)\n+      case StringType =>\n+        new StringWriter(vector.asInstanceOf[NullableVarCharVector])\n+      case BinaryType =>\n+        new BinaryWriter(vector.asInstanceOf[NullableVarBinaryVector])\n+      case ArrayType(_, _) =>\n+        val v = vector.asInstanceOf[ListVector]\n+        val elementVector = createFieldWriter(v.getDataVector())\n+        new ArrayWriter(v, elementVector)\n+      case StructType(_) =>\n+        val v = vector.asInstanceOf[NullableMapVector]\n+        val children = (0 until v.size()).map { ordinal =>\n+          createFieldWriter(v.getChildByOrdinal(ordinal))\n+        }\n+        new StructWriter(v, children.toArray)\n+    }\n+  }\n+}\n+\n+class ArrowWriter(\n+    val root: VectorSchemaRoot,\n+    fields: Array[ArrowFieldWriter]) {\n+\n+  def schema: StructType = StructType(fields.map { f =>\n+    StructField(f.name, f.dataType, f.nullable)\n+  })\n+\n+  private var count: Int = 0\n+\n+  def write(row: InternalRow): Unit = {\n+    var i = 0\n+    while (i < fields.size) {\n+      fields(i).write(row, i)\n+      i += 1\n+    }\n+    count += 1\n+  }\n+\n+  def finish(): Unit = {\n+    root.setRowCount(count)\n+    fields.foreach(_.finish())\n+  }\n+\n+  def reset(): Unit = {\n+    root.setRowCount(0)\n+    count = 0\n+    fields.foreach(_.reset())\n+  }\n+}\n+\n+private[sql] abstract class ArrowFieldWriter {\n+\n+  def valueVector: ValueVector\n+  def valueMutator: ValueVector.Mutator\n+\n+  def name: String = valueVector.getField().getName()\n+  def dataType: DataType = ArrowUtils.fromArrowField(valueVector.getField())\n+  def nullable: Boolean = valueVector.getField().isNullable()\n+\n+  def setNull(): Unit\n+  def setValue(input: SpecializedGetters, ordinal: Int): Unit\n+  def skip(): Unit"
  }],
  "prId": 18655
}]