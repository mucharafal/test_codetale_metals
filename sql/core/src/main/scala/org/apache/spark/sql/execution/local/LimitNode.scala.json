[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Why do iterators need to know their `output`?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:08:02Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output",
    "line": 28
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Hmm I guess this is useful for `collect` which is nice for debugging.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:20:51Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output",
    "line": 28
  }],
  "prId": 8464
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Is there a need to distinguish `Unary` operators from others?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:08:26Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {",
    "line": 24
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Maybe more generally, if we are never going to do transformations of these iterator trees, do they need to inherit from `TreeNode`?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:10:32Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {",
    "line": 24
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "I think we still need `filter`, or `map` for these iterator trees. @rxin is there anything I misunderstand for the `LocalNode` design?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-28T02:16:13Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {",
    "line": 24
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "It may or may not. We can remove them later though.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-28T05:51:29Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {",
    "line": 24
  }],
  "prId": 8464
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Should this also reset the count?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:08:42Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()",
    "line": 30
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "LocalNode cannot be reused, just like Iterator. So it's not necessary to reset it.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-28T01:31:05Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()",
    "line": 30
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Actually it'd be great to have a reset method in addition to open so we can revisit result of the iterator. We can do that later.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-28T05:52:15Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()",
    "line": 30
  }],
  "prId": 8464
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "`get` should probably not have `()`?\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:23:54Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()\n+\n+  override def close(): Unit = child.close()\n+\n+  override def get(): InternalRow = child.get()"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Eh I prefer to have it, since it can change state (but it should be idempotent). It could also be something expensive.\n\nIf that hurts, we can rename this fetch :)\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:26:13Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()\n+\n+  override def close(): Unit = child.close()\n+\n+  override def get(): InternalRow = child.get()"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Oh, maybe I did not understand the contract here then.  I assumed the work was always done in `next` and this was a cheap way to retrieve it.  When will it be expensive?\n\nAnd if so, I do like `fetch()` better, since I was confused.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:31:22Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()\n+\n+  override def close(): Unit = child.close()\n+\n+  override def get(): InternalRow = child.get()"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Really, i'd prefer if this was cheap and idempotent.\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-27T18:31:49Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()\n+\n+  override def close(): Unit = child.close()\n+\n+  override def get(): InternalRow = child.get()"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Renamed to `fetch`\n",
    "commit": "7dcd502fc7278978fab5a233f4a81fefcca8bf72",
    "createdAt": "2015-08-28T01:57:54Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+\n+case class LimitNode(limit: Int, child: LocalNode) extends UnaryLocalNode {\n+\n+  private[this] var count = 0\n+\n+  override def output: Seq[Attribute] = child.output\n+\n+  override def open(): Unit = child.open()\n+\n+  override def close(): Unit = child.close()\n+\n+  override def get(): InternalRow = child.get()"
  }],
  "prId": 8464
}]