[{
  "comments": [{
    "author": {
      "login": "sameeragarwal"
    },
    "body": "One thing that might be nice to do (perhaps as part of a small followup PR) is to reduce the code duplication between this and the `VectorizedHashMapGenerator` by having these 2 just extend a base class `HashMapGenerator`.\n",
    "commit": "5bd4bca5c20cd1f59436280d641c6c3a17fef290",
    "createdAt": "2016-07-19T00:18:52Z",
    "diffHunk": "@@ -0,0 +1,338 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{AggregateExpression, DeclarativeAggregate}\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * This is a helper class to generate an append-only row-based hash map that can act as a 'cache'\n+ * for extremely fast key-value lookups while evaluating aggregates (and fall back to the\n+ * `BytesToBytesMap` if a given key isn't found). This is 'codegened' in HashAggregate to speed\n+ * up aggregates w/ key.\n+ *\n+ * We also have VectorizedHashMapGenerator, which generates a append-only vectorized hash map.\n+ * We choose one of the two as the 1st level, fast hash map during aggregation.\n+ *\n+ * NOTE: This row-based hash map currently doesn't support nullable keys and falls back to the\n+ * `BytesToBytesMap` to store them.\n+ */\n+class RowBasedHashMapGenerator("
  }],
  "prId": 14174
}]