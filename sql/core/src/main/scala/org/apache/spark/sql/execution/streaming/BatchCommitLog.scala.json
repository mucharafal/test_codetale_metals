[{
  "comments": [{
    "author": {
      "login": "lw-lin"
    },
    "body": "nit: now that https://github.com/apache/spark/pull/17070 has been merged, maybe let's use `parseVersion(lines.next(), BatchCommitLog.VERSION)`",
    "commit": "0c3e20c2e3586ad406796014397a1791c2305fe5",
    "createdAt": "2017-03-19T08:34:32Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.{InputStream, OutputStream}\n+import java.nio.charset.StandardCharsets._\n+\n+import scala.io.{Source => IOSource}\n+\n+import org.apache.spark.sql.SparkSession\n+\n+/**\n+ * Used to write log files that represent batch commit points in structured streaming.\n+ * A commit log file will be written immediately after the successful completion of a\n+ * batch, and before processing the next batch. Here is an execution summary:\n+ * - trigger batch 1\n+ * - obtain batch 1 offsets and write to offset log\n+ * - process batch 1\n+ * - write batch 1 to completion log\n+ * - trigger batch 2\n+ * - obtain bactch 2 offsets and write to offset log\n+ * - process batch 2\n+ * - write batch 2 to completion log\n+ * ....\n+ *\n+ * The current format of the batch completion log is:\n+ * line 1: version\n+ * line 2: metadata (optional json string)\n+ */\n+class BatchCommitLog(sparkSession: SparkSession, path: String)\n+  extends HDFSMetadataLog[String](sparkSession, path) {\n+\n+  override protected def deserialize(in: InputStream): String = {\n+    // called inside a try-finally where the underlying stream is closed in the caller\n+    val lines = IOSource.fromInputStream(in, UTF_8.name()).getLines()\n+    if (!lines.hasNext) {\n+      throw new IllegalStateException(\"Incomplete log file in the offset commit log\")\n+    }\n+    val version = lines.next().trim.toInt\n+    if (BatchCommitLog.VERSION < version) {\n+      throw new IllegalStateException(s\"Incompatible log file version ${version}\")\n+    }"
  }],
  "prId": 17219
}]