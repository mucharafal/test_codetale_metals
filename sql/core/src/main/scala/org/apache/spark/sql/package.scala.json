[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please use proper Scaladoc format here, i.e.:\n\n```\n{{{\n  val ts = Date(\"2014-01-01\")\n}}}\n```\n",
    "commit": "098bb5d6813c972ccf23bb97fca8e789b98bf35c",
    "createdAt": "2014-11-03T08:29:59Z",
    "diffHunk": "@@ -451,4 +451,33 @@ package object sql {\n    * Builder for [[Metadata]]. If there is a key collision, the latter will overwrite the former.\n    */\n   type MetadataBuilder = catalyst.util.MetadataBuilder\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * A Date class which support the standard comparison operators, for\n+   * use in DSL expressions.  Implicit conversions to java.sql.Date\n+   * are provided.  The class intializer accepts a String, e.g.\n+   *\n+   * val ts = Date(\"2014-01-01\")"
  }, {
    "author": {
      "login": "culler"
    },
    "body": "Thanks!\n",
    "commit": "098bb5d6813c972ccf23bb97fca8e789b98bf35c",
    "createdAt": "2014-11-03T14:36:13Z",
    "diffHunk": "@@ -451,4 +451,33 @@ package object sql {\n    * Builder for [[Metadata]]. If there is a key collision, the latter will overwrite the former.\n    */\n   type MetadataBuilder = catalyst.util.MetadataBuilder\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * A Date class which support the standard comparison operators, for\n+   * use in DSL expressions.  Implicit conversions to java.sql.Date\n+   * are provided.  The class intializer accepts a String, e.g.\n+   *\n+   * val ts = Date(\"2014-01-01\")"
  }, {
    "author": {
      "login": "culler"
    },
    "body": "And more thanks for reading the code so carefully and for all of the thoughtful comments and helpful advice.  I am pushing fixes.\n",
    "commit": "098bb5d6813c972ccf23bb97fca8e789b98bf35c",
    "createdAt": "2014-11-03T14:48:39Z",
    "diffHunk": "@@ -451,4 +451,33 @@ package object sql {\n    * Builder for [[Metadata]]. If there is a key collision, the latter will overwrite the former.\n    */\n   type MetadataBuilder = catalyst.util.MetadataBuilder\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * A Date class which support the standard comparison operators, for\n+   * use in DSL expressions.  Implicit conversions to java.sql.Date\n+   * are provided.  The class intializer accepts a String, e.g.\n+   *\n+   * val ts = Date(\"2014-01-01\")"
  }],
  "prId": 3066
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Same as above.\n",
    "commit": "098bb5d6813c972ccf23bb97fca8e789b98bf35c",
    "createdAt": "2014-11-03T08:30:11Z",
    "diffHunk": "@@ -451,4 +451,33 @@ package object sql {\n    * Builder for [[Metadata]]. If there is a key collision, the latter will overwrite the former.\n    */\n   type MetadataBuilder = catalyst.util.MetadataBuilder\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * A Date class which support the standard comparison operators, for\n+   * use in DSL expressions.  Implicit conversions to java.sql.Date\n+   * are provided.  The class intializer accepts a String, e.g.\n+   *\n+   * val ts = Date(\"2014-01-01\")\n+   * \n+   * @group dataType\n+   */\n+  @DeveloperApi\n+  val Date = catalyst.expressions.Date\n+\n+  /**\n+   * :: DeveloperApi ::\n+   *\n+   * A Timestamp class which support the standard comparison\n+   * operators, for use in DSL expressions.  Implicit conversions to\n+   * java.sql.timestamp are provided.  The class intializer accepts a\n+   * String, e.g.\n+   *\n+   * val ts = Timestamp(\"2014-01-01 12:34:56.78\")"
  }],
  "prId": 3066
}]