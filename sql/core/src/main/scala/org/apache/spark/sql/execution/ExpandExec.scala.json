[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": " I might be not 100% sure about your intention though, I feel this is a little confusing because `ExpandExec` consume functions can be chained in gen'd code, right?",
    "commit": "11946e7a62928304560c0602d71b3064789086d6",
    "createdAt": "2017-09-03T08:18:26Z",
    "diffHunk": "@@ -89,6 +89,8 @@ case class ExpandExec(\n     child.asInstanceOf[CodegenSupport].inputRDDs()\n   }\n \n+  override protected def doConsumeInChainOfFunc: Boolean = false"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "The `doConsume` produces something like:\r\n\r\n       |for (int $i = 0; $i < ${projections.length}; $i ++) {\r\n       |  switch ($i) {\r\n       |    ${cases.mkString(\"\\n\").trim}\r\n       |  }\r\n       |  $numOutput.add(1);\r\n       |  ${consume(ctx, outputColumns)}\r\n       |}\r\n\r\nSo the consume logic of its parent node is actually wrapped in a local for-loop. It has the same effect as not chain the next consume.",
    "commit": "11946e7a62928304560c0602d71b3064789086d6",
    "createdAt": "2017-09-04T04:29:00Z",
    "diffHunk": "@@ -89,6 +89,8 @@ case class ExpandExec(\n     child.asInstanceOf[CodegenSupport].inputRDDs()\n   }\n \n+  override protected def doConsumeInChainOfFunc: Boolean = false"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "yea, probably we might need to describe more about exceptional cases we can't use this optimization like `HashAggregateExec` in https://github.com/apache/spark/pull/18931/files#diff-28cb12941b992ff680c277c651b59aa0R204",
    "commit": "11946e7a62928304560c0602d71b3064789086d6",
    "createdAt": "2017-09-04T05:37:04Z",
    "diffHunk": "@@ -89,6 +89,8 @@ case class ExpandExec(\n     child.asInstanceOf[CodegenSupport].inputRDDs()\n   }\n \n+  override protected def doConsumeInChainOfFunc: Boolean = false"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "The good news is, the just merged #19324 simplifies the usage of `continue` in codegen. I'm now testing with it if I can remove this tricky part of `continue`.",
    "commit": "11946e7a62928304560c0602d71b3064789086d6",
    "createdAt": "2017-09-26T00:16:52Z",
    "diffHunk": "@@ -89,6 +89,8 @@ case class ExpandExec(\n     child.asInstanceOf[CodegenSupport].inputRDDs()\n   }\n \n+  override protected def doConsumeInChainOfFunc: Boolean = false"
  }],
  "prId": 18931
}]