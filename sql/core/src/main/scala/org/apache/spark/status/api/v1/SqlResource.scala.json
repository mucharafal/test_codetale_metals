[{
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "Get of a single execution should not return a list.",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-05-06T18:39:47Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.nonEmpty) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "Changed to return single object and Error msg if not found",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-08-09T09:35:35Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.nonEmpty) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "`.map(prepareExecutionData)`",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-05-06T18:41:10Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "done",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-08-09T09:35:56Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "vanzin"
    },
    "body": "You can call `sortBy` on an empty list. But really, you should be asking the store to sort for you. `executionsList` IIRC already returns things sorted in ID order.",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-05-06T18:41:52Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.nonEmpty) {"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "Yes you are right. have modified accordingly ",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-08-09T09:36:14Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.nonEmpty) {"
  }],
  "prId": 24076
}]