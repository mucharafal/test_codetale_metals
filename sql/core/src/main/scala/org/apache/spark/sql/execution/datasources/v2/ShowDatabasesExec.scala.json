[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This shouldn't list the entire space. It should only call `listNamespaces` once. If the current namespace is and empty array then call `listNamespaces()` and if it is anything else, call `listNamespaces(current)`.\r\n\r\nFrom the [SPIP](https://docs.google.com/document/d/1jEcvomPiTc5GtB9F7d2RTVVpMY64Qy7INCA_rFEd9HQ/edit#heading=h.dwrdqt8xe2wu):\r\n\r\n> For a given operation, Spark will call the corresponding catalog method once. For example, SHOW TABLES will return results from listTables(currentNamespace). Spark will not traverse nested namespaces with multiple calls to listNamespaces and listTables.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-08-29T23:59:11Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "> If the current namespace is and empty array then call listNamespaces()\r\n\r\nI just realized that this isn't the same behavior as v1. In v1, `SHOW DATABASES` ignores the current database because databases aren't nested. It always lists all databases (then filters).\r\n\r\nThe proposed behavior of `SHOW NAMESPACES` was to respect the current namespace and list namespaces nested in it.\r\n\r\nThere are a few options to fix this:\r\n* Add `SHOW NAMESPACES` that behaves differently than `SHOW DATABASES`\r\n* Make `SHOW NAMESPACES` list all namespaces recursively, like this PR\r\n* Make `SHOW NAMESPACES` list the namespace above the current. If `current=a.b`, then list `a` and show the results (including `b`).\r\n* Change the behavior of `SHOW DATABASES` to match `SHOW NAMESPACES` and list the current\r\n* Change the behavior of `SHOW DATABASES` to match `SHOW NAMESPACES` and list the current, but match behavior if the current namespace is \"default\"\r\n\r\n@imback82, @brkyvz, @cloud-fan, @mccheah, any opinion here?",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-08-30T00:10:50Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "> Add SHOW NAMESPACES that behaves differently than SHOW DATABASES\r\n\r\nI prefer this.\r\n\r\nAnother idea is: `SHOW NAMESPACES` should list the root namespaces of the current catalog, no matter what the current namespace is.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-08-30T06:59:31Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Another option is to ignore the current namespace entirely. `SHOW NAMESPACES` would list the root, and `SHOW NAMESPACES IN ns1` lists namespaces in `ns1`. The context is always explicit.\r\n\r\nI think I would prefer that option.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-08-30T18:49:51Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "> Another option is to ignore the current namespace entirely. `SHOW NAMESPACES` would list the root, and `SHOW NAMESPACES IN ns1` lists namespaces in `ns1`. The context is always explicit.\r\n\r\nI like this idea. @cloud-fan are you OK with this approach?\r\n",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-08-31T05:12:41Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Yea that's exactly what I mentioned before, with addition of `SHOW NAMESPACES IN ns1`, +1\r\n\r\n> Another idea is: SHOW NAMESPACES should list the root namespaces of the current catalog, no matter what the current namespace is.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-02T06:04:14Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "@cloud-fan @rdblue Thanks for your suggestions.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T03:03:06Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing databases.\n+ */\n+case class ShowDatabasesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = catalog.listNamespaces().flatMap(getNamespaces(catalog, _))"
  }],
  "prId": 25601
}]