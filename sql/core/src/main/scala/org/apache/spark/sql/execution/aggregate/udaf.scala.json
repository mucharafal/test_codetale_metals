[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "private[this]\n",
    "commit": "db365425718c25d50f49f30d940bea55116f9c66",
    "createdAt": "2015-07-27T07:14:38Z",
    "diffHunk": "@@ -15,87 +15,29 @@\n  * limitations under the License.\n  */\n \n-package org.apache.spark.sql.expressions.aggregate\n+package org.apache.spark.sql.execution.aggregate\n \n import org.apache.spark.Logging\n-import org.apache.spark.sql.catalyst.expressions.codegen.GenerateMutableProjection\n+import org.apache.spark.sql.Row\n import org.apache.spark.sql.catalyst.{InternalRow, CatalystTypeConverters}\n-import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateMutableProjection\n+import org.apache.spark.sql.catalyst.expressions.{MutableRow, InterpretedMutableProjection, AttributeReference, Expression}\n import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction2\n-import org.apache.spark.sql.types._\n-import org.apache.spark.sql.Row\n+import org.apache.spark.sql.expressions.{MutableAggregationBuffer, UserDefinedAggregateFunction}\n+import org.apache.spark.sql.types.{Metadata, StructField, StructType, DataType}\n \n /**\n- * The abstract class for implementing user-defined aggregate function.\n+ * A Mutable [[Row]] representing an mutable aggregation buffer.\n  */\n-abstract class UserDefinedAggregateFunction extends Serializable {\n-\n-  /**\n-   * A [[StructType]] represents data types of input arguments of this aggregate function.\n-   * For example, if a [[UserDefinedAggregateFunction]] expects two input arguments\n-   * with type of [[DoubleType]] and [[LongType]], the returned [[StructType]] will look like\n-   *\n-   * ```\n-   *   StructType(Seq(StructField(\"doubleInput\", DoubleType), StructField(\"longInput\", LongType)))\n-   * ```\n-   *\n-   * The name of a field of this [[StructType]] is only used to identify the corresponding\n-   * input argument. Users can choose names to identify the input arguments.\n-   */\n-  def inputSchema: StructType\n-\n-  /**\n-   * A [[StructType]] represents data types of values in the aggregation buffer.\n-   * For example, if a [[UserDefinedAggregateFunction]]'s buffer has two values\n-   * (i.e. two intermediate values) with type of [[DoubleType]] and [[LongType]],\n-   * the returned [[StructType]] will look like\n-   *\n-   * ```\n-   *   StructType(Seq(StructField(\"doubleInput\", DoubleType), StructField(\"longInput\", LongType)))\n-   * ```\n-   *\n-   * The name of a field of this [[StructType]] is only used to identify the corresponding\n-   * buffer value. Users can choose names to identify the input arguments.\n-   */\n-  def bufferSchema: StructType\n-\n-  /**\n-   * The [[DataType]] of the returned value of this [[UserDefinedAggregateFunction]].\n-   */\n-  def returnDataType: DataType\n-\n-  /** Indicates if this function is deterministic. */\n-  def deterministic: Boolean\n-\n-  /**\n-   *  Initializes the given aggregation buffer. Initial values set by this method should satisfy\n-   *  the condition that when merging two buffers with initial values, the new buffer should\n-   *  still store initial values.\n-   */\n-  def initialize(buffer: MutableAggregationBuffer): Unit\n-\n-  /** Updates the given aggregation buffer `buffer` with new input data from `input`. */\n-  def update(buffer: MutableAggregationBuffer, input: Row): Unit\n-\n-  /** Merges two aggregation buffers and stores the updated buffer values back in `buffer1`. */\n-  def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit\n-\n-  /**\n-   * Calculates the final result of this [[UserDefinedAggregateFunction]] based on the given\n-   * aggregation buffer.\n-   */\n-  def evaluate(buffer: Row): Any\n-}\n-\n-private[sql] abstract class AggregationBuffer(\n+private[sql] class MutableAggregationBufferImpl (\n+    schema: StructType,\n     toCatalystConverters: Array[Any => Any],\n     toScalaConverters: Array[Any => Any],\n-    bufferOffset: Int)\n-  extends Row {\n-\n-  override def length: Int = toCatalystConverters.length\n+    bufferOffset: Int,\n+    var underlyingBuffer: MutableRow)\n+  extends MutableAggregationBuffer {\n \n-  protected val offsets: Array[Int] = {\n+  private val offsets: Array[Int] = {"
  }],
  "prId": 7687
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "private[this]\n",
    "commit": "db365425718c25d50f49f30d940bea55116f9c66",
    "createdAt": "2015-07-27T07:14:53Z",
    "diffHunk": "@@ -146,13 +78,25 @@ class MutableAggregationBuffer private[sql] (\n /**\n  * A [[Row]] representing an immutable aggregation buffer.\n  */\n-class InputAggregationBuffer private[sql] (\n+private[sql] class InputAggregationBuffer private[sql] (\n     schema: StructType,\n     toCatalystConverters: Array[Any => Any],\n     toScalaConverters: Array[Any => Any],\n     bufferOffset: Int,\n     var underlyingInputBuffer: InternalRow)\n-  extends AggregationBuffer(toCatalystConverters, toScalaConverters, bufferOffset) {\n+  extends Row {\n+\n+  private val offsets: Array[Int] = {"
  }],
  "prId": 7687
}]