[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "use `Encoders.scalaDouble`?\n",
    "commit": "b759f0a24fa689cb74b42b4102ee9023d770da7e",
    "createdAt": "2016-04-08T08:17:55Z",
    "diffHunk": "@@ -27,28 +27,20 @@ import org.apache.spark.sql.expressions.Aggregator\n ////////////////////////////////////////////////////////////////////////////////////////////////////\n \n \n-class TypedSum[IN, OUT : Numeric](f: IN => OUT) extends Aggregator[IN, OUT, OUT] {\n-  val numeric = implicitly[Numeric[OUT]]\n-  override def zero: OUT = numeric.zero\n-  override def reduce(b: OUT, a: IN): OUT = numeric.plus(b, f(a))\n-  override def merge(b1: OUT, b2: OUT): OUT = numeric.plus(b1, b2)\n-  override def finish(reduction: OUT): OUT = reduction\n-\n-  // TODO(ekl) java api support once this is exposed in scala\n-}\n-\n-\n class TypedSumDouble[IN](f: IN => Double) extends Aggregator[IN, Double, Double] {\n   override def zero: Double = 0.0\n   override def reduce(b: Double, a: IN): Double = b + f(a)\n   override def merge(b1: Double, b2: Double): Double = b1 + b2\n   override def finish(reduction: Double): Double = reduction\n \n+  override def bufferEncoder: Encoder[Double] = ExpressionEncoder[Double]()",
    "line": 30
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "this is internal, so it is not that bad to use the internal api.\n",
    "commit": "b759f0a24fa689cb74b42b4102ee9023d770da7e",
    "createdAt": "2016-04-09T06:53:06Z",
    "diffHunk": "@@ -27,28 +27,20 @@ import org.apache.spark.sql.expressions.Aggregator\n ////////////////////////////////////////////////////////////////////////////////////////////////////\n \n \n-class TypedSum[IN, OUT : Numeric](f: IN => OUT) extends Aggregator[IN, OUT, OUT] {\n-  val numeric = implicitly[Numeric[OUT]]\n-  override def zero: OUT = numeric.zero\n-  override def reduce(b: OUT, a: IN): OUT = numeric.plus(b, f(a))\n-  override def merge(b1: OUT, b2: OUT): OUT = numeric.plus(b1, b2)\n-  override def finish(reduction: OUT): OUT = reduction\n-\n-  // TODO(ekl) java api support once this is exposed in scala\n-}\n-\n-\n class TypedSumDouble[IN](f: IN => Double) extends Aggregator[IN, Double, Double] {\n   override def zero: Double = 0.0\n   override def reduce(b: Double, a: IN): Double = b + f(a)\n   override def merge(b1: Double, b2: Double): Double = b1 + b2\n   override def finish(reduction: Double): Double = reduction\n \n+  override def bufferEncoder: Encoder[Double] = ExpressionEncoder[Double]()",
    "line": 30
  }],
  "prId": 12231
}]