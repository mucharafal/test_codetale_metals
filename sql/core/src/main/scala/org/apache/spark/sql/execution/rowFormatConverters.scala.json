[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This change looks good to me; thanks for suggesting this.\n",
    "commit": "6294b1e3de357c94646c323eba2d4bde80971c45",
    "createdAt": "2015-07-21T21:24:45Z",
    "diffHunk": "@@ -29,6 +29,9 @@ import org.apache.spark.sql.catalyst.rules.Rule\n  */\n @DeveloperApi\n case class ConvertToUnsafe(child: SparkPlan) extends UnaryNode {\n+\n+  require(UnsafeProjection.canSupport(child.schema), s\"Cannot convert ${child.schema} to Unsafe\")",
    "line": 5
  }],
  "prId": 7480
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "ping @JoshRosen \n",
    "commit": "6294b1e3de357c94646c323eba2d4bde80971c45",
    "createdAt": "2015-07-21T21:45:00Z",
    "diffHunk": "@@ -93,11 +96,19 @@ private[sql] object EnsureRowFormats extends Rule[SparkPlan] {\n       }\n     case operator: SparkPlan if handlesBothSafeAndUnsafeRows(operator) =>\n       if (operator.children.map(_.outputsUnsafeRows).toSet.size != 1) {\n-        // If this operator's children produce both unsafe and safe rows, then convert everything\n-        // to unsafe rows\n-        operator.withNewChildren {\n-          operator.children.map {\n-            c => if (!c.outputsUnsafeRows) ConvertToUnsafe(c) else c\n+        // If this operator's children produce both unsafe and safe rows,\n+        // convert everything unsafe rows if all the schema of them are support by UnsafeRow\n+        if (operator.children.forall(c => UnsafeProjection.canSupport(c.schema))) {",
    "line": 21
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "This change looks good to me.\n",
    "commit": "6294b1e3de357c94646c323eba2d4bde80971c45",
    "createdAt": "2015-07-21T21:46:33Z",
    "diffHunk": "@@ -93,11 +96,19 @@ private[sql] object EnsureRowFormats extends Rule[SparkPlan] {\n       }\n     case operator: SparkPlan if handlesBothSafeAndUnsafeRows(operator) =>\n       if (operator.children.map(_.outputsUnsafeRows).toSet.size != 1) {\n-        // If this operator's children produce both unsafe and safe rows, then convert everything\n-        // to unsafe rows\n-        operator.withNewChildren {\n-          operator.children.map {\n-            c => if (!c.outputsUnsafeRows) ConvertToUnsafe(c) else c\n+        // If this operator's children produce both unsafe and safe rows,\n+        // convert everything unsafe rows if all the schema of them are support by UnsafeRow\n+        if (operator.children.forall(c => UnsafeProjection.canSupport(c.schema))) {",
    "line": 21
  }],
  "prId": 7480
}]