[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `Broadcast query stage`",
    "commit": "2e087785d754dfabc84b333fffcf98c39d2fd497",
    "createdAt": "2019-03-15T08:50:30Z",
    "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import scala.concurrent.Future\n+\n+import org.apache.spark.MapOutputStatistics\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical.Partitioning\n+import org.apache.spark.sql.execution._\n+import org.apache.spark.sql.execution.exchange._\n+\n+/**\n+ * A query stage is an independent subgraph of the query plan. Query stage materializes its output\n+ * before proceeding with further operators of the query plan. The data statistics of the\n+ * materialized output can be used to optimize subsequent query stages.\n+ *\n+ * There are 2 kinds of query stages:\n+ *   1. Shuffle query stage. This stage materializes its output to shuffle files, and Spark launches\n+ *      another job to execute the further operators.\n+ *   2. Broadcast stage. This stage materializes its output to an array in driver JVM. Spark"
  }],
  "prId": 20303
}]