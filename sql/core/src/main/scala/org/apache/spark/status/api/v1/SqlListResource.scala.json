[{
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "The spaces should be 4 here. See https://github.com/databricks/scala-style-guide",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T08:38:48Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.SQLAppStatusStore\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+      var executions = List[ExecutionData]()\n+\n+      sqlStore.executionsList().foreach { exec =>\n+        var running = Seq[Int]()\n+        var completed = Seq[Int]()\n+        var failed = Seq[Int]()\n+\n+        exec.jobs.map { job => job match {\n+          case (id, status) if status == JobExecutionStatus.RUNNING =>\n+            running = running :+ id\n+          case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+            completed = completed :+ id\n+          case (id, status) if status == JobExecutionStatus.FAILED =>\n+            failed = failed :+ id\n+          }\n+        }\n+\n+        val status = if (exec.jobs.size == completed.size) {\n+          \"COMPLETED\"\n+        } else if (failed.length > 0) {\n+          \"FAILED\"\n+        } else {\n+          \"RUNNING\"\n+        }\n+\n+        val duration = UIUtils.formatDuration(\n+          exec.completionTime.getOrElse(new Date()).getTime - exec.submissionTime)\n+        executions = executions.+:(new ExecutionData(exec.executionId,\n+          status, exec.description, UIUtils.formatDate(exec.submissionTime),\n+          duration, running, completed, failed))\n+      }\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+}\n+\n+class ExecutionData (val id : Long,\n+                     val status: String,"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "Done",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T12:36:02Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.SQLAppStatusStore\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+      var executions = List[ExecutionData]()\n+\n+      sqlStore.executionsList().foreach { exec =>\n+        var running = Seq[Int]()\n+        var completed = Seq[Int]()\n+        var failed = Seq[Int]()\n+\n+        exec.jobs.map { job => job match {\n+          case (id, status) if status == JobExecutionStatus.RUNNING =>\n+            running = running :+ id\n+          case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+            completed = completed :+ id\n+          case (id, status) if status == JobExecutionStatus.FAILED =>\n+            failed = failed :+ id\n+          }\n+        }\n+\n+        val status = if (exec.jobs.size == completed.size) {\n+          \"COMPLETED\"\n+        } else if (failed.length > 0) {\n+          \"FAILED\"\n+        } else {\n+          \"RUNNING\"\n+        }\n+\n+        val duration = UIUtils.formatDuration(\n+          exec.completionTime.getOrElse(new Date()).getTime - exec.submissionTime)\n+        executions = executions.+:(new ExecutionData(exec.executionId,\n+          status, exec.description, UIUtils.formatDate(exec.submissionTime),\n+          duration, running, completed, failed))\n+      }\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+}\n+\n+class ExecutionData (val id : Long,\n+                     val status: String,"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "Nit: we can make it \r\n```\r\nval executions =  sqlStore.executionsList().map {...\r\n```",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T09:06:47Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.SQLAppStatusStore\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+      var executions = List[ExecutionData]()\n+\n+      sqlStore.executionsList().foreach { exec =>"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "agreed. Updated",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T12:35:42Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.SQLAppStatusStore\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+      var executions = List[ExecutionData]()\n+\n+      sqlStore.executionsList().foreach { exec =>"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "move the class to a single file `api.scala`",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T15:10:03Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      sqlStore.executionsList()\n+        .filter(execution => execution.executionId == execId)\n+        .map(exec => prepareExecutionData(exec))\n+    }\n+  }\n+\n+  def prepareExecutionData(exec: SQLExecutionUIData): ExecutionData = {\n+    var running = Seq[Int]()\n+    var completed = Seq[Int]()\n+    var failed = Seq[Int]()\n+\n+    exec.jobs.map { job =>\n+      job match {\n+        case (id, status) if status == JobExecutionStatus.RUNNING =>\n+          running = running :+ id\n+        case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+          completed = completed :+ id\n+        case (id, status) if status == JobExecutionStatus.FAILED =>\n+          failed = failed :+ id\n+      }\n+    }\n+\n+    val status = if (exec.jobs.size == completed.size) {\n+      \"COMPLETED\"\n+    } else if (failed.length > 0) {\n+      \"FAILED\"\n+    } else {\n+      \"RUNNING\"\n+    }\n+\n+    val duration = UIUtils.formatDuration(\n+      exec.completionTime.getOrElse(new Date()).getTime - exec.submissionTime)\n+    new ExecutionData(exec.executionId,\n+      status, exec.description, UIUtils.formatDate(exec.submissionTime),\n+      duration, running, completed, failed)\n+  }\n+}\n+\n+class ExecutionData (val id : Long,"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "Done",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T16:36:42Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      sqlStore.executionsList()\n+        .filter(execution => execution.executionId == execId)\n+        .map(exec => prepareExecutionData(exec))\n+    }\n+  }\n+\n+  def prepareExecutionData(exec: SQLExecutionUIData): ExecutionData = {\n+    var running = Seq[Int]()\n+    var completed = Seq[Int]()\n+    var failed = Seq[Int]()\n+\n+    exec.jobs.map { job =>\n+      job match {\n+        case (id, status) if status == JobExecutionStatus.RUNNING =>\n+          running = running :+ id\n+        case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+          completed = completed :+ id\n+        case (id, status) if status == JobExecutionStatus.FAILED =>\n+          failed = failed :+ id\n+      }\n+    }\n+\n+    val status = if (exec.jobs.size == completed.size) {\n+      \"COMPLETED\"\n+    } else if (failed.length > 0) {\n+      \"FAILED\"\n+    } else {\n+      \"RUNNING\"\n+    }\n+\n+    val duration = UIUtils.formatDuration(\n+      exec.completionTime.getOrElse(new Date()).getTime - exec.submissionTime)\n+    new ExecutionData(exec.executionId,\n+      status, exec.description, UIUtils.formatDate(exec.submissionTime),\n+      duration, running, completed, failed)\n+  }\n+}\n+\n+class ExecutionData (val id : Long,"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "Consider renaming the file name to `SqlResource`?",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T15:12:45Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "Renamed",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T16:36:52Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "nit: `executions.nonEmpty`",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T15:14:10Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "updated",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T16:37:00Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {"
  }],
  "prId": 24076
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "nit: `failed.nonEmpty`",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T15:14:37Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      sqlStore.executionsList()\n+        .filter(execution => execution.executionId == execId)\n+        .map(exec => prepareExecutionData(exec))\n+    }\n+  }\n+\n+  def prepareExecutionData(exec: SQLExecutionUIData): ExecutionData = {\n+    var running = Seq[Int]()\n+    var completed = Seq[Int]()\n+    var failed = Seq[Int]()\n+\n+    exec.jobs.map { job =>\n+      job match {\n+        case (id, status) if status == JobExecutionStatus.RUNNING =>\n+          running = running :+ id\n+        case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+          completed = completed :+ id\n+        case (id, status) if status == JobExecutionStatus.FAILED =>\n+          failed = failed :+ id\n+      }\n+    }\n+\n+    val status = if (exec.jobs.size == completed.size) {\n+      \"COMPLETED\"\n+    } else if (failed.length > 0) {"
  }, {
    "author": {
      "login": "ajithme"
    },
    "body": "updated",
    "commit": "7b17c254f481902e318ddce02509c7913f6673fb",
    "createdAt": "2019-03-13T16:37:11Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.status.api.v1\n+\n+import java.util.Date\n+import javax.ws.rs.{GET, Path, PathParam, Produces}\n+import javax.ws.rs.core.MediaType\n+\n+import org.apache.spark.JobExecutionStatus\n+import org.apache.spark.sql.execution.ui.{SQLAppStatusStore, SQLExecutionUIData}\n+import org.apache.spark.ui.UIUtils\n+\n+@Produces(Array(MediaType.APPLICATION_JSON))\n+private[v1] class SqlListResource extends BaseAppResource {\n+\n+  @GET\n+  def sqlList(): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      var executions = sqlStore.executionsList()\n+        .map(exec => prepareExecutionData(exec))\n+      if (executions.size > 0) {\n+        executions = executions.sortBy(x => x.id)\n+      }\n+      executions\n+    }\n+  }\n+\n+  @GET\n+  @Path(\"{executionId:\\\\d+}\")\n+  def sql(@PathParam(\"executionId\") execId: Long): Seq[ExecutionData] = {\n+    withUI { ui =>\n+      val sqlStore = new SQLAppStatusStore(ui.store.store)\n+\n+      sqlStore.executionsList()\n+        .filter(execution => execution.executionId == execId)\n+        .map(exec => prepareExecutionData(exec))\n+    }\n+  }\n+\n+  def prepareExecutionData(exec: SQLExecutionUIData): ExecutionData = {\n+    var running = Seq[Int]()\n+    var completed = Seq[Int]()\n+    var failed = Seq[Int]()\n+\n+    exec.jobs.map { job =>\n+      job match {\n+        case (id, status) if status == JobExecutionStatus.RUNNING =>\n+          running = running :+ id\n+        case (id, status) if status == JobExecutionStatus.SUCCEEDED =>\n+          completed = completed :+ id\n+        case (id, status) if status == JobExecutionStatus.FAILED =>\n+          failed = failed :+ id\n+      }\n+    }\n+\n+    val status = if (exec.jobs.size == completed.size) {\n+      \"COMPLETED\"\n+    } else if (failed.length > 0) {"
  }],
  "prId": 24076
}]