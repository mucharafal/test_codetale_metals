[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "does it need to be public?",
    "commit": "54b3b5f1c973638d4c32d2b297c8b7c9ff72f28a",
    "createdAt": "2018-05-22T11:34:32Z",
    "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce.TaskAttemptContext\n+\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec\n+import org.apache.spark.sql.catalyst.catalog.ExternalCatalogUtils\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * Abstract class for writing out data in a single Spark task.\n+ * Exceptions thrown by the implementation of this trait will automatically trigger task aborts.\n+ */\n+abstract class FileFormatDataWriter(\n+    description: WriteJobDescription,\n+    taskAttemptContext: TaskAttemptContext,\n+    committer: FileCommitProtocol) {\n+  /**\n+   * Max number of files a single task writes out due to file size. In most cases the number of\n+   * files written should be very small. This is just a safe guard to protect some really bad\n+   * settings, e.g. maxRecordsPerFile = 1.\n+   */\n+  val MAX_FILE_COUNTER = 1000 * 1000"
  }],
  "prId": 21381
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is not used in the abstract class, please move it to implementations.",
    "commit": "54b3b5f1c973638d4c32d2b297c8b7c9ff72f28a",
    "createdAt": "2018-05-22T11:43:54Z",
    "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce.TaskAttemptContext\n+\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec\n+import org.apache.spark.sql.catalyst.catalog.ExternalCatalogUtils\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * Abstract class for writing out data in a single Spark task.\n+ * Exceptions thrown by the implementation of this trait will automatically trigger task aborts.\n+ */\n+abstract class FileFormatDataWriter(\n+    description: WriteJobDescription,\n+    taskAttemptContext: TaskAttemptContext,\n+    committer: FileCommitProtocol) {\n+  /**\n+   * Max number of files a single task writes out due to file size. In most cases the number of\n+   * files written should be very small. This is just a safe guard to protect some really bad\n+   * settings, e.g. maxRecordsPerFile = 1.\n+   */\n+  val MAX_FILE_COUNTER = 1000 * 1000\n+  protected val updatedPartitions = mutable.Set[String]()\n+  protected var currentWriter: OutputWriter = _\n+  protected var fileCounter: Int = _"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "or we could move the related logic to this abtract class.",
    "commit": "54b3b5f1c973638d4c32d2b297c8b7c9ff72f28a",
    "createdAt": "2018-05-22T11:50:02Z",
    "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce.TaskAttemptContext\n+\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec\n+import org.apache.spark.sql.catalyst.catalog.ExternalCatalogUtils\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * Abstract class for writing out data in a single Spark task.\n+ * Exceptions thrown by the implementation of this trait will automatically trigger task aborts.\n+ */\n+abstract class FileFormatDataWriter(\n+    description: WriteJobDescription,\n+    taskAttemptContext: TaskAttemptContext,\n+    committer: FileCommitProtocol) {\n+  /**\n+   * Max number of files a single task writes out due to file size. In most cases the number of\n+   * files written should be very small. This is just a safe guard to protect some really bad\n+   * settings, e.g. maxRecordsPerFile = 1.\n+   */\n+  val MAX_FILE_COUNTER = 1000 * 1000\n+  protected val updatedPartitions = mutable.Set[String]()\n+  protected var currentWriter: OutputWriter = _\n+  protected var fileCounter: Int = _"
  }],
  "prId": 21381
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "54b3b5f1c973638d4c32d2b297c8b7c9ff72f28a",
    "createdAt": "2018-05-22T11:44:18Z",
    "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce.TaskAttemptContext\n+\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec\n+import org.apache.spark.sql.catalyst.catalog.ExternalCatalogUtils\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * Abstract class for writing out data in a single Spark task.\n+ * Exceptions thrown by the implementation of this trait will automatically trigger task aborts.\n+ */\n+abstract class FileFormatDataWriter(\n+    description: WriteJobDescription,\n+    taskAttemptContext: TaskAttemptContext,\n+    committer: FileCommitProtocol) {\n+  /**\n+   * Max number of files a single task writes out due to file size. In most cases the number of\n+   * files written should be very small. This is just a safe guard to protect some really bad\n+   * settings, e.g. maxRecordsPerFile = 1.\n+   */\n+  val MAX_FILE_COUNTER = 1000 * 1000\n+  protected val updatedPartitions = mutable.Set[String]()\n+  protected var currentWriter: OutputWriter = _\n+  protected var fileCounter: Int = _\n+  protected var recordsInFile: Long = _"
  }],
  "prId": 21381
}]