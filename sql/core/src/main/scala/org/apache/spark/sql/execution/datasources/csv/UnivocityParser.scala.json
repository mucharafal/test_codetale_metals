[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@MaxGekk is this change related?",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T01:55:13Z",
    "diffHunk": "@@ -196,7 +198,7 @@ class UnivocityParser(\n       }\n       def getPartialResult(): Option[InternalRow] = {\n         try {\n-          Some(convert(checkedTokens))\n+          convert(checkedTokens).headOption",
    "line": 21
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Yes, it is. I changed returned type of the _convert()_ method from InternalRow to Seq[InternalRow] to catch the cases when uniVocity parser returns nulls (comments and empty lines). As a consequence of that, I have to change this function too because it returns Option which is required by the BadRecordException exception. It is safe because Seq can be either empty or contain only one element. And I though it is better to modify body of _getPartialResult()_ than places where BadRecordException is handled.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T06:48:00Z",
    "diffHunk": "@@ -196,7 +198,7 @@ class UnivocityParser(\n       }\n       def getPartialResult(): Option[InternalRow] = {\n         try {\n-          Some(convert(checkedTokens))\n+          convert(checkedTokens).headOption",
    "line": 21
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "@MaxGekk  Maybe add this in PR description ",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T09:05:05Z",
    "diffHunk": "@@ -196,7 +198,7 @@ class UnivocityParser(\n       }\n       def getPartialResult(): Option[InternalRow] = {\n         try {\n-          Some(convert(checkedTokens))\n+          convert(checkedTokens).headOption",
    "line": 21
  }],
  "prId": 21380
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I feel sure I put this because Univocity has an issue about this before IIRC. Wouldn't we better just keep this just in case? I think we already do such things in Spark side redundantly to make sure in few places.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T02:00:14Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "I also think we have no harm to put this. btw, univocity still has the issue in v2.6.3?",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T05:24:13Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Seems fixed as the tests pass now. I hit a test failure _if I remember this correctly_.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T05:31:46Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Probably, you observed issues in old versions of uniVocity parser as @maropu wrote above. I would propose to remove the filtering till we face to the cases when uniVocity's filter doesn't work as it is expected. So, we would submit an issue for uniVocity and revert the changes back.\r\n\r\n> I think we already do such things in Spark side redundantly to make sure in few places.\r\n\r\nI looked at another places where we do the same but this is only the place where we do filtering directly before uniVocity. ",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T07:00:57Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I mean, for example, we do both Parquet's record-level filter and Spark's filter although they are pushed down.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T07:48:59Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Also, IMO, even if these kinds of bugs fixed in libraries, we keep workaround for a while in most cases, e.g., https://issues.apache.org/jira/browse/SPARK-24109",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T08:41:58Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Guys, this is speculation about the bug, it seems to me. If the code was added to fix a bug in previous version fo uniVocity parser, where is the tests for that? For now, we filter CSV rows additionally to uniVocity only because we don't trust to the library as far as I understand @HyukjinKwon . Following to the logic, we should duplicate another functionality of uniVocity in CSV datasource. That looks pretty crazy. ",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T08:55:48Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@MaxGekk, It doesn't always mean that we have tests. Because it was there from the first place and I tried to remove it, then the tests were broken. I expected to be broken again but seems passed now. So, I'm just guessing that it's fixed.\r\n\r\nUsually we trust but we should be careful if there were some issues found. I don't think we should make this case special. I am not seeing meaningful improvement either.\r\n\r\nOne nit is, BTW, the purpose of `ignoreLeadingWhiteSpaceInRead` and `ignoreTrailingWhiteSpaceInRead` are basically for trimming the whitespaces in the values not for skipping empty lines.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T09:10:06Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "We need strong evidence/test cases to make sure the current uniVocity filtering works.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T09:12:26Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "I wrote a test in the PR: https://github.com/apache/spark/pull/21394 which is passed on the current implementation but fails on this PR. After this PR, lines with multiple whitespaces are not ignored. To ignore such lines, need to set `ignoreLeadingWhiteSpace` to `true`. See https://github.com/uniVocity/univocity-parsers/blob/v2.6.3/src/main/java/com/univocity/parsers/csv/CsvParser.java#L106-L110",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T12:22:18Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Oh, so now it actually fixes an issue, right? will take a look soon. BTW, I think you can fold the changes in #21394 into here.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T17:41:09Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Actually the test from #21394 shows the case when this PR has different behavior: empty lines consist of multiple whitespaces + `ignoreLeadingWhiteSpace` is `false` (which is by default) produces `null`s. UniVocity parser can ignore lines with multiple whitespaces only when `ignoreLeadingWhiteSpace` (or `ignoreLeadingWhiteSpace`) is set to `true`. \r\n\r\nSo, there is no combination of CSV options that allow to have default behavior of current implementation. I would like to propose to close this PR and add the test from #21394 to CSVSuite to be sure we will not break the behavior described above.",
    "commit": "36522689f9579ec05e7d69d1d7bd1f507f6bdbc0",
    "createdAt": "2018-05-22T19:24:37Z",
    "diffHunk": "@@ -300,14 +302,11 @@ private[csv] object UnivocityParser {\n       lines\n     }\n \n-    val filteredLines: Iterator[String] =\n-      CSVUtils.filterCommentAndEmpty(linesWithoutHeader, options)",
    "line": 48
  }],
  "prId": 21380
}]