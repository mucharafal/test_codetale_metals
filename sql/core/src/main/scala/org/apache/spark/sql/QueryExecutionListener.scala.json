[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "This should be thread-safe.\n",
    "commit": "9943feaf4ce288614e40a8502626900fb3cf3a4b",
    "createdAt": "2015-10-13T17:25:05Z",
    "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+\n+\n+/**\n+ * The interface of query execution listener that can be used to analyze execution metrics.\n+ *\n+ * Note that implementations should guarantee thread-safety as they will be used in a non\n+ * thread-safe way.\n+ */\n+trait QueryExecutionListener {\n+  def onSuccess(funcName: String, qe: QueryExecution, duration: Long)"
  }],
  "prId": 9078
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Could you add some java doc for all the public interface?\n",
    "commit": "9943feaf4ce288614e40a8502626900fb3cf3a4b",
    "createdAt": "2015-10-13T17:26:55Z",
    "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock\n+import scala.collection.mutable.ListBuffer\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+\n+\n+/**\n+ * The interface of query execution listener that can be used to analyze execution metrics.\n+ *\n+ * Note that implementations should guarantee thread-safety as they will be used in a non\n+ * thread-safe way.\n+ */\n+trait QueryExecutionListener {\n+  def onSuccess(funcName: String, qe: QueryExecution, duration: Long)\n+\n+  def onFailure(funcName: String, qe: QueryExecution, exception: Exception)"
  }],
  "prId": 9078
}]