[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Should this be in `streaming`?",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T21:45:03Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I had so in the prototype, but then State is used in both batch and streaming. Hence I shifted it from `execution.streaming` to `execution`.",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T22:27:40Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Yeah, I'd probably still go with streaming since thats its primary use.",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T22:29:28Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "This is internal so thats fine. However, should KeyedState trait be in the `o.a.s.sql` or `o.a.s.sql.streaming`?",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T23:27:49Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Good question.   I would go with streaming to keep the top level clean.",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-01T00:06:44Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution"
  }],
  "prId": 16758
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "\"been\"",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T21:45:37Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {\n+  private var value: S = optionalValue.getOrElse(null.asInstanceOf[S])\n+  private var defined: Boolean = optionalValue.isDefined\n+  private var updated: Boolean = false  // whether value has been updated (but not removed)\n+  private var removed: Boolean = false  // whether value has eben removed"
  }],
  "prId": 16758
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I would consider using `null` here to avoid extra allocations in the critical path.",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T21:46:10Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "I believe null can be a valid state value, so just taking null does not disambiguate whether state exists and is null v/s state does not exist. You would have to do `class StateImpl[S](value: S, isDefined: Boolean)`.  But this does not avoid object wrapping because, the Option wrapping is currently done by the StateStore implementation. We will have to change StateStore interfaces to avoid that. So I think its premature to do this in this PR. ",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T22:44:28Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Wait, I do not think that we should ever return `Some(null)`.  In general I would expect `null` to mean there is no state, similar to gets in a java hashtable.",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T22:47:31Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "So will `KeyedState.update(null)` be equivalent to `remove()`?",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T23:29:34Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Yes, I think that makes sense (since a `get()` should later return `null`).",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-02-01T00:07:34Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {"
  }],
  "prId": 16758
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "no `()`",
    "commit": "f3d12311229a958fee5fb3cfcf4f6b33035fc87f",
    "createdAt": "2017-01-31T21:46:28Z",
    "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.State\n+\n+/** Internal implementation of the [[State]] interface */\n+private[sql] class StateImpl[S](optionalValue: Option[S]) extends State[S] {\n+  private var value: S = optionalValue.getOrElse(null.asInstanceOf[S])\n+  private var defined: Boolean = optionalValue.isDefined\n+  private var updated: Boolean = false  // whether value has been updated (but not removed)\n+  private var removed: Boolean = false  // whether value has eben removed\n+\n+  // ========= Public API =========\n+  override def exists: Boolean = {\n+    defined\n+  }\n+\n+  override def get(): S = {"
  }],
  "prId": 16758
}]