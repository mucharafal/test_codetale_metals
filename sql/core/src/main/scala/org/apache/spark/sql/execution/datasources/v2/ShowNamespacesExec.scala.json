[{
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "@rdblue @cloud-fan this is for handling the case `SHOW NAMESPACES IN catalogname`. In this case, should we list the root namespaces or call `listNamespaces` with an empty array?",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T02:50:25Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>\n+        if (ns.nonEmpty) {",
    "line": 42
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "> should we list the root namespaces or call listNamespaces with an empty array?\r\n\r\nI think these 2 are the same?",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T05:59:05Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>\n+        if (ns.nonEmpty) {",
    "line": 42
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "From the SPIP, I see the following:\r\n```\r\nSHOW NAMESPACES IN foo\r\n    Returns the result of\r\nsparkSession.catalog(\"foo\").listNamespaces().\r\n```\r\nSince the behavior of `listNamespaces(Array())` depends on the implementation, I think it's safe to check and call `listNamespaces()`. @rdblue What do you think?",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T16:26:56Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>\n+        if (ns.nonEmpty) {",
    "line": 42
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Calling `listNamespaces()` sounds good to me.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T17:27:42Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>\n+        if (ns.nonEmpty) {",
    "line": 42
  }],
  "prId": 25601
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Nit: missing whitespace.",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T21:50:05Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>"
  }],
  "prId": 25601
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Nit: else should be on the previous line: `} else {`",
    "commit": "9a55a03acf84fe67595817c8fef409a9e4912a51",
    "createdAt": "2019-09-04T21:50:41Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.CatalogV2Implicits.NamespaceHelper\n+import org.apache.spark.sql.catalog.v2.SupportsNamespaces\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, GenericRowWithSchema}\n+import org.apache.spark.sql.catalyst.util.StringUtils\n+import org.apache.spark.sql.execution.LeafExecNode\n+\n+/**\n+ * Physical plan node for showing namespaces.\n+ */\n+case class ShowNamespacesExec(\n+    output: Seq[Attribute],\n+    catalog: SupportsNamespaces,\n+    namespace: Option[Seq[String]],\n+    pattern: Option[String])\n+    extends LeafExecNode {\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    val namespaces = namespace.map{ ns =>\n+        if (ns.nonEmpty) {\n+          catalog.listNamespaces(ns.toArray)\n+        }\n+        else {"
  }],
  "prId": 25601
}]