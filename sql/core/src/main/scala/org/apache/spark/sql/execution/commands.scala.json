[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Lets add some Scala doc:\n\n``` scala\n/**\n * A logical command that is executed for its side-effects.  `RunnableCommand`s are \n * wrapped in `ExecutedCommand` during execution.\n */\n```\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T20:19:39Z",
    "diffHunk": "@@ -26,27 +26,6 @@ import org.apache.spark.sql.catalyst.plans.logical\n import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n import org.apache.spark.sql.{SQLConf, SQLContext}\n \n-// TODO: DELETE ME...\n-trait Command {\n-  this: SparkPlan =>\n-\n-  /**\n-   * A concrete command should override this lazy field to wrap up any side effects caused by the\n-   * command or any other computation that should be evaluated exactly once. The value of this field\n-   * can be used as the contents of the corresponding RDD generated from the physical plan of this\n-   * command.\n-   *\n-   * The `execute()` method of all the physical command classes should reference `sideEffectResult`\n-   * so that the command can be executed eagerly right after the command query is created.\n-   */\n-  protected lazy val sideEffectResult: Seq[Row] = Seq.empty[Row]\n-\n-  override def executeCollect(): Array[Row] = sideEffectResult.toArray\n-\n-  override def execute(): RDD[Row] = sqlContext.sparkContext.parallelize(sideEffectResult, 1)\n-}\n-\n-// TODO: Replace command with runnable command.\n trait RunnableCommand extends logical.Command {"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "And below on `ExecutedCommand`.\n\n``` scala\n/**\n * A physical operator that executes the run method of a `RunnableCommand` and\n * saves the result to prevent multiple executions.\n */\n```\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T20:20:52Z",
    "diffHunk": "@@ -26,27 +26,6 @@ import org.apache.spark.sql.catalyst.plans.logical\n import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n import org.apache.spark.sql.{SQLConf, SQLContext}\n \n-// TODO: DELETE ME...\n-trait Command {\n-  this: SparkPlan =>\n-\n-  /**\n-   * A concrete command should override this lazy field to wrap up any side effects caused by the\n-   * command or any other computation that should be evaluated exactly once. The value of this field\n-   * can be used as the contents of the corresponding RDD generated from the physical plan of this\n-   * command.\n-   *\n-   * The `execute()` method of all the physical command classes should reference `sideEffectResult`\n-   * so that the command can be executed eagerly right after the command query is created.\n-   */\n-  protected lazy val sideEffectResult: Seq[Row] = Seq.empty[Row]\n-\n-  override def executeCollect(): Array[Row] = sideEffectResult.toArray\n-\n-  override def execute(): RDD[Row] = sqlContext.sparkContext.parallelize(sideEffectResult, 1)\n-}\n-\n-// TODO: Replace command with runnable command.\n trait RunnableCommand extends logical.Command {"
  }],
  "prId": 3712
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I don't think we need the `SQLContext` anymore.\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T20:21:29Z",
    "diffHunk": "@@ -79,11 +58,12 @@ case class ExecutedCommand(cmd: RunnableCommand) extends SparkPlan {\n  * :: DeveloperApi ::\n  */\n @DeveloperApi\n-case class SetCommand(kv: Option[(String, Option[String])], output: Seq[Attribute])(\n-    @transient context: SQLContext)\n-  extends LeafNode with Command with Logging {\n+case class SetCommand(kv: Option[(String, Option[String])], _output: Seq[Attribute])(\n+    @transient context: SQLContext) extends RunnableCommand with Logging {"
  }, {
    "author": {
      "login": "scwf"
    },
    "body": "yes\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T23:37:59Z",
    "diffHunk": "@@ -79,11 +58,12 @@ case class ExecutedCommand(cmd: RunnableCommand) extends SparkPlan {\n  * :: DeveloperApi ::\n  */\n @DeveloperApi\n-case class SetCommand(kv: Option[(String, Option[String])], output: Seq[Attribute])(\n-    @transient context: SQLContext)\n-  extends LeafNode with Command with Logging {\n+case class SetCommand(kv: Option[(String, Option[String])], _output: Seq[Attribute])(\n+    @transient context: SQLContext) extends RunnableCommand with Logging {"
  }],
  "prId": 3712
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Remove `SQLContext` and don't wrap the arguments anymore.\n",
    "commit": "51a82f2ae3fe9d28455940d953de7b76306f49b2",
    "createdAt": "2014-12-16T20:22:07Z",
    "diffHunk": "@@ -128,12 +106,13 @@ case class SetCommand(kv: Option[(String, Option[String])], output: Seq[Attribut\n  */\n @DeveloperApi\n case class ExplainCommand(\n-    logicalPlan: LogicalPlan, output: Seq[Attribute], extended: Boolean)(\n-    @transient context: SQLContext)\n-  extends LeafNode with Command {\n+    logicalPlan: LogicalPlan, _output: Seq[Attribute], extended: Boolean)(\n+    @transient context: SQLContext) extends RunnableCommand {"
  }],
  "prId": 3712
}]