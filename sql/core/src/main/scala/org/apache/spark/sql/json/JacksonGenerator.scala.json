[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Internal representation of Array data should be `ArrayData`, not `Seq[_]` any more.\n",
    "commit": "d90b1047959fa5b1ef08c7c71c76991ebd4e3d28",
    "createdAt": "2015-08-04T04:45:10Z",
    "diffHunk": "@@ -48,9 +50,9 @@ private[sql] object JacksonGenerator {\n       case (DateType, v) => gen.writeString(v.toString)\n       case (udt: UserDefinedType[_], v) => valWriter(udt.sqlType, udt.serialize(v))\n \n-      case (ArrayType(ty, _), v: Seq[_]) =>\n+      case (ArrayType(ty, _), v: ArrayData) =>"
  }],
  "prId": 7696
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "The logic here is exactly the same with function `def apply(rowSchema: StructType, gen: JsonGenerator, row: Row)`, not sure if there any simple way to make the code shared.\n",
    "commit": "d90b1047959fa5b1ef08c7c71c76991ebd4e3d28",
    "createdAt": "2015-08-04T04:56:19Z",
    "diffHunk": "@@ -74,4 +76,60 @@ private[sql] object JacksonGenerator {\n \n     valWriter(rowSchema, row)\n   }\n+\n+  /** Transforms a single InternalRow to JSON using Jackson\n+   *\n+   * TODO: make the code shared with the other apply method.\n+   *\n+   * @param rowSchema the schema object used for conversion\n+   * @param gen a JsonGenerator object\n+   * @param row The row to convert\n+   */\n+  def apply(rowSchema: StructType, gen: JsonGenerator, row: InternalRow): Unit = {",
    "line": 22
  }],
  "prId": 7696
}]