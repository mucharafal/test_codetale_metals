[{
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "```suggestion\r\n  if (isTemporary) verifyTempView()\r\n```",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T10:47:17Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()"
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "Resolved\r\n",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T11:38:42Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "nit:\r\n```scala\r\n    name.database.foreach { database =>\r\n      throw new AnalysisException(\r\n        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\r\n    }\r\n```",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T10:50:12Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {"
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "`name.database` returns String.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T11:23:58Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "It's not, it's an `Option[String]`, I imagine, in which case this is indeed a little more idiomatic.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-04T14:37:38Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {"
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "My bad. `name.database` is an `Option[String]`.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-04T17:14:09Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {"
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "Now, I see how `foreach` is working here.\r\nThanks @MaxGekk ",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-04T17:37:29Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if(isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "The previous indentation is correct.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T16:25:33Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    if (name.database.isDefined) {\n+      val database = name.database.get\n+      throw new AnalysisException(\n+        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    }\n   }\n \n+  private var isTempReferred = false\n+\n   override def run(sparkSession: SparkSession): Seq[Row] = {\n     // If the plan cannot be analyzed, throw an exception and don't proceed.\n     val qe = sparkSession.sessionState.executePlan(child)\n     qe.assertAnalyzed()\n     val analyzedPlan = qe.analyzed\n \n     if (userSpecifiedColumns.nonEmpty &&\n-        userSpecifiedColumns.length != analyzedPlan.output.length) {\n+      userSpecifiedColumns.length != analyzedPlan.output.length) {"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Previous indentation is correct.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T16:26:12Z",
    "diffHunk": "@@ -191,12 +198,15 @@ case class CreateViewCommand(\n       // 2) The temp functions are represented by multiple classes. Most are inaccessible from this\n       // package (e.g., HiveGenericUDF).\n       child.collect {\n-        // Disallow creating permanent views based on temporary views.\n+        // Permanent views will be created as temporary view if based on temporary view.\n         case UnresolvedRelation(AsTableIdentifier(ident))\n-            if sparkSession.sessionState.catalog.isTemporaryTable(ident) =>\n-          // temporary views are only stored in the session catalog\n-          throw new AnalysisException(s\"Not allowed to create a permanent view $name by \" +\n-            s\"referencing a temporary view $ident\")\n+          if sparkSession.sessionState.catalog.isTemporaryTable(ident) =>"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "@amanomer . We should not allow `IF NOT EXISTS`. IIRC, this is not the goal of SPARK-29628.\r\ncc @maropu ",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T16:40:25Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")",
    "line": 16
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "Yes, this PR still doesn't allow to create temporary view with `IF NOT EXISTS`.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T16:58:00Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")",
    "line": 16
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Got it~",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-30T17:43:09Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")",
    "line": 16
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "oh, I'm late. Yea, I thinks so.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-10-31T00:17:58Z",
    "diffHunk": "@@ -110,38 +110,44 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")",
    "line": 16
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "amanomer"
    },
    "body": "I have handled pgSQLDialect case here. Since class `CreateViewCommand` of sql/core is not accessible from `PostgreSQLDialect` sql/catalyst because sql/core is dependent on sql/catalyst.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-11T11:28:55Z",
    "diffHunk": "@@ -191,12 +197,21 @@ case class CreateViewCommand(\n       // 2) The temp functions are represented by multiple classes. Most are inaccessible from this\n       // package (e.g., HiveGenericUDF).\n       child.collect {\n-        // Disallow creating permanent views based on temporary views.\n+        // Permanent views will be created as temporary view if based on temporary view.\n         case UnresolvedRelation(AsTableIdentifier(ident))\n             if sparkSession.sessionState.catalog.isTemporaryTable(ident) =>\n-          // temporary views are only stored in the session catalog\n-          throw new AnalysisException(s\"Not allowed to create a permanent view $name by \" +\n-            s\"referencing a temporary view $ident\")\n+          // Temporary views are only stored in the session catalog\n+          if (sparkSession.sqlContext.conf.usePostgreSQLDialect) {"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: space before brace",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T12:56:22Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    name.database.foreach{"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: move to previous line",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T12:56:53Z",
    "diffHunk": "@@ -192,12 +198,21 @@ case class CreateViewCommand(\n       // package (e.g., HiveGenericUDF).\n       def verify(child: LogicalPlan) {\n         child.collect {\n-          // Disallow creating permanent views based on temporary views.\n+          // Permanent views will be created as temporary view if based on temporary view.\n           case UnresolvedRelation(AsTableIdentifier(ident))\n             if sparkSession.sessionState.catalog.isTemporaryTable(ident) =>\n-            // temporary views are only stored in the session catalog\n-            throw new AnalysisException(s\"Not allowed to create a permanent view $name by \" +\n-              s\"referencing a temporary view $ident\")\n+            // Temporary views are only stored in the session catalog\n+            if (sparkSession.sqlContext.conf.usePostgreSQLDialect) {\n+              logInfo(s\"View $name is based on temporary view $ident.\"\n+                + s\" $name will be created as temporary view\")\n+              verifyTempView()\n+              isTempReferred = true\n+            }\n+            else {"
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I'm not sure about the semantics of this. It's used in a different place from where it's checked. Is this always set to true by a code path before it needs to be used?",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T12:58:23Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    name.database.foreach{\n+      database => throw new AnalysisException(\n+        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    }\n   }\n \n+  private var isTempReferred = false",
    "line": 40
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "`isTempReferred` A flag which will be true when permanent view is based on temporary view while using pgSQL dialect.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T15:55:34Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    name.database.foreach{\n+      database => throw new AnalysisException(\n+        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    }\n   }\n \n+  private var isTempReferred = false",
    "line": 40
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Yes that's not quite my question. How do we know the code path that sets this to true below will execute first?",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T16:03:02Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    name.database.foreach{\n+      database => throw new AnalysisException(\n+        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    }\n   }\n \n+  private var isTempReferred = false",
    "line": 40
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "In `run()`, before using `isTempReferred`, a call to `verifyTemporaryObjectsNotExists()` is made which will update it's value.",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T17:10:59Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {\n+      throw new AnalysisException(\n+        \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n+    }\n \n-  // Temporary view names should NOT contain database prefix like \"database.table\"\n-  if (isTemporary && name.database.isDefined) {\n-    val database = name.database.get\n-    throw new AnalysisException(\n-      s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    // Temporary view names should NOT contain database prefix like \"database.table\"\n+    name.database.foreach{\n+      database => throw new AnalysisException(\n+        s\"It is not allowed to add database prefix `$database` for the TEMPORARY view name.\")\n+    }\n   }\n \n+  private var isTempReferred = false",
    "line": 40
  }],
  "prId": 26317
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Does this need to be predicated on whether the postgresql dialect is used?",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T12:58:54Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {",
    "line": 23
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "Postgres doesn't allow using 'IF NOT EXISTS' while creating view. \r\nhttps://www.postgresql.org/docs/9.2/sql-createview.html",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T15:50:27Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {",
    "line": 23
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "So this is the same whether or not postgresql dialect is used?",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T16:02:42Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {",
    "line": 23
  }, {
    "author": {
      "login": "amanomer"
    },
    "body": "Yes",
    "commit": "87557e08deec4e6650f16546829b233158b529e5",
    "createdAt": "2019-11-13T17:00:08Z",
    "diffHunk": "@@ -110,19 +110,25 @@ case class CreateViewCommand(\n \n   private def isTemporary = viewType == LocalTempView || viewType == GlobalTempView\n \n-  // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS' to be consistent with 'CREATE TEMPORARY TABLE'\n-  if (allowExisting && isTemporary) {\n-    throw new AnalysisException(\n-      \"It is not allowed to define a TEMPORARY view with IF NOT EXISTS.\")\n-  }\n+  if (isTemporary) verifyTempView()\n+\n+  private def verifyTempView(): Unit = {\n+    // Disallows 'CREATE TEMPORARY VIEW IF NOT EXISTS'\n+    // to be consistent with 'CREATE TEMPORARY TABLE'\n+    if (allowExisting) {",
    "line": 23
  }],
  "prId": 26317
}]