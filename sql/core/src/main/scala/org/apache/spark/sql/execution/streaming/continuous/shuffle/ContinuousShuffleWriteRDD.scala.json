[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: writes epoch data ",
    "commit": "cff37c45f084d50a0844fbe8481565f6a9985302",
    "createdAt": "2018-05-25T20:28:29Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous.shuffle\n+\n+import org.apache.spark.{Partition, Partitioner, TaskContext}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.execution.streaming.continuous.{ContinuousExecution, EpochTracker}\n+\n+/**\n+ * An RDD which continuously writes epochs from its child into a continuous shuffle."
  }],
  "prId": 21428
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "fix indent. ",
    "commit": "cff37c45f084d50a0844fbe8481565f6a9985302",
    "createdAt": "2018-05-25T20:36:42Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous.shuffle\n+\n+import org.apache.spark.{Partition, Partitioner, TaskContext}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.execution.streaming.continuous.{ContinuousExecution, EpochTracker}\n+\n+/**\n+ * An RDD which continuously writes epochs from its child into a continuous shuffle.\n+ *\n+ * @param prev The RDD to write to the continuous shuffle.\n+ * @param outputPartitioner The partitioner on the reader side of the shuffle.\n+ * @param endpoints The [[UnsafeRowReceiver]] endpoints to write to. Indexed by partition ID within\n+ *                  outputPartitioner.\n+ */\n+class ContinuousShuffleWriteRDD(\n+    var prev: RDD[UnsafeRow],\n+    outputPartitioner: Partitioner,\n+    endpoints: Seq[RpcEndpointRef])\n+    extends RDD[Unit](prev) {"
  }],
  "prId": 21428
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Seems like you dont really need a RDD here, you just need an action. You are consuming an iterator and returning nothing... that exactly like a `rdd.foreachPartition`. It may be so that wrapping it in this RDD is cleaner in the bigger picture, but I am unable to judge without having the bigger picture in mind (bigger picture = how are these Continuous*RDDs going to be create by SQL SparkPlan, and executed).",
    "commit": "cff37c45f084d50a0844fbe8481565f6a9985302",
    "createdAt": "2018-05-25T22:21:50Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous.shuffle\n+\n+import org.apache.spark.{Partition, Partitioner, TaskContext}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.execution.streaming.continuous.{ContinuousExecution, EpochTracker}\n+\n+/**\n+ * An RDD which continuously writes epochs from its child into a continuous shuffle.\n+ *\n+ * @param prev The RDD to write to the continuous shuffle.\n+ * @param outputPartitioner The partitioner on the reader side of the shuffle.\n+ * @param endpoints The [[UnsafeRowReceiver]] endpoints to write to. Indexed by partition ID within\n+ *                  outputPartitioner.\n+ */\n+class ContinuousShuffleWriteRDD(\n+    var prev: RDD[UnsafeRow],\n+    outputPartitioner: Partitioner,\n+    endpoints: Seq[RpcEndpointRef])\n+    extends RDD[Unit](prev) {\n+\n+  override def getPartitions: Array[Partition] = prev.partitions\n+\n+  override def compute(split: Partition, context: TaskContext): Iterator[Unit] = {\n+    EpochTracker.initializeCurrentEpoch(\n+      context.getLocalProperty(ContinuousExecution.START_EPOCH_KEY).toLong)\n+    val writer: ContinuousShuffleWriter =\n+      new UnsafeRowWriter(split.index, outputPartitioner, endpoints.toArray)\n+\n+    while (!context.isInterrupted() && !context.isCompleted()) {\n+      writer.write(prev.compute(split, context))\n+      EpochTracker.incrementCurrentEpoch()\n+    }\n+\n+    Iterator()"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "I honestly just did this to mirror ContinuousWriteRDD, which itself mirrored WriteToDataSourceV2Exec returning an empty RDD. We can take it out of the current PR - it's not being used anywhere yet, and I agree that where it ends up being used will determine the right interface.",
    "commit": "cff37c45f084d50a0844fbe8481565f6a9985302",
    "createdAt": "2018-05-25T23:00:06Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.continuous.shuffle\n+\n+import org.apache.spark.{Partition, Partitioner, TaskContext}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.execution.streaming.continuous.{ContinuousExecution, EpochTracker}\n+\n+/**\n+ * An RDD which continuously writes epochs from its child into a continuous shuffle.\n+ *\n+ * @param prev The RDD to write to the continuous shuffle.\n+ * @param outputPartitioner The partitioner on the reader side of the shuffle.\n+ * @param endpoints The [[UnsafeRowReceiver]] endpoints to write to. Indexed by partition ID within\n+ *                  outputPartitioner.\n+ */\n+class ContinuousShuffleWriteRDD(\n+    var prev: RDD[UnsafeRow],\n+    outputPartitioner: Partitioner,\n+    endpoints: Seq[RpcEndpointRef])\n+    extends RDD[Unit](prev) {\n+\n+  override def getPartitions: Array[Partition] = prev.partitions\n+\n+  override def compute(split: Partition, context: TaskContext): Iterator[Unit] = {\n+    EpochTracker.initializeCurrentEpoch(\n+      context.getLocalProperty(ContinuousExecution.START_EPOCH_KEY).toLong)\n+    val writer: ContinuousShuffleWriter =\n+      new UnsafeRowWriter(split.index, outputPartitioner, endpoints.toArray)\n+\n+    while (!context.isInterrupted() && !context.isCompleted()) {\n+      writer.write(prev.compute(split, context))\n+      EpochTracker.incrementCurrentEpoch()\n+    }\n+\n+    Iterator()"
  }],
  "prId": 21428
}]