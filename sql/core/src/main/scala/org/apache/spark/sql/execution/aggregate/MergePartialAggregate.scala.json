[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "I think we need to have more strict conditions to make sure these two operators are for the same group by clause (Although I do not have a case showing this will break, it is better to list the condition in a more specific way). \n",
    "commit": "a5b6d7140cf0de3bab75788fd32b497a8817c93c",
    "createdAt": "2016-08-30T23:39:38Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions.aggregate._\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.execution.SparkPlan\n+\n+object MergePartialAggregate extends Rule[SparkPlan] {\n+\n+  override def apply(plan: SparkPlan): SparkPlan = plan transform {\n+    // Normal partial aggregate pair\n+    case outer @ HashAggregateExec(_, _, _, _, _, _, inner: HashAggregateExec)\n+      if outer.aggregateExpressions.forall(_.mode == Final) &&\n+        inner.aggregateExpressions.forall(_.mode == Partial) =>",
    "line": 30
  }],
  "prId": 14876
}]