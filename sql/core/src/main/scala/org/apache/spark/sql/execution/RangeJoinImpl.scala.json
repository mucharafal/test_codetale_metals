[{
  "comments": [{
    "author": {
      "login": "sarutak"
    },
    "body": "extra new line.\n",
    "commit": "381d5030e15da798732e1d9b12b0edaa4e62c248",
    "createdAt": "2014-10-27T08:27:04Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.{sql, SparkContext}\n+import org.apache.spark.SparkContext._\n+import scala.reflect.ClassTag\n+\n+object RangeJoinImpl extends Serializable{\n+\n+  /**\n+   * Multi-joins together two RDDs that contain objects that map to reference regions.\n+   * The elements from the first RDD become the key of the output RDD, and the value\n+   * contains all elements from the second RDD which overlap the region of the key.\n+   * This is a multi-join, so it preserves n-to-m relationships between regions.\n+   *\n+   * @param sc A spark context from the cluster that will perform the join\n+   * @param rdd1 RDD of values on which we build an interval tree. Assume |rdd1| < |rdd2|\n+   */\n+  def overlapJoin(sc: SparkContext,\n+                          rdd1: RDD[(Interval[Long],sql.Row)],\n+                          rdd2: RDD[(Interval[Long],sql.Row)]): RDD[(sql.Row, Iterable[sql.Row])] =\n+  {\n+\n+    val indexedRdd1 = rdd1.zipWithIndex().map(_.swap)\n+\n+    /*Collect only Reference regions and the index of indexedRdd1*/\n+    val localIntervals = indexedRdd1.map(x => (x._2._1, x._1)).collect()\n+    /*Create and broadcast an interval tree*/\n+    val intervalTree = sc.broadcast(new IntervalTree[Long](localIntervals.toList))\n+\n+    val kvrdd2: RDD[(Long, Iterable[sql.Row])] = rdd2\n+      //join entry with the intervals returned from the interval tree\n+      .map(x => (intervalTree.value.getAllOverlappings(x._1), x._2))\n+      .filter(x => x._1 != Nil) //filter out entries that do not join anywhere\n+      .flatMap(t => t._1.map(s => (s._2, t._2))) //create pairs of (index1, rdd2Elem)\n+      .groupByKey\n+\n+"
  }],
  "prId": 2939
}, {
  "comments": [{
    "author": {
      "login": "sarutak"
    },
    "body": "extra new line.\n",
    "commit": "381d5030e15da798732e1d9b12b0edaa4e62c248",
    "createdAt": "2014-10-27T08:27:12Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+"
  }],
  "prId": 2939
}, {
  "comments": [{
    "author": {
      "login": "sarutak"
    },
    "body": "Please add white space after \"*\" here and other places.\n",
    "commit": "381d5030e15da798732e1d9b12b0edaa4e62c248",
    "createdAt": "2014-10-27T08:29:44Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.{sql, SparkContext}\n+import org.apache.spark.SparkContext._\n+import scala.reflect.ClassTag\n+\n+object RangeJoinImpl extends Serializable{\n+\n+  /**\n+   * Multi-joins together two RDDs that contain objects that map to reference regions.\n+   * The elements from the first RDD become the key of the output RDD, and the value\n+   * contains all elements from the second RDD which overlap the region of the key.\n+   * This is a multi-join, so it preserves n-to-m relationships between regions.\n+   *\n+   * @param sc A spark context from the cluster that will perform the join\n+   * @param rdd1 RDD of values on which we build an interval tree. Assume |rdd1| < |rdd2|\n+   */\n+  def overlapJoin(sc: SparkContext,\n+                          rdd1: RDD[(Interval[Long],sql.Row)],\n+                          rdd2: RDD[(Interval[Long],sql.Row)]): RDD[(sql.Row, Iterable[sql.Row])] =\n+  {\n+\n+    val indexedRdd1 = rdd1.zipWithIndex().map(_.swap)\n+\n+    /*Collect only Reference regions and the index of indexedRdd1*/"
  }],
  "prId": 2939
}]