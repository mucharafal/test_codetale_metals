[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "revert this.\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-01T09:37:56Z",
    "diffHunk": "@@ -40,29 +40,64 @@ object SortPrefixUtils {\n \n   def getPrefixComparator(sortOrder: SortOrder): PrefixComparator = {\n     sortOrder.dataType match {\n-      case StringType =>\n-        if (sortOrder.isAscending) PrefixComparators.STRING else PrefixComparators.STRING_DESC\n-      case BinaryType =>\n-        if (sortOrder.isAscending) PrefixComparators.BINARY else PrefixComparators.BINARY_DESC\n+      case StringType => getPrefixComparatorWithNullOrder(sortOrder, \"STRING\")\n+      case BinaryType => getPrefixComparatorWithNullOrder(sortOrder, \"BINARY\")\n       case BooleanType | ByteType | ShortType | IntegerType | LongType | DateType | TimestampType =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n       case dt: DecimalType if dt.precision - dt.scale <= Decimal.MAX_LONG_DIGITS =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n-      case FloatType | DoubleType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n-      case dt: DecimalType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n+      case FloatType | DoubleType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n+      case dt: DecimalType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n       case _ => NoOpPrefixComparator\n     }\n   }\n \n+  private def getPrefixComparatorWithNullOrder(\n+     sortOrder: SortOrder, signedType: String): PrefixComparator = {\n+    sortOrder.direction match {\n+      case Ascending if (sortOrder.nullOrdering == NullLast) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_NULLLAST\n+          case \"STRING\" => PrefixComparators.STRING_NULLLAST\n+          case \"BINARY\" => PrefixComparators.BINARY_NULLLAST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_NULLLAST\n+        }\n+      case Ascending =>\n+        // or the default NULLS FIRST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG\n+          case \"STRING\" => PrefixComparators.STRING\n+          case \"BINARY\" => PrefixComparators.BINARY\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE\n+        }\n+      case Descending if (sortOrder.nullOrdering == NullFirst) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC_NULLFIRST\n+          case \"STRING\" => PrefixComparators.STRING_DESC_NULLFIRST\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC_NULLFIRST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC_NULLFIRST\n+        }\n+      case Descending =>\n+        // or the default NULLS LAST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC\n+          case \"STRING\" => PrefixComparators.STRING_DESC\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC\n+        }\n+      case _ => throw new IllegalArgumentException(\n+        \"This should not happen. Contact Spark contributors for this error.\")\n+    }\n+  }\n+\n   /**\n    * Creates the prefix comparator for the first field in the given schema, in ascending order.\n    */\n   def getPrefixComparator(schema: StructType): PrefixComparator = {\n     if (schema.nonEmpty) {\n       val field = schema.head\n-      getPrefixComparator(SortOrder(BoundReference(0, field.dataType, field.nullable), Ascending))\n+      getPrefixComparator("
  }],
  "prId": 14842
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "revert this.\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-01T09:38:03Z",
    "diffHunk": "@@ -89,7 +124,8 @@ object SortPrefixUtils {\n    * Returns whether the fully sorting on the specified key field is possible with radix sort.\n    */\n   def canSortFullyWithPrefix(field: StructField): Boolean = {\n-    canSortFullyWithPrefix(SortOrder(BoundReference(0, field.dataType, field.nullable), Ascending))\n+    canSortFullyWithPrefix("
  }],
  "prId": 14842
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "We probably shouldn't use strings here.\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-10T03:10:47Z",
    "diffHunk": "@@ -40,22 +40,56 @@ object SortPrefixUtils {\n \n   def getPrefixComparator(sortOrder: SortOrder): PrefixComparator = {\n     sortOrder.dataType match {\n-      case StringType =>\n-        if (sortOrder.isAscending) PrefixComparators.STRING else PrefixComparators.STRING_DESC\n-      case BinaryType =>\n-        if (sortOrder.isAscending) PrefixComparators.BINARY else PrefixComparators.BINARY_DESC\n+      case StringType => getPrefixComparatorWithNullOrder(sortOrder, \"STRING\")\n+      case BinaryType => getPrefixComparatorWithNullOrder(sortOrder, \"BINARY\")\n       case BooleanType | ByteType | ShortType | IntegerType | LongType | DateType | TimestampType =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n       case dt: DecimalType if dt.precision - dt.scale <= Decimal.MAX_LONG_DIGITS =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n-      case FloatType | DoubleType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n-      case dt: DecimalType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n+      case FloatType | DoubleType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n+      case dt: DecimalType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n       case _ => NoOpPrefixComparator\n     }\n   }\n \n+  private def getPrefixComparatorWithNullOrder(\n+     sortOrder: SortOrder, signedType: String): PrefixComparator = {\n+    sortOrder.direction match {\n+      case Ascending if (sortOrder.nullOrdering == NullLast) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_NULLLAST"
  }],
  "prId": 14842
}, {
  "comments": [{
    "author": {
      "login": "ericl"
    },
    "body": "assert()\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-10T03:12:03Z",
    "diffHunk": "@@ -40,22 +40,56 @@ object SortPrefixUtils {\n \n   def getPrefixComparator(sortOrder: SortOrder): PrefixComparator = {\n     sortOrder.dataType match {\n-      case StringType =>\n-        if (sortOrder.isAscending) PrefixComparators.STRING else PrefixComparators.STRING_DESC\n-      case BinaryType =>\n-        if (sortOrder.isAscending) PrefixComparators.BINARY else PrefixComparators.BINARY_DESC\n+      case StringType => getPrefixComparatorWithNullOrder(sortOrder, \"STRING\")\n+      case BinaryType => getPrefixComparatorWithNullOrder(sortOrder, \"BINARY\")\n       case BooleanType | ByteType | ShortType | IntegerType | LongType | DateType | TimestampType =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n       case dt: DecimalType if dt.precision - dt.scale <= Decimal.MAX_LONG_DIGITS =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n-      case FloatType | DoubleType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n-      case dt: DecimalType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n+      case FloatType | DoubleType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n+      case dt: DecimalType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n       case _ => NoOpPrefixComparator\n     }\n   }\n \n+  private def getPrefixComparatorWithNullOrder(\n+     sortOrder: SortOrder, signedType: String): PrefixComparator = {\n+    sortOrder.direction match {\n+      case Ascending if (sortOrder.nullOrdering == NullLast) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_NULLLAST\n+          case \"STRING\" => PrefixComparators.STRING_NULLLAST\n+          case \"BINARY\" => PrefixComparators.BINARY_NULLLAST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_NULLLAST\n+        }\n+      case Ascending =>\n+        // or the default NULLS FIRST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG\n+          case \"STRING\" => PrefixComparators.STRING\n+          case \"BINARY\" => PrefixComparators.BINARY\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE\n+        }\n+      case Descending if (sortOrder.nullOrdering == NullFirst) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC_NULLFIRST\n+          case \"STRING\" => PrefixComparators.STRING_DESC_NULLFIRST\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC_NULLFIRST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC_NULLFIRST\n+        }\n+      case Descending =>\n+        // or the default NULLS LAST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC\n+          case \"STRING\" => PrefixComparators.STRING_DESC\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC\n+        }\n+      case _ => throw new IllegalArgumentException("
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Actually if you used sealed traits for all the cases then the compiler should generate a error if one is forgotten.\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-10T03:12:52Z",
    "diffHunk": "@@ -40,22 +40,56 @@ object SortPrefixUtils {\n \n   def getPrefixComparator(sortOrder: SortOrder): PrefixComparator = {\n     sortOrder.dataType match {\n-      case StringType =>\n-        if (sortOrder.isAscending) PrefixComparators.STRING else PrefixComparators.STRING_DESC\n-      case BinaryType =>\n-        if (sortOrder.isAscending) PrefixComparators.BINARY else PrefixComparators.BINARY_DESC\n+      case StringType => getPrefixComparatorWithNullOrder(sortOrder, \"STRING\")\n+      case BinaryType => getPrefixComparatorWithNullOrder(sortOrder, \"BINARY\")\n       case BooleanType | ByteType | ShortType | IntegerType | LongType | DateType | TimestampType =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n       case dt: DecimalType if dt.precision - dt.scale <= Decimal.MAX_LONG_DIGITS =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n-      case FloatType | DoubleType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n-      case dt: DecimalType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n+      case FloatType | DoubleType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n+      case dt: DecimalType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n       case _ => NoOpPrefixComparator\n     }\n   }\n \n+  private def getPrefixComparatorWithNullOrder(\n+     sortOrder: SortOrder, signedType: String): PrefixComparator = {\n+    sortOrder.direction match {\n+      case Ascending if (sortOrder.nullOrdering == NullLast) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_NULLLAST\n+          case \"STRING\" => PrefixComparators.STRING_NULLLAST\n+          case \"BINARY\" => PrefixComparators.BINARY_NULLLAST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_NULLLAST\n+        }\n+      case Ascending =>\n+        // or the default NULLS FIRST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG\n+          case \"STRING\" => PrefixComparators.STRING\n+          case \"BINARY\" => PrefixComparators.BINARY\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE\n+        }\n+      case Descending if (sortOrder.nullOrdering == NullFirst) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC_NULLFIRST\n+          case \"STRING\" => PrefixComparators.STRING_DESC_NULLFIRST\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC_NULLFIRST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC_NULLFIRST\n+        }\n+      case Descending =>\n+        // or the default NULLS LAST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC\n+          case \"STRING\" => PrefixComparators.STRING_DESC\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC\n+        }\n+      case _ => throw new IllegalArgumentException("
  }, {
    "author": {
      "login": "xwu0226"
    },
    "body": "I will remove this default case then. Thanks!\n",
    "commit": "5153ce5261752cf6c33b8f48759de495ed8890c3",
    "createdAt": "2016-09-10T04:34:54Z",
    "diffHunk": "@@ -40,22 +40,56 @@ object SortPrefixUtils {\n \n   def getPrefixComparator(sortOrder: SortOrder): PrefixComparator = {\n     sortOrder.dataType match {\n-      case StringType =>\n-        if (sortOrder.isAscending) PrefixComparators.STRING else PrefixComparators.STRING_DESC\n-      case BinaryType =>\n-        if (sortOrder.isAscending) PrefixComparators.BINARY else PrefixComparators.BINARY_DESC\n+      case StringType => getPrefixComparatorWithNullOrder(sortOrder, \"STRING\")\n+      case BinaryType => getPrefixComparatorWithNullOrder(sortOrder, \"BINARY\")\n       case BooleanType | ByteType | ShortType | IntegerType | LongType | DateType | TimestampType =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n       case dt: DecimalType if dt.precision - dt.scale <= Decimal.MAX_LONG_DIGITS =>\n-        if (sortOrder.isAscending) PrefixComparators.LONG else PrefixComparators.LONG_DESC\n-      case FloatType | DoubleType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n-      case dt: DecimalType =>\n-        if (sortOrder.isAscending) PrefixComparators.DOUBLE else PrefixComparators.DOUBLE_DESC\n+        getPrefixComparatorWithNullOrder(sortOrder, \"LONG\")\n+      case FloatType | DoubleType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n+      case dt: DecimalType => getPrefixComparatorWithNullOrder(sortOrder, \"DOUBLE\")\n       case _ => NoOpPrefixComparator\n     }\n   }\n \n+  private def getPrefixComparatorWithNullOrder(\n+     sortOrder: SortOrder, signedType: String): PrefixComparator = {\n+    sortOrder.direction match {\n+      case Ascending if (sortOrder.nullOrdering == NullLast) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_NULLLAST\n+          case \"STRING\" => PrefixComparators.STRING_NULLLAST\n+          case \"BINARY\" => PrefixComparators.BINARY_NULLLAST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_NULLLAST\n+        }\n+      case Ascending =>\n+        // or the default NULLS FIRST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG\n+          case \"STRING\" => PrefixComparators.STRING\n+          case \"BINARY\" => PrefixComparators.BINARY\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE\n+        }\n+      case Descending if (sortOrder.nullOrdering == NullFirst) =>\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC_NULLFIRST\n+          case \"STRING\" => PrefixComparators.STRING_DESC_NULLFIRST\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC_NULLFIRST\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC_NULLFIRST\n+        }\n+      case Descending =>\n+        // or the default NULLS LAST\n+        signedType match {\n+          case \"LONG\" => PrefixComparators.LONG_DESC\n+          case \"STRING\" => PrefixComparators.STRING_DESC\n+          case \"BINARY\" => PrefixComparators.BINARY_DESC\n+          case \"DOUBLE\" => PrefixComparators.DOUBLE_DESC\n+        }\n+      case _ => throw new IllegalArgumentException("
  }],
  "prId": 14842
}]