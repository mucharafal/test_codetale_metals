[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "StateOperator -> StateOperatorProgress",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:00:22Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql]("
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "+1",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:18:37Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql]("
  }],
  "prId": 15954
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "`numEntries -> numTotal` would make it more consistent with `numUpdated`",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:01:01Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql](\n+    val numEntries: Long,"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Also, needs docs to make it clear that `numUpdated` is with reference to the last progress",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:01:35Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql](\n+    val numEntries: Long,"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "+1 to docs.  I think `numTotal` is less clear.  Total of what?  It is a count of the number of entries that the state store is holding.",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:18:12Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql](\n+    val numEntries: Long,"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Same question then applies to numUpdated as well. \r\nHow about numRowsTotal, numRowsUpdated?\r\nThen in future we could add sizeBytesTotal, sizeBytesUpdated, etc.\r\n",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T02:50:04Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql](\n+    val numEntries: Long,"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Those sound good.",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-22T03:03:02Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Holds statistics about state that is being stored for a given streaming query.\n+ */\n+@Experimental\n+class StateOperator private[sql](\n+    val numEntries: Long,"
  }],
  "prId": 15954
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "nit: during a trigger?",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-29T19:10:44Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.jute.compiler.JLong\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Statistics about updates made to a stateful operators in a [[StreamingQuery]] in a trigger."
  }],
  "prId": 15954
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "We should move `SourceProgress` here or put `StateOperatorProgress` in its own file.  We might also consider putting them all in `org.apache.spark.sql.streaming.progress`, but there might not be time.",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-29T19:12:05Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.jute.compiler.JLong\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Statistics about updates made to a stateful operators in a [[StreamingQuery]] in a trigger.\n+ */\n+@Experimental\n+class StateOperatorProgress private[sql]("
  }],
  "prId": 15954
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "We probably will not do this `TODO`.",
    "commit": "69d9b4a1de6c7f07bb2153b02d3ffabbb87eaac1",
    "createdAt": "2016-11-29T19:12:31Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.{util => ju}\n+import java.util.UUID\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.jute.compiler.JLong\n+import org.json4s._\n+import org.json4s.JsonAST.JValue\n+import org.json4s.JsonDSL._\n+import org.json4s.jackson.JsonMethods._\n+\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * Statistics about updates made to a stateful operators in a [[StreamingQuery]] in a trigger.\n+ */\n+@Experimental\n+class StateOperatorProgress private[sql](\n+    val numRowsTotal: Long,\n+    val numRowsUpdated: Long) {\n+  private[sql] def jsonValue: JValue = {\n+    (\"numRowsTotal\" -> JInt(numRowsTotal)) ~\n+    (\"numRowsUpdated\" -> JInt(numRowsUpdated))\n+  }\n+}\n+\n+/**\n+ * :: Experimental ::\n+ * Used to report statistics about progress that has been made in the execution of a\n+ * [[StreamingQuery]]. Each event relates to processing done for a single trigger of the streaming\n+ * query. Events are emitted even when no new data is available to be processed.\n+ *\n+ * @param id A unique id of the query.\n+ * @param name Name of the query. This name is unique across all active queries.\n+ * @param timestamp Timestamp (ms) of the beginning of the trigger.\n+ * @param batchId A unique id for the current batch of data being processed.  Note that in the\n+ *                case of retries after a failure a given batchId my be executed more than once.\n+ *                Similarly, when there is no data to be processed, the batchId will not be\n+ *                incremented.\n+ * @param durationMs The amount of time taken to perform various operations in milliseconds.\n+ * @param currentWatermark The current event time watermark in milliseconds\n+ * @param stateOperators Information about operators in the query that store state.\n+ * @param sources detailed statistics on data being read from each of the streaming sources.\n+ * @since 2.1.0\n+ */\n+@Experimental\n+class StreamingQueryProgress private[sql](\n+  val id: UUID,\n+  val name: String,\n+  val timestamp: Long,\n+  val batchId: Long, // TODO: epoch?"
  }],
  "prId": 15954
}]