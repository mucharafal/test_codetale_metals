[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Scala doc please:\n\nReturns the rows in `left` that also appear in `right` using the built in spark `intersection` function.\n",
    "commit": "4629afe5f1ab3762efc77b0b2356cc6bbfe13047",
    "createdAt": "2014-07-04T09:58:10Z",
    "diffHunk": "@@ -205,3 +205,15 @@ object ExistingRdd {\n case class ExistingRdd(output: Seq[Attribute], rdd: RDD[Row]) extends LeafNode {\n   override def execute() = rdd\n }\n+\n+/**\n+ * :: DeveloperApi ::"
  }, {
    "author": {
      "login": "YanjieGao"
    },
    "body": "Ok i will modify it\n",
    "commit": "4629afe5f1ab3762efc77b0b2356cc6bbfe13047",
    "createdAt": "2014-07-04T09:59:36Z",
    "diffHunk": "@@ -205,3 +205,15 @@ object ExistingRdd {\n case class ExistingRdd(output: Seq[Attribute], rdd: RDD[Row]) extends LeafNode {\n   override def execute() = rdd\n }\n+\n+/**\n+ * :: DeveloperApi ::"
  }],
  "prId": 1150
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Space after *\n",
    "commit": "4629afe5f1ab3762efc77b0b2356cc6bbfe13047",
    "createdAt": "2014-07-05T20:17:36Z",
    "diffHunk": "@@ -220,3 +220,16 @@ case class Except(left: SparkPlan, right: SparkPlan) extends BinaryNode {\n   }\n }\n \n+/**\n+ * :: DeveloperApi ::\n+ *Returns the rows in left that also appear in right using the built in spark\n+ *intersection function."
  }],
  "prId": 1150
}]