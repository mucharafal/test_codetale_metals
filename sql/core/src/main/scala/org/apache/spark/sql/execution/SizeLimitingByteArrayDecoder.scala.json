[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "We cannot check the actual data size before encoding for collect?",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-04T05:42:53Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "dvogelbacher"
    },
    "body": "Hm, we could calculate it before encoding and doing the collect of the data. But then we would need to do an extra collect that just collects the data sizes onto the driver and sums them and fails the job if the sum is too big? That would be bad performance-wise, right?",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-04T14:02:49Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "But, after a driver finishes collecting all the compressed result data on memory (e.g., in executeCollect), is the current limiting approach is still useful for users? cc: @dongjoon-hyun @viirya  ",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-05T13:18:27Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yea, I don't think it's useful. I think there's no point here since it's already collected.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T04:20:19Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "BTW, `spark.driver.maxResultSize` limits from executor side IIRC. So, that property is different.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T04:21:06Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "This is not more helpful than OOM can tell you. You still can't process the collected data...",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T04:40:10Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "And, if you don't just collect one data, you can't set a good config to fit all cases.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T04:48:41Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "AngersZhuuuu"
    },
    "body": "> This is not more helpful than OOM can tell you. You still can't process the collected data...\r\n\r\nI meet this problem in SparkThriftServer. it's will make server hangs. ",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T05:09:45Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "dvogelbacher"
    },
    "body": "This is useful when running many jobs on the same SparkContext. This protects one job from OOMing the JVM and crashing the SparkContext, killing all other jobs running on it.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T13:45:21Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "dvogelbacher"
    },
    "body": "`spark.driver.maxResultSize` limits on the executor and on the driver @HyukjinKwon .\r\nIf a single result on an executor is > `spark.driver.maxResultSize` it fails the job. Also, `TaskSetManager` on the driver sums all the result sizes and fails the job if the result becomes bigger than that.\r\nWe can do the same thing for this new property if you think that would be better? Fail on the executor when encoding if it's already too big, otherwise fail on the driver.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T13:49:50Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }, {
    "author": {
      "login": "dvogelbacher"
    },
    "body": "I've pushed a commit that also limits on the executors, similar to what `spark.driver.maxResultSize` does",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-06T15:36:36Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, DataInputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.{config, Logging}\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays back to UnsafeRows.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayDecoder(\n+     nFields: Int,\n+     sqlConf: SQLConf) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+  private val maxUncompressedResultSize = sqlConf.maxUncompressedResultSize\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureCanFetchMoreResults(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureCanFetchMoreResults(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow"
  }],
  "prId": 25602
}]