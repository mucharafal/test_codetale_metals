[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Still have my previous question. What will happen if we have a query like `SELECT spark__partition__id from (SELECT a as spark__partition__id FROM table) tmp`? My main concern is that sometimes we will resolve `spark__partition__id` as the virtual column, but sometimes we will resolve it as `a`. Can you try some queries and see if we will have inconsistent behavior?\n",
    "commit": "7932bf090671dc99e9f38c0eeb52e73c150303ca",
    "createdAt": "2015-07-19T22:49:33Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.expressions\n+\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.catalyst.expressions.{Alias, VirtualColumn}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.execution.expressions.SparkPartitionID\n+\n+/**\n+ * Used to resolve virtual column attributes and insert the expression for them. Add case\n+ * statements to this for each additional virtual column\n+ */\n+private[sql] class ResolveVirtualColumn(resolver: Resolver) extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan = plan transform {\n+    case lPlan: LogicalPlan => lPlan transformExpressionsUp {\n+      case u @ UnresolvedAttribute(nameParts) if nameParts.length == 1 &&\n+        resolver(nameParts.head, VirtualColumn.sparkPartitionId) => SparkPartitionID"
  }, {
    "author": {
      "login": "JDrit"
    },
    "body": "So the query you gave will resolve the outer `spark__partition__id` as a virtual column, ignoring the alias. \n\nSome other data points:\n\n`select spark__partition__id from table` (where `spark__partition__id` is a column) will resolve to the column and not the virtual column.\n\n`SELECT a as spark__partition__id from test_table` will resolve the column `a`\n\nThe order of precedence goes, column, virtual_column, alias.\n",
    "commit": "7932bf090671dc99e9f38c0eeb52e73c150303ca",
    "createdAt": "2015-07-20T23:45:37Z",
    "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.expressions\n+\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.catalyst.expressions.{Alias, VirtualColumn}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.execution.expressions.SparkPartitionID\n+\n+/**\n+ * Used to resolve virtual column attributes and insert the expression for them. Add case\n+ * statements to this for each additional virtual column\n+ */\n+private[sql] class ResolveVirtualColumn(resolver: Resolver) extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan = plan transform {\n+    case lPlan: LogicalPlan => lPlan transformExpressionsUp {\n+      case u @ UnresolvedAttribute(nameParts) if nameParts.length == 1 &&\n+        resolver(nameParts.head, VirtualColumn.sparkPartitionId) => SparkPartitionID"
  }],
  "prId": 7478
}]