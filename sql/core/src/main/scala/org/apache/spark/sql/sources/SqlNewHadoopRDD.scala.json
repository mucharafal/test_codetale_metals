[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "This is a potential source of performance optimization. Since we provide the closure internally we don't actually have to clean the closure. If we create many of these RDDs the cleaning time might add up. This could buy us a few seconds (same reasoning as in SPARK-7718, or #6256).\n\nBy the way this is definitely not critical for the release. We can fix this separately if you prefer.\n",
    "commit": "6fa73dfa47b55bf00b440c407f1f2eb389ab0728",
    "createdAt": "2015-05-19T06:16:39Z",
    "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources\n+\n+import java.text.SimpleDateFormat\n+import java.util.Date\n+\n+import org.apache.hadoop.conf.{Configurable, Configuration}\n+import org.apache.hadoop.io.Writable\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.input.{CombineFileSplit, FileSplit}\n+import org.apache.spark.broadcast.Broadcast\n+\n+import org.apache.spark.{Partition => SparkPartition, _}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.executor.DataReadMethod\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.rdd.{RDD, HadoopRDD}\n+import org.apache.spark.rdd.NewHadoopRDD.NewHadoopMapPartitionsWithSplitRDD\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.util.Utils\n+\n+import scala.reflect.ClassTag\n+\n+private[spark] class SqlNewHadoopPartition(\n+    rddId: Int,\n+    val index: Int,\n+    @transient rawSplit: InputSplit with Writable)\n+  extends SparkPartition {\n+\n+  val serializableHadoopSplit = new SerializableWritable(rawSplit)\n+\n+  override def hashCode(): Int = 41 * (41 + rddId) + index\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * An RDD that provides core functionality for reading data stored in Hadoop (e.g., files in HDFS,\n+ * sources in HBase, or S3), using the new MapReduce API (`org.apache.hadoop.mapreduce`).\n+ * It is based on [[org.apache.spark.rdd.NewHadoopRDD]]. It has three additions.\n+ * 1. A shared broadcast Hadoop Configuration.\n+ * 2. An optional closure `initDriverSideJobFuncOpt` that set configurations at the driver side\n+ *    to the shared Hadoop Configuration.\n+ * 3. An optional closure `initLocalJobFuncOpt` that set configurations at both the driver side\n+ *    and the executor side to the shared Hadoop Configuration.\n+ *\n+ * @param sc The SparkContext to associate the RDD with.\n+ * @param inputFormatClass Storage format of the data to be read.\n+ * @param keyClass Class of the key associated with the inputFormatClass.\n+ * @param valueClass Class of the value associated with the inputFormatClass.\n+ * @param conf The Hadoop configuration.\n+ */\n+@DeveloperApi\n+class SqlNewHadoopRDD[K, V](\n+    @transient sc : SparkContext,\n+    broadcastedConf: Broadcast[SerializableWritable[Configuration]],\n+    @transient initDriverSideJobFuncOpt: Option[Job => Unit],\n+    initLocalJobFuncOpt: Option[Job => Unit],\n+    inputFormatClass: Class[_ <: InputFormat[K, V]],\n+    keyClass: Class[K],\n+    valueClass: Class[V])\n+  extends RDD[(K, V)](sc, Nil)\n+  with SparkHadoopMapReduceUtil\n+  with Logging {\n+\n+  if (initLocalJobFuncOpt.isDefined) {\n+    sc.clean(initLocalJobFuncOpt.get)\n+  }",
    "line": 80
  }],
  "prId": 6252
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Minor nit: might want to remove `@DeveloperApi` and all of the documentation from this and just mention that it's a clone + modify of NewHadoopRDD and that its functionality will probably be folded into core in a future release.\n",
    "commit": "6fa73dfa47b55bf00b440c407f1f2eb389ab0728",
    "createdAt": "2015-05-20T00:52:25Z",
    "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources\n+\n+import java.text.SimpleDateFormat\n+import java.util.Date\n+\n+import org.apache.hadoop.conf.{Configurable, Configuration}\n+import org.apache.hadoop.io.Writable\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.input.{CombineFileSplit, FileSplit}\n+import org.apache.spark.broadcast.Broadcast\n+\n+import org.apache.spark.{Partition => SparkPartition, _}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.executor.DataReadMethod\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.rdd.{RDD, HadoopRDD}\n+import org.apache.spark.rdd.NewHadoopRDD.NewHadoopMapPartitionsWithSplitRDD\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.util.Utils\n+\n+import scala.reflect.ClassTag\n+\n+private[spark] class SqlNewHadoopPartition(\n+    rddId: Int,\n+    val index: Int,\n+    @transient rawSplit: InputSplit with Writable)\n+  extends SparkPartition {\n+\n+  val serializableHadoopSplit = new SerializableWritable(rawSplit)\n+\n+  override def hashCode(): Int = 41 * (41 + rddId) + index\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * An RDD that provides core functionality for reading data stored in Hadoop (e.g., files in HDFS,\n+ * sources in HBase, or S3), using the new MapReduce API (`org.apache.hadoop.mapreduce`).\n+ * It is based on [[org.apache.spark.rdd.NewHadoopRDD]]. It has three additions.\n+ * 1. A shared broadcast Hadoop Configuration.\n+ * 2. An optional closure `initDriverSideJobFuncOpt` that set configurations at the driver side\n+ *    to the shared Hadoop Configuration.\n+ * 3. An optional closure `initLocalJobFuncOpt` that set configurations at both the driver side\n+ *    and the executor side to the shared Hadoop Configuration.\n+ *\n+ * @param sc The SparkContext to associate the RDD with.\n+ * @param inputFormatClass Storage format of the data to be read.\n+ * @param keyClass Class of the key associated with the inputFormatClass.\n+ * @param valueClass Class of the value associated with the inputFormatClass.\n+ * @param conf The Hadoop configuration.\n+ */\n+@DeveloperApi"
  }, {
    "author": {
      "login": "andrewor14"
    },
    "body": "yeah, unless there's a need I would prefer to make this private (since it's basically a copy of another class)\n",
    "commit": "6fa73dfa47b55bf00b440c407f1f2eb389ab0728",
    "createdAt": "2015-05-20T02:03:10Z",
    "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources\n+\n+import java.text.SimpleDateFormat\n+import java.util.Date\n+\n+import org.apache.hadoop.conf.{Configurable, Configuration}\n+import org.apache.hadoop.io.Writable\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.input.{CombineFileSplit, FileSplit}\n+import org.apache.spark.broadcast.Broadcast\n+\n+import org.apache.spark.{Partition => SparkPartition, _}\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.executor.DataReadMethod\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.rdd.{RDD, HadoopRDD}\n+import org.apache.spark.rdd.NewHadoopRDD.NewHadoopMapPartitionsWithSplitRDD\n+import org.apache.spark.storage.StorageLevel\n+import org.apache.spark.util.Utils\n+\n+import scala.reflect.ClassTag\n+\n+private[spark] class SqlNewHadoopPartition(\n+    rddId: Int,\n+    val index: Int,\n+    @transient rawSplit: InputSplit with Writable)\n+  extends SparkPartition {\n+\n+  val serializableHadoopSplit = new SerializableWritable(rawSplit)\n+\n+  override def hashCode(): Int = 41 * (41 + rddId) + index\n+}\n+\n+/**\n+ * :: DeveloperApi ::\n+ * An RDD that provides core functionality for reading data stored in Hadoop (e.g., files in HDFS,\n+ * sources in HBase, or S3), using the new MapReduce API (`org.apache.hadoop.mapreduce`).\n+ * It is based on [[org.apache.spark.rdd.NewHadoopRDD]]. It has three additions.\n+ * 1. A shared broadcast Hadoop Configuration.\n+ * 2. An optional closure `initDriverSideJobFuncOpt` that set configurations at the driver side\n+ *    to the shared Hadoop Configuration.\n+ * 3. An optional closure `initLocalJobFuncOpt` that set configurations at both the driver side\n+ *    and the executor side to the shared Hadoop Configuration.\n+ *\n+ * @param sc The SparkContext to associate the RDD with.\n+ * @param inputFormatClass Storage format of the data to be read.\n+ * @param keyClass Class of the key associated with the inputFormatClass.\n+ * @param valueClass Class of the value associated with the inputFormatClass.\n+ * @param conf The Hadoop configuration.\n+ */\n+@DeveloperApi"
  }],
  "prId": 6252
}]