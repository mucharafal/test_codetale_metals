[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Instead of add this class, it seems that what we need is a utility function to get all streaming queries from `activeStreamingQueries`.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-10-24T20:08:32Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.UUID\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+/**\n+ * A class that holds and manages [[StreamingQuery]].\n+ */\n+private[sql] class StreamQueryStore {\n+  private val lock = new Object\n+  private val cache = new mutable.HashMap[UUID, (StreamingQuery, Long)]()\n+\n+  def addStreamQuery(query: StreamingQuery): Unit = {\n+    lock.synchronized {\n+      if (!cache.contains(query.id)) {\n+        val curTime = System.currentTimeMillis()\n+        cache.put(query.id, (query, curTime))\n+      }\n+    }\n+  }\n+\n+  def existingStreamQueries: Seq[(StreamingQuery, Long)] = {"
  }],
  "prId": 26201
}, {
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'd like to hear the voices of tracking inactive streaming queries (with details), as it brings the code complexity as well as query information will be no longer be cleaned up. Technically, the only reason of introducing StreamQueryStore is tracking inactive streaming queries - otherwise existing `activeStreamingQueries` can serve the necessary features well.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-11-25T06:18:07Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.UUID\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+/**\n+ * A class that holds [[StreamingQuery]] active across all sessions to manage the lifecycle\n+ * of the stream.\n+ */\n+private[sql] class StreamQueryStore {\n+  private val activeStreamingQueries = new ConcurrentHashMap[UUID, (StreamingQuery, Long)]()\n+  // There maybe more than one inactive stream query with same query ID, as we can run same\n+  // stream query many times after it failed or terminated.\n+  private val inactiveStreamingQueries = new ConcurrentHashMap[(UUID, Long), StreamingQuery]()",
    "line": 35
  }, {
    "author": {
      "login": "uncleGen"
    },
    "body": "Yeah, tracking inactive streaming queries is used to provide the error details. It will be helpful when we submit multiple stream query into `Spark Thrifter Server`. It helps end-users to see why query failed.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-11-25T10:09:33Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.util.UUID\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.streaming.StreamingQuery\n+\n+/**\n+ * A class that holds [[StreamingQuery]] active across all sessions to manage the lifecycle\n+ * of the stream.\n+ */\n+private[sql] class StreamQueryStore {\n+  private val activeStreamingQueries = new ConcurrentHashMap[UUID, (StreamingQuery, Long)]()\n+  // There maybe more than one inactive stream query with same query ID, as we can run same\n+  // stream query many times after it failed or terminated.\n+  private val inactiveStreamingQueries = new ConcurrentHashMap[(UUID, Long), StreamingQuery]()",
    "line": 35
  }],
  "prId": 26201
}]