[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Woah, this is kinda dense and confusing. Can you please rewrite this in a simpler fashion and add comments? This is just my drive-by first impression.\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-09T18:15:03Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    if (tableName1.contains(\".\")) {\n+      val tableNameList = tableName1.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Also, can you add unit tests for this function? _Not_ end-to-end tests, but a test which exercises this method in isolation, similar to the ones that I have in `spark-redshift`?\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-09T18:16:32Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    if (tableName1.contains(\".\")) {\n+      val tableNameList = tableName1.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>"
  }],
  "prId": 10403
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Why is it correct to just drop quotes here? What if the schema name also contains a dot? Don't you need to keep track of quotes during the string processing in order to figure out where the schema name ends and the table name begins?\n\nNote that both the schema and table names could contain dots (AFAIK, if not please comment with a citation explaining why not), so simply grabbing the last component after a dot might not be correct.\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-09T18:18:08Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Also, `tableName1` is a bad name; if you were going to go with this approach, I'd call it something like `tableNameWithoutQuotes` (but I'm not sure that this unconditional quote-stripping is correct).\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-09T18:19:54Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")"
  }],
  "prId": 10403
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Is this supposed to return quoted identifiers? Or should that be the responsibility of another function? Just want to make sure that we're not double-quoting.\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-09T18:18:53Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    if (tableName1.contains(\".\")) {\n+      val tableNameList = tableName1.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>\n+        if (!\"\".equals(rightStr.trim())) {\n+          if (\"\".equals(leftStr.trim())) {\n+            leftStr + s\"`$rightStr`\"\n+          } else {\n+            leftStr + \".\" + s\"`$rightStr`\"\n+          }\n+        } else {\n+          leftStr\n+        }\n+      }\n+    } else {\n+      s\"`$tableName1`\""
  }, {
    "author": {
      "login": "naveenminchu"
    },
    "body": "Yes its to return quoted identifiers\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-10T12:08:59Z",
    "diffHunk": "@@ -41,6 +41,26 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  override def parseTableName(tableName: String): String = {\n+    val tableName1 = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    if (tableName1.contains(\".\")) {\n+      val tableNameList = tableName1.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>\n+        if (!\"\".equals(rightStr.trim())) {\n+          if (\"\".equals(leftStr.trim())) {\n+            leftStr + s\"`$rightStr`\"\n+          } else {\n+            leftStr + \".\" + s\"`$rightStr`\"\n+          }\n+        } else {\n+          leftStr\n+        }\n+      }\n+    } else {\n+      s\"`$tableName1`\""
  }],
  "prId": 10403
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I'm still not a fan of this `foldLeft`. Can you please write this in a more clear way?\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-13T20:01:50Z",
    "diffHunk": "@@ -40,6 +40,34 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  /**\n+   * Process table name in case of containing special characters like dot seperating database name\n+   * followed by table name (eg \"some database\".\"some-table-name\") or \n+   * in case it contains characters that require quotes (e.g. space).\n+   */\n+  override def schemaQualifiedTableName(tableName: String): String = {\n+    //Removing quotes so that we can add them correctly.\n+    val tableNameWithoutQuotes = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    \n+    //If block for addressing the case of . (eg \"some database\".\"some-table-name\")\n+    if (tableNameWithoutQuotes.contains(\".\")) {\n+      val tableNameList = tableNameWithoutQuotes.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>",
    "line": 17
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Ping. Any updates here?\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-01-24T20:04:27Z",
    "diffHunk": "@@ -40,6 +40,34 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  /**\n+   * Process table name in case of containing special characters like dot seperating database name\n+   * followed by table name (eg \"some database\".\"some-table-name\") or \n+   * in case it contains characters that require quotes (e.g. space).\n+   */\n+  override def schemaQualifiedTableName(tableName: String): String = {\n+    //Removing quotes so that we can add them correctly.\n+    val tableNameWithoutQuotes = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    \n+    //If block for addressing the case of . (eg \"some database\".\"some-table-name\")\n+    if (tableNameWithoutQuotes.contains(\".\")) {\n+      val tableNameList = tableNameWithoutQuotes.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>",
    "line": 17
  }, {
    "author": {
      "login": "naveenminchu"
    },
    "body": "Will address it these week sometime\n",
    "commit": "fe27b7bc2a2407d9025a2ea6f10731b5dcc66130",
    "createdAt": "2016-02-01T06:10:47Z",
    "diffHunk": "@@ -40,6 +40,34 @@ private case object MySQLDialect extends JdbcDialect {\n   override def quoteIdentifier(colName: String): String = {\n     s\"`$colName`\"\n   }\n+  \n+  /**\n+   * Process table name in case of containing special characters like dot seperating database name\n+   * followed by table name (eg \"some database\".\"some-table-name\") or \n+   * in case it contains characters that require quotes (e.g. space).\n+   */\n+  override def schemaQualifiedTableName(tableName: String): String = {\n+    //Removing quotes so that we can add them correctly.\n+    val tableNameWithoutQuotes = tableName.replace(\"\\\"\", \"\").replace(\"\\'\", \"\")\n+    \n+    //If block for addressing the case of . (eg \"some database\".\"some-table-name\")\n+    if (tableNameWithoutQuotes.contains(\".\")) {\n+      val tableNameList = tableNameWithoutQuotes.split('.')\n+      tableNameList.foldLeft(\"\") { (leftStr, rightStr) =>",
    "line": 17
  }],
  "prId": 10403
}]