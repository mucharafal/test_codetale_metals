[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Is this logic duplicated elsewhere?  Should `CalendarInterval.fromString` just do this internally?\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:39:13Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {",
    "line": 82
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> Is this logic duplicated elsewhere? Should CalendarInterval.fromString just do this internally?\n\nSQL also uses `CalendarInterval.fromString` to parse the interval and the syntax requires `INTERVAL value unit`. Hence, I cannot move the logic into  CalendarInterval.fromString\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T21:51:49Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {",
    "line": 82
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "The presence of `INTERVAL` isn't also enforced by the grammar?\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-04T17:44:23Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {",
    "line": 82
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "`Used to indicate how often results should be produced by a [[ContinuousQuery]].` or something like that.  I don't know if we want to say `batch` in the public API.\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:41:06Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch."
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Nice documentation!  Maybe put the typesafe one second and include the `import`s that are required.\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:42:34Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Used to create [[ProcessingTime]] triggers for [[ContinuousQueries]]. Or something.\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:43:38Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "everything here should be @experimental\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:44:09Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: extra line\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:44:33Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "i find this very verbose. @marmbrus what do you think of having a shortcut `trigger(\"10 seconds\")`\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:45:24Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "I think thats confusing as soon as you support event time triggers.\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:48:36Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Needs docs with examples\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:59:17Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {\n+      CalendarInterval.fromString(interval)\n+    } else {\n+      CalendarInterval.fromString(\"interval \" + interval)\n+    }\n+    if (cal == null) {\n+      throw new IllegalArgumentException(s\"Invalid interval: $interval\")\n+    }\n+    if (cal.months > 0) {\n+      throw new IllegalArgumentException(s\"Doesn't support month or year interval: $interval\")\n+    }\n+    new ProcessingTime(cal.microseconds / 1000)\n+  }\n+\n+  def apply(interval: Duration): ProcessingTime = {"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Needs scala docs with examples\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:59:41Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {\n+      CalendarInterval.fromString(interval)\n+    } else {\n+      CalendarInterval.fromString(\"interval \" + interval)\n+    }\n+    if (cal == null) {\n+      throw new IllegalArgumentException(s\"Invalid interval: $interval\")\n+    }\n+    if (cal.months > 0) {\n+      throw new IllegalArgumentException(s\"Doesn't support month or year interval: $interval\")\n+    }\n+    new ProcessingTime(cal.microseconds / 1000)\n+  }\n+\n+  def apply(interval: Duration): ProcessingTime = {\n+    new ProcessingTime(interval.toMillis)\n+  }\n+\n+  def create(interval: String): ProcessingTime = {"
  }],
  "prId": 11976
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Needs scala docs with examples\n",
    "commit": "6c1b382be6fbe07fabbb92249c06967f9603ac00",
    "createdAt": "2016-04-01T20:59:48Z",
    "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.TimeUnit\n+\n+import scala.concurrent.duration.Duration\n+\n+import org.apache.commons.lang3.StringUtils\n+\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * A interface that indicates how to run a batch.\n+ */\n+sealed trait Trigger {}\n+\n+/**\n+ * A trigger that runs a query periodically based on the processing time. If `intervalMs` is 0,\n+ * the query will run as fast as possible.\n+ *\n+ * Scala Example:\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime(10.seconds))\n+ *   def.writer.trigger(ProcessingTime(\"10 seconds\"))\n+ * }}}\n+ *\n+ * Java Example:\n+ *\n+ * {{{\n+ *   def.writer.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+ *   def.writer.trigger(ProcessingTime.create(\"10 seconds\"))\n+ * }}}\n+ */\n+case class ProcessingTime(intervalMs: Long) extends Trigger {\n+  require(intervalMs >= 0, \"the interval of trigger should not be negative\")\n+}\n+\n+object ProcessingTime {\n+\n+  def apply(interval: String): ProcessingTime = {\n+    if (StringUtils.isBlank(interval)) {\n+      throw new IllegalArgumentException(\n+        \"interval cannot be null or blank.\")\n+    }\n+    val cal = if (interval.startsWith(\"interval\")) {\n+      CalendarInterval.fromString(interval)\n+    } else {\n+      CalendarInterval.fromString(\"interval \" + interval)\n+    }\n+    if (cal == null) {\n+      throw new IllegalArgumentException(s\"Invalid interval: $interval\")\n+    }\n+    if (cal.months > 0) {\n+      throw new IllegalArgumentException(s\"Doesn't support month or year interval: $interval\")\n+    }\n+    new ProcessingTime(cal.microseconds / 1000)\n+  }\n+\n+  def apply(interval: Duration): ProcessingTime = {\n+    new ProcessingTime(interval.toMillis)\n+  }\n+\n+  def create(interval: String): ProcessingTime = {\n+    apply(interval)\n+  }\n+\n+  def create(interval: Long, unit: TimeUnit): ProcessingTime = {"
  }],
  "prId": 11976
}]