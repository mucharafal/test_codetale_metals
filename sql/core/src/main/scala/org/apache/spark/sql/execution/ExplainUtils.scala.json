[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "since this method put its result in the parameter `subqueries`, I think we don't need to call `flatMap` and `collect`, just `foreach`.",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-07T17:45:03Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan We need the collect to traverse the expression tree. I have changed flatMap to foreach.",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-07T22:35:19Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "> We need the collect to traverse the expression tree\r\n\r\nhmm, can we use `foreach` to traverse the expression tree? We have `TreeNode.foreach`",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-08T07:03:30Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan We have it in this form : \r\np.expressions.foreach(_.collect {\r\n    ...\r\n    ...\r\n})\r\n\r\nYou are suggesting to do : \r\n\r\np.expressions.foreach(_.foreach {\r\n    ...\r\n    ...\r\n}\r\n\r\n?",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-08T07:18:40Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "yup",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-08T08:19:38Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan Got it... I will send a small follow-up. Thank you.",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-14T05:59:26Z",
    "diffHunk": "@@ -199,8 +199,8 @@ object ExplainUtils {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>",
    "line": 11
  }],
  "prId": 26039
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "The reason why we remove it is because it is uesless. collect is accepting partial functions. ",
    "commit": "316e0743d3f25527a495c5349ebf12faed43ba60",
    "createdAt": "2019-10-08T06:38:25Z",
    "diffHunk": "@@ -193,14 +193,14 @@ object ExplainUtils {\n       subqueries: ArrayBuffer[(SparkPlan, Expression, BaseSubqueryExec)]): Unit = {\n     plan.foreach {\n       case p: SparkPlan =>\n-        p.expressions.flatMap(_.collect {\n+        p.expressions.foreach (_.collect {\n           case e: PlanExpression[_] =>\n             e.plan match {\n               case s: BaseSubqueryExec =>\n                 subqueries += ((p, e, s))\n                 getSubqueries(s, subqueries)\n+              case _ =>\n             }\n-          case other =>",
    "line": 13
  }],
  "prId": 26039
}]