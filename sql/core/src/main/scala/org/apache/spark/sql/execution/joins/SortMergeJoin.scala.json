[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "How about we at a comment at https://github.com/apache/spark/pull/7973/files#diff-b669f8cf35f1d2d786582f4d8c49ed14R59 to explain the direction must be `Ascending`. So, the direction in `requiredOrders` is consistent with the direction we are using at here.\n",
    "commit": "e610655f1dc96865523baf1353a7636714d68764",
    "createdAt": "2015-08-05T21:04:23Z",
    "diffHunk": "@@ -68,6 +65,8 @@ case class SortMergeJoin(\n \n     leftResults.zipPartitions(rightResults) { (leftIter, rightIter) =>\n       new Iterator[InternalRow] {\n+        // An ordering that can be used to compare keys from both sides.\n+        private[this] val keyOrdering = newNaturalAscendingOrdering(leftKeys.map(_.dataType))",
    "line": 27
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Will do.\n",
    "commit": "e610655f1dc96865523baf1353a7636714d68764",
    "createdAt": "2015-08-05T21:12:58Z",
    "diffHunk": "@@ -68,6 +65,8 @@ case class SortMergeJoin(\n \n     leftResults.zipPartitions(rightResults) { (leftIter, rightIter) =>\n       new Iterator[InternalRow] {\n+        // An ordering that can be used to compare keys from both sides.\n+        private[this] val keyOrdering = newNaturalAscendingOrdering(leftKeys.map(_.dataType))",
    "line": 27
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Done.\n",
    "commit": "e610655f1dc96865523baf1353a7636714d68764",
    "createdAt": "2015-08-05T21:15:34Z",
    "diffHunk": "@@ -68,6 +65,8 @@ case class SortMergeJoin(\n \n     leftResults.zipPartitions(rightResults) { (leftIter, rightIter) =>\n       new Iterator[InternalRow] {\n+        // An ordering that can be used to compare keys from both sides.\n+        private[this] val keyOrdering = newNaturalAscendingOrdering(leftKeys.map(_.dataType))",
    "line": 27
  }],
  "prId": 7973
}]