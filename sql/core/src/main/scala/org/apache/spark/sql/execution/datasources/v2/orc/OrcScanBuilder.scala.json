[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Add the following here and pass as the 3rd parameter. to `convertibleFilters`.\r\n```\r\nval dataTypeMap = schema.map(f => f.name -> f.dataType).toMap\r\n```",
    "commit": "6e875323a430cee190a458b8842adea44bb4e0b7",
    "createdAt": "2019-01-11T07:38:20Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.orc.OrcFilters\n+import org.apache.spark.sql.execution.datasources.v2.FileScanBuilder\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.types.StructType\n+\n+case class OrcScanBuilder(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    schema: StructType,\n+    dataSchema: StructType,\n+    options: DataSourceOptions) extends FileScanBuilder(schema) {\n+  lazy val hadoopConf =\n+    sparkSession.sessionState.newHadoopConfWithOptions(options.asMap().asScala.toMap)\n+\n+  override def build(): Scan = {\n+    OrcScan(sparkSession, hadoopConf, fileIndex, schema, dataSchema, readSchema)\n+  }\n+\n+  private var _pushedFilters: Array[Filter] = Array.empty\n+\n+  override def pushFilters(filters: Array[Filter]): Array[Filter] = {\n+    if (sparkSession.sessionState.conf.orcFilterPushDown) {\n+      OrcFilters.createFilter(schema, filters).foreach { f =>\n+        OrcInputFormat.setSearchArgument(hadoopConf, f, schema.fieldNames)\n+      }",
    "line": 54
  }],
  "prId": 23383
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This doesn't consider pushed filters?",
    "commit": "6e875323a430cee190a458b8842adea44bb4e0b7",
    "createdAt": "2019-01-16T10:43:15Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.orc.OrcFilters\n+import org.apache.spark.sql.execution.datasources.v2.FileScanBuilder\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.types.StructType\n+\n+case class OrcScanBuilder(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    schema: StructType,\n+    dataSchema: StructType,\n+    options: DataSourceOptions) extends FileScanBuilder(schema) {\n+  lazy val hadoopConf =\n+    sparkSession.sessionState.newHadoopConfWithOptions(options.asMap().asScala.toMap)\n+\n+  override def build(): Scan = {\n+    OrcScan(sparkSession, hadoopConf, fileIndex, schema, dataSchema, readSchema)"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "It is set in `hadoopConf`:\r\n`OrcInputFormat.setSearchArgument(hadoopConf, f, schema.fieldNames)`\r\nBuilding reader with the `hadoopConf` is enough.",
    "commit": "6e875323a430cee190a458b8842adea44bb4e0b7",
    "createdAt": "2019-01-16T11:40:06Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.orc.OrcFilters\n+import org.apache.spark.sql.execution.datasources.v2.FileScanBuilder\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.types.StructType\n+\n+case class OrcScanBuilder(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    schema: StructType,\n+    dataSchema: StructType,\n+    options: DataSourceOptions) extends FileScanBuilder(schema) {\n+  lazy val hadoopConf =\n+    sparkSession.sessionState.newHadoopConfWithOptions(options.asMap().asScala.toMap)\n+\n+  override def build(): Scan = {\n+    OrcScan(sparkSession, hadoopConf, fileIndex, schema, dataSchema, readSchema)"
  }],
  "prId": 23383
}]