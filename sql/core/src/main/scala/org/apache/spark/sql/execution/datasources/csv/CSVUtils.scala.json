[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: remove `s`",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T06:59:27Z",
    "diffHunk": "@@ -97,23 +97,21 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(s\"Delimiter cannot be empty string\")"
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "removed",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T09:27:46Z",
    "diffHunk": "@@ -97,23 +97,21 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(s\"Delimiter cannot be empty string\")"
  }],
  "prId": 22654
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Regarding the backslash support, I think we should follow https://docs.oracle.com/javase/tutorial/java/data/characters.html \r\n`case Seq('\\\\', '\\\\') => '\\\\'` \r\n",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T07:10:15Z",
    "diffHunk": "@@ -97,23 +97,21 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(s\"Delimiter cannot be empty string\")\n+      case Seq(c) => c\n+      case Seq('\\\\', 't') => '\\t'\n+      case Seq('\\\\', 'r') => '\\r'\n+      case Seq('\\\\', 'b') => '\\b'\n+      case Seq('\\\\', 'f') => '\\f'\n+      // In case user changes quote char and uses \\\" as delimiter in options\n+      case Seq('\\\\', '\\\"') => '\\\"'\n+      case Seq('\\\\', '\\'') => '\\''",
    "line": 33
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Added the case + a test for that",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T10:06:13Z",
    "diffHunk": "@@ -97,23 +97,21 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(s\"Delimiter cannot be empty string\")\n+      case Seq(c) => c\n+      case Seq('\\\\', 't') => '\\t'\n+      case Seq('\\\\', 'r') => '\\r'\n+      case Seq('\\\\', 'b') => '\\b'\n+      case Seq('\\\\', 'f') => '\\f'\n+      // In case user changes quote char and uses \\\" as delimiter in options\n+      case Seq('\\\\', '\\\"') => '\\\"'\n+      case Seq('\\\\', '\\'') => '\\''",
    "line": 33
  }],
  "prId": 22654
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "I'm missing why we had to switch up the case statement like this. I get that we need to cover more cases, but there was duplication and now there is a bit more. What about ...\r\n\r\n```\r\nstr.length match {\r\n  case 0 => // error\r\n  case 1 => str(0)\r\n  case 2 if str(0) == '\\\\' =>\r\n    str(1) match {\r\n      case c if \"\"\"trbf\"'\\\"\"\".contains(c) => c\r\n      case 'u' if str == \"\"\"\\u0000\"\"\" => '\\0'\r\n      case _ => // error\r\n    }\r\n  case _ => // error\r\n}\r\n```",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T14:32:07Z",
    "diffHunk": "@@ -97,23 +97,22 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(\"Delimiter cannot be empty string\")\n+      case Seq(c) => c",
    "line": 26
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "I would prefer more declarative way and less nested levels of controls. but this is personal opinion. Let's look at your example:\r\n```\r\nstr.length\r\n```\r\nyou didn't check that str can be null. \r\n\r\n```\r\ncase 2 if str(0) == '\\\\' =>\r\ncase 'u' if str == \"\"\"\\u0000\"\"\" => '\\0'\r\n```\r\nIf it has length 2, how `str` could be `\"\"\"\\u0000\"\"\"`?\r\n\r\n```\r\ncase c if \"\"\"trbf\"'\\\"\"\".contains(c) => c\r\n```\r\nYou should produce control chars not just second char. For example: `\\t` -> Seq('\\', 't') -> '\\t`.\r\n\r\nIn my approach, everything is simple. One input case is mapped to one output. There is no unnecessary complexity.  \r\n",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T15:24:25Z",
    "diffHunk": "@@ -97,23 +97,22 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(\"Delimiter cannot be empty string\")\n+      case Seq(c) => c",
    "line": 26
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Ah yeah good points. This is too clever, off the top of my head. I still wonder if the code here can reduce the duplication of `Seq('\\\\', c) => '\\c'` but I don't see a way that actually works, yeah. ",
    "commit": "20856b4132cbc6aa34484144112f3463e47c4906",
    "createdAt": "2018-10-09T15:28:55Z",
    "diffHunk": "@@ -97,23 +97,22 @@ object CSVUtils {\n    */\n   @throws[IllegalArgumentException]\n   def toChar(str: String): Char = {\n-    if (str.charAt(0) == '\\\\') {\n-      str.charAt(1)\n-      match {\n-        case 't' => '\\t'\n-        case 'r' => '\\r'\n-        case 'b' => '\\b'\n-        case 'f' => '\\f'\n-        case '\\\"' => '\\\"' // In case user changes quote char and uses \\\" as delimiter in options\n-        case '\\'' => '\\''\n-        case 'u' if str == \"\"\"\\u0000\"\"\" => '\\u0000'\n-        case _ =>\n-          throw new IllegalArgumentException(s\"Unsupported special character for delimiter: $str\")\n-      }\n-    } else if (str.length == 1) {\n-      str.charAt(0)\n-    } else {\n-      throw new IllegalArgumentException(s\"Delimiter cannot be more than one character: $str\")\n+    (str: Seq[Char]) match {\n+      case Seq() => throw new IllegalArgumentException(\"Delimiter cannot be empty string\")\n+      case Seq(c) => c",
    "line": 26
  }],
  "prId": 22654
}]