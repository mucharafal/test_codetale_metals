[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Nit, I know that this follows the previous one in `TextFileFormat`. But, what about declaring a private `val` for this and return it because this is a constant?",
    "commit": "66b893dcf250e779c7c7cf93d21148fff64c30de",
    "createdAt": "2019-04-01T21:59:16Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.text\n+\n+import org.apache.hadoop.fs.FileStatus\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.FileFormat\n+import org.apache.spark.sql.execution.datasources.v2.FileTable\n+import org.apache.spark.sql.sources.v2.writer.WriteBuilder\n+import org.apache.spark.sql.types.{DataType, StringType, StructType}\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+case class TextTable(\n+    name: String,\n+    sparkSession: SparkSession,\n+    options: CaseInsensitiveStringMap,\n+    paths: Seq[String],\n+    userSpecifiedSchema: Option[StructType],\n+    fallbackFileFormat: Class[_ <: FileFormat])\n+  extends FileTable(sparkSession, options, paths, userSpecifiedSchema) {\n+  override def newScanBuilder(options: CaseInsensitiveStringMap): TextScanBuilder =\n+    TextScanBuilder(sparkSession, fileIndex, schema, dataSchema, options)\n+\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] =\n+    Some(new StructType().add(\"value\", StringType))"
  }],
  "prId": 24207
}]