[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "combine line 51 and 52?",
    "commit": "7e5a57c3e4d9550d2ddd8a971293ace3984b5447",
    "createdAt": "2017-09-23T17:32:54Z",
    "diffHunk": "@@ -43,6 +43,17 @@ private class AggregatedDialect(dialects: List[JdbcDialect]) extends JdbcDialect\n   }\n \n   override def isCascadingTruncateTable(): Option[Boolean] = {\n-    dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    // If any dialect claims cascading truncate, this dialect is also cascading truncate.\n+    // Otherwise, if any dialect has unknown cascading truncate, this dialect is also unknown.\n+    val cascading = dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    if (cascading.getOrElse(false)) {\n+      cascading\n+    } else {\n+      if (dialects.exists(_.isCascadingTruncateTable().isEmpty)) {"
  }],
  "prId": 19286
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Use case-match?",
    "commit": "7e5a57c3e4d9550d2ddd8a971293ace3984b5447",
    "createdAt": "2017-09-23T17:34:12Z",
    "diffHunk": "@@ -43,6 +43,17 @@ private class AggregatedDialect(dialects: List[JdbcDialect]) extends JdbcDialect\n   }\n \n   override def isCascadingTruncateTable(): Option[Boolean] = {\n-    dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    // If any dialect claims cascading truncate, this dialect is also cascading truncate.\n+    // Otherwise, if any dialect has unknown cascading truncate, this dialect is also unknown.\n+    val cascading = dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    if (cascading.getOrElse(false)) {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Done.",
    "commit": "7e5a57c3e4d9550d2ddd8a971293ace3984b5447",
    "createdAt": "2017-09-24T00:40:11Z",
    "diffHunk": "@@ -43,6 +43,17 @@ private class AggregatedDialect(dialects: List[JdbcDialect]) extends JdbcDialect\n   }\n \n   override def isCascadingTruncateTable(): Option[Boolean] = {\n-    dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    // If any dialect claims cascading truncate, this dialect is also cascading truncate.\n+    // Otherwise, if any dialect has unknown cascading truncate, this dialect is also unknown.\n+    val cascading = dialects.flatMap(_.isCascadingTruncateTable()).reduceOption(_ || _)\n+    if (cascading.getOrElse(false)) {"
  }],
  "prId": 19286
}]