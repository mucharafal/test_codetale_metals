[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Is this useful for users? If this is only for developers, let's not use `logInfo`.",
    "commit": "aa67565d4240cdbde738f7a9b2d9bf1bd7cf8beb",
    "createdAt": "2018-12-22T03:31:38Z",
    "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.jdbc\n+\n+import java.sql.{Connection, PreparedStatement, SQLException}\n+import java.util.Locale\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils.makeSetter\n+import org.apache.spark.sql.jdbc.JdbcDialects\n+import org.apache.spark.sql.sources.v2.writer.{DataWriter, WriterCommitMessage}\n+import org.apache.spark.sql.sources.v2.writer.streaming.{StreamingDataWriterFactory, StreamingWriteSupport}\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Dummy commit message. The DataSourceV2 framework requires a commit message implementation but we\n+ * don't need to really send one.\n+ */\n+case object JdbcWriterCommitMessage extends WriterCommitMessage\n+\n+/**\n+ * A [[StreamingWriteSupport]] for jdbc writing.\n+ * Responsible for generating the writer factory.\n+ */\n+class JdbcStreamingWriteSupport(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends StreamingWriteSupport with Logging {\n+\n+  override def commit(epochId: Long, messages: Array[WriterCommitMessage]): Unit = {\n+    logInfo(s\"epoch ${epochId} of JdbcStreamWriter commited!\")\n+  }\n+  override def abort(epochId: Long, messages: Array[WriterCommitMessage]): Unit = {\n+    logInfo(s\"epoch ${epochId} of JdbcStreamWriter aborted!\")\n+  }\n+  override def createStreamingWriterFactory(): StreamingDataWriterFactory = {\n+    new JdbcStreamWriterFactory(schema, options)\n+  }\n+}\n+\n+/**\n+ * A [[StreamingDataWriterFactory]] for jdbc writing.\n+ * Will be serialized and sent to executors to generate the per-task data writers.\n+ */\n+case class JdbcStreamWriterFactory(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends StreamingDataWriterFactory {\n+\n+  override def createWriter(\n+    partitionId: Int,\n+    taskId: Long,\n+    epochId: Long): DataWriter[InternalRow] = {\n+    JdbcStreamDataWriter(schema, options)\n+  }\n+}\n+\n+/**\n+ * A [[DataWriter]] for Jdbc writing.\n+ * One data writer will be created in each partition to process incoming rows.\n+ */\n+case class JdbcStreamDataWriter(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends DataWriter[InternalRow] with Logging {\n+\n+  private val jdbcOptions = new JDBCOptions(options)\n+\n+  // use a local cache for batch write to jdbc.\n+  private val batchSize = jdbcOptions.batchSize\n+  private val localBuffer = new ArrayBuffer[Row](batchSize)\n+  private val maxRetryNum = jdbcOptions.maxRetryNumber\n+\n+  // the first part is the column name list, the second part is the placeholder string.\n+  private val sqlPart: (String, String) = {\n+    val columnListBuilder = new StringBuilder()\n+    val holderListBuilder = new StringBuilder()\n+    schema.fields.foreach { field =>\n+      columnListBuilder.append(\",\").append(field.name)\n+      holderListBuilder.append(\",?\")\n+    }\n+    assert(columnListBuilder.nonEmpty, \"Empty schema of data!\")\n+    (columnListBuilder.substring(1), holderListBuilder.substring(1))\n+  }\n+\n+  private val sql: String = s\"REPLACE INTO ${jdbcOptions.tableOrQuery}\" +\n+    s\" ( ${sqlPart._1} ) values ( ${sqlPart._2} )\"\n+\n+  logInfo(s\"Sql string for jdbc writing is ${sql}\")"
  }, {
    "author": {
      "login": "yanlin-Lynn"
    },
    "body": "OK, I will change to logTrace",
    "commit": "aa67565d4240cdbde738f7a9b2d9bf1bd7cf8beb",
    "createdAt": "2018-12-25T00:59:12Z",
    "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.jdbc\n+\n+import java.sql.{Connection, PreparedStatement, SQLException}\n+import java.util.Locale\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.encoders.RowEncoder\n+import org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils.makeSetter\n+import org.apache.spark.sql.jdbc.JdbcDialects\n+import org.apache.spark.sql.sources.v2.writer.{DataWriter, WriterCommitMessage}\n+import org.apache.spark.sql.sources.v2.writer.streaming.{StreamingDataWriterFactory, StreamingWriteSupport}\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Dummy commit message. The DataSourceV2 framework requires a commit message implementation but we\n+ * don't need to really send one.\n+ */\n+case object JdbcWriterCommitMessage extends WriterCommitMessage\n+\n+/**\n+ * A [[StreamingWriteSupport]] for jdbc writing.\n+ * Responsible for generating the writer factory.\n+ */\n+class JdbcStreamingWriteSupport(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends StreamingWriteSupport with Logging {\n+\n+  override def commit(epochId: Long, messages: Array[WriterCommitMessage]): Unit = {\n+    logInfo(s\"epoch ${epochId} of JdbcStreamWriter commited!\")\n+  }\n+  override def abort(epochId: Long, messages: Array[WriterCommitMessage]): Unit = {\n+    logInfo(s\"epoch ${epochId} of JdbcStreamWriter aborted!\")\n+  }\n+  override def createStreamingWriterFactory(): StreamingDataWriterFactory = {\n+    new JdbcStreamWriterFactory(schema, options)\n+  }\n+}\n+\n+/**\n+ * A [[StreamingDataWriterFactory]] for jdbc writing.\n+ * Will be serialized and sent to executors to generate the per-task data writers.\n+ */\n+case class JdbcStreamWriterFactory(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends StreamingDataWriterFactory {\n+\n+  override def createWriter(\n+    partitionId: Int,\n+    taskId: Long,\n+    epochId: Long): DataWriter[InternalRow] = {\n+    JdbcStreamDataWriter(schema, options)\n+  }\n+}\n+\n+/**\n+ * A [[DataWriter]] for Jdbc writing.\n+ * One data writer will be created in each partition to process incoming rows.\n+ */\n+case class JdbcStreamDataWriter(\n+    schema: StructType,\n+    options: Map[String, String]\n+  ) extends DataWriter[InternalRow] with Logging {\n+\n+  private val jdbcOptions = new JDBCOptions(options)\n+\n+  // use a local cache for batch write to jdbc.\n+  private val batchSize = jdbcOptions.batchSize\n+  private val localBuffer = new ArrayBuffer[Row](batchSize)\n+  private val maxRetryNum = jdbcOptions.maxRetryNumber\n+\n+  // the first part is the column name list, the second part is the placeholder string.\n+  private val sqlPart: (String, String) = {\n+    val columnListBuilder = new StringBuilder()\n+    val holderListBuilder = new StringBuilder()\n+    schema.fields.foreach { field =>\n+      columnListBuilder.append(\",\").append(field.name)\n+      holderListBuilder.append(\",?\")\n+    }\n+    assert(columnListBuilder.nonEmpty, \"Empty schema of data!\")\n+    (columnListBuilder.substring(1), holderListBuilder.substring(1))\n+  }\n+\n+  private val sql: String = s\"REPLACE INTO ${jdbcOptions.tableOrQuery}\" +\n+    s\" ( ${sqlPart._1} ) values ( ${sqlPart._2} )\"\n+\n+  logInfo(s\"Sql string for jdbc writing is ${sql}\")"
  }],
  "prId": 23369
}]