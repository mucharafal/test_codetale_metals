[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "println\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T05:12:26Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.NumericType\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Number, y: Number): this.type = {\n+      val oldX = xAvg\n+      val otherX = x.doubleValue()\n+      val otherY = y.doubleValue()\n+      count += 1\n+      xAvg += (otherX - xAvg) / count\n+      yAvg += (otherY - yAvg) / count\n+      println(oldX)"
  }],
  "prId": 5825
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "why Number type?\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T05:12:38Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.NumericType\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Number, y: Number): this.type = {"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "So that we can handle all types ranging from Int, Long, Double, ..., BigDecimal, etc...\nWe should be able to handle all those types right? Simply trying `row(0).getDouble` throws CastErrors.\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T05:44:48Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.NumericType\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Number, y: Number): this.type = {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "you can add a cast to double when you do the select\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T05:47:45Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.NumericType\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Number, y: Number): this.type = {"
  }],
  "prId": 5825
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Should be `Long`.\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T07:00:35Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.{DoubleType, NumericType}\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0"
  }],
  "prId": 5825
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "provide a link to the wikipedia page for reference\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T07:00:37Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.{DoubleType, NumericType}\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Double, y: Double): this.type = {\n+      val oldX = xAvg\n+      count += 1\n+      xAvg += (x - xAvg) / count\n+      yAvg += (y - yAvg) / count\n+      Ck += (y - yAvg) * (x - oldX)\n+      this\n+    }\n+    // merge counters from other partitions"
  }],
  "prId": 5825
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "`(count * other.count) / totalCount` is risky (overflow). `* count / totalCount * other.count` is safer.\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T07:00:39Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.{DoubleType, NumericType}\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0\n+    // add an example to the calculation\n+    def add(x: Double, y: Double): this.type = {\n+      val oldX = xAvg\n+      count += 1\n+      xAvg += (x - xAvg) / count\n+      yAvg += (y - yAvg) / count\n+      Ck += (y - yAvg) * (x - oldX)\n+      this\n+    }\n+    // merge counters from other partitions\n+    def merge(other: CovarianceCounter): this.type = {\n+      val totalCount = count + other.count\n+      Ck += other.Ck + \n+        (xAvg - other.xAvg) * (yAvg - other.yAvg) * (count * other.count) / totalCount"
  }],
  "prId": 5825
}, {
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "Just remember that this should be sample covariance (dividing by (n-1) and 0 if n is 1). Try R and make sure we output the same, and then update the doc. See:\n\nhttps://github.com/apache/spark/blob/master/mllib/src/test/scala/org/apache/spark/ml/regression/LinearRegressionSuite.scala#L144\n",
    "commit": "cb18046a5cee431e08bf5682b1645507ee7f08a7",
    "createdAt": "2015-05-01T15:52:04Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.{Column, DataFrame}\n+import org.apache.spark.sql.types.{DoubleType, NumericType}\n+\n+private[sql] object StatFunctions {\n+  \n+  /** Helper class to simplify tracking and merging counts. */\n+  private class CovarianceCounter extends Serializable {\n+    var xAvg = 0.0\n+    var yAvg = 0.0\n+    var Ck = 0.0\n+    var count = 0L\n+    // add an example to the calculation\n+    def add(x: Double, y: Double): this.type = {\n+      val oldX = xAvg\n+      count += 1\n+      xAvg += (x - xAvg) / count\n+      yAvg += (y - yAvg) / count\n+      Ck += (y - yAvg) * (x - oldX)\n+      this\n+    }\n+    // merge counters from other partitions. Formula can be found at:\n+    // http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Covariance\n+    def merge(other: CovarianceCounter): this.type = {\n+      val totalCount = count + other.count\n+      Ck += other.Ck + \n+        (xAvg - other.xAvg) * (yAvg - other.yAvg) * count / totalCount * other.count\n+      xAvg = (xAvg * count + other.xAvg * other.count) / totalCount\n+      yAvg = (yAvg * count + other.yAvg * other.count) / totalCount\n+      count = totalCount\n+      this\n+    }\n+    // return the covariance for the observed examples\n+    def cov: Double = Ck / count"
  }],
  "prId": 5825
}]