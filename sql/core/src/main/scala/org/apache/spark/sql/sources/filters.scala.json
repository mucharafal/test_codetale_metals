[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why it's a case class instead of object?",
    "commit": "0e42cc28b173f55c645c863732fb13d1343d4d75",
    "createdAt": "2019-02-01T02:05:15Z",
    "diffHunk": "@@ -218,3 +218,23 @@ case class StringEndsWith(attribute: String, value: String) extends Filter {\n case class StringContains(attribute: String, value: String) extends Filter {\n   override def references: Array[String] = Array(attribute)\n }\n+\n+/**\n+ * A filter that always evaluates to `true`.\n+ */\n+case class AlwaysTrue() extends Filter {",
    "line": 18
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "There's an object that extends it just below. I thought it was still a good idea to match the pattern of the other filters and make a class as well as an object, since this will be used by Java code. Checking `instanceof AlwaysTrue$` or `== AlwaysTrue$.MODULE$` leaks Scala details into Java.",
    "commit": "0e42cc28b173f55c645c863732fb13d1343d4d75",
    "createdAt": "2019-02-01T02:54:29Z",
    "diffHunk": "@@ -218,3 +218,23 @@ case class StringEndsWith(attribute: String, value: String) extends Filter {\n case class StringContains(attribute: String, value: String) extends Filter {\n   override def references: Array[String] = Array(attribute)\n }\n+\n+/**\n+ * A filter that always evaluates to `true`.\n+ */\n+case class AlwaysTrue() extends Filter {",
    "line": 18
  }],
  "prId": 23606
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Mark them `@Evolving`? See the other APIs in the same file.",
    "commit": "0e42cc28b173f55c645c863732fb13d1343d4d75",
    "createdAt": "2019-02-10T00:10:06Z",
    "diffHunk": "@@ -218,3 +218,23 @@ case class StringEndsWith(attribute: String, value: String) extends Filter {\n case class StringContains(attribute: String, value: String) extends Filter {\n   override def references: Array[String] = Array(attribute)\n }\n+\n+/**\n+ * A filter that always evaluates to `true`.\n+ */\n+case class AlwaysTrue() extends Filter {\n+  override def references: Array[String] = Array.empty\n+}\n+\n+object AlwaysTrue extends AlwaysTrue {\n+}\n+\n+/**\n+ * A filter that always evaluates to `false`.\n+ */\n+case class AlwaysFalse() extends Filter {",
    "line": 30
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Will do.",
    "commit": "0e42cc28b173f55c645c863732fb13d1343d4d75",
    "createdAt": "2019-02-12T00:08:37Z",
    "diffHunk": "@@ -218,3 +218,23 @@ case class StringEndsWith(attribute: String, value: String) extends Filter {\n case class StringContains(attribute: String, value: String) extends Filter {\n   override def references: Array[String] = Array(attribute)\n }\n+\n+/**\n+ * A filter that always evaluates to `true`.\n+ */\n+case class AlwaysTrue() extends Filter {\n+  override def references: Array[String] = Array.empty\n+}\n+\n+object AlwaysTrue extends AlwaysTrue {\n+}\n+\n+/**\n+ * A filter that always evaluates to `false`.\n+ */\n+case class AlwaysFalse() extends Filter {",
    "line": 30
  }],
  "prId": 23606
}]