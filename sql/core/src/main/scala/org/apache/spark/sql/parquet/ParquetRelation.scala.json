[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Bonus points if you can file a JIRA with them and follow up on this :)  They are generally pretty open/responsive.\n",
    "commit": "37bdff7794463dd0570989d8fc0cb426cdbc92f4",
    "createdAt": "2014-11-14T23:34:28Z",
    "diffHunk": "@@ -84,6 +84,21 @@ private[sql] case class ParquetRelation(\n private[sql] object ParquetRelation {\n \n   def enableLogForwarding() {\n+    // Note: the parquet.Log class has a static initializer that\n+    // sets the java.util.logging Logger for \"parquet\". This\n+    // checks first to see if there's any handlers already set\n+    // and if not it creates them. If this method executes prior\n+    // to that class being loaded then:\n+    //  1) there's no handlers installed so there's none to \n+    // remove. But when it IS finally loaded the desired affect\n+    // of removing them is circumvented.\n+    //  2) The parquet.Log static initializer calls setUseParentHanders(false)\n+    // undoing the attempt to override the logging here.\n+    //\n+    // Therefore we need to force the class to be loaded.\n+    // This should really be resolved by Parquet.",
    "line": 16
  }, {
    "author": {
      "login": "jimfcarroll"
    },
    "body": "Okay. I posted a suggestion to their dev-list. We'll see where it goes.\n",
    "commit": "37bdff7794463dd0570989d8fc0cb426cdbc92f4",
    "createdAt": "2014-11-17T19:10:49Z",
    "diffHunk": "@@ -84,6 +84,21 @@ private[sql] case class ParquetRelation(\n private[sql] object ParquetRelation {\n \n   def enableLogForwarding() {\n+    // Note: the parquet.Log class has a static initializer that\n+    // sets the java.util.logging Logger for \"parquet\". This\n+    // checks first to see if there's any handlers already set\n+    // and if not it creates them. If this method executes prior\n+    // to that class being loaded then:\n+    //  1) there's no handlers installed so there's none to \n+    // remove. But when it IS finally loaded the desired affect\n+    // of removing them is circumvented.\n+    //  2) The parquet.Log static initializer calls setUseParentHanders(false)\n+    // undoing the attempt to override the logging here.\n+    //\n+    // Therefore we need to force the class to be loaded.\n+    // This should really be resolved by Parquet.",
    "line": 16
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Great, thanks!\n",
    "commit": "37bdff7794463dd0570989d8fc0cb426cdbc92f4",
    "createdAt": "2014-11-17T20:02:47Z",
    "diffHunk": "@@ -84,6 +84,21 @@ private[sql] case class ParquetRelation(\n private[sql] object ParquetRelation {\n \n   def enableLogForwarding() {\n+    // Note: the parquet.Log class has a static initializer that\n+    // sets the java.util.logging Logger for \"parquet\". This\n+    // checks first to see if there's any handlers already set\n+    // and if not it creates them. If this method executes prior\n+    // to that class being loaded then:\n+    //  1) there's no handlers installed so there's none to \n+    // remove. But when it IS finally loaded the desired affect\n+    // of removing them is circumvented.\n+    //  2) The parquet.Log static initializer calls setUseParentHanders(false)\n+    // undoing the attempt to override the logging here.\n+    //\n+    // Therefore we need to force the class to be loaded.\n+    // This should really be resolved by Parquet.",
    "line": 16
  }],
  "prId": 3271
}]