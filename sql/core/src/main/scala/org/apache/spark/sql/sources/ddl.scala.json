[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "How about we do not define the metadata if a comment is not provided? I feel we are losing information if we use an empty string when a comment is not provided.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T16:36:59Z",
    "diffHunk": "@@ -120,8 +122,10 @@ private[sql] class DDLParser extends StandardTokenParsers with PackratParsers wi\n   protected lazy val pair: Parser[(String, String)] = ident ~ stringLit ^^ { case k ~ v => (k,v) }\n \n   protected lazy val column: Parser[StructField] =\n-    ident ~ dataType ^^ { case columnName ~ typ =>\n-      StructField(columnName, typ)\n+    ident ~ dataType ~ (COMMENT ~> stringLit).?  ^^ { case columnName ~ typ ~ cm =>\n+      val metadata = new MetadataBuilder()\n+          .putString(COMMENT.str.toLowerCase(), cm.getOrElse(\"\")).build()\n+      StructField(columnName, typ, true, metadata)"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "I think the test failure will be resolved once we do not create a `metadata` if there is no comment.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T16:51:47Z",
    "diffHunk": "@@ -120,8 +122,10 @@ private[sql] class DDLParser extends StandardTokenParsers with PackratParsers wi\n   protected lazy val pair: Parser[(String, String)] = ident ~ stringLit ^^ { case k ~ v => (k,v) }\n \n   protected lazy val column: Parser[StructField] =\n-    ident ~ dataType ^^ { case columnName ~ typ =>\n-      StructField(columnName, typ)\n+    ident ~ dataType ~ (COMMENT ~> stringLit).?  ^^ { case columnName ~ typ ~ cm =>\n+      val metadata = new MetadataBuilder()\n+          .putString(COMMENT.str.toLowerCase(), cm.getOrElse(\"\")).build()\n+      StructField(columnName, typ, true, metadata)"
  }, {
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "that's fine.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T17:29:23Z",
    "diffHunk": "@@ -120,8 +122,10 @@ private[sql] class DDLParser extends StandardTokenParsers with PackratParsers wi\n   protected lazy val pair: Parser[(String, String)] = ident ~ stringLit ^^ { case k ~ v => (k,v) }\n \n   protected lazy val column: Parser[StructField] =\n-    ident ~ dataType ^^ { case columnName ~ typ =>\n-      StructField(columnName, typ)\n+    ident ~ dataType ~ (COMMENT ~> stringLit).?  ^^ { case columnName ~ typ ~ cm =>\n+      val metadata = new MetadataBuilder()\n+          .putString(COMMENT.str.toLowerCase(), cm.getOrElse(\"\")).build()\n+      StructField(columnName, typ, true, metadata)"
  }],
  "prId": 3999
}]