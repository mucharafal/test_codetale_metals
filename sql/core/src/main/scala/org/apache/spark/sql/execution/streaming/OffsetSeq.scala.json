[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Can we put this in its own file?",
    "commit": "4041a2297289aa6186a07e1ea74541d625174599",
    "createdAt": "2016-12-03T00:00:46Z",
    "diffHunk": "@@ -54,6 +61,26 @@ object OffsetSeq {\n    * `nulls` in the sequence are converted to `None`s.\n    */\n   def fill(metadata: Option[String], offsets: Offset*): OffsetSeq = {\n-    OffsetSeq(offsets.map(Option(_)), metadata)\n+    OffsetSeq(offsets.map(Option(_)), metadata.map(OffsetSeqMetadata.apply))\n   }\n }\n+\n+\n+/**\n+ * Contains metadata associated with a [[OffsetSeq]]. This information is\n+ * persisted to the offset log in the checkpoint location via the [[OffsetSeq]] metadata field.\n+ *\n+ * @param batchWatermarkMs: The current eventTime watermark, used to\n+ * bound the lateness of data that will processed. Time unit: milliseconds\n+ * @param batchTimestampMs: The current batch processing timestamp.\n+ * Time unit: milliseconds\n+ */\n+case class OffsetSeqMetadata(var batchWatermarkMs: Long = 0, var batchTimestampMs: Long = 0) {",
    "line": 37
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Sure. But its a small class and closely tied with OffsetSeq, so I thought its not worth having a separate file for this.",
    "commit": "4041a2297289aa6186a07e1ea74541d625174599",
    "createdAt": "2016-12-03T00:27:10Z",
    "diffHunk": "@@ -54,6 +61,26 @@ object OffsetSeq {\n    * `nulls` in the sequence are converted to `None`s.\n    */\n   def fill(metadata: Option[String], offsets: Offset*): OffsetSeq = {\n-    OffsetSeq(offsets.map(Option(_)), metadata)\n+    OffsetSeq(offsets.map(Option(_)), metadata.map(OffsetSeqMetadata.apply))\n   }\n }\n+\n+\n+/**\n+ * Contains metadata associated with a [[OffsetSeq]]. This information is\n+ * persisted to the offset log in the checkpoint location via the [[OffsetSeq]] metadata field.\n+ *\n+ * @param batchWatermarkMs: The current eventTime watermark, used to\n+ * bound the lateness of data that will processed. Time unit: milliseconds\n+ * @param batchTimestampMs: The current batch processing timestamp.\n+ * Time unit: milliseconds\n+ */\n+case class OffsetSeqMetadata(var batchWatermarkMs: Long = 0, var batchTimestampMs: Long = 0) {",
    "line": 37
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Not worth moving these 6 lines of code in a new file.",
    "commit": "4041a2297289aa6186a07e1ea74541d625174599",
    "createdAt": "2016-12-03T05:39:33Z",
    "diffHunk": "@@ -54,6 +61,26 @@ object OffsetSeq {\n    * `nulls` in the sequence are converted to `None`s.\n    */\n   def fill(metadata: Option[String], offsets: Offset*): OffsetSeq = {\n-    OffsetSeq(offsets.map(Option(_)), metadata)\n+    OffsetSeq(offsets.map(Option(_)), metadata.map(OffsetSeqMetadata.apply))\n   }\n }\n+\n+\n+/**\n+ * Contains metadata associated with a [[OffsetSeq]]. This information is\n+ * persisted to the offset log in the checkpoint location via the [[OffsetSeq]] metadata field.\n+ *\n+ * @param batchWatermarkMs: The current eventTime watermark, used to\n+ * bound the lateness of data that will processed. Time unit: milliseconds\n+ * @param batchTimestampMs: The current batch processing timestamp.\n+ * Time unit: milliseconds\n+ */\n+case class OffsetSeqMetadata(var batchWatermarkMs: Long = 0, var batchTimestampMs: Long = 0) {",
    "line": 37
  }],
  "prId": 16113
}]