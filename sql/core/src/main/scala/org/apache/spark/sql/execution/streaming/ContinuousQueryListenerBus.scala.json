[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "Nobody will remove this listener from spark listener bus. Is it fine? Do we assume people will stop SparkContext when they don't need to use `stream`?\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T19:27:48Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)",
    "line": 35
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "SQLContexts dont have stops, they are forever active. So I am not sure what to do here.\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T20:49:30Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)",
    "line": 35
  }],
  "prId": 11030
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "`QueryStarted` should be posted to spark listener bus so that the listener doesn't need to care about multiple threads. \n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T19:29:23Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)\n+\n+  /**\n+   * Post a ContinuousQueryListener event to the Spark listener bus asynchronously. This event will\n+   * be dispatched to all ContinuousQueryListener in the thread of the Spark listener bus.\n+   */\n+  def post(event: ContinuousQueryListener.Event) {\n+    event match {\n+      case s: QueryStarted =>",
    "line": 43
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "Actually, this is a design that @marmbrus, @brkyvz and I decided on. We want the query started event handlers to be called synchronously in the when the query is started. This makes it easier to take further management actions (like callbacks) when query is started.\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T20:53:54Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)\n+\n+  /**\n+   * Post a ContinuousQueryListener event to the Spark listener bus asynchronously. This event will\n+   * be dispatched to all ContinuousQueryListener in the thread of the Spark listener bus.\n+   */\n+  def post(event: ContinuousQueryListener.Event) {\n+    event match {\n+      case s: QueryStarted =>",
    "line": 43
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "I see. A small question: @brkyvz  is it fine to still start the query even if `onQueryStarted` throws an exception?\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T21:07:41Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)\n+\n+  /**\n+   * Post a ContinuousQueryListener event to the Spark listener bus asynchronously. This event will\n+   * be dispatched to all ContinuousQueryListener in the thread of the Spark listener bus.\n+   */\n+  def post(event: ContinuousQueryListener.Event) {\n+    event match {\n+      case s: QueryStarted =>",
    "line": 43
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "I believe it should be. We shouldn't start the query after calling this. The query should have already started and then we notify user code that it has. If the user code throws an exception, it's something they have to deal with\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T21:22:02Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.spark.scheduler.{LiveListenerBus, SparkListener, SparkListenerEvent}\n+import org.apache.spark.sql.util.ContinuousQueryListener\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+import org.apache.spark.util.ListenerBus\n+\n+/**\n+ * A bus to forward events to [[ContinuousQueryListener]]s. This one will wrap received\n+ * [[ContinuousQueryListener.Event]]s as WrappedContinuousQueryListenerEvents and send them to the\n+ * Spark listener bus. It also registers itself with Spark listener bus, so that it can receive\n+ * WrappedContinuousQueryListenerEvents, unwrap them as ContinuousQueryListener.Events and\n+ * dispatch them to ContinuousQueryListener.\n+ */\n+class ContinuousQueryListenerBus(sparkListenerBus: LiveListenerBus)\n+  extends SparkListener with ListenerBus[ContinuousQueryListener, ContinuousQueryListener.Event] {\n+\n+  sparkListenerBus.addListener(this)\n+\n+  /**\n+   * Post a ContinuousQueryListener event to the Spark listener bus asynchronously. This event will\n+   * be dispatched to all ContinuousQueryListener in the thread of the Spark listener bus.\n+   */\n+  def post(event: ContinuousQueryListener.Event) {\n+    event match {\n+      case s: QueryStarted =>",
    "line": 43
  }],
  "prId": 11030
}]