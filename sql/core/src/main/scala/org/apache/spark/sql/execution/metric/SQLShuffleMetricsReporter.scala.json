[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Doing a hashmap lookup here could introduce serious performance regressions.",
    "commit": "8e84c5bbfc4b9151310bce84c1506c6aad449011",
    "createdAt": "2018-11-23T23:19:55Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.metric\n+\n+import org.apache.spark.executor.TempShuffleReadMetrics\n+\n+/**\n+ * A shuffle metrics reporter for SQL exchange operators.\n+ * @param tempMetrics [[TempShuffleReadMetrics]] created in TaskContext.\n+ * @param metrics All metrics in current SparkPlan.\n+ */\n+class SQLShuffleMetricsReporter(\n+  tempMetrics: TempShuffleReadMetrics,\n+  metrics: Map[String, SQLMetric]) extends TempShuffleReadMetrics {\n+\n+  override def incRemoteBlocksFetched(v: Long): Unit = {\n+    metrics(SQLMetrics.REMOTE_BLOCKS_FETCHED).add(v)"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "(Iâ€™m not referring to just this function, but in general, especially for per-row).",
    "commit": "8e84c5bbfc4b9151310bce84c1506c6aad449011",
    "createdAt": "2018-11-23T23:20:31Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.metric\n+\n+import org.apache.spark.executor.TempShuffleReadMetrics\n+\n+/**\n+ * A shuffle metrics reporter for SQL exchange operators.\n+ * @param tempMetrics [[TempShuffleReadMetrics]] created in TaskContext.\n+ * @param metrics All metrics in current SparkPlan.\n+ */\n+class SQLShuffleMetricsReporter(\n+  tempMetrics: TempShuffleReadMetrics,\n+  metrics: Map[String, SQLMetric]) extends TempShuffleReadMetrics {\n+\n+  override def incRemoteBlocksFetched(v: Long): Unit = {\n+    metrics(SQLMetrics.REMOTE_BLOCKS_FETCHED).add(v)"
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Sorry for the less consideration on per-row operation here, I should be more careful. Fix done in cb46bfe.",
    "commit": "8e84c5bbfc4b9151310bce84c1506c6aad449011",
    "createdAt": "2018-11-24T05:29:22Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.metric\n+\n+import org.apache.spark.executor.TempShuffleReadMetrics\n+\n+/**\n+ * A shuffle metrics reporter for SQL exchange operators.\n+ * @param tempMetrics [[TempShuffleReadMetrics]] created in TaskContext.\n+ * @param metrics All metrics in current SparkPlan.\n+ */\n+class SQLShuffleMetricsReporter(\n+  tempMetrics: TempShuffleReadMetrics,\n+  metrics: Map[String, SQLMetric]) extends TempShuffleReadMetrics {\n+\n+  override def incRemoteBlocksFetched(v: Long): Unit = {\n+    metrics(SQLMetrics.REMOTE_BLOCKS_FETCHED).add(v)"
  }],
  "prId": 23128
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "4 space indent",
    "commit": "8e84c5bbfc4b9151310bce84c1506c6aad449011",
    "createdAt": "2018-11-28T15:22:29Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.metric\n+\n+import org.apache.spark.executor.TempShuffleReadMetrics\n+\n+/**\n+ * A shuffle metrics reporter for SQL exchange operators.\n+ * @param tempMetrics [[TempShuffleReadMetrics]] created in TaskContext.\n+ * @param metrics All metrics in current SparkPlan. This param should not empty and\n+ *   contains all shuffle metrics defined in [[SQLMetrics.getShuffleReadMetrics]].\n+ */\n+private[spark] class SQLShuffleMetricsReporter(\n+  tempMetrics: TempShuffleReadMetrics,",
    "line": 29
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Thanks ,done in https://github.com/apache/spark/pull/23175.",
    "commit": "8e84c5bbfc4b9151310bce84c1506c6aad449011",
    "createdAt": "2018-11-29T03:58:56Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.metric\n+\n+import org.apache.spark.executor.TempShuffleReadMetrics\n+\n+/**\n+ * A shuffle metrics reporter for SQL exchange operators.\n+ * @param tempMetrics [[TempShuffleReadMetrics]] created in TaskContext.\n+ * @param metrics All metrics in current SparkPlan. This param should not empty and\n+ *   contains all shuffle metrics defined in [[SQLMetrics.getShuffleReadMetrics]].\n+ */\n+private[spark] class SQLShuffleMetricsReporter(\n+  tempMetrics: TempShuffleReadMetrics,",
    "line": 29
  }],
  "prId": 23128
}]