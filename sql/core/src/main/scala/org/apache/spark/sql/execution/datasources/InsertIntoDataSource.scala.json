[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Looks like the `InsertIntoDataSource` is inconsistent with `InsertIntoHadoopFsRelation`.\n- In `InsertIntoHadoopFsRelation`, we do the insertion inside `SQLExecution.withNewExecutionId`, but here we don't.\n- Here we invalidate the cache after insertion, but `InsertIntoHadoopFsRelation` don't.\n\nIs this by intentional?\n",
    "commit": "00804fe8a1930df83b9c1280213bdaeeabdbed24",
    "createdAt": "2015-08-07T06:08:11Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.IOException\n+import java.util.{Date, UUID}\n+\n+import scala.collection.JavaConversions.asScalaIterator\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.{FileOutputCommitter => MapReduceFileOutputCommitter, FileOutputFormat}\n+import org.apache.spark._\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateProjection\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\n+import org.apache.spark.sql.catalyst.{CatalystTypeConverters, InternalRow}\n+import org.apache.spark.sql.execution.{RunnableCommand, SQLExecution}\n+import org.apache.spark.sql.sources._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.{Utils, SerializableConfiguration}\n+\n+\n+/**\n+ * Inserts the results of `query` in to a relation that extends [[InsertableRelation]].\n+ */\n+private[sql] case class InsertIntoDataSource(\n+    logicalRelation: LogicalRelation,\n+    query: LogicalPlan,\n+    overwrite: Boolean)\n+  extends RunnableCommand {\n+\n+  override def run(sqlContext: SQLContext): Seq[Row] = {\n+    val relation = logicalRelation.relation.asInstanceOf[InsertableRelation]\n+    val data = DataFrame(sqlContext, query)\n+    // Apply the schema of the existing table to the new data.\n+    val df = sqlContext.internalCreateDataFrame(data.queryExecution.toRdd, logicalRelation.schema)\n+    relation.insert(df, overwrite)\n+\n+    // Invalidate the cache.\n+    sqlContext.cacheManager.invalidateCache(logicalRelation)\n+\n+    Seq.empty[Row]",
    "line": 62
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "The cache invalidation part is a known bug.\n",
    "commit": "00804fe8a1930df83b9c1280213bdaeeabdbed24",
    "createdAt": "2015-08-07T09:34:47Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.IOException\n+import java.util.{Date, UUID}\n+\n+import scala.collection.JavaConversions.asScalaIterator\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.{FileOutputCommitter => MapReduceFileOutputCommitter, FileOutputFormat}\n+import org.apache.spark._\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateProjection\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\n+import org.apache.spark.sql.catalyst.{CatalystTypeConverters, InternalRow}\n+import org.apache.spark.sql.execution.{RunnableCommand, SQLExecution}\n+import org.apache.spark.sql.sources._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.{Utils, SerializableConfiguration}\n+\n+\n+/**\n+ * Inserts the results of `query` in to a relation that extends [[InsertableRelation]].\n+ */\n+private[sql] case class InsertIntoDataSource(\n+    logicalRelation: LogicalRelation,\n+    query: LogicalPlan,\n+    overwrite: Boolean)\n+  extends RunnableCommand {\n+\n+  override def run(sqlContext: SQLContext): Seq[Row] = {\n+    val relation = logicalRelation.relation.asInstanceOf[InsertableRelation]\n+    val data = DataFrame(sqlContext, query)\n+    // Apply the schema of the existing table to the new data.\n+    val df = sqlContext.internalCreateDataFrame(data.queryExecution.toRdd, logicalRelation.schema)\n+    relation.insert(df, overwrite)\n+\n+    // Invalidate the cache.\n+    sqlContext.cacheManager.invalidateCache(logicalRelation)\n+\n+    Seq.empty[Row]",
    "line": 62
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "@chenghao-intel is trying to fix this in https://github.com/apache/spark/pull/8023\n",
    "commit": "00804fe8a1930df83b9c1280213bdaeeabdbed24",
    "createdAt": "2015-08-07T09:35:10Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.IOException\n+import java.util.{Date, UUID}\n+\n+import scala.collection.JavaConversions.asScalaIterator\n+\n+import org.apache.hadoop.fs.Path\n+import org.apache.hadoop.mapreduce._\n+import org.apache.hadoop.mapreduce.lib.output.{FileOutputCommitter => MapReduceFileOutputCommitter, FileOutputFormat}\n+import org.apache.spark._\n+import org.apache.spark.mapred.SparkHadoopMapRedUtil\n+import org.apache.spark.mapreduce.SparkHadoopMapReduceUtil\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateProjection\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\n+import org.apache.spark.sql.catalyst.{CatalystTypeConverters, InternalRow}\n+import org.apache.spark.sql.execution.{RunnableCommand, SQLExecution}\n+import org.apache.spark.sql.sources._\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.util.{Utils, SerializableConfiguration}\n+\n+\n+/**\n+ * Inserts the results of `query` in to a relation that extends [[InsertableRelation]].\n+ */\n+private[sql] case class InsertIntoDataSource(\n+    logicalRelation: LogicalRelation,\n+    query: LogicalPlan,\n+    overwrite: Boolean)\n+  extends RunnableCommand {\n+\n+  override def run(sqlContext: SQLContext): Seq[Row] = {\n+    val relation = logicalRelation.relation.asInstanceOf[InsertableRelation]\n+    val data = DataFrame(sqlContext, query)\n+    // Apply the schema of the existing table to the new data.\n+    val df = sqlContext.internalCreateDataFrame(data.queryExecution.toRdd, logicalRelation.schema)\n+    relation.insert(df, overwrite)\n+\n+    // Invalidate the cache.\n+    sqlContext.cacheManager.invalidateCache(logicalRelation)\n+\n+    Seq.empty[Row]",
    "line": 62
  }],
  "prId": 8010
}]