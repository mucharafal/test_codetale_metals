[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "`1.5.0` -> `2.4.0`",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-25T00:37:59Z",
    "diffHunk": "@@ -2554,7 +2554,27 @@ object functions {\n    * @since 1.5.0\n    */\n   def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+    StringSplit(str.expr, lit(pattern).expr, lit(-1).expr)\n+  }\n+\n+  /**\n+   * Splits str around pattern (pattern is a regular expression) up to `limit-1` times.\n+   *\n+   * The limit parameter controls the number of times the pattern is applied and therefore\n+   * affects the length of the resulting array. If the limit n is greater than zero then the\n+   * pattern will be applied at most n - 1 times, the array's length will be no greater than\n+   * n, and the array's last entry will contain all input beyond the last matched delimiter.\n+   * If n is non-positive then the pattern will be applied as many times as possible and the\n+   * array can have any length. If n is zero then the pattern will be applied as many times as\n+   * possible, the array can have any length, and trailing empty strings will be discarded.\n+   *\n+   * @note Pattern is a string representation of the regular expression.\n+   *\n+   * @group string_funcs\n+   * @since 1.5.0"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Drop `up to `limit-1` times` in the first line? That's because the behaviour depends on values described below.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-25T00:58:32Z",
    "diffHunk": "@@ -2554,7 +2554,27 @@ object functions {\n    * @since 1.5.0\n    */\n   def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+    StringSplit(str.expr, lit(pattern).expr, lit(-1).expr)\n+  }\n+\n+  /**\n+   * Splits str around pattern (pattern is a regular expression) up to `limit-1` times."
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "nit: better to directly use `Literal`",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-25T01:11:32Z",
    "diffHunk": "@@ -2554,7 +2554,27 @@ object functions {\n    * @since 1.5.0\n    */\n   def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+    StringSplit(str.expr, lit(pattern).expr, lit(-1).expr)\n+  }\n+\n+  /**\n+   * Splits str around pattern (pattern is a regular expression) up to `limit-1` times.\n+   *\n+   * The limit parameter controls the number of times the pattern is applied and therefore\n+   * affects the length of the resulting array. If the limit n is greater than zero then the\n+   * pattern will be applied at most n - 1 times, the array's length will be no greater than\n+   * n, and the array's last entry will contain all input beyond the last matched delimiter.\n+   * If n is non-positive then the pattern will be applied as many times as possible and the\n+   * array can have any length. If n is zero then the pattern will be applied as many times as\n+   * possible, the array can have any length, and trailing empty strings will be discarded.\n+   *\n+   * @note Pattern is a string representation of the regular expression.\n+   *\n+   * @group string_funcs\n+   * @since 1.5.0\n+   */\n+  def split(str: Column, pattern: String, limit: Int): Column = withExpr {\n+    StringSplit(str.expr, lit(pattern).expr, lit(limit).expr)"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can you copy SQL's doc here? You could describe them via `@param` here as well.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-29T01:23:14Z",
    "diffHunk": "@@ -2554,7 +2554,27 @@ object functions {\n    * @since 1.5.0\n    */\n   def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+    StringSplit(str.expr, Literal(pattern), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around pattern (pattern is a regular expression).\n+   *\n+   * The limit parameter controls the number of times the pattern is applied and therefore\n+   * affects the length of the resulting array. If the limit n is greater than zero then the\n+   * pattern will be applied at most n - 1 times, the array's length will be no greater than\n+   * n, and the array's last entry will contain all input beyond the last matched delimiter.\n+   * If n is non-positive then the pattern will be applied as many times as possible and the\n+   * array can have any length. If n is zero then the pattern will be applied as many times as\n+   * possible, the array can have any length, and trailing empty strings will be discarded."
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Indentation here looks a bit odd and looks inconsistent at least. Can you double check Scaladoc and format this correctly?",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-31T05:17:55Z",
    "diffHunk": "@@ -2546,15 +2546,37 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *    limit greater than 0: The resulting array's length will not be more than `limit`,\n+   *                          and the resulting array's last entry will contain all input beyond\n+   *                          the last matched regex.\n+   *    limit less than or equal to 0: `regex` will be applied as many times as possible, and\n+   *                       the resulting array can be of any size."
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "will check that -- do you know how I can get around the fact that unidoc throws an error whenever there are logical operators like `<` or `>` in the docs? Having these would be cleaner in general\r\n```\r\n> build/sbt unidoc\r\n...\r\n[error] ./spark/sql/core/target/java/org/apache/spark/sql/functions.java:2834: error: malformed HTML\r\n[error]    *    limit < 0: <code>regex</code> will be applied as many times as possible, and the resulting\r\n[error]               ^\r\n",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-08-31T13:48:05Z",
    "diffHunk": "@@ -2546,15 +2546,37 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *    limit greater than 0: The resulting array's length will not be more than `limit`,\n+   *                          and the resulting array's last entry will contain all input beyond\n+   *                          the last matched regex.\n+   *    limit less than or equal to 0: `regex` will be applied as many times as possible, and\n+   *                       the resulting array can be of any size."
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Shall we just keep it as `pattern`? I think we don't better change the name. Doesn;t `pattern` also make sense?",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-03T01:34:07Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {",
    "line": 17
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "The reason I changed it is that every time we mentioned `pattern` in the comments/docs, we always added a phrase like \"pattern, which is a regular expression ...\"\r\n\r\njust felt like unnecessary explanation needed if we called the variable `regex`. Happy to change if you think necessary though!",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-04T14:14:31Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {",
    "line": 17
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yea, I don't think we should change the name in case either makes sense in a way.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-05T03:02:28Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {",
    "line": 17
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "by having it as `regex`, the documentation will require less explanation. @HyukjinKwon if you are ok with keeping it as `regex` I think we should prefer to keep this change.\r\n\r\nHappy to revert as well of course",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-06T13:45:43Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {",
    "line": 17
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think you can refer https://github.com/apache/spark/blob/e754887182304ad0d622754e33192ebcdd515965/sql/core/src/main/scala/org/apache/spark/sql/DataFrameReader.scala#L338-L386",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-03T01:48:40Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <p><p>\n+   *        limit greater than 0: The resulting array's length will not be more than `limit`,\n+   *                              and the resulting array's last entry will contain all input beyond\n+   *                              the last matched regex.\n+   *        <p><p>\n+   *        limit less than or equal to 0: `regex` will be applied as many times as possible, and\n+   *                                       the resulting array can be of any size."
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's use the same way to make it multiple lines https://github.com/apache/spark/blob/e754887182304ad0d622754e33192ebcdd515965/sql/core/src/main/scala/org/apache/spark/sql/DataFrameReader.scala#L338-L386",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-10T02:34:39Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *        <li>limit greater than 0: The resulting array's length will not be more than `limit`,\n+   *                              and the resulting array's last entry will contain all input\n+   *                              beyond the last matched regex.</li>\n+   *        <li>limit less than or equal to 0: `regex` will be applied as many times as possible,\n+   *                                           and the resulting array can be of any size.</li>\n+   *        </ul>",
    "line": 34
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "ditto for 3.0.0",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-10T02:34:46Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *        <li>limit greater than 0: The resulting array's length will not be more than `limit`,\n+   *                              and the resulting array's last entry will contain all input\n+   *                              beyond the last matched regex.</li>\n+   *        <li>limit less than or equal to 0: `regex` will be applied as many times as possible,\n+   *                                           and the resulting array can be of any size.</li>\n+   *        </ul>\n+   *\n+   * @group string_funcs\n+   * @since 2.4.0"
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think you can just:\r\n\r\n```\r\n   *        <ul>\r\n   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\r\n   *          and the resulting array's last entry will contain all input\r\n   *          beyond the last matched regex.</li>\r\n   *          <li>limit less than or equal to 0: `regex` will be applied as many times as possible,\r\n   *          and the resulting array can be of any size.</li>\r\n   *        </ul>\r\n```",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-12T08:32:28Z",
    "diffHunk": "@@ -2546,15 +2546,51 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0\n+   *            <ul>\n+   *              <li>\n+   *                The resulting array's length will not be more than limit,\n+   *                and the resulting array's last entry will contain all input\n+   *                beyond the last matched regex.\n+   *             </li>\n+   *            </ul>\n+   *          </li>\n+   *          <li>limit less than or equal to 0\n+   *            <ul>\n+   *              <li>\n+   *                `regex` will be applied as many times as possible,\n+   *                and the resulting array can be of any size.\n+   *              </li>\n+   *            </ul>\n+   *          </li>\n+   *        </ul>",
    "line": 34
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "oh I thought you wanted to have the explanations as sub bullets, will make that change @HyukjinKwon ",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-12T11:55:32Z",
    "diffHunk": "@@ -2546,15 +2546,51 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0\n+   *            <ul>\n+   *              <li>\n+   *                The resulting array's length will not be more than limit,\n+   *                and the resulting array's last entry will contain all input\n+   *                beyond the last matched regex.\n+   *             </li>\n+   *            </ul>\n+   *          </li>\n+   *          <li>limit less than or equal to 0\n+   *            <ul>\n+   *              <li>\n+   *                `regex` will be applied as many times as possible,\n+   *                and the resulting array can be of any size.\n+   *              </li>\n+   *            </ul>\n+   *          </li>\n+   *        </ul>",
    "line": 34
  }],
  "prId": 22227
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "I think we don't need `</li>`.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-09-23T07:47:19Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "I was asked to do `<li>` earlier in this PR conversation. @HyukjinKwon -- thoughts here? ",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T14:57:56Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I mean we may not need ending tag `</li>`.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T15:07:41Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "ah, I'll look into that",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T15:14:01Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }, {
    "author": {
      "login": "phegstrom"
    },
    "body": "@viirya throughout this repository, the `</li>` has always been included. For consistency, I think we should just keep it as is. Let me know what you think",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T15:27:32Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ok. Then it's fine. Thanks for looking at it.",
    "commit": "34ba74f79aad2a0e2fe9e0d6f6110a10a51c8108",
    "createdAt": "2018-10-01T15:54:39Z",
    "diffHunk": "@@ -2546,15 +2546,39 @@ object functions {\n   def soundex(e: Column): Column = withExpr { SoundEx(e.expr) }\n \n   /**\n-   * Splits str around pattern (pattern is a regular expression).\n+   * Splits str around matches of the given regex.\n    *\n-   * @note Pattern is a string representation of the regular expression.\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n    *\n    * @group string_funcs\n    * @since 1.5.0\n    */\n-  def split(str: Column, pattern: String): Column = withExpr {\n-    StringSplit(str.expr, lit(pattern).expr)\n+  def split(str: Column, regex: String): Column = withExpr {\n+    StringSplit(str.expr, Literal(regex), Literal(-1))\n+  }\n+\n+  /**\n+   * Splits str around matches of the given regex.\n+   *\n+   * @param str a string expression to split\n+   * @param regex a string representing a regular expression. The regex string should be\n+   *              a Java regular expression.\n+   * @param limit an integer expression which controls the number of times the regex is applied.\n+   *        <ul>\n+   *          <li>limit greater than 0: The resulting array's length will not be more than limit,\n+   *          and the resulting array's last entry will contain all input beyond the last\n+   *          matched regex.</li>\n+   *          <li>limit less than or equal to 0: `regex` will be applied as many times as\n+   *          possible, and the resulting array can be of any size.</li>",
    "line": 33
  }],
  "prId": 22227
}]