[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Maybe we can avoid of these two `copy`s?\n",
    "commit": "ef538621f7415a8502615181f6fb08721a809ff6",
    "createdAt": "2015-10-11T20:09:23Z",
    "diffHunk": "@@ -101,18 +117,16 @@ class SortBasedAggregationIterator(\n \n     // The search will stop when we see the next group or there is no\n     // input row left in the iter.\n-    var hasNext = inputKVIterator.next()\n-    while (!findNextPartition && hasNext) {\n+    while (!findNextPartition && inputIterator.hasNext) {\n       // Get the grouping key.\n-      val groupingKey = inputKVIterator.getKey\n-      val currentRow = inputKVIterator.getValue\n+      val inputRow = inputIterator.next()\n+      val groupingKey = groupingKeyProjection(inputRow).copy()\n+      val currentRow = inputRow.copy()"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Good catch. We only need these copies in `initialize` since we're buffering the result there. I'll fix this shortly.\n",
    "commit": "ef538621f7415a8502615181f6fb08721a809ff6",
    "createdAt": "2015-10-11T20:15:23Z",
    "diffHunk": "@@ -101,18 +117,16 @@ class SortBasedAggregationIterator(\n \n     // The search will stop when we see the next group or there is no\n     // input row left in the iter.\n-    var hasNext = inputKVIterator.next()\n-    while (!findNextPartition && hasNext) {\n+    while (!findNextPartition && inputIterator.hasNext) {\n       // Get the grouping key.\n-      val groupingKey = inputKVIterator.getKey\n-      val currentRow = inputKVIterator.getValue\n+      val inputRow = inputIterator.next()\n+      val groupingKey = groupingKeyProjection(inputRow).copy()\n+      val currentRow = inputRow.copy()"
  }],
  "prId": 9066
}]