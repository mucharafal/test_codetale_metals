[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is my biggest concern. Currently Spark adds shuffle with a rule, so we can't always get the children partitioning precisely. We implemented a similar feature in `EnsureRequirements.reorderJoinPredicates`, which is hacky and we should improve the framework before adding more features like this.",
    "commit": "f40606203da01efe400431ed9d2b8b70c0476fc6",
    "createdAt": "2018-10-23T07:17:51Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.joins\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression\n+import org.apache.spark.sql.catalyst.plans.physical.{ClusteredDistribution, Distribution, HashClusteredDistribution, HashPartitioning}\n+import org.apache.spark.sql.execution.{FileSourceScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.exchange.ShuffleExchangeExec\n+\n+object JoinUtils {\n+  private def avoidShuffleIfPossible(\n+      joinKeys: Seq[Expression],\n+      expressions: Seq[Expression],\n+      leftKeys: Seq[Expression],\n+      rightKeys: Seq[Expression]): Seq[Distribution] = {\n+    val indices = expressions.map(x => joinKeys.indexWhere(_.semanticEquals(x)))\n+    HashClusteredDistribution(indices.map(leftKeys(_))) ::\n+      HashClusteredDistribution(indices.map(rightKeys(_))) :: Nil\n+  }\n+\n+  def requiredChildDistributionForShuffledJoin(\n+      partitioningDetection: Boolean,\n+      leftKeys: Seq[Expression],\n+      rightKeys: Seq[Expression],\n+      left: SparkPlan,\n+      right: SparkPlan): Seq[Distribution] = {\n+    if (!partitioningDetection) {\n+      return HashClusteredDistribution(leftKeys) :: HashClusteredDistribution(rightKeys) :: Nil\n+    }\n+\n+    val leftPartitioning = left.outputPartitioning\n+    val rightPartitioning = right.outputPartitioning",
    "line": 47
  }, {
    "author": {
      "login": "yucai"
    },
    "body": "@cloud-fan in this PR, `requiredChildDistribution` is always re-calculated each time it is invoked, could it be more precise than `EnsureRequirements.reorderJoinPredicates`ï¼Ÿ\r\n\r\nThis kind of [bucketjoin](https://github.com/apache/spark/pull/21156#issuecomment-403762272) is common, do we have a plan to improve the framework in 3.0?\r\n",
    "commit": "f40606203da01efe400431ed9d2b8b70c0476fc6",
    "createdAt": "2018-10-23T07:58:56Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.joins\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression\n+import org.apache.spark.sql.catalyst.plans.physical.{ClusteredDistribution, Distribution, HashClusteredDistribution, HashPartitioning}\n+import org.apache.spark.sql.execution.{FileSourceScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.exchange.ShuffleExchangeExec\n+\n+object JoinUtils {\n+  private def avoidShuffleIfPossible(\n+      joinKeys: Seq[Expression],\n+      expressions: Seq[Expression],\n+      leftKeys: Seq[Expression],\n+      rightKeys: Seq[Expression]): Seq[Distribution] = {\n+    val indices = expressions.map(x => joinKeys.indexWhere(_.semanticEquals(x)))\n+    HashClusteredDistribution(indices.map(leftKeys(_))) ::\n+      HashClusteredDistribution(indices.map(rightKeys(_))) :: Nil\n+  }\n+\n+  def requiredChildDistributionForShuffledJoin(\n+      partitioningDetection: Boolean,\n+      leftKeys: Seq[Expression],\n+      rightKeys: Seq[Expression],\n+      left: SparkPlan,\n+      right: SparkPlan): Seq[Distribution] = {\n+    if (!partitioningDetection) {\n+      return HashClusteredDistribution(leftKeys) :: HashClusteredDistribution(rightKeys) :: Nil\n+    }\n+\n+    val leftPartitioning = left.outputPartitioning\n+    val rightPartitioning = right.outputPartitioning",
    "line": 47
  }],
  "prId": 21156
}]