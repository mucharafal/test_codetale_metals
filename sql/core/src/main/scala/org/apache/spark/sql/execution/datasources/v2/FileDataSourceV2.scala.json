[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Although `path` is specific to `FileDataSourceV2`, the logic of this function looks general enough to be at `CaseInsensitiveStringMap` as a utility function. Can we parameterize `\"path\"` and move this to `CaseInsensitiveStringMap`?",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-08T17:10:01Z",
    "diffHunk": "@@ -35,4 +40,18 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n   def fallBackFileFormat: Class[_ <: FileFormat]\n \n   lazy val sparkSession = SparkSession.active\n+\n+  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {",
    "line": 19
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "IIRC there was a proprosal to offically define array options (not sure it's from @HyukjinKwon or @MaxGekk ). But the problem is, even if we define a general array option getter in the `CaseInsensitiveStringMap`, we still lack a general array option builder.\r\n\r\nI'd like to leave this as a special logic in file source, and generalize the array option later.",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-09T04:00:23Z",
    "diffHunk": "@@ -35,4 +40,18 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n   def fallBackFileFormat: Class[_ <: FileFormat]\n \n   lazy val sparkSession = SparkSession.active\n+\n+  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {",
    "line": 19
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep. +1",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-10T00:55:06Z",
    "diffHunk": "@@ -35,4 +40,18 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n   def fallBackFileFormat: Class[_ <: FileFormat]\n \n   lazy val sparkSession = SparkSession.active\n+\n+  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {",
    "line": 19
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yup, it was from me and @MaxGekk raised a PR related with that before :D. +1. It's _file_ datasource so it makes sense to me.",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-12T06:19:14Z",
    "diffHunk": "@@ -35,4 +40,18 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n   def fallBackFileFormat: Class[_ <: FileFormat]\n \n   lazy val sparkSession = SparkSession.active\n+\n+  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {",
    "line": 19
  }],
  "prId": 24025
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "nit: `'path' or 'paths' must be ...`",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-13T11:20:37Z",
    "diffHunk": "@@ -35,4 +38,13 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n   def fallBackFileFormat: Class[_ <: FileFormat]\n \n   lazy val sparkSession = SparkSession.active\n+\n+  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {\n+    val objectMapper = new ObjectMapper()\n+    Option(map.get(\"paths\")).map { pathStr =>\n+      objectMapper.readValue(pathStr, classOf[Array[String]]).toSeq\n+    }.orElse(Option(map.get(\"path\")).map(Seq(_))).getOrElse {\n+      throw new IllegalArgumentException(\"'path' must be given when reading files.\")"
  }],
  "prId": 24025
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "```\r\n  protected def getPaths(map: CaseInsensitiveStringMap): Seq[String] = {\r\n    Option(map.get(\"paths\")).map { pathStr =>\r\n      val objectMapper = new ObjectMapper()\r\n      objectMapper.readValue(pathStr, classOf[Array[String]]).toSeq\r\n    }.getOrElse {\r\n      Option(map.get(\"path\")).toSeq\r\n    }\r\n  }\r\n```",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-13T11:47:01Z",
    "diffHunk": "@@ -44,7 +44,7 @@ trait FileDataSourceV2 extends TableProvider with DataSourceRegister {\n     Option(map.get(\"paths\")).map { pathStr =>\n       objectMapper.readValue(pathStr, classOf[Array[String]]).toSeq\n     }.orElse(Option(map.get(\"path\")).map(Seq(_))).getOrElse {\n-      throw new IllegalArgumentException(\"'path' must be given when reading files.\")\n+      Nil"
  }],
  "prId": 24025
}]