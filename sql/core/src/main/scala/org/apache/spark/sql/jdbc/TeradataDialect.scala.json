[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-16T22:12:43Z",
    "diffHunk": "@@ -31,4 +31,16 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  /**\n+  * The SQL query used to truncate a table."
  }],
  "prId": 20057
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "At the beginning, I saw `teradata` is missed in your test case. So, I asked to add that.\r\n\r\nBut, today, I did double-check that in order to review this line. Unfortunately, according to Teradata document, `TRUNCATE` syntax is not documented. And it's not supported according to some old community articles.\r\n\r\n- Teradata SQL Reference\r\n  - https://info.teradata.com/HTMLPubs/DB_TTU_16_00/index.html#page/SQL_Reference%2FB035-1146-160K%2Fpds1472240516459.html%23\r\n- Community (DELETE/TRUNCATE COMMAND)\r\n  - https://community.teradata.com/t5/Database/Delete-truncate-command/td-p/434",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-18T23:41:17Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Currently, `TeradataDialect` seems to generate a unsupported syntax because it inherits from `JdbcDialects`. Before doing this PR, we had better check this.\r\n\r\nPing, @klinvill and @gatorsmile who is the original author and committer of this code. Could you give us some comment for this?",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-18T23:47:00Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Gentle ping, @klinvill .",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-20T20:09:32Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }, {
    "author": {
      "login": "klinvill"
    },
    "body": "Hi @dongjoon-hyun, you are correct. Teradata does not support the TRUNCATE statement. Instead Teradata uses a DELETE statement so you should be able to use `DELETE FROM $table ALL` instead of `TRUNCATE TABLE $table`",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-21T03:20:58Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you so much for confirming, @klinvill !\r\n\r\n@danielvdende . Could you update `TeradataDialect` according to @klinvill 's advice?",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-21T04:04:22Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }, {
    "author": {
      "login": "danielvdende"
    },
    "body": "Thanks @klinvill for helping out :-)\r\n@dongjoon-hyun I've made the changes to `TeradataDialect` and updated the tests accordingly.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-21T09:55:16Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table.\n+   * @param table The table to truncate.\n+   * @param cascade Whether or not to cascade the truncation. Default value is the\n+   *                value of isCascadingTruncateTable(). Ignored for Teradata as it is unsupported\n+   * @return The SQL query to use for truncating a table\n+   */\n+  override def getTruncateQuery(\n+      table: String,\n+      cascade: Option[Boolean] = isCascadingTruncateTable): String = {\n+    s\"TRUNCATE TABLE $table\""
  }],
  "prId": 20057
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Please add more description about Teradata's lack of `TRUNCATE` syntax here. Otherwise, people try to make a PR for this mistakenly.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-21T16:09:01Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)\n+\n+  /**\n+   * The SQL query used to truncate a table."
  }],
  "prId": 20057
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Please add a function description that Teradata doesn't support cascading DELETE.\r\nYou may need to explain the lack of TRUNCATE syntax, too.",
    "commit": "a365f79b2f29326621a4cd0177780e66c56eaceb",
    "createdAt": "2018-02-21T16:11:47Z",
    "diffHunk": "@@ -31,4 +31,19 @@ private case object TeradataDialect extends JdbcDialect {\n     case BooleanType => Option(JdbcType(\"CHAR(1)\", java.sql.Types.CHAR))\n     case _ => None\n   }\n+\n+  override def isCascadingTruncateTable(): Option[Boolean] = Some(false)"
  }],
  "prId": 20057
}]