[{
  "comments": [{
    "author": {
      "login": "aarondav"
    },
    "body": "We should probably document this behavior somewhere -- I'm not sure if there's a standard place for data sources. If nowhere else, at least add it to the doc of createRelation().\n",
    "commit": "7a8cfdaa897e2a9a312f500c530c97a3fa27a5be",
    "createdAt": "2015-03-03T19:43:49Z",
    "diffHunk": "@@ -111,17 +113,20 @@ private[sql] class DefaultSource extends RelationProvider {\n         numPartitions.toInt)\n     }\n     val parts = JDBCRelation.columnPartition(partitionInfo)\n-    JDBCRelation(url, table, parts)(sqlContext)\n+    val properties = new Properties() // Additional properties that we will pass to getConnection",
    "line": 27
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "We should add this to the programming guide under JDBC.\n",
    "commit": "7a8cfdaa897e2a9a312f500c530c97a3fa27a5be",
    "createdAt": "2015-03-23T20:02:51Z",
    "diffHunk": "@@ -111,17 +113,20 @@ private[sql] class DefaultSource extends RelationProvider {\n         numPartitions.toInt)\n     }\n     val parts = JDBCRelation.columnPartition(partitionInfo)\n-    JDBCRelation(url, table, parts)(sqlContext)\n+    val properties = new Properties() // Additional properties that we will pass to getConnection",
    "line": 27
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "(i.e. http://spark.apache.org/docs/latest/sql-programming-guide.html#jdbc-to-other-databases)\n",
    "commit": "7a8cfdaa897e2a9a312f500c530c97a3fa27a5be",
    "createdAt": "2015-03-23T20:03:32Z",
    "diffHunk": "@@ -111,17 +113,20 @@ private[sql] class DefaultSource extends RelationProvider {\n         numPartitions.toInt)\n     }\n     val parts = JDBCRelation.columnPartition(partitionInfo)\n-    JDBCRelation(url, table, parts)(sqlContext)\n+    val properties = new Properties() // Additional properties that we will pass to getConnection",
    "line": 27
  }],
  "prId": 4859
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Why `null` as the default instead of an empty properties map?\n",
    "commit": "7a8cfdaa897e2a9a312f500c530c97a3fa27a5be",
    "createdAt": "2015-03-23T20:21:21Z",
    "diffHunk": "@@ -115,18 +116,21 @@ private[sql] class DefaultSource extends RelationProvider {\n         numPartitions.toInt)\n     }\n     val parts = JDBCRelation.columnPartition(partitionInfo)\n-    JDBCRelation(url, table, parts)(sqlContext)\n+    val properties = new Properties() // Additional properties that we will pass to getConnection\n+    parameters.foreach(kv => properties.setProperty(kv._1, kv._2))\n+    JDBCRelation(url, table, parts, properties)(sqlContext)\n   }\n }\n \n private[sql] case class JDBCRelation(\n     url: String,\n     table: String,\n-    parts: Array[Partition])(@transient val sqlContext: SQLContext)\n+    parts: Array[Partition],\n+    properties: Properties = null)(@transient val sqlContext: SQLContext)"
  }, {
    "author": {
      "login": "vlyubin"
    },
    "body": "No particular reason really, both are fine with DriverManagers' getConnection(). I've switched to empty properties map, I guess it is in fact neater than null.\n",
    "commit": "7a8cfdaa897e2a9a312f500c530c97a3fa27a5be",
    "createdAt": "2015-03-23T22:19:17Z",
    "diffHunk": "@@ -115,18 +116,21 @@ private[sql] class DefaultSource extends RelationProvider {\n         numPartitions.toInt)\n     }\n     val parts = JDBCRelation.columnPartition(partitionInfo)\n-    JDBCRelation(url, table, parts)(sqlContext)\n+    val properties = new Properties() // Additional properties that we will pass to getConnection\n+    parameters.foreach(kv => properties.setProperty(kv._1, kv._2))\n+    JDBCRelation(url, table, parts, properties)(sqlContext)\n   }\n }\n \n private[sql] case class JDBCRelation(\n     url: String,\n     table: String,\n-    parts: Array[Partition])(@transient val sqlContext: SQLContext)\n+    parts: Array[Partition],\n+    properties: Properties = null)(@transient val sqlContext: SQLContext)"
  }],
  "prId": 4859
}]