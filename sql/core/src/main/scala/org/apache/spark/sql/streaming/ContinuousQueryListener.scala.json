[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I don't think a string is enough here.  I think you need the stack trace also for it to be useful.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-01T17:49:51Z",
    "diffHunk": "@@ -69,27 +72,27 @@ abstract class ContinuousQueryListener {\n @Experimental\n object ContinuousQueryListener {\n \n-  /**\n-   * Base type of [[ContinuousQueryListener]] events.\n-   * @since 2.0.0\n-   */\n+  /** Base type of [[ContinuousQueryListener]] events */\n+  @JsonTypeInfo(\n+    use = JsonTypeInfo.Id.CLASS,\n+    include = JsonTypeInfo.As.PROPERTY,\n+    property = \"@class\")\n   trait Event\n \n-  /**\n-   * Event representing the start of a query.\n-   * @since 2.0.0\n-   */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  /** Event representing the start of a query */\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n-  /**\n-   * Event representing any progress updates in a query.\n-   * @since 2.0.0\n-   */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  /** Event representing any progress updates in a query */\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n-   * @since 2.0.0\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo\n+   * @param exception The exception information of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n    */\n-  class QueryTerminated private[sql](val query: ContinuousQuery) extends Event\n+  class QueryTerminated private[sql](\n+      val queryInfo: ContinuousQueryInfo,\n+      val exception: Option[String]) extends Event"
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: \"The query info\" ---> \"Information about the status of the query\"\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:28:25Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info."
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: if any --> if the query was terminated with an exception.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:28:54Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it"
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: similar change as above. Also document that it will be empty if there was no error.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:30:06Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n+   * @param stackTrace The stack trace of the exception if any."
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Shouldnt these also be marked with Experimental?\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:30:43Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Done\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:41:51Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event"
  }],
  "prId": 13335
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Isnt it more Java friendly to make this Array instead of Seq? It does not need to be Seq.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:31:45Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n+   * @param stackTrace The stack trace of the exception if any.\n    * @since 2.0.0\n    */\n-  class QueryTerminated private[sql](val query: ContinuousQuery) extends Event\n+  class QueryTerminated private[sql](\n+      val queryInfo: ContinuousQueryInfo,\n+      val exception: Option[String],\n+      val stackTrace: Seq[StackTraceElement]) extends Event"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "I don't want to expose a mutable Array to the user. Secondly, this one is not Java friendly already since it uses `Option`.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:37:05Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n+   * @param stackTrace The stack trace of the exception if any.\n    * @since 2.0.0\n    */\n-  class QueryTerminated private[sql](val query: ContinuousQuery) extends Event\n+  class QueryTerminated private[sql](\n+      val queryInfo: ContinuousQueryInfo,\n+      val exception: Option[String],\n+      val stackTrace: Seq[StackTraceElement]) extends Event"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "What mutable about this Array? And for Options, there is no workaround. And Option is pretty simple to deal with in Java. Seq is more annoying, need to look up Scala doc etc.?\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:52:31Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n+   * @param stackTrace The stack trace of the exception if any.\n    * @since 2.0.0\n    */\n-  class QueryTerminated private[sql](val query: ContinuousQuery) extends Event\n+  class QueryTerminated private[sql](\n+      val queryInfo: ContinuousQueryInfo,\n+      val exception: Option[String],\n+      val stackTrace: Seq[StackTraceElement]) extends Event"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "E.g., the user can change the content of an array.\n",
    "commit": "1f00c608aaf8938f0f234327660d306db9b54b97",
    "createdAt": "2016-06-06T20:59:21Z",
    "diffHunk": "@@ -70,26 +71,34 @@ abstract class ContinuousQueryListener {\n object ContinuousQueryListener {\n \n   /**\n-   * Base type of [[ContinuousQueryListener]] events.\n+   * Base type of [[ContinuousQueryListener]] events\n    * @since 2.0.0\n    */\n-  trait Event\n+  trait Event extends SparkListenerEvent\n \n   /**\n-   * Event representing the start of a query.\n+   * Event representing the start of a query\n    * @since 2.0.0\n    */\n-  class QueryStarted private[sql](val query: ContinuousQuery) extends Event\n+  class QueryStarted private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing any progress updates in a query.\n+   * Event representing any progress updates in a query\n    * @since 2.0.0\n    */\n-  class QueryProgress private[sql](val query: ContinuousQuery) extends Event\n+  class QueryProgress private[sql](val queryInfo: ContinuousQueryInfo) extends Event\n \n   /**\n-   * Event representing that termination of a query.\n+   * Event representing that termination of a query\n+   *\n+   * @param queryInfo The query info.\n+   * @param exception The exception message of the [[ContinuousQuery]] if any. Otherwise, it\n+   *                  will be `None`.\n+   * @param stackTrace The stack trace of the exception if any.\n    * @since 2.0.0\n    */\n-  class QueryTerminated private[sql](val query: ContinuousQuery) extends Event\n+  class QueryTerminated private[sql](\n+      val queryInfo: ContinuousQueryInfo,\n+      val exception: Option[String],\n+      val stackTrace: Seq[StackTraceElement]) extends Event"
  }],
  "prId": 13335
}]