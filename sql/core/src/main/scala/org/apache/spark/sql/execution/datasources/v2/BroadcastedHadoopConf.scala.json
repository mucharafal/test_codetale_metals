[{
  "comments": [{
    "author": {
      "login": "dbtsai"
    },
    "body": "private?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-10-07T20:48:02Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  var cachedHadoopConf: Configuration = null\n+  var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null"
  }, {
    "author": {
      "login": "dbtsai"
    },
    "body": "Since we don't plan to modify / invalidate the cache, why not just use `lazy val` in the following?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-10-07T20:50:45Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  var cachedHadoopConf: Configuration = null\n+  var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "lazy vals behave a bit strangely with inheritance and overriden non-abstract methods. I started this off with a lazy val and had some issues with it not calling the correct hadoopConf generator. I can double check my understanding though if you think that's incorrect.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-10-08T17:28:45Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  var cachedHadoopConf: Configuration = null\n+  var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Oh also for scope, since we want to be able to access the cachedBroadcastedConf probably `protected` rather than private yeah?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-10-08T17:29:12Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  var cachedHadoopConf: Configuration = null\n+  var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null"
  }],
  "prId": 26005
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "If this is intended to be extended by DSv2 implementations, it should be written in Java. The v2 API is entirely Java to avoid problems between Scala and Java (and the rest of the JVM ecosystem).",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T16:22:34Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {"
  }],
  "prId": 26005
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "What is the use case for this?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T16:24:02Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  protected var cachedHadoopConf: Configuration = null\n+  protected var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null\n+\n+  /**\n+   * Override this if you need to rewrite your Hadoop configuration differently\n+   */\n+  protected def withHadoopConfRewrite(hadoopConf: Configuration): Configuration = {"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "You can see the two use cases inside of the Spark code base (parquet & orc), where we take some user specified settings and modify Spark's base hadoop configuration based on those prior to broadcasting.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T16:40:16Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession\n+  val options: CaseInsensitiveStringMap\n+\n+  protected var cachedHadoopConf: Configuration = null\n+  protected var cachedBroadcastedConf: Broadcast[SerializableConfiguration] = null\n+\n+  /**\n+   * Override this if you need to rewrite your Hadoop configuration differently\n+   */\n+  protected def withHadoopConfRewrite(hadoopConf: Configuration): Configuration = {"
  }],
  "prId": 26005
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "SparkSession isn't passed to v2 implementations, so it probably shouldn't be used like this.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T16:29:22Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "So I think the v2 classes have a definition of the SparkSession inside of them though I think based on how this compiles/passes tests. Am I missunderstanding something here?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T16:41:36Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "The session isn't passed in. The active session is accessed here: https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/FileDataSourceV2.scala#L42\r\n\r\nI believe the intent is to avoid relying on SparkSession itself, which is why I think it is so helpful to add the Hadoop configuration as a broadcast variable.\r\n\r\nIn general, be cautious when looking at the file sources as examples.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T17:36:44Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession"
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Ok. But we do need the SparkSession for this so I think having a requirement that the SparkSession is present is probably the best way to do it? I could do a default implementation with getActive though if you think that would be better?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-01T18:03:13Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.conf.Configuration\n+\n+import org.apache.spark.annotation.{DeveloperApi}\n+import org.apache.spark.broadcast.Broadcast\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+import org.apache.spark.util.SerializableConfiguration\n+\n+/**\n+ * A helper trait to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+trait BroadcastedHadoopConf {\n+  val sparkSession: SparkSession"
  }],
  "prId": 26005
}]