[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Why do we need `RowIterator`?\n\n(we do not need to make any change for this in this PR)\n",
    "commit": "eabacca9864e609a1b085a2acbe10907929700a4",
    "createdAt": "2015-08-10T23:30:17Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.util.NoSuchElementException\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+\n+/**\n+ * An internal iterator interface which presents a more restrictive API than\n+ * [[scala.collection.Iterator]].\n+ *\n+ * One major departure from the Scala iterator API is the fusing of the `hasNext()` and `next()`\n+ * calls: Scala's iterator allows users to call `hasNext()` without immediately advancing the\n+ * iterator to consume the next row, whereas RowIterator combines these calls into a single\n+ * [[advanceNext()]] method.\n+ */\n+private[sql] abstract class RowIterator {",
    "line": 33
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "We don't need it anymore, strictly speaking, although I think it's a nicer API to implement against.\n",
    "commit": "eabacca9864e609a1b085a2acbe10907929700a4",
    "createdAt": "2015-08-10T23:38:05Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.util.NoSuchElementException\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+\n+/**\n+ * An internal iterator interface which presents a more restrictive API than\n+ * [[scala.collection.Iterator]].\n+ *\n+ * One major departure from the Scala iterator API is the fusing of the `hasNext()` and `next()`\n+ * calls: Scala's iterator allows users to call `hasNext()` without immediately advancing the\n+ * iterator to consume the next row, whereas RowIterator combines these calls into a single\n+ * [[advanceNext()]] method.\n+ */\n+private[sql] abstract class RowIterator {",
    "line": 33
  }],
  "prId": 7904
}]