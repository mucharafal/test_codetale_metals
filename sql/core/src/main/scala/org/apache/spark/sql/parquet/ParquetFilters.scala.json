[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "Would be nice to add some tests with == null or >= null as well to make sure these filters work\n",
    "commit": "8282ba0752951fc9d7a7593c6f6c89815bb92b3a",
    "createdAt": "2014-10-28T19:58:19Z",
    "diffHunk": "@@ -209,25 +221,25 @@ private[sql] object ParquetFilters {\n           case _ => None\n         }\n       }\n-      case p @ EqualTo(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ EqualTo(left: Literal, right: NamedExpression) =>\n         Some(createEqualityFilter(right.name, left, p))\n-      case p @ EqualTo(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ EqualTo(left: NamedExpression, right: Literal) =>\n         Some(createEqualityFilter(left.name, right, p))\n-      case p @ LessThan(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ LessThan(left: Literal, right: NamedExpression) =>\n         Some(createLessThanFilter(right.name, left, p))\n-      case p @ LessThan(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ LessThan(left: NamedExpression, right: Literal) =>\n         Some(createLessThanFilter(left.name, right, p))\n-      case p @ LessThanOrEqual(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ LessThanOrEqual(left: Literal, right: NamedExpression) =>\n         Some(createLessThanOrEqualFilter(right.name, left, p))\n-      case p @ LessThanOrEqual(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ LessThanOrEqual(left: NamedExpression, right: Literal) =>\n         Some(createLessThanOrEqualFilter(left.name, right, p))\n-      case p @ GreaterThan(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ GreaterThan(left: Literal, right: NamedExpression) =>\n         Some(createGreaterThanFilter(right.name, left, p))\n-      case p @ GreaterThan(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ GreaterThan(left: NamedExpression, right: Literal) =>\n         Some(createGreaterThanFilter(left.name, right, p))\n-      case p @ GreaterThanOrEqual(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ GreaterThanOrEqual(left: Literal, right: NamedExpression) =>\n         Some(createGreaterThanOrEqualFilter(right.name, left, p))\n-      case p @ GreaterThanOrEqual(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ GreaterThanOrEqual(left: NamedExpression, right: Literal) =>",
    "line": 243
  }, {
    "author": {
      "login": "saucam"
    },
    "body": "The nullable option is set when the field is optional. So adding tests for those.\n",
    "commit": "8282ba0752951fc9d7a7593c6f6c89815bb92b3a",
    "createdAt": "2014-10-29T07:16:19Z",
    "diffHunk": "@@ -209,25 +221,25 @@ private[sql] object ParquetFilters {\n           case _ => None\n         }\n       }\n-      case p @ EqualTo(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ EqualTo(left: Literal, right: NamedExpression) =>\n         Some(createEqualityFilter(right.name, left, p))\n-      case p @ EqualTo(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ EqualTo(left: NamedExpression, right: Literal) =>\n         Some(createEqualityFilter(left.name, right, p))\n-      case p @ LessThan(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ LessThan(left: Literal, right: NamedExpression) =>\n         Some(createLessThanFilter(right.name, left, p))\n-      case p @ LessThan(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ LessThan(left: NamedExpression, right: Literal) =>\n         Some(createLessThanFilter(left.name, right, p))\n-      case p @ LessThanOrEqual(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ LessThanOrEqual(left: Literal, right: NamedExpression) =>\n         Some(createLessThanOrEqualFilter(right.name, left, p))\n-      case p @ LessThanOrEqual(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ LessThanOrEqual(left: NamedExpression, right: Literal) =>\n         Some(createLessThanOrEqualFilter(left.name, right, p))\n-      case p @ GreaterThan(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ GreaterThan(left: Literal, right: NamedExpression) =>\n         Some(createGreaterThanFilter(right.name, left, p))\n-      case p @ GreaterThan(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ GreaterThan(left: NamedExpression, right: Literal) =>\n         Some(createGreaterThanFilter(left.name, right, p))\n-      case p @ GreaterThanOrEqual(left: Literal, right: NamedExpression) if !right.nullable =>\n+      case p @ GreaterThanOrEqual(left: Literal, right: NamedExpression) =>\n         Some(createGreaterThanOrEqualFilter(right.name, left, p))\n-      case p @ GreaterThanOrEqual(left: NamedExpression, right: Literal) if !left.nullable =>\n+      case p @ GreaterThanOrEqual(left: NamedExpression, right: Literal) =>",
    "line": 243
  }],
  "prId": 2841
}]