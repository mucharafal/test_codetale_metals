[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Add docs explaining the state format",
    "commit": "c262e87afe8736febcb546827f0af22da14a02d9",
    "createdAt": "2018-07-11T08:02:27Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.execution.ObjectOperator\n+import org.apache.spark.sql.execution.streaming.GroupStateImpl\n+import org.apache.spark.sql.execution.streaming.GroupStateImpl.NO_TIMESTAMP\n+import org.apache.spark.sql.types._\n+\n+\n+object FlatMapGroupsWithStateExecHelper {\n+\n+  val supportedVersions = Seq(1, 2)\n+  val legacyVersion = 1\n+\n+  /**\n+   * Class to capture deserialized state and timestamp return by the state manager.\n+   * This is intended for reuse.\n+   */\n+  case class StateData(\n+      var keyRow: UnsafeRow = null,\n+      var stateRow: UnsafeRow = null,\n+      var stateObj: Any = null,\n+      var timeoutTimestamp: Long = -1) {\n+\n+    private[FlatMapGroupsWithStateExecHelper] def withNew(\n+        newKeyRow: UnsafeRow,\n+        newStateRow: UnsafeRow,\n+        newStateObj: Any,\n+        newTimeout: Long): this.type = {\n+      keyRow = newKeyRow\n+      stateRow = newStateRow\n+      stateObj = newStateObj\n+      timeoutTimestamp = newTimeout\n+      this\n+    }\n+  }\n+\n+  sealed trait StateManager extends Serializable {\n+    def stateSchema: StructType\n+    def getState(store: StateStore, keyRow: UnsafeRow): StateData\n+    def putState(store: StateStore, keyRow: UnsafeRow, state: Any, timeoutTimestamp: Long): Unit\n+    def removeState(store: StateStore, keyRow: UnsafeRow): Unit\n+    def getAllState(store: StateStore): Iterator[StateData]\n+    def version: Int\n+  }\n+\n+  def createStateManager(\n+      stateEncoder: ExpressionEncoder[Any],\n+      shouldStoreTimestamp: Boolean,\n+      stateFormatVersion: Int): StateManager = {\n+    stateFormatVersion match {\n+      case 1 => new StateManagerImplV1(stateEncoder, shouldStoreTimestamp)\n+      case 2 => new StateManagerImplV2(stateEncoder, shouldStoreTimestamp)\n+      case _ => throw new IllegalArgumentException(s\"Version $stateFormatVersion is invalid\")\n+    }\n+  }\n+\n+  // ===============================================================================================\n+  // =========================== Private implementations of StateManager ===========================\n+  // ===============================================================================================\n+\n+  private abstract class StateManagerImplBase(val version: Int, shouldStoreTimestamp: Boolean)\n+    extends StateManager {\n+\n+    protected def stateSerializerExprs: Seq[Expression]\n+    protected def stateDeserializerExpr: Expression\n+    protected def timeoutTimestampOrdinalInRow: Int\n+\n+    /** Get deserialized state and corresponding timeout timestamp for a key */\n+    override def getState(store: StateStore, keyRow: UnsafeRow): StateData = {\n+      val stateRow = store.get(keyRow)\n+      stateDataForGets.withNew(keyRow, stateRow, getStateObject(stateRow), getTimestamp(stateRow))\n+    }\n+\n+    /** Put state and timeout timestamp for a key */\n+    override def putState(store: StateStore, key: UnsafeRow, state: Any, timestamp: Long): Unit = {\n+      val stateRow = getStateRow(state)\n+      setTimestamp(stateRow, timestamp)\n+      store.put(key, stateRow)\n+    }\n+\n+    override def removeState(store: StateStore, keyRow: UnsafeRow): Unit = {\n+      store.remove(keyRow)\n+    }\n+\n+    override def getAllState(store: StateStore): Iterator[StateData] = {\n+      val stateData = StateData()\n+      store.getRange(None, None).map { p =>\n+        stateData.withNew(p.key, p.value, getStateObject(p.value), getTimestamp(p.value))\n+      }\n+    }\n+\n+    private lazy val stateSerializerFunc = ObjectOperator.serializeObjectToRow(stateSerializerExprs)\n+    private lazy val stateDeserializerFunc = {\n+      ObjectOperator.deserializeRowToObject(stateDeserializerExpr, stateSchema.toAttributes)\n+    }\n+    private lazy val stateDataForGets = StateData()\n+\n+    protected def getStateObject(row: UnsafeRow): Any = {\n+      if (row != null) stateDeserializerFunc(row) else null\n+    }\n+\n+    protected def getStateRow(obj: Any): UnsafeRow = {\n+      stateSerializerFunc(obj)\n+    }\n+\n+    /** Returns the timeout timestamp of a state row is set */\n+    private def getTimestamp(stateRow: UnsafeRow): Long = {\n+      if (shouldStoreTimestamp && stateRow != null) {\n+        stateRow.getLong(timeoutTimestampOrdinalInRow)\n+      } else NO_TIMESTAMP\n+    }\n+\n+    /** Set the timestamp in a state row */\n+    private def setTimestamp(stateRow: UnsafeRow, timeoutTimestamps: Long): Unit = {\n+      if (shouldStoreTimestamp) stateRow.setLong(timeoutTimestampOrdinalInRow, timeoutTimestamps)\n+    }\n+  }\n+\n+\n+  private class StateManagerImplV1(\n+      stateEncoder: ExpressionEncoder[Any],\n+      shouldStoreTimestamp: Boolean) extends StateManagerImplBase(1, shouldStoreTimestamp) {\n+\n+    private val timestampTimeoutAttribute =\n+      AttributeReference(\"timeoutTimestamp\", dataType = IntegerType, nullable = false)()\n+\n+    private val stateAttributes: Seq[Attribute] = {\n+      val encSchemaAttribs = stateEncoder.schema.toAttributes\n+      if (shouldStoreTimestamp) encSchemaAttribs :+ timestampTimeoutAttribute else encSchemaAttribs\n+    }\n+\n+    override val stateSchema: StructType = stateAttributes.toStructType\n+\n+    override val timeoutTimestampOrdinalInRow: Int = {\n+      stateAttributes.indexOf(timestampTimeoutAttribute)\n+    }\n+\n+    override val stateSerializerExprs: Seq[Expression] = {\n+      val encoderSerializer = stateEncoder.namedExpressions\n+      if (shouldStoreTimestamp) {\n+        encoderSerializer :+ Literal(GroupStateImpl.NO_TIMESTAMP)\n+      } else {\n+        encoderSerializer\n+      }\n+    }\n+\n+    override val stateDeserializerExpr: Expression = {\n+      // Note that this must be done in the driver, as resolving and binding of deserializer\n+      // expressions to the encoded type can be safely done only in the driver.\n+      stateEncoder.resolveAndBind().deserializer\n+    }\n+\n+    override protected def getStateRow(obj: Any): UnsafeRow = {\n+      require(obj != null, \"State object cannot be null\")\n+      super.getStateRow(obj)\n+    }\n+  }\n+\n+\n+  private class StateManagerImplV2("
  }],
  "prId": 21739
}]