[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Is this correct? After the python udf, I think the partitioning is unknown? ",
    "commit": "cb403690b2e570298941914c7c7420caf7362416",
    "createdAt": "2019-07-01T09:40:18Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.api.python.{ChainedPythonFunctions, PythonEvalType}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical._\n+import org.apache.spark.sql.execution.{SparkPlan, UnaryExecNode}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+import org.apache.spark.sql.util.ArrowUtils\n+import org.apache.spark.sql.vectorized.{ArrowColumnVector, ColumnarBatch}\n+\n+/**\n+ * A relation produced by applying a function that takes an iterator of pandas DataFrames\n+ * and outputs an iterator of pandas DataFrames.\n+ *\n+ * This is somewhat similar with [[FlatMapGroupsInPandasExec]] and\n+ * `org.apache.spark.sql.catalyst.plans.logical.MapPartitionsInRWithArrow`\n+ *\n+ */\n+case class MapPartitionsInPandasExec(\n+    func: Expression,\n+    output: Seq[Attribute],\n+    child: SparkPlan)\n+  extends UnaryExecNode {\n+\n+  private val pandasFunction = func.asInstanceOf[PythonUDF].func\n+\n+  override def producedAttributes: AttributeSet = AttributeSet(output)\n+\n+  private val batchSize = conf.arrowMaxRecordsPerBatch\n+\n+  override def outputPartitioning: Partitioning = child.outputPartitioning",
    "line": 53
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Hm, I just noticed other Python UDFs set it as unknown partitioning whereas `dapply` in R (without and with Arrow) and `MapPartitions` specify child output partitioning. I haven't taken a close look but matching it to `mapPartitions` should be fine. The partitioning and distribution looks not going to be affected because it maps one partition to the other but maybe I miss something.\r\n\r\n",
    "commit": "cb403690b2e570298941914c7c7420caf7362416",
    "createdAt": "2019-07-01T12:33:10Z",
    "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.api.python.{ChainedPythonFunctions, PythonEvalType}\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.physical._\n+import org.apache.spark.sql.execution.{SparkPlan, UnaryExecNode}\n+import org.apache.spark.sql.types.{StructField, StructType}\n+import org.apache.spark.sql.util.ArrowUtils\n+import org.apache.spark.sql.vectorized.{ArrowColumnVector, ColumnarBatch}\n+\n+/**\n+ * A relation produced by applying a function that takes an iterator of pandas DataFrames\n+ * and outputs an iterator of pandas DataFrames.\n+ *\n+ * This is somewhat similar with [[FlatMapGroupsInPandasExec]] and\n+ * `org.apache.spark.sql.catalyst.plans.logical.MapPartitionsInRWithArrow`\n+ *\n+ */\n+case class MapPartitionsInPandasExec(\n+    func: Expression,\n+    output: Seq[Attribute],\n+    child: SparkPlan)\n+  extends UnaryExecNode {\n+\n+  private val pandasFunction = func.asInstanceOf[PythonUDF].func\n+\n+  override def producedAttributes: AttributeSet = AttributeSet(output)\n+\n+  private val batchSize = conf.arrowMaxRecordsPerBatch\n+\n+  override def outputPartitioning: Partitioning = child.outputPartitioning",
    "line": 53
  }],
  "prId": 24997
}]