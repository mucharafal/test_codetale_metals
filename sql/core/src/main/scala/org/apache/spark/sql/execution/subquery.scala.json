[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "This fixes a small bug in `sematicEquals`.\n",
    "commit": "d2bd26cf868fc6a44b01353af4bf40f8f01576cb",
    "createdAt": "2016-08-17T11:38:11Z",
    "diffHunk": "@@ -56,30 +44,29 @@ trait ExecSubqueryExpression extends SubqueryExpression {\n  * This is the physical copy of ScalarSubquery to be used inside SparkPlan.\n  */\n case class ScalarSubquery(\n-    executedPlan: SubqueryExec,\n+    plan: SubqueryExec,\n     exprId: ExprId)\n   extends ExecSubqueryExpression {\n \n-  override def dataType: DataType = executedPlan.schema.fields.head.dataType\n+  override def dataType: DataType = plan.schema.fields.head.dataType\n   override def children: Seq[Expression] = Nil\n   override def nullable: Boolean = true\n-  override def toString: String = executedPlan.simpleString\n-\n-  def withExecutedPlan(plan: SubqueryExec): ExecSubqueryExpression = copy(executedPlan = plan)\n+  override def toString: String = plan.simpleString\n+  override def withNewPlan(query: SubqueryExec): ScalarSubquery = copy(plan = query)\n \n   override def semanticEquals(other: Expression): Boolean = other match {\n-    case s: ScalarSubquery => executedPlan.sameResult(executedPlan)\n+    case s: ScalarSubquery => plan.sameResult(s.plan)",
    "line": 52
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Good catch\n",
    "commit": "d2bd26cf868fc6a44b01353af4bf40f8f01576cb",
    "createdAt": "2016-08-17T14:02:05Z",
    "diffHunk": "@@ -56,30 +44,29 @@ trait ExecSubqueryExpression extends SubqueryExpression {\n  * This is the physical copy of ScalarSubquery to be used inside SparkPlan.\n  */\n case class ScalarSubquery(\n-    executedPlan: SubqueryExec,\n+    plan: SubqueryExec,\n     exprId: ExprId)\n   extends ExecSubqueryExpression {\n \n-  override def dataType: DataType = executedPlan.schema.fields.head.dataType\n+  override def dataType: DataType = plan.schema.fields.head.dataType\n   override def children: Seq[Expression] = Nil\n   override def nullable: Boolean = true\n-  override def toString: String = executedPlan.simpleString\n-\n-  def withExecutedPlan(plan: SubqueryExec): ExecSubqueryExpression = copy(executedPlan = plan)\n+  override def toString: String = plan.simpleString\n+  override def withNewPlan(query: SubqueryExec): ScalarSubquery = copy(plan = query)\n \n   override def semanticEquals(other: Expression): Boolean = other match {\n-    case s: ScalarSubquery => executedPlan.sameResult(executedPlan)\n+    case s: ScalarSubquery => plan.sameResult(s.plan)",
    "line": 52
  }],
  "prId": 14685
}]