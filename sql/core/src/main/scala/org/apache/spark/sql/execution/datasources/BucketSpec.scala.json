[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Do we need to consider case sensitivity in the above two `resolvedX` methods?\n",
    "commit": "1afd3ee78484ce56dd04446bd43adab96a677411",
    "createdAt": "2015-12-30T15:21:53Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+private[sql] case class BucketSpec(\n+    numBuckets: Int,\n+    bucketingColumns: Seq[String],\n+    sortingColumns: Option[Seq[String]]) {\n+\n+  def resolvedBucketingColumns(inputSchema: Seq[Attribute]): Seq[Attribute] = {\n+    bucketingColumns.map { col =>\n+      inputSchema.find(_.name == col).get\n+    }\n+  }\n+\n+  def resolvedSortingColumns(inputSchema: Seq[Attribute]): Seq[Attribute] = {\n+    if (sortingColumns.isDefined) {\n+      sortingColumns.get.map { col =>\n+        inputSchema.find(_.name == col).get\n+      }\n+    } else {\n+      Nil\n+    }\n+  }"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "The column names are already normalized in `DataFrameWriter`, see https://github.com/apache/spark/pull/10498/files#diff-94fbd986b04087223f53697d4b6cab24R221\n",
    "commit": "1afd3ee78484ce56dd04446bd43adab96a677411",
    "createdAt": "2016-01-04T11:32:54Z",
    "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+\n+private[sql] case class BucketSpec(\n+    numBuckets: Int,\n+    bucketingColumns: Seq[String],\n+    sortingColumns: Option[Seq[String]]) {\n+\n+  def resolvedBucketingColumns(inputSchema: Seq[Attribute]): Seq[Attribute] = {\n+    bucketingColumns.map { col =>\n+      inputSchema.find(_.name == col).get\n+    }\n+  }\n+\n+  def resolvedSortingColumns(inputSchema: Seq[Attribute]): Seq[Attribute] = {\n+    if (sortingColumns.isDefined) {\n+      sortingColumns.get.map { col =>\n+        inputSchema.find(_.name == col).get\n+      }\n+    } else {\n+      Nil\n+    }\n+  }"
  }],
  "prId": 10498
}]