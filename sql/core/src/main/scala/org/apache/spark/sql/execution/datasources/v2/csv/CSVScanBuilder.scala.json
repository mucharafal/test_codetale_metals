[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Currently, this is unused. We should pass this to `CSVScan` as a second parameter.",
    "commit": "689f17e4930694d1e7585ba82e0964507121868a",
    "createdAt": "2019-03-08T18:20:53Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2.csv\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.v2.FileScanBuilder\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.types.StructType\n+\n+case class CSVScanBuilder(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    schema: StructType,\n+    dataSchema: StructType,\n+    options: DataSourceOptions) extends FileScanBuilder(schema) {\n+  lazy val hadoopConf =\n+    sparkSession.sessionState.newHadoopConfWithOptions(options.asMap().asScala.toMap)"
  }],
  "prId": 24005
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Here, we need `sparkSession,` -> `sparkSession, hadoopConf`.",
    "commit": "689f17e4930694d1e7585ba82e0964507121868a",
    "createdAt": "2019-03-08T18:21:18Z",
    "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2.csv\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex\n+import org.apache.spark.sql.execution.datasources.v2.FileScanBuilder\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.Scan\n+import org.apache.spark.sql.types.StructType\n+\n+case class CSVScanBuilder(\n+    sparkSession: SparkSession,\n+    fileIndex: PartitioningAwareFileIndex,\n+    schema: StructType,\n+    dataSchema: StructType,\n+    options: DataSourceOptions) extends FileScanBuilder(schema) {\n+  lazy val hadoopConf =\n+    sparkSession.sessionState.newHadoopConfWithOptions(options.asMap().asScala.toMap)\n+\n+  override def build(): Scan = {\n+    CSVScan(sparkSession, fileIndex, dataSchema, readSchema, options)",
    "line": 35
  }],
  "prId": 24005
}]