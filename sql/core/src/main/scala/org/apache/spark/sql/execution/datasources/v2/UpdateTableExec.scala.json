[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This needs to catch the errors from `SupportsUpdate` and translate them into Spark error classes.",
    "commit": "3732a18e3012e0dccc28663f9a37ca570e8b13d1",
    "createdAt": "2019-09-04T21:16:23Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.expressions.Expression\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.LeafExecNode\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.SupportsUpdate\n+\n+\n+case class UpdateTableExec(\n+    table: SupportsUpdate,\n+    attrs: Seq[String],\n+    values: Seq[Expression],\n+    condition: Array[Filter]) extends LeafExecNode {\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    table.updateWhere(attrs.zip(values).toMap.asJava, condition)"
  }, {
    "author": {
      "login": "xianyinxin"
    },
    "body": "Fixed.",
    "commit": "3732a18e3012e0dccc28663f9a37ca570e8b13d1",
    "createdAt": "2019-09-05T03:24:14Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.expressions.Expression\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.LeafExecNode\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.SupportsUpdate\n+\n+\n+case class UpdateTableExec(\n+    table: SupportsUpdate,\n+    attrs: Seq[String],\n+    values: Seq[Expression],\n+    condition: Array[Filter]) extends LeafExecNode {\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    table.updateWhere(attrs.zip(values).toMap.asJava, condition)"
  }],
  "prId": 25626
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why catch this but not other exceptions?",
    "commit": "3732a18e3012e0dccc28663f9a37ca570e8b13d1",
    "createdAt": "2019-09-11T07:38:08Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.expressions.Expression\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.LeafExecNode\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.SupportsUpdate\n+\n+\n+case class UpdateTableExec(\n+    table: SupportsUpdate,\n+    attrs: Seq[String],\n+    values: Seq[Expression],\n+    condition: Array[Filter]) extends LeafExecNode {\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    try {\n+      table.updateWhere(attrs.zip(values).toMap.asJava, condition)\n+    } catch {\n+      case e: IllegalArgumentException =>"
  }, {
    "author": {
      "login": "xianyinxin"
    },
    "body": "We defines the behavior of `updateWhere` -- when failed because of cases like unsupported expression, datasource need to throw an `IllegalArgumentException`\r\n\r\nFor other general runtime exceptions, It's hard to define a meaningful wrapped exception.",
    "commit": "3732a18e3012e0dccc28663f9a37ca570e8b13d1",
    "createdAt": "2019-09-11T08:23:57Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalog.v2.expressions.Expression\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.execution.LeafExecNode\n+import org.apache.spark.sql.sources.Filter\n+import org.apache.spark.sql.sources.v2.SupportsUpdate\n+\n+\n+case class UpdateTableExec(\n+    table: SupportsUpdate,\n+    attrs: Seq[String],\n+    values: Seq[Expression],\n+    condition: Array[Filter]) extends LeafExecNode {\n+\n+  override protected def doExecute(): RDD[InternalRow] = {\n+    try {\n+      table.updateWhere(attrs.zip(values).toMap.asJava, condition)\n+    } catch {\n+      case e: IllegalArgumentException =>"
  }],
  "prId": 25626
}]