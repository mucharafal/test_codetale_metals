[{
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "We should at least add a test case for this new option",
    "commit": "a6fc2d0d3b542c402e426ff125ff42822ddb4b7c",
    "createdAt": "2019-06-11T14:04:00Z",
    "diffHunk": "@@ -57,9 +57,20 @@ class OrcOptions(\n     }\n     shortOrcCompressionCodecNames(codecName)\n   }\n+\n+  /**\n+   * Whether it merges schemas or not. When the given Orc files have different schemas,\n+   * the schemas can be merged. By default use the value specified in SQLConf.\n+   */\n+  val mergeSchema: Boolean = parameters\n+    .get(MERGE_SCHEMA)\n+    .map(_.toBoolean)\n+    .getOrElse(sqlConf.isOrcSchemaMergingEnabled)\n }\n \n object OrcOptions {\n+  val MERGE_SCHEMA = \"mergeSchema\"",
    "line": 16
  }, {
    "author": {
      "login": "WangGuangxin"
    },
    "body": "added a new test case in `OrcSuite`",
    "commit": "a6fc2d0d3b542c402e426ff125ff42822ddb4b7c",
    "createdAt": "2019-06-12T16:30:40Z",
    "diffHunk": "@@ -57,9 +57,20 @@ class OrcOptions(\n     }\n     shortOrcCompressionCodecNames(codecName)\n   }\n+\n+  /**\n+   * Whether it merges schemas or not. When the given Orc files have different schemas,\n+   * the schemas can be merged. By default use the value specified in SQLConf.\n+   */\n+  val mergeSchema: Boolean = parameters\n+    .get(MERGE_SCHEMA)\n+    .map(_.toBoolean)\n+    .getOrElse(sqlConf.isOrcSchemaMergingEnabled)\n }\n \n object OrcOptions {\n+  val MERGE_SCHEMA = \"mergeSchema\"",
    "line": 16
  }],
  "prId": 24043
}]