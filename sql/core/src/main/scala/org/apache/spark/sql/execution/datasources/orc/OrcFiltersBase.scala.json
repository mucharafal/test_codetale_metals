[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Can you remove `_:`? and is it written this way because `BinaryType` is a subtype of `AtomicType`?",
    "commit": "3e51b923d76fff7d69386d98b7e0f24dfd0e2390",
    "createdAt": "2019-03-21T15:51:39Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.orc\n+\n+import org.apache.spark.sql.sources.{And, Filter}\n+import org.apache.spark.sql.types.{AtomicType, BinaryType, DataType}\n+\n+/**\n+ * Methods that can be shared when upgrading the built-in Hive.\n+ */\n+trait OrcFiltersBase {\n+\n+  private[sql] def buildTree(filters: Seq[Filter]): Option[Filter] = {\n+    filters match {\n+      case Seq() => None\n+      case Seq(filter) => Some(filter)\n+      case Seq(filter1, filter2) => Some(And(filter1, filter2))\n+      case _ => // length > 2\n+        val (left, right) = filters.splitAt(filters.length / 2)\n+        Some(And(buildTree(left).get, buildTree(right).get))\n+    }\n+  }\n+\n+  // Since ORC 1.5.0 (ORC-323), we need to quote for column names with `.` characters\n+  // in order to distinguish predicate pushdown for nested columns.\n+  protected def quoteAttributeNameIfNeeded(name: String) : String = {\n+    if (!name.contains(\"`\") && name.contains(\".\")) {\n+      s\"`$name`\"\n+    } else {\n+      name\n+    }\n+  }\n+\n+  /**\n+   * Return true if this is a searchable type in ORC.\n+   * Both CharType and VarcharType are cleaned at AstBuilder.\n+   */\n+  protected def isSearchableType(dataType: DataType) = dataType match {\n+    case BinaryType => false\n+    case _: AtomicType => true",
    "line": 55
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "I have not made any changes. just move from https://github.com/apache/spark/pull/24166/files#diff-224b8cbedf286ecbfdd092d1e2e2f237L108\r\ncc @dongjoon-hyun",
    "commit": "3e51b923d76fff7d69386d98b7e0f24dfd0e2390",
    "createdAt": "2019-03-22T02:55:10Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.orc\n+\n+import org.apache.spark.sql.sources.{And, Filter}\n+import org.apache.spark.sql.types.{AtomicType, BinaryType, DataType}\n+\n+/**\n+ * Methods that can be shared when upgrading the built-in Hive.\n+ */\n+trait OrcFiltersBase {\n+\n+  private[sql] def buildTree(filters: Seq[Filter]): Option[Filter] = {\n+    filters match {\n+      case Seq() => None\n+      case Seq(filter) => Some(filter)\n+      case Seq(filter1, filter2) => Some(And(filter1, filter2))\n+      case _ => // length > 2\n+        val (left, right) = filters.splitAt(filters.length / 2)\n+        Some(And(buildTree(left).get, buildTree(right).get))\n+    }\n+  }\n+\n+  // Since ORC 1.5.0 (ORC-323), we need to quote for column names with `.` characters\n+  // in order to distinguish predicate pushdown for nested columns.\n+  protected def quoteAttributeNameIfNeeded(name: String) : String = {\n+    if (!name.contains(\"`\") && name.contains(\".\")) {\n+      s\"`$name`\"\n+    } else {\n+      name\n+    }\n+  }\n+\n+  /**\n+   * Return true if this is a searchable type in ORC.\n+   * Both CharType and VarcharType are cleaned at AstBuilder.\n+   */\n+  protected def isSearchableType(dataType: DataType) = dataType match {\n+    case BinaryType => false\n+    case _: AtomicType => true",
    "line": 55
  }],
  "prId": 24166
}]