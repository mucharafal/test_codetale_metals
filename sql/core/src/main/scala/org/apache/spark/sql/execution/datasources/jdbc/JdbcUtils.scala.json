[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. Let's remove this addition.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:12:24Z",
    "diffHunk": "@@ -797,6 +797,7 @@ object JdbcUtils extends Logging {\n       tableSchema: StructType,\n       customSchema: String,\n       nameEquality: Resolver): StructType = {\n+"
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "This is orthogonal to MySqlServerDialect. Can we proceed this PR without this line?",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:27:14Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Or, we can proceed this first as another PR with a proper regression test.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:28:28Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "@dongjoon-hyun JDBCUtils.scala fix is required for completeness of the ByteType Fix. Without this fix Integrations test  in \"external/docker-integration-tests/src/test/scala/org/apache/spark/sql/jdbc/MsSqlServerIntegrationSuite.scala\" will fail. \r\n\r\nI dont think the \"MsSqlServerIntegrationSuite.scala\"  integration tests are running in CI/CD. I was running these locally following a review suggestion. Is that's true, i can still remove this fix and submit this as part of another PR. \r\n",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T18:05:43Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Then, you need to follow the second option I gave. Please make another PR. We need to review that first before this PR.\r\n> Or, we can proceed this first as another PR with a proper regression test.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T18:48:42Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "@dongjoon-hyun  Can u please elaborate on proper regression test. I have test cases added/fixed for ByteType in JDBCSuite.scala and MsSqlServerIntegrationSuite.scala. Are you expecting some other test? Can u please point me to type of test.\r\n\r\nAnother way to cleanly split this PR would be as follows. \r\n1. Remove ByteType fix from this PR and jdbcutils.scala fix also get removed. This PR will only have fix for FloatType and Short.\r\n2. 2nd PR with complete ByteType fix with more elaborate integration test.\r\n\r\nI prefer this for better seperation of concern in each of the PRs , while still retaining the completeness. Let me know what you think.\r\n\r\nThanks for your patience and very helpful guidance.\r\n",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T19:15:49Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "What I meant is like your 2nd option.\r\n> 2nd PR with complete ByteType fix with more elaborate integration test.\r\n\r\nHere, the proper regression test means a test causing failure for the other Dialects. (e.g. PostgreSQL/MySQL/...) because `JdbcUtils` is shared across Dialects.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T20:26:51Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "@dongjoon-hyun  Would create 2 PRs then. PR1 ( this PR) i will remove ByteType and JDBCUtilis fix. Will create PR2 for ByteType and JDBCUtilis fix with full integration test. PR2 will take time as i have to investigate how to test for other dialects.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-10T19:51:57Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep. Please try as you want. Then, ping me later when the PR is ready.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-10T20:26:40Z",
    "diffHunk": "@@ -550,7 +550,7 @@ object JdbcUtils extends Logging {\n \n     case ByteType =>\n       (stmt: PreparedStatement, row: Row, pos: Int) =>\n-        stmt.setInt(pos + 1, row.getByte(pos))\n+        stmt.setByte(pos + 1, row.getByte(pos))",
    "line": 5
  }],
  "prId": 24969
}]