[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It's moved as was except the parameters at its signature.",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T07:58:34Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(\n+    schema: StructType,\n+    options: CSVOptions,\n+    source: String,\n+    isStartOfFile: Boolean = false) extends Logging {\n+\n+  // Indicates if it is set to `false`, comparison of column names and schema field\n+  // names is not case sensitive.\n+  private val caseSensitive = SQLConf.get.caseSensitiveAnalysis\n+\n+  // Indicates if it is `true`, column names are ignored otherwise the CSV column\n+  // names are checked for conformance to the schema. In the case if\n+  // the column name don't conform to the schema, an exception is thrown.\n+  private val enforceSchema = options.enforceSchema\n+\n+  /**\n+   * Checks that column names in a CSV header and field names in the schema are the same\n+   * by taking into account case sensitivity.\n+   *\n+   * @param columnNames names of CSV columns that must be checked against to the schema.\n+   */\n+  private def checkHeaderColumnNames(columnNames: Array[String]): Unit = {",
    "line": 58
  }],
  "prId": 22676
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "only this diff. \r\n\r\nPreviously it was \r\n\r\n```\r\n |CSV file: $fileName\"\"\".stripMargin)\r\n```\r\n\r\nwhich ends up with producing the class of source here. See (https://github.com/apache/spark/pull/22676/files#diff-f70bda59304588cc3abfa3a9840653f4R512)\r\n\r\nThis is only the diff in this method.",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T08:00:03Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(\n+    schema: StructType,\n+    options: CSVOptions,\n+    source: String,\n+    isStartOfFile: Boolean = false) extends Logging {\n+\n+  // Indicates if it is set to `false`, comparison of column names and schema field\n+  // names is not case sensitive.\n+  private val caseSensitive = SQLConf.get.caseSensitiveAnalysis\n+\n+  // Indicates if it is `true`, column names are ignored otherwise the CSV column\n+  // names are checked for conformance to the schema. In the case if\n+  // the column name don't conform to the schema, an exception is thrown.\n+  private val enforceSchema = options.enforceSchema\n+\n+  /**\n+   * Checks that column names in a CSV header and field names in the schema are the same\n+   * by taking into account case sensitivity.\n+   *\n+   * @param columnNames names of CSV columns that must be checked against to the schema.\n+   */\n+  private def checkHeaderColumnNames(columnNames: Array[String]): Unit = {\n+    if (columnNames != null) {\n+      val fieldNames = schema.map(_.name).toIndexedSeq\n+      val (headerLen, schemaSize) = (columnNames.size, fieldNames.length)\n+      var errorMessage: Option[String] = None\n+\n+      if (headerLen == schemaSize) {\n+        var i = 0\n+        while (errorMessage.isEmpty && i < headerLen) {\n+          var (nameInSchema, nameInHeader) = (fieldNames(i), columnNames(i))\n+          if (!caseSensitive) {\n+            // scalastyle:off caselocale\n+            nameInSchema = nameInSchema.toLowerCase\n+            nameInHeader = nameInHeader.toLowerCase\n+            // scalastyle:on caselocale\n+          }\n+          if (nameInHeader != nameInSchema) {\n+            errorMessage = Some(\n+              s\"\"\"|CSV header does not conform to the schema.\n+                  | Header: ${columnNames.mkString(\", \")}\n+                  | Schema: ${fieldNames.mkString(\", \")}\n+                  |Expected: ${fieldNames(i)} but found: ${columnNames(i)}\n+                  |$source\"\"\".stripMargin)",
    "line": 80
  }],
  "prId": 22676
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Can this be private to csv or spark packages? or is this now part of a public API? ",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T14:24:12Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(",
    "line": 37
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It's under execution package which is meant to be private. Since it's accessed in DataFrameReader, it should be `private[sql]` which is removed in SPARK-16964 for this reason.",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T14:35:57Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(",
    "line": 37
  }],
  "prId": 22676
}, {
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "Is this prefix of `CSVHeaderChecker` necessary? The class is in `csv` package already. It should be clear that it checks CSV headers.",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T14:37:39Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(",
    "line": 37
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's leave as is. It's kind of existing naming convention within each datasource.",
    "commit": "c504356b847e183f571a09ce5f808d4a7f229255",
    "createdAt": "2018-10-09T15:23:09Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import com.univocity.parsers.csv.CsvParser\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * Checks that column names in a CSV header and field names in the schema are the same\n+ * by taking into account case sensitivity.\n+ *\n+ * @param schema provided (or inferred) schema to which CSV must conform.\n+ * @param options parsed CSV options.\n+ * @param source name of CSV source that are currently checked. It is used in error messages.\n+ * @param isStartOfFile indicates if the currently processing partition is the start of the file.\n+ *                      if unknown or not applicable (for instance when the input is a dataset),\n+ *                      can be omitted.\n+ */\n+class CSVHeaderChecker(",
    "line": 37
  }],
  "prId": 22676
}]