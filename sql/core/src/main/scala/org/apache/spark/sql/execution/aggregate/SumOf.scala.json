[{
  "comments": [{
    "author": {
      "login": "mateiz"
    },
    "body": "This particular implementation of Sum will be pretty slow because of the Numeric -- any way we can add specialized ones for each numeric type? I imagine sum will be a pretty popular aggregation.\n",
    "commit": "c88e6c0faf9344ffde9e0cc954f33e570866fe83",
    "createdAt": "2015-11-09T03:27:15Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.expressions.Aggregator\n+\n+/** An `Aggregator` that adds up any numeric type returned by the given function. */\n+class SumOf[I, N : Numeric](f: I => N) extends Aggregator[I, N, N] with Serializable {"
  }, {
    "author": {
      "login": "mateiz"
    },
    "body": "Actually, achieving this might also require the Aggregator interface to be specialized somehow. Not sure whether that's worth doing in a public API.. but it would be nice to have sum() that is fast out of the box, maybe by implementing it in some other way.\n",
    "commit": "c88e6c0faf9344ffde9e0cc954f33e570866fe83",
    "createdAt": "2015-11-09T03:30:48Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.expressions.Aggregator\n+\n+/** An `Aggregator` that adds up any numeric type returned by the given function. */\n+class SumOf[I, N : Numeric](f: I => N) extends Aggregator[I, N, N] with Serializable {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "In this case, why don't we just rewrite it to a codegen sum aggregate function?\n",
    "commit": "c88e6c0faf9344ffde9e0cc954f33e570866fe83",
    "createdAt": "2015-11-09T04:17:49Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.expressions.Aggregator\n+\n+/** An `Aggregator` that adds up any numeric type returned by the given function. */\n+class SumOf[I, N : Numeric](f: I => N) extends Aggregator[I, N, N] with Serializable {"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Yeah, this was mostly an example I wrote to make sure you could do flexible things.  I agree with reynolds that we can optimize common cases under the covers.\n\nRegarding specialization, the easiest way for us to do this is probably to add encoders that reuse objects under the covers.  Thats probably the nicest way to avoid boxing without getting into the mess that is scala specialization.\n",
    "commit": "c88e6c0faf9344ffde9e0cc954f33e570866fe83",
    "createdAt": "2015-11-09T20:00:10Z",
    "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.expressions.Aggregator\n+\n+/** An `Aggregator` that adds up any numeric type returned by the given function. */\n+class SumOf[I, N : Numeric](f: I => N) extends Aggregator[I, N, N] with Serializable {"
  }],
  "prId": 9555
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "empty file?\n",
    "commit": "c88e6c0faf9344ffde9e0cc954f33e570866fe83",
    "createdAt": "2015-11-09T22:15:14Z",
    "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate"
  }],
  "prId": 9555
}]