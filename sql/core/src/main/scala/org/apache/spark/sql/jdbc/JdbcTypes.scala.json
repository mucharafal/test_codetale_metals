[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Why not cast into TimestampType?\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-07-29T07:33:06Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.jdbc\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.catalyst.types._\n+\n+private[sql] object JdbcTypes extends Logging {\n+\n+  def toPrimitiveDataType(jdbcType: Int): DataType =\n+    jdbcType match {\n+      case java.sql.Types.LONGVARCHAR\n+         | java.sql.Types.VARCHAR\n+         | java.sql.Types.CHAR        => StringType\n+      case java.sql.Types.NUMERIC\n+         | java.sql.Types.DECIMAL     => DecimalType\n+      case java.sql.Types.BIT         => BooleanType\n+      case java.sql.Types.TINYINT     => ByteType\n+      case java.sql.Types.SMALLINT    => ShortType\n+      case java.sql.Types.INTEGER     => IntegerType\n+      case java.sql.Types.BIGINT      => LongType\n+      case java.sql.Types.REAL        => FloatType\n+      case java.sql.Types.FLOAT\n+         | java.sql.Types.DOUBLE      => DoubleType\n+      case java.sql.Types.LONGVARBINARY\n+         | java.sql.Types.VARBINARY\n+         | java.sql.Types.BINARY      => BinaryType\n+      case java.sql.Types.TIMESTAMP   => TimestampType\n+      case java.sql.Types.DATE"
  }, {
    "author": {
      "login": "chutium"
    },
    "body": "aha, good idea, +1 :)\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-07-29T13:25:52Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.jdbc\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.catalyst.types._\n+\n+private[sql] object JdbcTypes extends Logging {\n+\n+  def toPrimitiveDataType(jdbcType: Int): DataType =\n+    jdbcType match {\n+      case java.sql.Types.LONGVARCHAR\n+         | java.sql.Types.VARCHAR\n+         | java.sql.Types.CHAR        => StringType\n+      case java.sql.Types.NUMERIC\n+         | java.sql.Types.DECIMAL     => DecimalType\n+      case java.sql.Types.BIT         => BooleanType\n+      case java.sql.Types.TINYINT     => ByteType\n+      case java.sql.Types.SMALLINT    => ShortType\n+      case java.sql.Types.INTEGER     => IntegerType\n+      case java.sql.Types.BIGINT      => LongType\n+      case java.sql.Types.REAL        => FloatType\n+      case java.sql.Types.FLOAT\n+         | java.sql.Types.DOUBLE      => DoubleType\n+      case java.sql.Types.LONGVARBINARY\n+         | java.sql.Types.VARBINARY\n+         | java.sql.Types.BINARY      => BinaryType\n+      case java.sql.Types.TIMESTAMP   => TimestampType\n+      case java.sql.Types.DATE"
  }],
  "prId": 1612
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Add `TODO` will be more helpful for the future improvement.\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-07-29T07:34:00Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.jdbc\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.catalyst.types._\n+\n+private[sql] object JdbcTypes extends Logging {\n+\n+  def toPrimitiveDataType(jdbcType: Int): DataType =\n+    jdbcType match {\n+      case java.sql.Types.LONGVARCHAR\n+         | java.sql.Types.VARCHAR\n+         | java.sql.Types.CHAR        => StringType\n+      case java.sql.Types.NUMERIC\n+         | java.sql.Types.DECIMAL     => DecimalType\n+      case java.sql.Types.BIT         => BooleanType\n+      case java.sql.Types.TINYINT     => ByteType\n+      case java.sql.Types.SMALLINT    => ShortType\n+      case java.sql.Types.INTEGER     => IntegerType\n+      case java.sql.Types.BIGINT      => LongType\n+      case java.sql.Types.REAL        => FloatType\n+      case java.sql.Types.FLOAT\n+         | java.sql.Types.DOUBLE      => DoubleType\n+      case java.sql.Types.LONGVARBINARY\n+         | java.sql.Types.VARBINARY\n+         | java.sql.Types.BINARY      => BinaryType\n+      case java.sql.Types.TIMESTAMP   => TimestampType\n+      case java.sql.Types.DATE\n+         | java.sql.Types.TIME        => StringType\n+      case java.sql.Types.CLOB        => StringType //should be just to string?"
  }, {
    "author": {
      "login": "chutium"
    },
    "body": "+1 again :)\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-07-29T13:26:01Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements. See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License. You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.jdbc\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.catalyst.types._\n+\n+private[sql] object JdbcTypes extends Logging {\n+\n+  def toPrimitiveDataType(jdbcType: Int): DataType =\n+    jdbcType match {\n+      case java.sql.Types.LONGVARCHAR\n+         | java.sql.Types.VARCHAR\n+         | java.sql.Types.CHAR        => StringType\n+      case java.sql.Types.NUMERIC\n+         | java.sql.Types.DECIMAL     => DecimalType\n+      case java.sql.Types.BIT         => BooleanType\n+      case java.sql.Types.TINYINT     => ByteType\n+      case java.sql.Types.SMALLINT    => ShortType\n+      case java.sql.Types.INTEGER     => IntegerType\n+      case java.sql.Types.BIGINT      => LongType\n+      case java.sql.Types.REAL        => FloatType\n+      case java.sql.Types.FLOAT\n+         | java.sql.Types.DOUBLE      => DoubleType\n+      case java.sql.Types.LONGVARBINARY\n+         | java.sql.Types.VARBINARY\n+         | java.sql.Types.BINARY      => BinaryType\n+      case java.sql.Types.TIMESTAMP   => TimestampType\n+      case java.sql.Types.DATE\n+         | java.sql.Types.TIME        => StringType\n+      case java.sql.Types.CLOB        => StringType //should be just to string?"
  }],
  "prId": 1612
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Same here: include the type that isn't supported.\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-09-09T02:19:10Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.catalyst.types._\n+\n+private[sql] object JdbcTypes extends Logging {\n+\n+  /**\n+   * More about JDBC types mapped to Java types:\n+   *   http://docs.oracle.com/javase/6/docs/technotes/guides/jdbc/getstart/mapping.html#1051555\n+   *\n+   * Compatibility of ResultSet getter Methods defined in JDBC spec:\n+   *   http://download.oracle.com/otn-pub/jcp/jdbc-4_1-mrel-spec/jdbc4.1-fr-spec.pdf\n+   *   page 211\n+   */\n+  def toPrimitiveDataType(jdbcType: Int): DataType =\n+    jdbcType match {\n+      case java.sql.Types.LONGVARCHAR\n+         | java.sql.Types.VARCHAR\n+         | java.sql.Types.CHAR        => StringType\n+      case java.sql.Types.NUMERIC\n+         | java.sql.Types.DECIMAL     => DecimalType\n+      case java.sql.Types.BIT         => BooleanType\n+      case java.sql.Types.TINYINT     => ByteType\n+      case java.sql.Types.SMALLINT    => ShortType\n+      case java.sql.Types.INTEGER     => IntegerType\n+      case java.sql.Types.BIGINT      => LongType\n+      case java.sql.Types.REAL        => FloatType\n+      case java.sql.Types.FLOAT\n+         | java.sql.Types.DOUBLE      => DoubleType\n+      case java.sql.Types.LONGVARBINARY\n+         | java.sql.Types.VARBINARY\n+         | java.sql.Types.BINARY      => BinaryType\n+      // Timestamp's getter should also be able to get DATE and TIME according to JDBC spec\n+      case java.sql.Types.TIMESTAMP\n+         | java.sql.Types.DATE\n+         | java.sql.Types.TIME        => TimestampType\n+\n+      // TODO: CLOB only works with getClob or getAscIIStream\n+      // case java.sql.Types.CLOB\n+\n+      // TODO: BLOB only works with getBlob or getBinaryStream\n+      // case java.sql.Types.BLOB\n+\n+      // TODO: nested types\n+      // case java.sql.Types.ARRAY     => ArrayType\n+      // case java.sql.Types.STRUCT    => StructType\n+\n+      // TODO: unsupported types\n+      // case java.sql.Types.DISTINCT\n+      // case java.sql.Types.REF\n+\n+      // TODO: more about JAVA_OBJECT:\n+      //   http://docs.oracle.com/javase/6/docs/technotes/guides/jdbc/getstart/mapping.html#1038181\n+      // case java.sql.Types.JAVA_OBJECT => BinaryType\n+\n+      case _ => sys.error(",
    "line": 74
  }],
  "prId": 1612
}]