[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Looks like you're using Option but always call `.get` without any checking. In `setupTask` it is fine since assignment is placed in there, but in `newTaskTempFile` we may be better to guard with `require` which achieves fail-fast and let `.get` always succeed later.",
    "commit": "92247a307967125e0baa9f5780550afc5151543d",
    "createdAt": "2018-09-21T06:55:57Z",
    "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.hadoop.fs.{FileAlreadyExistsException, FileContext, Path}\n+import org.apache.hadoop.mapreduce.{JobContext, TaskAttemptContext}\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+\n+class StagingFileCommitProtocol(jobId: String, path: String)\n+  extends FileCommitProtocol with Serializable with Logging\n+  with ManifestCommitProtocol {\n+  private var stagingDir: Option[Path] = None",
    "line": 30
  }, {
    "author": {
      "login": "misutoth"
    },
    "body": "Yes, I will do that.",
    "commit": "92247a307967125e0baa9f5780550afc5151543d",
    "createdAt": "2018-09-21T14:41:27Z",
    "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import org.apache.hadoop.fs.{FileAlreadyExistsException, FileContext, Path}\n+import org.apache.hadoop.mapreduce.{JobContext, TaskAttemptContext}\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.internal.io.FileCommitProtocol\n+import org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage\n+\n+class StagingFileCommitProtocol(jobId: String, path: String)\n+  extends FileCommitProtocol with Serializable with Logging\n+  with ManifestCommitProtocol {\n+  private var stagingDir: Option[Path] = None",
    "line": 30
  }],
  "prId": 22331
}]