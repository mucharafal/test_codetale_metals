[{
  "comments": [{
    "author": {
      "login": "d80tb7"
    },
    "body": "this is analagous to org.apache.arrow.vector.ipc.ArrowWriter but allows for interleaved dataframes to be sent. I suspect it could all be more memory efficient if we had a different interface which allowed for left batch to be sent before right batch is loaded.",
    "commit": "d15dabbf71ad3007ea0c37e71c997e6fa1799e51",
    "createdAt": "2019-06-25T10:10:32Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.python\n+\n+import java.io.OutputStream\n+import java.nio.channels.Channels\n+\n+import org.apache.arrow.vector.{VectorSchemaRoot, VectorUnloader}\n+import org.apache.arrow.vector.ipc.WriteChannel\n+import org.apache.arrow.vector.ipc.message.{ArrowRecordBatch, MessageSerializer}\n+\n+\n+class InterleavedArrowWriter( leftRoot: VectorSchemaRoot,",
    "line": 28
  }],
  "prId": 24965
}]