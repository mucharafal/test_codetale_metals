[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Since a query stage id is internal, this info is not user-friendly?",
    "commit": "2e087785d754dfabc84b333fffcf98c39d2fd497",
    "createdAt": "2019-01-29T12:05:25Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.catalyst.rules.{Rule, RuleExecutor}\n+import org.apache.spark.sql.execution.{CollapseCodegenStages, SparkPlan}\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class QueryStagePlanner(conf: SQLConf) extends RuleExecutor[SparkPlan] {\n+\n+  override protected def batches: Seq[Batch] = Seq(\n+    Batch(\"QueryStage Optimization\", Once,\n+      AssertChildStagesMaterialized,\n+      ReduceNumShufflePartitions(conf),\n+      CollapseCodegenStages(conf)\n+    )\n+  )\n+}\n+\n+// A sanity check rule to make sure we are running `QueryStagePlanner` on a sub-tree of query plan\n+// with all input stages materialized.\n+object AssertChildStagesMaterialized extends Rule[SparkPlan] {\n+  override def apply(plan: SparkPlan): SparkPlan = plan.transform {\n+    case q: QueryStage if !q.materialize().isCompleted =>\n+      throw new IllegalArgumentException(\n+        s\"The input stages should all be materialize, but ${q.id} is not.\")"
  }, {
    "author": {
      "login": "carsonwang"
    },
    "body": "Let's print the plan itself.",
    "commit": "2e087785d754dfabc84b333fffcf98c39d2fd497",
    "createdAt": "2019-02-01T09:36:10Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.catalyst.rules.{Rule, RuleExecutor}\n+import org.apache.spark.sql.execution.{CollapseCodegenStages, SparkPlan}\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class QueryStagePlanner(conf: SQLConf) extends RuleExecutor[SparkPlan] {\n+\n+  override protected def batches: Seq[Batch] = Seq(\n+    Batch(\"QueryStage Optimization\", Once,\n+      AssertChildStagesMaterialized,\n+      ReduceNumShufflePartitions(conf),\n+      CollapseCodegenStages(conf)\n+    )\n+  )\n+}\n+\n+// A sanity check rule to make sure we are running `QueryStagePlanner` on a sub-tree of query plan\n+// with all input stages materialized.\n+object AssertChildStagesMaterialized extends Rule[SparkPlan] {\n+  override def apply(plan: SparkPlan): SparkPlan = plan.transform {\n+    case q: QueryStage if !q.materialize().isCompleted =>\n+      throw new IllegalArgumentException(\n+        s\"The input stages should all be materialize, but ${q.id} is not.\")"
  }],
  "prId": 20303
}]