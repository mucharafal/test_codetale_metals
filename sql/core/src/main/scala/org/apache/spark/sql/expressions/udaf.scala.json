[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you update this to use \n\n```\nnew StructType()\n  .add(\"doubleInput\", DoubleType)\n  .add(\"longInput\", LongType)\n```\n",
    "commit": "db365425718c25d50f49f30d940bea55116f9c66",
    "createdAt": "2015-07-27T07:23:55Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.expressions\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.types._\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * The abstract class for implementing user-defined aggregate function.\n+ */\n+@Experimental\n+abstract class UserDefinedAggregateFunction extends Serializable {\n+\n+  /**\n+   * A [[StructType]] represents data types of input arguments of this aggregate function.\n+   * For example, if a [[UserDefinedAggregateFunction]] expects two input arguments\n+   * with type of [[DoubleType]] and [[LongType]], the returned [[StructType]] will look like\n+   *\n+   * ```\n+   *   StructType(Seq(StructField(\"doubleInput\", DoubleType), StructField(\"longInput\", LongType)))"
  }],
  "prId": 7687
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "here too\n",
    "commit": "db365425718c25d50f49f30d940bea55116f9c66",
    "createdAt": "2015-07-27T07:24:02Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.expressions\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.types._\n+import org.apache.spark.annotation.Experimental\n+\n+/**\n+ * :: Experimental ::\n+ * The abstract class for implementing user-defined aggregate function.\n+ */\n+@Experimental\n+abstract class UserDefinedAggregateFunction extends Serializable {\n+\n+  /**\n+   * A [[StructType]] represents data types of input arguments of this aggregate function.\n+   * For example, if a [[UserDefinedAggregateFunction]] expects two input arguments\n+   * with type of [[DoubleType]] and [[LongType]], the returned [[StructType]] will look like\n+   *\n+   * ```\n+   *   StructType(Seq(StructField(\"doubleInput\", DoubleType), StructField(\"longInput\", LongType)))\n+   * ```\n+   *\n+   * The name of a field of this [[StructType]] is only used to identify the corresponding\n+   * input argument. Users can choose names to identify the input arguments.\n+   */\n+  def inputSchema: StructType\n+\n+  /**\n+   * A [[StructType]] represents data types of values in the aggregation buffer.\n+   * For example, if a [[UserDefinedAggregateFunction]]'s buffer has two values\n+   * (i.e. two intermediate values) with type of [[DoubleType]] and [[LongType]],\n+   * the returned [[StructType]] will look like\n+   *\n+   * ```\n+   *   StructType(Seq(StructField(\"doubleInput\", DoubleType), StructField(\"longInput\", LongType)))"
  }],
  "prId": 7687
}]