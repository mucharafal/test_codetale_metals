[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "I'm going to take another look at this later, but can you make sure the performance is ok when querying a large number of files on s3? i.e. ideally we should only need to read one file's metadata, rather than all files.\n",
    "commit": "d2a1ecfd61b79b9f598b6b8c6150f95b42a7b107",
    "createdAt": "2016-02-22T08:14:05Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.util.Try\n+\n+import org.apache.commons.io.FilenameUtils\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapred.{FileInputFormat, JobConf}\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.apache.spark.sql.SQLContext\n+\n+object DataSourceDetection extends Logging {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "One thing I am worried of is, this will list up a directory if (picked) one of given paths does not have the extension and it is a directory (although it will stop looking deeper recursively if (at least) a single file is found).\n\nNevertheless, I think I should take a look so that we do not list up any directory but just pick up a single file in any cases.\n",
    "commit": "d2a1ecfd61b79b9f598b6b8c6150f95b42a7b107",
    "createdAt": "2016-02-22T08:42:49Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.util.Try\n+\n+import org.apache.commons.io.FilenameUtils\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapred.{FileInputFormat, JobConf}\n+\n+import org.apache.spark.{Logging, SparkException}\n+import org.apache.spark.sql.SQLContext\n+\n+object DataSourceDetection extends Logging {"
  }],
  "prId": 11270
}]