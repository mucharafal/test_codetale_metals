[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "which file source doesn't support this? I think all file sources support partitioning.",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T16:11:53Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I thought some of the file source would choose `SupportsPushDownFilters` instead of `SupportsPushDownCatalystFilters`. Not very sure about this.",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T17:17:00Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {"
  }],
  "prId": 20933
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I think it is a bad idea to continue using `PartitionedFile => Iterator[InternalRow]` in v2.\r\n\r\nI understand not wanting to change much about how this works, just to get the code behind the v2 API. But this pattern is broken and causes resource problems that the v2 API nudges implementers to fix.\r\n\r\nWhat resource problems? This doesn't implement close properly, forcing close to happen at task end by calling functions registered when files are opened. We've gone back through and replaced the iterators with closeable versions so that we release resources more quickly because the callback-based close does not scale.\r\n\r\nI would like to see this problem fixed instead of copying it into v2.",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T16:19:18Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {\n+\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = {\n+    OrcUtils.readSchema(sparkSession, files)\n+  }\n+\n+  private var pushedFiltersArray: Array[Expression] = Array.empty\n+\n+  override def readFunction: PartitionedFile => Iterator[InternalRow] = {"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Yes, I am quite frustrated when I update the code and use `PartitionedFile => Iterator[InternalRow]` as V1 did. \r\nI was trying to reduce duplicated code between vectorized reader and unsafe row reader. And we can reuse the code in `FileScanRDD`.\r\nI know this makes the V2 implementation meaningless. I will keep finding a good solution.",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T17:39:25Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {\n+\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = {\n+    OrcUtils.readSchema(sparkSession, files)\n+  }\n+\n+  private var pushedFiltersArray: Array[Expression] = Array.empty\n+\n+  override def readFunction: PartitionedFile => Iterator[InternalRow] = {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "btw i think it's also ok if we know what we want in the final version, and the intermediate change tries to minimize code changes (i haven't looked at the pr at all so don't interpret this comment as endorsing or not endorsing the pr design)",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-13T23:23:01Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {\n+\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = {\n+    OrcUtils.readSchema(sparkSession, files)\n+  }\n+\n+  private var pushedFiltersArray: Array[Expression] = Array.empty\n+\n+  override def readFunction: PartitionedFile => Iterator[InternalRow] = {"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "With #21029, we can get rid of this.",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-13T23:42:33Z",
    "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.orc\n+\n+import java.net.URI\n+import java.util.Locale\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.{FileStatus, Path}\n+import org.apache.hadoop.mapreduce.{JobID, TaskAttemptID, TaskID, TaskType}\n+import org.apache.hadoop.mapreduce.lib.input.FileSplit\n+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl\n+import org.apache.orc.{OrcConf, OrcFile}\n+import org.apache.orc.mapred.OrcStruct\n+import org.apache.orc.mapreduce.OrcInputFormat\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{Expression, JoinedRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.orc.{OrcColumnarBatchReader, OrcDeserializer, OrcFilters, OrcUtils}\n+import org.apache.spark.sql.execution.datasources.v2.ColumnarBatchFileSourceReader\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport, ReadSupportWithSchema}\n+import org.apache.spark.sql.sources.v2.reader._\n+import org.apache.spark.sql.types.{AtomicType, StructType}\n+import org.apache.spark.util.SerializableConfiguration\n+\n+class OrcDataSourceV2 extends DataSourceV2 with ReadSupport with ReadSupportWithSchema {\n+  override def createReader(options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, None)\n+  }\n+\n+  override def createReader(schema: StructType, options: DataSourceOptions): DataSourceReader = {\n+    new OrcDataSourceReader(options, Some(schema))\n+  }\n+}\n+\n+case class OrcDataSourceReader(options: DataSourceOptions, userSpecifiedSchema: Option[StructType])\n+  extends ColumnarBatchFileSourceReader\n+  with SupportsPushDownCatalystFilters {\n+\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = {\n+    OrcUtils.readSchema(sparkSession, files)\n+  }\n+\n+  private var pushedFiltersArray: Array[Expression] = Array.empty\n+\n+  override def readFunction: PartitionedFile => Iterator[InternalRow] = {"
  }],
  "prId": 20933
}]