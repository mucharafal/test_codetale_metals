[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "This is kinda of a nit, but I think it might be better to rely on the defaults provided by the extra constructor instead of hard coding these here and elsewhere.\n\nAlso, is it possible for a user to corrupt query results by specifying their own offsets due to the way we resolve functions?\n",
    "commit": "16826e6d5cb9636b6a72125fcccfc4273227c45b",
    "createdAt": "2015-11-09T23:58:31Z",
    "diffHunk": "@@ -88,30 +89,33 @@ class GroupedData protected[sql](\n         namedExpr\n       }\n     }\n-    toDF(columnExprs.map(f))\n+    toDF(columnExprs.map(expr => f(expr).toAggregateExpression()))\n   }\n \n   private[this] def strToExpr(expr: String): (Expression => Expression) = {\n-    expr.toLowerCase match {\n-      case \"avg\" | \"average\" | \"mean\" => Average\n-      case \"max\" => Max\n-      case \"min\" => Min\n-      case \"stddev\" | \"std\" => StddevSamp\n-      case \"stddev_pop\" => StddevPop\n-      case \"stddev_samp\" => StddevSamp\n-      case \"variance\" => VarianceSamp\n-      case \"var_pop\" => VariancePop\n-      case \"var_samp\" => VarianceSamp\n-      case \"sum\" => Sum\n-      case \"skewness\" => Skewness\n-      case \"kurtosis\" => Kurtosis\n-      case \"count\" | \"size\" =>\n-        // Turn count(*) into count(1)\n-        (inputExpr: Expression) => inputExpr match {\n-          case s: Star => Count(Literal(1))\n-          case _ => Count(inputExpr)\n-        }\n+    val exprToFunc: (Expression => AggregateFunction) = {\n+      (inputExpr: Expression) => expr.toLowerCase match {\n+        case \"avg\" | \"average\" | \"mean\" => Average(inputExpr)\n+        case \"max\" => Max(inputExpr)\n+        case \"min\" => Min(inputExpr)\n+        case \"stddev\" | \"std\" => StddevSamp(inputExpr)\n+        case \"stddev_pop\" => StddevPop(inputExpr)\n+        case \"stddev_samp\" => StddevSamp(inputExpr)\n+        case \"variance\" => VarianceSamp(inputExpr, 0, 0)\n+        case \"var_pop\" => VariancePop(inputExpr, 0, 0)\n+        case \"var_samp\" => VarianceSamp(inputExpr, 0, 0)\n+        case \"sum\" => Sum(inputExpr)\n+        case \"skewness\" => Skewness(inputExpr, 0, 0)\n+        case \"kurtosis\" => Kurtosis(inputExpr, 0, 0)"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Done. btw, those offsets will be always set at executor side.\n",
    "commit": "16826e6d5cb9636b6a72125fcccfc4273227c45b",
    "createdAt": "2015-11-10T01:53:27Z",
    "diffHunk": "@@ -88,30 +89,33 @@ class GroupedData protected[sql](\n         namedExpr\n       }\n     }\n-    toDF(columnExprs.map(f))\n+    toDF(columnExprs.map(expr => f(expr).toAggregateExpression()))\n   }\n \n   private[this] def strToExpr(expr: String): (Expression => Expression) = {\n-    expr.toLowerCase match {\n-      case \"avg\" | \"average\" | \"mean\" => Average\n-      case \"max\" => Max\n-      case \"min\" => Min\n-      case \"stddev\" | \"std\" => StddevSamp\n-      case \"stddev_pop\" => StddevPop\n-      case \"stddev_samp\" => StddevSamp\n-      case \"variance\" => VarianceSamp\n-      case \"var_pop\" => VariancePop\n-      case \"var_samp\" => VarianceSamp\n-      case \"sum\" => Sum\n-      case \"skewness\" => Skewness\n-      case \"kurtosis\" => Kurtosis\n-      case \"count\" | \"size\" =>\n-        // Turn count(*) into count(1)\n-        (inputExpr: Expression) => inputExpr match {\n-          case s: Star => Count(Literal(1))\n-          case _ => Count(inputExpr)\n-        }\n+    val exprToFunc: (Expression => AggregateFunction) = {\n+      (inputExpr: Expression) => expr.toLowerCase match {\n+        case \"avg\" | \"average\" | \"mean\" => Average(inputExpr)\n+        case \"max\" => Max(inputExpr)\n+        case \"min\" => Min(inputExpr)\n+        case \"stddev\" | \"std\" => StddevSamp(inputExpr)\n+        case \"stddev_pop\" => StddevPop(inputExpr)\n+        case \"stddev_samp\" => StddevSamp(inputExpr)\n+        case \"variance\" => VarianceSamp(inputExpr, 0, 0)\n+        case \"var_pop\" => VariancePop(inputExpr, 0, 0)\n+        case \"var_samp\" => VarianceSamp(inputExpr, 0, 0)\n+        case \"sum\" => Sum(inputExpr)\n+        case \"skewness\" => Skewness(inputExpr, 0, 0)\n+        case \"kurtosis\" => Kurtosis(inputExpr, 0, 0)"
  }],
  "prId": 9556
}]