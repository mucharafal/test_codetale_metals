[{
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "The following is the V1 behavior:\r\n```Scala\r\n    catalog.createDatabase(\r\n      CatalogDatabase(\r\n        databaseName,\r\n        comment.getOrElse(\"\"),\r\n        path.map(CatalogUtils.stringToURI).getOrElse(catalog.getDefaultDBPath(databaseName)),\r\n        props),\r\n      ifNotExists)\r\n```\r\n\r\nDo you want to follow the same behavior for comment / locationSpec if they are not specified? (`comment` will be added as an empty string, and `locationSpec` will go thru `getDefaultDBPath`). \r\n\r\ncc: @cloud-fan / @rdblue ",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-18T16:01:49Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think we should leave it to the catalog implementation.",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-18T16:15:35Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Cool. Are these property keys names fine - `comment` and `locationSpec`?",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-18T20:02:21Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I agree to leave it to the catalog.\r\n\r\nThe keys we use for tables are `comment` and `location`.",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-18T23:55:33Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Also, this conversion should be done when the statement is converted to a logical plan, as we do with tables.",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-18T23:59:30Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Done. Thanks.",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-21T01:54:52Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    comment: Option[String],\n+    locationSpec: Option[String],\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    if (ifNotExists && catalog.namespaceExists(namespace.toArray)) {\n+      return Seq.empty\n+    }\n+\n+    // Add any additional properties."
  }],
  "prId": 26166
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we follow `CreateTableExec`? It has some more checks and warning messages.",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-21T02:30:59Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    try {\n+      catalog.createNamespace(namespace.toArray, properties.asJava)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Updated. Thanks!",
    "commit": "f7fa8ed72143991522653c49da685a1ace15d057",
    "createdAt": "2019-10-21T03:28:56Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters.mapAsJavaMapConverter\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.analysis.NamespaceAlreadyExistsException\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.connector.catalog.SupportsNamespaces\n+\n+/**\n+ * Physical plan node for creating a namespace.\n+ */\n+case class CreateNamespaceExec(\n+    catalog: SupportsNamespaces,\n+    namespace: Seq[String],\n+    ifNotExists: Boolean,\n+    private var properties: Map[String, String])\n+    extends V2CommandExec {\n+  override protected def run(): Seq[InternalRow] = {\n+    try {\n+      catalog.createNamespace(namespace.toArray, properties.asJava)"
  }],
  "prId": 26166
}]