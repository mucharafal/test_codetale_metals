[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I put date/timestamp column builder at the end because I'm wondering do we really need them? It looks to me that we can just handle date/timestamp as int/long and remove the related columnar stuff(column type, column accessor, column builder, etc.)\ncc @liancheng \n",
    "commit": "463044d42fe56bb60c57f80c0becddab6dd975f0",
    "createdAt": "2015-06-29T00:44:33Z",
    "diffHunk": "@@ -71,44 +71,44 @@ private[sql] abstract class NativeColumnAccessor[T <: AtomicType](\n private[sql] class BooleanColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, BOOLEAN)\n \n-private[sql] class IntColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, INT)\n+private[sql] class ByteColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, BYTE)\n \n private[sql] class ShortColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, SHORT)\n \n+private[sql] class IntColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, INT)\n+\n private[sql] class LongColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, LONG)\n \n-private[sql] class ByteColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, BYTE)\n-\n-private[sql] class DoubleColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, DOUBLE)\n-\n private[sql] class FloatColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, FLOAT)\n \n-private[sql] class FixedDecimalColumnAccessor(buffer: ByteBuffer, precision: Int, scale: Int)\n-  extends NativeColumnAccessor(buffer, FIXED_DECIMAL(precision, scale))\n+private[sql] class DoubleColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, DOUBLE)\n \n private[sql] class StringColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, STRING)\n \n-private[sql] class DateColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, DATE)\n-\n-private[sql] class TimestampColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, TIMESTAMP)\n-\n private[sql] class BinaryColumnAccessor(buffer: ByteBuffer)\n   extends BasicColumnAccessor[BinaryType.type, Array[Byte]](buffer, BINARY)\n   with NullableColumnAccessor\n \n+private[sql] class FixedDecimalColumnAccessor(buffer: ByteBuffer, precision: Int, scale: Int)\n+  extends NativeColumnAccessor(buffer, FIXED_DECIMAL(precision, scale))\n+\n private[sql] class GenericColumnAccessor(buffer: ByteBuffer)\n   extends BasicColumnAccessor[DataType, Array[Byte]](buffer, GENERIC)\n   with NullableColumnAccessor\n \n+private[sql] class DateColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, DATE)\n+\n+private[sql] class TimestampColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, TIMESTAMP)\n+",
    "line": 57
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "The `ColumnType` contains a type ID, which is used to identify each column type and written into the columnar buffer. However, after a prior refactoring, this type ID is not used anymore and can be removed. Columnar data structures for date and timestamp can be removed after removing the type ID. But leaving them there also improves readability.\n",
    "commit": "463044d42fe56bb60c57f80c0becddab6dd975f0",
    "createdAt": "2015-06-29T18:03:28Z",
    "diffHunk": "@@ -71,44 +71,44 @@ private[sql] abstract class NativeColumnAccessor[T <: AtomicType](\n private[sql] class BooleanColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, BOOLEAN)\n \n-private[sql] class IntColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, INT)\n+private[sql] class ByteColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, BYTE)\n \n private[sql] class ShortColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, SHORT)\n \n+private[sql] class IntColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, INT)\n+\n private[sql] class LongColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, LONG)\n \n-private[sql] class ByteColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, BYTE)\n-\n-private[sql] class DoubleColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, DOUBLE)\n-\n private[sql] class FloatColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, FLOAT)\n \n-private[sql] class FixedDecimalColumnAccessor(buffer: ByteBuffer, precision: Int, scale: Int)\n-  extends NativeColumnAccessor(buffer, FIXED_DECIMAL(precision, scale))\n+private[sql] class DoubleColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, DOUBLE)\n \n private[sql] class StringColumnAccessor(buffer: ByteBuffer)\n   extends NativeColumnAccessor(buffer, STRING)\n \n-private[sql] class DateColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, DATE)\n-\n-private[sql] class TimestampColumnAccessor(buffer: ByteBuffer)\n-  extends NativeColumnAccessor(buffer, TIMESTAMP)\n-\n private[sql] class BinaryColumnAccessor(buffer: ByteBuffer)\n   extends BasicColumnAccessor[BinaryType.type, Array[Byte]](buffer, BINARY)\n   with NullableColumnAccessor\n \n+private[sql] class FixedDecimalColumnAccessor(buffer: ByteBuffer, precision: Int, scale: Int)\n+  extends NativeColumnAccessor(buffer, FIXED_DECIMAL(precision, scale))\n+\n private[sql] class GenericColumnAccessor(buffer: ByteBuffer)\n   extends BasicColumnAccessor[DataType, Array[Byte]](buffer, GENERIC)\n   with NullableColumnAccessor\n \n+private[sql] class DateColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, DATE)\n+\n+private[sql] class TimestampColumnAccessor(buffer: ByteBuffer)\n+  extends NativeColumnAccessor(buffer, TIMESTAMP)\n+",
    "line": 57
  }],
  "prId": 7073
}]