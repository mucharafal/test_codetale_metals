[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think we should leave this out. It seems `dataSchema` means the schema from the source which is exposed to users. I think this could cause a problem. For example as below:\r\n\r\nBefore\r\n\r\n```scala\r\nimport collection.mutable\r\n\r\nimport org.apache.spark.sql.types._\r\n\r\njava.util.Locale.setDefault(new java.util.Locale(\"tr\"))\r\n\r\nval partitionSchema: StructType = StructType(StructField(\"I\", StringType) :: Nil)\r\nval dataSchema: StructType = StructType(StructField(\"ı\", StringType) :: Nil)\r\n\r\nval getColName: (StructField => String) = _.name.toLowerCase\r\n\r\nval overlappedPartCols = mutable.Map.empty[String, StructField]\r\npartitionSchema.foreach { partitionField =>\r\n  if (dataSchema.exists(getColName(_) == getColName(partitionField))) {\r\n    overlappedPartCols += getColName(partitionField) -> partitionField\r\n  }\r\n}\r\n\r\nval schema = StructType(dataSchema.map(f => overlappedPartCols.getOrElse(getColName(f), f)) ++\r\n  partitionSchema.filterNot(f => overlappedPartCols.contains(getColName(f))))\r\n\r\nschema.fieldNames\r\n```\r\n\r\nprints\r\n\r\n```scala\r\nArray[String] = Array(I)\r\n```\r\n\r\nAfter\r\n\r\n```scala\r\nimport collection.mutable\r\n\r\nimport org.apache.spark.sql.types._\r\n\r\njava.util.Locale.setDefault(new java.util.Locale(\"tr\"))\r\n\r\nval partitionSchema: StructType = StructType(StructField(\"I\", StringType) :: Nil)\r\nval dataSchema: StructType = StructType(StructField(\"ı\", StringType) :: Nil)\r\n\r\nval getColName: (StructField => String) = _.name.toLowerCase(java.util.Locale.ROOT)\r\n\r\nval overlappedPartCols = mutable.Map.empty[String, StructField]\r\npartitionSchema.foreach { partitionField =>\r\n  if (dataSchema.exists(getColName(_) == getColName(partitionField))) {\r\n    overlappedPartCols += getColName(partitionField) -> partitionField\r\n  }\r\n}\r\n\r\nval schema = StructType(dataSchema.map(f => overlappedPartCols.getOrElse(getColName(f), f)) ++\r\n  partitionSchema.filterNot(f => overlappedPartCols.contains(getColName(f))))\r\n\r\nschema.fieldNames\r\n```\r\n\r\nprints\r\n\r\n```scala\r\nArray[String] = Array(ı, I)\r\n```",
    "commit": "2ac5843a071847dbe6e8cea08b49a7ef36587101",
    "createdAt": "2017-04-07T05:13:32Z",
    "diffHunk": "@@ -52,7 +54,11 @@ case class HadoopFsRelation(\n \n   val schema: StructType = {\n     val getColName: (StructField => String) =\n-      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) _.name else _.name.toLowerCase\n+      if (sparkSession.sessionState.conf.caseSensitiveAnalysis) {\n+        _.name\n+      } else {\n+        _.name.toLowerCase(Locale.ROOT)\n+      }"
  }],
  "prId": 17527
}]