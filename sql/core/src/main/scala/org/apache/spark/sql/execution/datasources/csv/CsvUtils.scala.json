[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "do we need this?\n",
    "commit": "fb6473fab02975c97be9692c0e9ed4f2f973b115",
    "createdAt": "2016-06-20T07:42:36Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Stores and counts malformed lines during CSV parsing.\n+ */\n+private[csv] class MalformedLinesInfo(maxStoreMalformed: Int) extends Serializable {\n+\n+  var malformedLines = new ArrayBuffer[String]"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "The some logs of malformed lines seem to be useful for users to understand why this is a malformed one. However, removing this is okay to me.\n",
    "commit": "fb6473fab02975c97be9692c0e9ed4f2f973b115",
    "createdAt": "2016-06-20T07:52:02Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Stores and counts malformed lines during CSV parsing.\n+ */\n+private[csv] class MalformedLinesInfo(maxStoreMalformed: Int) extends Serializable {\n+\n+  var malformedLines = new ArrayBuffer[String]"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "You can just log them as we find them, can't we? No need to store them in memory?\n",
    "commit": "fb6473fab02975c97be9692c0e9ed4f2f973b115",
    "createdAt": "2016-06-20T19:23:38Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Stores and counts malformed lines during CSV parsing.\n+ */\n+private[csv] class MalformedLinesInfo(maxStoreMalformed: Int) extends Serializable {\n+\n+  var malformedLines = new ArrayBuffer[String]"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "oh, I see. okay, I'll fix this.\n",
    "commit": "fb6473fab02975c97be9692c0e9ed4f2f973b115",
    "createdAt": "2016-06-20T23:12:44Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources.csv\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+/**\n+ * Stores and counts malformed lines during CSV parsing.\n+ */\n+private[csv] class MalformedLinesInfo(maxStoreMalformed: Int) extends Serializable {\n+\n+  var malformedLines = new ArrayBuffer[String]"
  }],
  "prId": 12173
}]