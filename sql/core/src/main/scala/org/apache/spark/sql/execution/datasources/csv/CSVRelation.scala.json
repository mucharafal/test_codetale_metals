[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Please let me organise this in a separate class at the PR for refactoring this.\n",
    "commit": "882a24ffd1075f5913660f440ec01b3e7a3fa2ec",
    "createdAt": "2016-06-21T12:42:52Z",
    "diffHunk": "@@ -177,38 +180,61 @@ private[sql] class CsvOutputWriter(\n     }.getRecordWriter(context)\n   }\n \n-  private val FLUSH_BATCH_SIZE = 1024L\n-  private var records: Long = 0L\n-  private val csvWriter = new LineCsvWriter(params, dataSchema.fieldNames.toSeq)\n+  private val headers = dataSchema.fieldNames\n \n-  private def rowToString(row: Seq[Any]): Seq[String] = row.map { field =>\n-    if (field != null) {\n-      field.toString\n-    } else {\n-      params.nullValue\n-    }\n+  private[this] val writer = new CharArrayWriter()\n+  private[this] val csvWriter = {\n+    val writerSettings = new CsvWriterSettings\n+    val format = writerSettings.getFormat\n+\n+    format.setDelimiter(options.delimiter)\n+    format.setLineSeparator(options.rowSeparator)\n+    format.setQuote(options.quote)\n+    format.setQuoteEscape(options.escape)\n+    format.setComment(options.comment)\n+\n+    writerSettings.setNullValue(options.nullValue)\n+    writerSettings.setEmptyValue(options.nullValue)\n+    writerSettings.setSkipEmptyLines(true)\n+    writerSettings.setQuoteAllFields(false)\n+    writerSettings.setHeaders(headers: _*)\n+    writerSettings.setQuoteEscapingEnabled(options.escapeQuotes)\n+\n+    new CsvWriter(writer, writerSettings)"
  }],
  "prId": 13809
}]