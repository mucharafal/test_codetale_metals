[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "the majority of this file is just moving code from FileSourceStrategy over.\r\n",
    "commit": "ad5c7d11f64ce86ec109031f3b861d6168e1c8da",
    "createdAt": "2017-03-07T22:34:42Z",
    "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.hadoop.fs.{BlockLocation, FileStatus, LocatedFileStatus}\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+\n+/**\n+ * An (internal) interface that takes in a list of files and partitions them for parallelization.\n+ */\n+trait FilePartitionStrategy {",
    "line": 31
  }],
  "prId": 17196
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "the other class still references this",
    "commit": "ad5c7d11f64ce86ec109031f3b861d6168e1c8da",
    "createdAt": "2017-03-07T23:07:07Z",
    "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.hadoop.fs.{BlockLocation, FileStatus, LocatedFileStatus}\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+\n+/**\n+ * An (internal) interface that takes in a list of files and partitions them for parallelization.\n+ */\n+trait FilePartitionStrategy {\n+  /**\n+   * `input` is a list of input files, in the form of (partition column value, file status).\n+   *\n+   * The function should return a list of file blocks to read for each partition. The i-th position\n+   * indicates the list of file blocks to read for task i.\n+   */\n+  def partition(\n+      sparkSession: SparkSession,\n+      fileFormat: FileFormat,\n+      options: Map[String, String],\n+      input: Seq[(InternalRow, FileStatus)])\n+    : Seq[Seq[PartitionedFile]]\n+}\n+\n+\n+/**\n+ * A default [[FilePartitionStrategy]] that binpacks files roughly into evenly sized partitions.\n+ */\n+class DefaultFilePartitionStrategy extends FilePartitionStrategy with Logging {\n+  import DefaultFilePartitionStrategy._\n+\n+  override def partition(\n+      sparkSession: SparkSession,\n+      fileFormat: FileFormat,\n+      options: Map[String, String],\n+      input: Seq[(InternalRow, FileStatus)])\n+    : Seq[Seq[PartitionedFile]] = {\n+\n+    val defaultMaxSplitBytes = sparkSession.sessionState.conf.filesMaxPartitionBytes\n+    val openCostInBytes = sparkSession.sessionState.conf.filesOpenCostInBytes\n+    val defaultParallelism = sparkSession.sparkContext.defaultParallelism\n+    val totalBytes = input.map(_._2.getLen + openCostInBytes).sum\n+    val bytesPerCore = totalBytes / defaultParallelism\n+\n+    val maxSplitBytes = Math.min(defaultMaxSplitBytes, Math.max(openCostInBytes, bytesPerCore))\n+    logInfo(s\"Planning scan with bin packing, max size: $maxSplitBytes bytes, \" +\n+      s\"open cost is considered as scanning $openCostInBytes bytes.\")\n+\n+    val splitFiles: Array[PartitionedFile] = input.flatMap { case (partitionValues, file) =>\n+      val blockLocations = getBlockLocations(file)\n+      if (fileFormat.isSplitable(sparkSession, options, file.getPath)) {\n+        (0L until file.getLen by maxSplitBytes).map { offset =>\n+          val remaining = file.getLen - offset\n+          val size = if (remaining > maxSplitBytes) maxSplitBytes else remaining\n+          val hosts = getBlockHosts(blockLocations, offset, size)\n+          PartitionedFile(partitionValues, file.getPath.toUri.toString, offset, size, hosts)\n+        }\n+      } else {\n+        val hosts = getBlockHosts(blockLocations, 0, file.getLen)\n+        Seq(PartitionedFile(partitionValues, file.getPath.toUri.toString, 0, file.getLen, hosts))\n+      }\n+    }.toArray.sortBy(_.length)(implicitly[Ordering[Long]].reverse)\n+\n+    val partitions = new ArrayBuffer[Seq[PartitionedFile]]\n+    val currentFiles = new ArrayBuffer[PartitionedFile]\n+    var currentSize = 0L\n+\n+    /** Close the current partition and move to the next. */\n+    def closePartition(): Unit = {\n+      if (currentFiles.nonEmpty) {\n+        val newPartition = currentFiles.toArray.toSeq // Copy to a new Array.\n+        partitions += newPartition\n+      }\n+      currentFiles.clear()\n+      currentSize = 0\n+    }\n+\n+    // Assign files to partitions using \"First Fit Decreasing\" (FFD)\n+    splitFiles.foreach { file =>\n+      if (currentSize + file.length > maxSplitBytes) {\n+        closePartition()\n+      }\n+      // Add the given file to the current partition.\n+      currentSize += file.length + openCostInBytes\n+      currentFiles += file\n+    }\n+    closePartition()\n+\n+    partitions\n+  }\n+}\n+\n+\n+object DefaultFilePartitionStrategy {",
    "line": 115
  }],
  "prId": 17196
}]