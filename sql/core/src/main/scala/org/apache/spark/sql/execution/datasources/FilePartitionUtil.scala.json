[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why we have both `PartitionedFileUtil` and `FilePartitionUtil`?",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T16:05:03Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.{FileNotFoundException, IOException}\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.InputFileBlockHolder\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.vectorized.ColumnarBatch\n+import org.apache.spark.util.NextIterator\n+\n+object FilePartitionUtil extends Logging {"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "`PartitionedFileUtil` is about how we get `PartitionedFile`.\r\n`FilePartitionUtil` is about how we get `FilePartition` and convert them to `InternalRow`",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T17:15:11Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.{FileNotFoundException, IOException}\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.InputFileBlockHolder\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.vectorized.ColumnarBatch\n+import org.apache.spark.util.NextIterator\n+\n+object FilePartitionUtil extends Logging {"
  }],
  "prId": 20933
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why is this named \"compute\" and not \"open\" or something more specific?",
    "commit": "67b1748c8b939a6b484bfc868fd311e381d7f8e0",
    "createdAt": "2018-04-05T16:20:45Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.{FileNotFoundException, IOException}\n+\n+import scala.collection.mutable\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.deploy.SparkHadoopUtil\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.rdd.InputFileBlockHolder\n+import org.apache.spark.sql.SparkSession\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.vectorized.ColumnarBatch\n+import org.apache.spark.util.NextIterator\n+\n+object FilePartitionUtil extends Logging {\n+\n+  def getFilePartitions(\n+      sparkSession: SparkSession,\n+      partitionedFiles: Seq[PartitionedFile],\n+      maxSplitBytes: Long): Seq[FilePartition] = {\n+    val partitions = new ArrayBuffer[FilePartition]\n+    val currentFiles = new ArrayBuffer[PartitionedFile]\n+    var currentSize = 0L\n+\n+    /** Close the current partition and move to the next. */\n+    def closePartition(): Unit = {\n+      if (currentFiles.nonEmpty) {\n+        val newPartition =\n+          FilePartition(\n+            partitions.size,\n+            currentFiles.toArray.toSeq) // Copy to a new Array.\n+        partitions += newPartition\n+      }\n+      currentFiles.clear()\n+      currentSize = 0\n+    }\n+\n+    val openCostInBytes = sparkSession.sessionState.conf.filesOpenCostInBytes\n+    // Assign files to partitions using \"Next Fit Decreasing\"\n+    partitionedFiles.foreach { file =>\n+      if (currentSize + file.length > maxSplitBytes) {\n+        closePartition()\n+      }\n+      // Add the given file to the current partition.\n+      currentSize += file.length + openCostInBytes\n+      currentFiles += file\n+    }\n+    closePartition()\n+    partitions\n+  }\n+\n+  def compute(",
    "line": 73
  }],
  "prId": 20933
}]