[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "This does not guarantee that the result is materialized. It will only save you from some initialization overhead.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-08-31T14:28:00Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class CommonSubquery(\n+    output: Seq[Attribute],\n+    @transient child: SparkPlan)(\n+    @transient val logicalChild: LogicalPlan,\n+    private[sql] val _statistics: Statistics,\n+    @transient private[sql] var _computedOutput: RDD[InternalRow] = null)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "<del>oh. I make a mistake here... I will fix it.</del>\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-01T02:58:17Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class CommonSubquery(\n+    output: Seq[Attribute],\n+    @transient child: SparkPlan)(\n+    @transient val logicalChild: LogicalPlan,\n+    private[sql] val _statistics: Statistics,\n+    @transient private[sql] var _computedOutput: RDD[InternalRow] = null)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I was thinking that `_computedOutput` will not be kept for all `CommonSubquery` sharing it. But it is not true after test. It will. So I think it is no problem.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-01T03:08:11Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class CommonSubquery(\n+    output: Seq[Attribute],\n+    @transient child: SparkPlan)(\n+    @transient val logicalChild: LogicalPlan,\n+    private[sql] val _statistics: Statistics,\n+    @transient private[sql] var _computedOutput: RDD[InternalRow] = null)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "`_computedOutput` is used to keep the computed results across the common subqueries. Once the `CommonSubqueryExec` of any subquery among them is asked for the results, we will execute the executed plan and record the results in `computedOutput`.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-01T06:43:29Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class CommonSubquery(\n+    output: Seq[Attribute],\n+    @transient child: SparkPlan)(\n+    @transient val logicalChild: LogicalPlan,\n+    private[sql] val _statistics: Statistics,\n+    @transient private[sql] var _computedOutput: RDD[InternalRow] = null)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "@hvanhovell Rethinking about this, it is incorrect indeed. I change it and use a helper class to do rdd materialization.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-04T04:53:55Z",
    "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class CommonSubquery(\n+    output: Seq[Attribute],\n+    @transient child: SparkPlan)(\n+    @transient val logicalChild: LogicalPlan,\n+    private[sql] val _statistics: Statistics,\n+    @transient private[sql] var _computedOutput: RDD[InternalRow] = null)"
  }],
  "prId": 14452
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "We need to cache explicitly the result of common subquery. Becasue in RDD materialization implementation, if a RDD is not marked to cache, even it is materialization before, the later call to its iterator will invoke computation again.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-13T04:13:20Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class SubqueryExecHelper(executedPlan: SparkPlan) {\n+  private var _computedOutput: RDD[InternalRow] = null\n+\n+  def computeOrGetResult(): RDD[InternalRow] = this.synchronized {\n+    if (_computedOutput == null) {\n+      _computedOutput = executedPlan.execute().mapPartitionsInternal { rowIterator =>\n+        rowIterator.map(_.copy())\n+      }.cache()"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I revert this change because don't see improvement with it.\n",
    "commit": "aeba1c31f72508c6a93d4f056a8333f4f01e6f80",
    "createdAt": "2016-09-13T05:53:22Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.subquery\n+\n+import org.apache.spark.rdd.RDD\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.QueryPlan\n+import org.apache.spark.sql.catalyst.plans.logical\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Statistics}\n+import org.apache.spark.sql.execution.SparkPlan\n+import org.apache.spark.util.Utils\n+\n+private[sql] case class SubqueryExecHelper(executedPlan: SparkPlan) {\n+  private var _computedOutput: RDD[InternalRow] = null\n+\n+  def computeOrGetResult(): RDD[InternalRow] = this.synchronized {\n+    if (_computedOutput == null) {\n+      _computedOutput = executedPlan.execute().mapPartitionsInternal { rowIterator =>\n+        rowIterator.map(_.copy())\n+      }.cache()"
  }],
  "prId": 14452
}]