[{
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "nit: Use object with a val (for code reuse)",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-04-27T00:34:29Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"",
    "line": 30
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "AFAIK a method just returns a string literal is pretty efficient.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-04-30T12:49:33Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"",
    "line": 30
  }],
  "prId": 24327
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "What does this path do?\r\n\r\nParquet files always have their own schema and if I remember correctly, the Parquet read path doesn't support type coercion or files that are missing fields (maybe this was updated?). If that's the case, then shouldn't this path throw an exception?",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-30T16:06:39Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": ">  the Parquet read path doesn't support type coercion or files that are missing fields \r\n\r\nYes, this is the current status.\r\n\r\nBut as a feature, I think we still need to handle the user-specified schema. The provided schema could be a subset of the inferred schema\r\n",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T03:18:51Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "@gengliangwang, that is not how the DSv2 API works. The user-specified schema is not used to supply a projection. It is used to fill in missing schema details where Spark cannot infer them. This should be removed.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T16:13:20Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "> @gengliangwang, that is not how the DSv2 API works. The user-specified schema is not used to supply a projection. It is used to fill in missing schema details where Spark cannot infer them. This should be removed.\r\n\r\nIf I understand correctly, that is to say, we won't support the following for Parquet V2?\r\n```\r\nspark.read.schema(schema).parquet(...)\r\n```\r\n",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T16:31:33Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "That pattern is only supported in v1 under very strict requirements for the schema. It makes no sense to continue pretending that it is available in v2.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T16:46:45Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Actually, I guess we could continue to support it for backward-compatibility if there is a check that the schema matches the inferred schema exactly and if there is a noticeable warning that this should be removed.\r\n\r\nI would prefer to remove this support in v2. We already know that v2 will require a migration, so we may as well fix this while we can.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T16:48:20Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "How about this, let's support it in this migration PR. And we can discuss it in another followup PR, where test cases would be updated/added as well.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T17:56:04Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Does this fail tests if it is removed?",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-05-31T19:27:13Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Yes, tests will fail.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-06-01T01:17:10Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Okay, let's leave it in to get the majority of this work finished. I just filed SPARK-27960 for the ORC implementation as well, so I think that schema handling in the v2 file sources is a larger issue.",
    "commit": "f658e9265ba741922fc96eec76038addcb6491a1",
    "createdAt": "2019-06-06T18:25:12Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2.parquet\n+\n+import org.apache.spark.sql.execution.datasources._\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat\n+import org.apache.spark.sql.execution.datasources.v2._\n+import org.apache.spark.sql.sources.v2.Table\n+import org.apache.spark.sql.types.StructType\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class ParquetDataSourceV2 extends FileDataSourceV2 {\n+\n+  override def fallbackFileFormat: Class[_ <: FileFormat] = classOf[ParquetFileFormat]\n+\n+  override def shortName(): String = \"parquet\"\n+\n+  override def getTable(options: CaseInsensitiveStringMap): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, None, fallbackFileFormat)\n+  }\n+\n+  override def getTable(options: CaseInsensitiveStringMap, schema: StructType): Table = {\n+    val paths = getPaths(options)\n+    val tableName = getTableName(paths)\n+    ParquetTable(tableName, sparkSession, options, paths, Some(schema), fallbackFileFormat)",
    "line": 41
  }],
  "prId": 24327
}]