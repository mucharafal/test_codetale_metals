[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Does the current behaviour satisfy your original motivation in the PR description? For example, if there are many small partitions, the collect result size could be much bigger, right?",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-10T05:46:11Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream, DataInputStream, DataOutputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays to UnsafeRows and vice versa.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayUnsafeRowsConverter(\n+     maxCollectSize: Option[Long]) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+\n+  /**\n+   * Packing the UnsafeRows into byte array for faster serialization.\n+   * The byte arrays are in the following format:\n+   * [size] [bytes of UnsafeRow] [size] [bytes of UnsafeRow] ... [-1]\n+   *\n+   * UnsafeRow is highly compressible (at least 8 bytes for any column), the byte array is also\n+   * compressed.\n+   */\n+  def encodeUnsafeRows(\n+      n: Int = -1,\n+      unsafeRows: Iterator[InternalRow]): Iterator[(Long, Array[Byte])] = {\n+    var count = 0\n+    val buffer = new Array[Byte](4 << 10) // 4K\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bos = new ByteArrayOutputStream()\n+    val out = new DataOutputStream(codec.compressedOutputStream(bos))\n+    // `unsafeRows.hasNext` may produce one row and buffer it, we should only call it\n+    // when the limit is not hit.\n+    while ((n < 0 || count < n) && unsafeRows.hasNext) {\n+      val row = unsafeRows.next().asInstanceOf[UnsafeRow]\n+      ensureTotalSizeIsBelowLimit(row.getSizeInBytes)\n+      out.writeInt(row.getSizeInBytes)\n+      row.writeToStream(out, buffer)\n+      count += 1\n+    }\n+    out.writeInt(-1)\n+    out.flush()\n+    out.close()\n+    Iterator((count, bos.toByteArray))\n+  }\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(nFields: Int, bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureTotalSizeIsBelowLimit(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureTotalSizeIsBelowLimit(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow\n+    maxCollectSize match {\n+      case Some(maxSize) => if (totalUncompressedResultSize > maxSize) {\n+        val msg = s\"Total size of uncompressed results \" +\n+          s\"(${Utils.bytesToString(totalUncompressedResultSize)}) \" +\n+          s\"is bigger than the limit of (${Utils.bytesToString(maxSize)})\"\n+        logError(msg)\n+        throw new SparkException(msg)",
    "line": 103
  }, {
    "author": {
      "login": "dvogelbacher"
    },
    "body": "That's why we check when encoding each partition (to fail fast if a single partition is already too big) and also we sum up the sizes of all partitions when decoding (to fail if the total collected size of all partitions is too big). So yes, this does satisfy my original motivation.",
    "commit": "80dd7dfc206b5375d58cff1171a7f8a1c001e46d",
    "createdAt": "2019-09-10T07:09:15Z",
    "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream, DataInputStream, DataOutputStream}\n+\n+import org.apache.spark.{SparkEnv, SparkException}\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.io.CompressionCodec\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Provides methods for converting compressed byte arrays to UnsafeRows and vice versa.\n+ * Additionally, can enforce a limit on the total, decoded size of all decoded UnsafeRows.\n+ * Enforcing the limit is controlled via a sql config and if it is turned on the encoder will\n+ * throw a SparkException when the limit is reached.\n+ */\n+private[spark] class SizeLimitingByteArrayUnsafeRowsConverter(\n+     maxCollectSize: Option[Long]) extends Logging {\n+  private var totalUncompressedResultSize = 0L\n+\n+  /**\n+   * Packing the UnsafeRows into byte array for faster serialization.\n+   * The byte arrays are in the following format:\n+   * [size] [bytes of UnsafeRow] [size] [bytes of UnsafeRow] ... [-1]\n+   *\n+   * UnsafeRow is highly compressible (at least 8 bytes for any column), the byte array is also\n+   * compressed.\n+   */\n+  def encodeUnsafeRows(\n+      n: Int = -1,\n+      unsafeRows: Iterator[InternalRow]): Iterator[(Long, Array[Byte])] = {\n+    var count = 0\n+    val buffer = new Array[Byte](4 << 10) // 4K\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bos = new ByteArrayOutputStream()\n+    val out = new DataOutputStream(codec.compressedOutputStream(bos))\n+    // `unsafeRows.hasNext` may produce one row and buffer it, we should only call it\n+    // when the limit is not hit.\n+    while ((n < 0 || count < n) && unsafeRows.hasNext) {\n+      val row = unsafeRows.next().asInstanceOf[UnsafeRow]\n+      ensureTotalSizeIsBelowLimit(row.getSizeInBytes)\n+      out.writeInt(row.getSizeInBytes)\n+      row.writeToStream(out, buffer)\n+      count += 1\n+    }\n+    out.writeInt(-1)\n+    out.flush()\n+    out.close()\n+    Iterator((count, bos.toByteArray))\n+  }\n+\n+  /**\n+   * Decodes the byte arrays back to UnsafeRows and puts them into buffer.\n+   */\n+  def decodeUnsafeRows(nFields: Int, bytes: Array[Byte]): Iterator[InternalRow] = {\n+    val codec = CompressionCodec.createCodec(SparkEnv.get.conf)\n+    val bis = new ByteArrayInputStream(bytes)\n+    val ins = new DataInputStream(codec.compressedInputStream(bis))\n+\n+    new Iterator[InternalRow] {\n+      private var sizeOfNextRow = ins.readInt()\n+\n+      override def hasNext: Boolean = sizeOfNextRow >= 0\n+\n+      override def next(): InternalRow = {\n+        ensureTotalSizeIsBelowLimit(sizeOfNextRow)\n+        val bs = new Array[Byte](sizeOfNextRow)\n+        ins.readFully(bs)\n+        val row = new UnsafeRow(nFields)\n+        row.pointTo(bs, sizeOfNextRow)\n+        sizeOfNextRow = ins.readInt()\n+        row\n+      }\n+    }\n+  }\n+\n+  private def ensureTotalSizeIsBelowLimit(sizeOfNextRow: Int): Unit = {\n+    totalUncompressedResultSize += sizeOfNextRow\n+    maxCollectSize match {\n+      case Some(maxSize) => if (totalUncompressedResultSize > maxSize) {\n+        val msg = s\"Total size of uncompressed results \" +\n+          s\"(${Utils.bytesToString(totalUncompressedResultSize)}) \" +\n+          s\"is bigger than the limit of (${Utils.bytesToString(maxSize)})\"\n+        logError(msg)\n+        throw new SparkException(msg)",
    "line": 103
  }],
  "prId": 25602
}]