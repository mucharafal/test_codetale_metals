[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: extra space\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-09T20:50:59Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.annotation.Experimental\n+import org.apache.spark.sql.ContinuousQuery\n+import org.apache.spark.sql.util.ContinuousQueryListener._\n+\n+/**\n+ * :: Experimental ::\n+ * Interface for listening to events related to [[ContinuousQuery ContinuousQueries]].\n+ * @note The methods are not thread-safe as they may be called from different threads.\n+ */\n+@Experimental\n+abstract class ContinuousQueryListener {\n+\n+  /**\n+   * Called when a query is started.\n+   * @note This is called synchronously with\n+   *       [[org.apache.spark.sql.DataFrameWriter `DataFrameWriter.stream()`]],\n+   *       that is, `onQueryStart` will be called on all listeners before `DataFrameWriter.stream()`\n+   *       returns the corresponding [[ContinuousQuery]].\n+   */\n+  def onQueryStarted(queryStarted: QueryStarted)\n+\n+  /** Called when there is some status update (ingestion rate updated, etc. */\n+  def onQueryProgress(queryProgress: QueryProgress)\n+\n+  /** Called when a query is stopped, with or without error */\n+  def onQueryTerminated(queryTerminated: QueryTerminated)\n+}\n+\n+\n+/**\n+ * :: Experimental ::\n+ * Companion object of [[ContinuousQueryListener]] that defines the listener events.\n+ */\n+@Experimental\n+object ContinuousQueryListener {\n+\n+  /** Base type of  [[ContinuousQueryListener]] events */"
  }],
  "prId": 11030
}]