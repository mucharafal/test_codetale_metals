[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Can you fix the indentation for the next 14 lines?",
    "commit": "32e0a78c712094b16d9af7fcacb0b045186d3550",
    "createdAt": "2018-10-11T08:47:46Z",
    "diffHunk": "@@ -168,4 +173,22 @@ class SparkSessionExtensions {\n   def injectParser(builder: ParserBuilder): Unit = {\n     parserBuilders += builder\n   }\n+\n+  private[this] val injectedFunctions =\n+    mutable.Buffer.empty[FunctionDescription]\n+\n+    private[sql] def registerFunctions(functionRegistry: FunctionRegistry) = {"
  }],
  "prId": 22576
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "NIT: no new line?",
    "commit": "32e0a78c712094b16d9af7fcacb0b045186d3550",
    "createdAt": "2018-10-11T08:53:41Z",
    "diffHunk": "@@ -168,4 +173,22 @@ class SparkSessionExtensions {\n   def injectParser(builder: ParserBuilder): Unit = {\n     parserBuilders += builder\n   }\n+\n+  private[this] val injectedFunctions ="
  }],
  "prId": 22576
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Can you move the stuff that changes the `FunctionRegistry` into the `BaseSessionStateBuilder` and just make this return the `Seq[FunctionDescription]`? The return type of this function a `FunctionRegistry` sort of implies that you are getting back a new registry instead of a mutated one. If we are mutating then I prefer to do that in the BaseSessionBuilder so it is obvious that this is safe to do because we mutating a clone. It also makes this code more inline with the rest of the extension class (not mutating). Sorry for the late change of heart. ",
    "commit": "32e0a78c712094b16d9af7fcacb0b045186d3550",
    "createdAt": "2018-10-19T08:35:53Z",
    "diffHunk": "@@ -168,4 +173,21 @@ class SparkSessionExtensions {\n   def injectParser(builder: ParserBuilder): Unit = {\n     parserBuilders += builder\n   }\n+\n+  private[this] val injectedFunctions = mutable.Buffer.empty[FunctionDescription]\n+\n+  private[sql] def registerFunctions(functionRegistry: FunctionRegistry) = {\n+    for ((name, expressionInfo, function) <- injectedFunctions) {",
    "line": 27
  }, {
    "author": {
      "login": "RussellSpitzer"
    },
    "body": "Ha we just changed a function in the opposite direction on my other commit. The project should probably pick one dorm and put it in the style guide. I'll make the chznge",
    "commit": "32e0a78c712094b16d9af7fcacb0b045186d3550",
    "createdAt": "2018-10-19T12:02:58Z",
    "diffHunk": "@@ -168,4 +173,21 @@ class SparkSessionExtensions {\n   def injectParser(builder: ParserBuilder): Unit = {\n     parserBuilders += builder\n   }\n+\n+  private[this] val injectedFunctions = mutable.Buffer.empty[FunctionDescription]\n+\n+  private[sql] def registerFunctions(functionRegistry: FunctionRegistry) = {\n+    for ((name, expressionInfo, function) <- injectedFunctions) {",
    "line": 27
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "👍 ",
    "commit": "32e0a78c712094b16d9af7fcacb0b045186d3550",
    "createdAt": "2018-10-19T12:10:16Z",
    "diffHunk": "@@ -168,4 +173,21 @@ class SparkSessionExtensions {\n   def injectParser(builder: ParserBuilder): Unit = {\n     parserBuilders += builder\n   }\n+\n+  private[this] val injectedFunctions = mutable.Buffer.empty[FunctionDescription]\n+\n+  private[sql] def registerFunctions(functionRegistry: FunctionRegistry) = {\n+    for ((name, expressionInfo, function) <- injectedFunctions) {",
    "line": 27
  }],
  "prId": 22576
}]