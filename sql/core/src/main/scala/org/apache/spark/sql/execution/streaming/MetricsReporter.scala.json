[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: `registerGauge(\"inputRate-total\", _.inputRowsPerSecond, 0.0)`",
    "commit": "bfb706d481dfa9aa88b58f9a7b8f7da87956c742",
    "createdAt": "2018-01-10T23:36:58Z",
    "diffHunk": "@@ -39,14 +35,18 @@ class MetricsReporter(\n \n   // Metric names should not have . in them, so that all the metrics of a query are identified\n   // together in Ganglia as a single metric group\n-  registerGauge(\"inputRate-total\", () => stream.lastProgress.inputRowsPerSecond)\n-  registerGauge(\"processingRate-total\", () => stream.lastProgress.processedRowsPerSecond)\n-  registerGauge(\"latency\", () => stream.lastProgress.durationMs.get(\"triggerExecution\").longValue())\n-\n-  private def registerGauge[T](name: String, f: () => T)(implicit num: Numeric[T]): Unit = {\n+  registerGauge(\"inputRate-total\", (lastProgress) => lastProgress.inputRowsPerSecond, 0.0)"
  }],
  "prId": 20189
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "ditto",
    "commit": "bfb706d481dfa9aa88b58f9a7b8f7da87956c742",
    "createdAt": "2018-01-10T23:37:02Z",
    "diffHunk": "@@ -39,14 +35,18 @@ class MetricsReporter(\n \n   // Metric names should not have . in them, so that all the metrics of a query are identified\n   // together in Ganglia as a single metric group\n-  registerGauge(\"inputRate-total\", () => stream.lastProgress.inputRowsPerSecond)\n-  registerGauge(\"processingRate-total\", () => stream.lastProgress.processedRowsPerSecond)\n-  registerGauge(\"latency\", () => stream.lastProgress.durationMs.get(\"triggerExecution\").longValue())\n-\n-  private def registerGauge[T](name: String, f: () => T)(implicit num: Numeric[T]): Unit = {\n+  registerGauge(\"inputRate-total\", (lastProgress) => lastProgress.inputRowsPerSecond, 0.0)\n+  registerGauge(\"processingRate-total\", (lastProgress) => lastProgress.processedRowsPerSecond, 0.0)"
  }],
  "prId": 20189
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "ditto",
    "commit": "bfb706d481dfa9aa88b58f9a7b8f7da87956c742",
    "createdAt": "2018-01-10T23:37:15Z",
    "diffHunk": "@@ -39,14 +35,18 @@ class MetricsReporter(\n \n   // Metric names should not have . in them, so that all the metrics of a query are identified\n   // together in Ganglia as a single metric group\n-  registerGauge(\"inputRate-total\", () => stream.lastProgress.inputRowsPerSecond)\n-  registerGauge(\"processingRate-total\", () => stream.lastProgress.processedRowsPerSecond)\n-  registerGauge(\"latency\", () => stream.lastProgress.durationMs.get(\"triggerExecution\").longValue())\n-\n-  private def registerGauge[T](name: String, f: () => T)(implicit num: Numeric[T]): Unit = {\n+  registerGauge(\"inputRate-total\", (lastProgress) => lastProgress.inputRowsPerSecond, 0.0)\n+  registerGauge(\"processingRate-total\", (lastProgress) => lastProgress.processedRowsPerSecond, 0.0)\n+  registerGauge(\"latency\",\n+    (lastProgress) => lastProgress.durationMs.get(\"triggerExecution\").longValue(), 0L)"
  }],
  "prId": 20189
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: `(StreamingQueryProgress) => T` -> `StreamingQueryProgress => T,`",
    "commit": "bfb706d481dfa9aa88b58f9a7b8f7da87956c742",
    "createdAt": "2018-01-10T23:37:28Z",
    "diffHunk": "@@ -39,14 +35,18 @@ class MetricsReporter(\n \n   // Metric names should not have . in them, so that all the metrics of a query are identified\n   // together in Ganglia as a single metric group\n-  registerGauge(\"inputRate-total\", () => stream.lastProgress.inputRowsPerSecond)\n-  registerGauge(\"processingRate-total\", () => stream.lastProgress.processedRowsPerSecond)\n-  registerGauge(\"latency\", () => stream.lastProgress.durationMs.get(\"triggerExecution\").longValue())\n-\n-  private def registerGauge[T](name: String, f: () => T)(implicit num: Numeric[T]): Unit = {\n+  registerGauge(\"inputRate-total\", (lastProgress) => lastProgress.inputRowsPerSecond, 0.0)\n+  registerGauge(\"processingRate-total\", (lastProgress) => lastProgress.processedRowsPerSecond, 0.0)\n+  registerGauge(\"latency\",\n+    (lastProgress) => lastProgress.durationMs.get(\"triggerExecution\").longValue(), 0L)\n+\n+  private def registerGauge[T](\n+      name: String,\n+      f: (StreamingQueryProgress) => T,"
  }],
  "prId": 20189
}]