[{
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "@rdblue Does it makes sense to fallback to v1 catalog if there is no database info passed in?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-07-24T19:26:41Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "We will fallback to v1 if no db info is provided.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-07-29T22:09:51Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This should use the default v2 catalog if it is set.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-07-31T23:10:17Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "@rdblue currently, v2 catalog doesn't have `getCurrentDatabase` to use when database name is not provided.\r\nWhat I can do is to throw an exception if default v2 catalog is set until v2 catalog supports `getCurrentDatabase`. What do you think?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-01T18:56:41Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think we want catalogs to support `getCurrentDatabase`. I think the current database should be tracked by Spark and passed in. @cloud-fan is working on storing this in SessionState, I think.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-01T19:53:00Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "@rdblue should I wait for @cloud-fan's changes go in first, or revisit this later?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-01T22:41:39Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Let's default it to a constant for now and we can update it when the changes are in. If that goes in first, then we can update this PR, otherwise do it in a follow-up.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-02T18:17:26Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Since you mentioned `This works for now` for throwing an exception for the case where db is not specified but default v2 catalog is set, I will leave it as it is. I will do a follow-up when the changes are in.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T01:13:47Z",
    "diffHunk": "@@ -162,6 +162,16 @@ case class DataSourceResolution(\n \n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n+\n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This should be used if no default v2 catalog is set.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-07-31T23:11:20Z",
    "diffHunk": "@@ -163,6 +163,15 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)\n+\n+    case ShowTablesStatement(Some(CatalogObjectIdentifier(Some(catalog), ident)), pattern) =>\n+      ShowTables(catalog.asTableCatalog, ident, pattern)\n+\n+    case ShowTablesStatement(Some(db), pattern) =>\n+      ShowTablesCommand(Some(db.mkString(\".\")), pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "This is updated. Thanks.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T01:11:14Z",
    "diffHunk": "@@ -163,6 +163,15 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    // If the database name is not provided, fallback to v1 catalog.\n+    case ShowTablesStatement(None, pattern) =>\n+      ShowTablesCommand(None, pattern)\n+\n+    case ShowTablesStatement(Some(CatalogObjectIdentifier(Some(catalog), ident)), pattern) =>\n+      ShowTables(catalog.asTableCatalog, ident, pattern)\n+\n+    case ShowTablesStatement(Some(db), pattern) =>\n+      ShowTablesCommand(Some(db.mkString(\".\")), pattern)"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This works for now.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-02T18:21:19Z",
    "diffHunk": "@@ -163,6 +163,22 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) => throw new AnalysisException("
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "`CatalogTableIdentifier` will fill in the default catalog, right?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T21:30:12Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace\n+      val catalog = maybeCatalog.orElse(defaultCatalog)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Yes you are right. `CatalogObjectIdentifier` will fill in the default catalog. I will remove this and also update these above:\r\n```\r\n    case replace: ReplaceTableStatement =>\r\n      // the provider was not a v1 source, convert to a v2 plan\r\n      val CatalogObjectIdentifier(maybeCatalog, identifier) = replace.tableName\r\n      val catalog = maybeCatalog.orElse(defaultCatalog)\r\n```",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T04:30:45Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace\n+      val catalog = maybeCatalog.orElse(defaultCatalog)"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I think it would be better to convert identifier to `Array[String]` here instead of in the exec node. It seems strange to use an Identifier when it is really a namespace.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T21:31:16Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace\n+      val catalog = maybeCatalog.orElse(defaultCatalog)\n+      catalog match {\n+        case Some(v2Catalog) =>\n+          ShowTables(plan.output, v2Catalog.asTableCatalog, identifier, pattern)"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Changed.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T05:16:04Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace\n+      val catalog = maybeCatalog.orElse(defaultCatalog)\n+      catalog match {\n+        case Some(v2Catalog) =>\n+          ShowTables(plan.output, v2Catalog.asTableCatalog, identifier, pattern)"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I think we may need a different matcher. I noted below that this passes an identifier instead of `Array[String]`, but I also realized that the identifier here must have at least a table name. So `SHOW TABLES FROM catalog` would produce `CatalogObjectIdentifer(None, Identifer(\"catalog\"))`. I don't think that's correct. We should probably add a `CatalogNamespace` extractor to handle this. Then you'd get an `Array[String]` from it and could base the plans on passing a real namespace.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T21:34:34Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Assuming there exists a CatalogPlug with a name `catalog`, what should `SHOW TABLES FROM catalog` resolve to?\r\n\r\n1) CatalogNamespace(None, Seq(\"catalog\")) or\r\n2) CatalogNamespace(Some[CatalogPlugin], Seq())\r\n\r\nIf we go with 2),  what will be the default behavior if the user was specifying `catalog` as a database name?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T04:27:25Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "I pushed out a new change assume what you meant was 1). Please let me know if I misunderstood.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T05:11:30Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Catalog names always take precedence over namespaces, so the collision should be interpreted as a catalog name. To avoid this, users can explicitly add the catalog.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T18:00:12Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Got it, updated the code/tests reflecting this.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-05T19:00:01Z",
    "diffHunk": "@@ -163,6 +163,24 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"v2 catalog doesn't support getCurrentDatabase yet, \" +\n+              \"so the default database name cannot be deduced.\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogObjectIdentifier(maybeCatalog, identifier) = namespace"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is not true now. If the catalog implements `SupportsNamespaces`, it has a `defaultNamespace` method.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-08T06:05:09Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This is correct for now because this should use the current namespace, which we don't track for v2 yet.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-09T00:46:37Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah i see, we have default namespace but no current namespace.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-09T04:20:35Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "I updated the message to \"The current namespace is not available in v2 catalog yet\" to avoid confusion.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-10T18:24:32Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what's the expected behavior of `SHOW TABLES catalogName`? Since `[]` is a valid namespace, I think it's reasonable that users want to list the tables under namespace `[]` in `catalogName`.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-08T06:08:00Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogNamespace(maybeCatalog, ns) = namespace\n+      maybeCatalog match {\n+        case Some(v2Catalog) =>\n+          if (ns.isEmpty) {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I agree, it should list tables in the empty namespace.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-09T00:47:07Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogNamespace(maybeCatalog, ns) = namespace\n+      maybeCatalog match {\n+        case Some(v2Catalog) =>\n+          if (ns.isEmpty) {"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "OK. I removed this check.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-10T18:25:55Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogNamespace(maybeCatalog, ns) = namespace\n+      maybeCatalog match {\n+        case Some(v2Catalog) =>\n+          if (ns.isEmpty) {"
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we can only fallback to the v1 show tables if `namespace.length == 1`. Otherwise we should fail and ask users to specify a valid database name.\r\n\r\n`SHOW TABLES a.b` fails in Spark 2.x, and it should still fail in Spark 3.0 if users do not set the default catalog.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-08T06:10:43Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogNamespace(maybeCatalog, ns) = namespace\n+      maybeCatalog match {\n+        case Some(v2Catalog) =>\n+          if (ns.isEmpty) {\n+            throw new AnalysisException(\n+              \"The default namespace cannot be deduced in v2 catalog yet\")\n+          }\n+          ShowTables(plan.output, v2Catalog.asTableCatalog, ns, pattern)\n+        case None =>\n+          ShowTablesCommand(Some(namespace.quoted), pattern)",
    "line": 39
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Added the check. Thanks for pointing it out.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-10T19:05:24Z",
    "diffHunk": "@@ -175,6 +175,27 @@ case class DataSourceResolution(\n     case DataSourceV2Relation(CatalogTableAsV2(catalogTable), _, _) =>\n       UnresolvedCatalogRelation(catalogTable)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The default namespace cannot be deduced in v2 catalog yet\")\n+        case None =>\n+          ShowTablesCommand(None, pattern)\n+      }\n+\n+    case plan @ ShowTablesStatement(Some(namespace), pattern) =>\n+      val CatalogNamespace(maybeCatalog, ns) = namespace\n+      maybeCatalog match {\n+        case Some(v2Catalog) =>\n+          if (ns.isEmpty) {\n+            throw new AnalysisException(\n+              \"The default namespace cannot be deduced in v2 catalog yet\")\n+          }\n+          ShowTables(plan.output, v2Catalog.asTableCatalog, ns, pattern)\n+        case None =>\n+          ShowTablesCommand(Some(namespace.quoted), pattern)",
    "line": 39
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Can we wait a little bit for https://github.com/apache/spark/pull/25368 ? With it, we can access the current namespace from `CatalogManager` in this rule.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-19T05:29:38Z",
    "diffHunk": "@@ -181,6 +181,27 @@ case class DataSourceResolution(\n       val aliased = delete.tableAlias.map(SubqueryAlias(_, relation)).getOrElse(relation)\n       DeleteFromTable(aliased, delete.condition)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The current namespace is not available in v2 catalog yet\")"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "it has been merged now.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-20T11:41:01Z",
    "diffHunk": "@@ -181,6 +181,27 @@ case class DataSourceResolution(\n       val aliased = delete.tableAlias.map(SubqueryAlias(_, relation)).getOrElse(relation)\n       DeleteFromTable(aliased, delete.condition)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The current namespace is not available in v2 catalog yet\")"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Thanks @cloud-fan. Can you check https://github.com/apache/spark/pull/25368/files#r315980292? I am not sure if the `CatalogManager._currentNamespace`'s behavior is correct.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-21T03:04:29Z",
    "diffHunk": "@@ -181,6 +181,27 @@ case class DataSourceResolution(\n       val aliased = delete.tableAlias.map(SubqueryAlias(_, relation)).getOrElse(relation)\n       DeleteFromTable(aliased, delete.condition)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The current namespace is not available in v2 catalog yet\")"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Now this is fixed.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-21T19:57:39Z",
    "diffHunk": "@@ -181,6 +181,27 @@ case class DataSourceResolution(\n       val aliased = delete.tableAlias.map(SubqueryAlias(_, relation)).getOrElse(relation)\n       DeleteFromTable(aliased, delete.condition)\n \n+    case ShowTablesStatement(None, pattern) =>\n+      defaultCatalog match {\n+        case Some(_) =>\n+          throw new AnalysisException(\n+            \"The current namespace is not available in v2 catalog yet\")"
  }],
  "prId": 25247
}]