[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why isn't this a `CatalystPrimitiveConverter with RepeatedConverter`?\n",
    "commit": "ace6df766d5799e6fc8409bf50c6c17321a774d0",
    "createdAt": "2015-08-10T19:57:56Z",
    "diffHunk": "@@ -446,4 +478,61 @@ private[parquet] class CatalystRowConverter(\n       }\n     }\n   }\n+\n+  private trait RepeatedConverter {\n+    private var currentArray: ArrayBuffer[Any] = _\n+\n+    protected def newArrayUpdater(updater: ParentContainerUpdater) = new ParentContainerUpdater {\n+      override def start(): Unit = currentArray = ArrayBuffer.empty[Any]\n+      override def end(): Unit = updater.set(new GenericArrayData(currentArray.toArray))\n+      override def set(value: Any): Unit = currentArray += value\n+    }\n+  }\n+\n+  /**\n+   * A primitive converter for converting unannotated repeated primitive values to required arrays\n+   * of required primitives values.\n+   */\n+  private final class RepeatedPrimitiveConverter(\n+      parquetType: Type,\n+      catalystType: DataType,\n+      parentUpdater: ParentContainerUpdater)\n+    extends PrimitiveConverter with RepeatedConverter with HasParentContainerUpdater {"
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "It's because `CatalystPrimitiveConverter` is defined as:\n\n``` scala\nprivate[parquet] class CatalystPrimitiveConverter(val updater: ParentContainerUpdater)\n  extends PrimitiveConverter with HasParentContainerUpdater {\n  ...\n}\n```\n\nthe `val updater` part has two meanings:\n1. `updater` is made a constructor argument, and\n2. `def updater` in `HasParentContainerUpdater` is overriden since `updater` is a read-only `val`.\n\nThe 2nd fact prevents subclasses of `CatalystPrimitiveConverter` to override the `updater` field.\n",
    "commit": "ace6df766d5799e6fc8409bf50c6c17321a774d0",
    "createdAt": "2015-08-11T00:22:44Z",
    "diffHunk": "@@ -446,4 +478,61 @@ private[parquet] class CatalystRowConverter(\n       }\n     }\n   }\n+\n+  private trait RepeatedConverter {\n+    private var currentArray: ArrayBuffer[Any] = _\n+\n+    protected def newArrayUpdater(updater: ParentContainerUpdater) = new ParentContainerUpdater {\n+      override def start(): Unit = currentArray = ArrayBuffer.empty[Any]\n+      override def end(): Unit = updater.set(new GenericArrayData(currentArray.toArray))\n+      override def set(value: Any): Unit = currentArray += value\n+    }\n+  }\n+\n+  /**\n+   * A primitive converter for converting unannotated repeated primitive values to required arrays\n+   * of required primitives values.\n+   */\n+  private final class RepeatedPrimitiveConverter(\n+      parquetType: Type,\n+      catalystType: DataType,\n+      parentUpdater: ParentContainerUpdater)\n+    extends PrimitiveConverter with RepeatedConverter with HasParentContainerUpdater {"
  }],
  "prId": 8070
}]