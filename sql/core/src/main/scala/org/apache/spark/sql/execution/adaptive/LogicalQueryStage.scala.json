[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we really need this now?",
    "commit": "e2651049c408f211b225f40c93adf5b741b14eb4",
    "createdAt": "2019-05-30T18:15:07Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.adaptive\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SortOrder}\n+import org.apache.spark.sql.catalyst.plans.logical.{LeafNode, LogicalPlan, Statistics}\n+import org.apache.spark.sql.catalyst.plans.physical.Partitioning\n+import org.apache.spark.sql.execution.SparkPlan\n+\n+/**\n+ * The LogicalPlan wrapper for a [[QueryStageExec]], or a snippet of physical plan containing\n+ * a [[QueryStageExec]], in which all ancestor nodes of the [[QueryStageExec]] are linked to\n+ * the same logical node.\n+ *\n+ * For example, a logical Aggregate can be transformed into FinalAgg - Shuffle - PartialAgg, in\n+ * which the Shuffle will be wrapped into a [[QueryStageExec]], thus the [[LogicalQueryStage]]\n+ * will have FinalAgg - QueryStageExec as its physical plan.\n+ */\n+// TODO we can potentially include only [[QueryStageExec]] in this class if we make the aggregation\n+// planning aware of partitioning.\n+case class LogicalQueryStage(\n+    logicalPlan: LogicalPlan,\n+    physicalPlan: SparkPlan) extends LeafNode {\n+\n+  override def output: Seq[Attribute] = logicalPlan.output\n+  override val isStreaming: Boolean = logicalPlan.isStreaming\n+  override val outputOrdering: Seq[SortOrder] = physicalPlan.outputOrdering\n+  def outputPartitioning: Partitioning = physicalPlan.outputPartitioning"
  }],
  "prId": 24706
}]