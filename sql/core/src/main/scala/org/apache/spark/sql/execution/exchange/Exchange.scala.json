[{
  "comments": [{
    "author": {
      "login": "bersprockets"
    },
    "body": "I looked at apply methods that contain only a transformUp and they nearly all look like this:\r\n\r\n<pre>\r\n  def apply(plan: SparkPlan): SparkPlan = plan.transformUp {\r\n    etc.\r\n  }\r\n</pre>\r\n\r\nYour way is less confusing, but it doesn't appear to be the current style.",
    "commit": "be96e390c87ecf1550a4297a92a68497caaedca4",
    "createdAt": "2018-03-08T01:51:43Z",
    "diffHunk": "@@ -109,3 +109,15 @@ case class ReuseExchange(conf: SQLConf) extends Rule[SparkPlan] {\n     }\n   }\n }\n+\n+/**\n+ * Remove redundant [[ShuffleExchangeExec]] from a spark plan.\n+ */\n+case class RemoveRedundantExchange(conf: SQLConf) extends Rule[SparkPlan] {\n+  def apply(plan: SparkPlan): SparkPlan = {\n+    plan.transformUp {"
  }, {
    "author": {
      "login": "heary-cao"
    },
    "body": "Sorry, thank you for review it. I'll update it right away. ",
    "commit": "be96e390c87ecf1550a4297a92a68497caaedca4",
    "createdAt": "2018-03-08T04:25:52Z",
    "diffHunk": "@@ -109,3 +109,15 @@ case class ReuseExchange(conf: SQLConf) extends Rule[SparkPlan] {\n     }\n   }\n }\n+\n+/**\n+ * Remove redundant [[ShuffleExchangeExec]] from a spark plan.\n+ */\n+case class RemoveRedundantExchange(conf: SQLConf) extends Rule[SparkPlan] {\n+  def apply(plan: SparkPlan): SparkPlan = {\n+    plan.transformUp {"
  }],
  "prId": 20699
}]