[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`output` -> `the output`",
    "commit": "48b9fdaa2ca24eb2b9fdfdf5a61348e06aa1da64",
    "createdAt": "2018-01-19T21:15:06Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+\n+/**\n+ * An interface to represent output data partitioning for a data source, which is returned by"
  }],
  "prId": 20201
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`, once` -> `. Once`",
    "commit": "48b9fdaa2ca24eb2b9fdfdf5a61348e06aa1da64",
    "createdAt": "2018-01-19T21:15:30Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+\n+/**\n+ * An interface to represent output data partitioning for a data source, which is returned by\n+ * {@link SupportsReportPartitioning#outputPartitioning()}. Note that this should work like a\n+ * snapshot, once created, it should be deterministic and always report same number of partitions"
  }],
  "prId": 20201
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`same number` -> `the same number` and `same \"satisfy\" result` -> `the same \"satisfy\" result` ",
    "commit": "48b9fdaa2ca24eb2b9fdfdf5a61348e06aa1da64",
    "createdAt": "2018-01-22T17:25:16Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+\n+/**\n+ * An interface to represent the output data partitioning for a data source, which is returned by\n+ * {@link SupportsReportPartitioning#outputPartitioning()}. Note that this should work like a\n+ * snapshot. Once created, it should be deterministic and always report same number of partitions\n+ * and same \"satisfy\" result for a certain distribution."
  }],
  "prId": 20201
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`Returns the number of partitions/(i.e., {@link ReadTask}s) that the data source outputs.`",
    "commit": "48b9fdaa2ca24eb2b9fdfdf5a61348e06aa1da64",
    "createdAt": "2018-01-22T17:26:43Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+\n+/**\n+ * An interface to represent the output data partitioning for a data source, which is returned by\n+ * {@link SupportsReportPartitioning#outputPartitioning()}. Note that this should work like a\n+ * snapshot. Once created, it should be deterministic and always report same number of partitions\n+ * and same \"satisfy\" result for a certain distribution.\n+ */\n+@InterfaceStability.Evolving\n+public interface Partitioning {\n+\n+  /**\n+   * Returns the number of partitions/{@link ReadTask}s the data source outputs."
  }],
  "prId": 20201
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`d` -> `distribution`",
    "commit": "48b9fdaa2ca24eb2b9fdfdf5a61348e06aa1da64",
    "createdAt": "2018-01-22T17:32:32Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+\n+/**\n+ * An interface to represent the output data partitioning for a data source, which is returned by\n+ * {@link SupportsReportPartitioning#outputPartitioning()}. Note that this should work like a\n+ * snapshot. Once created, it should be deterministic and always report same number of partitions\n+ * and same \"satisfy\" result for a certain distribution.\n+ */\n+@InterfaceStability.Evolving\n+public interface Partitioning {\n+\n+  /**\n+   * Returns the number of partitions/{@link ReadTask}s the data source outputs.\n+   */\n+  int numPartitions();\n+\n+  /**\n+   * Returns true if this partitioning can satisfy the given distribution, which means Spark does\n+   * not need to shuffle the output data of this data source for some certain operations.\n+   *\n+   * Note that, Spark may add new concrete implementations of {@link Distribution} in new releases.\n+   * This method should be aware of it and always return false for unrecognized distributions. It's\n+   * recommended to check every Spark new release and support new distributions if possible, to\n+   * avoid shuffle at Spark side for more cases.\n+   */\n+  boolean satisfy(Distribution d);"
  }],
  "prId": 20201
}]