[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "@rdblue I have to fork a `PartitionReaderFactory` for continuous streaming, in order to use the name `createContinuousReader`. Also I need to rename `ContinuousReaderSupport.createReaderFactory ` to `createContinuousReaderFactory`, which requires to move out `createReaderFactory` from the base interace `ReadSupport`.\r\n\r\nIs it really worth? The existing sources only implement `XYZReadSupportProvider` at the same time, but not `XYZReadSupport`. e.g. micro-batch and continuous read support are always 2 different classes, as the logic is so different. I believe file source will have 3 classes for batch, micro-batch and streaming.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T18:17:41Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import java.io.Serializable;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.vectorized.ColumnarBatch;\n+\n+/**\n+ * A factory used to create {@link ContinuousPartitionReader} instances.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousPartitionReaderFactory extends Serializable {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "That said, the data source implementations probably do not care if they can implement different read support at the same time, but we need to pay a high cost for this change.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T18:20:25Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import java.io.Serializable;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.vectorized.ColumnarBatch;\n+\n+/**\n+ * A factory used to create {@link ContinuousPartitionReader} instances.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousPartitionReaderFactory extends Serializable {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "It should be fine to use the same method name in different `ReaderFactory` interfaces. The problem I identified was when all of the `ReadSupport` interfaces used the same `createReaderFactory` method to create different factories. Implementing multiple `ReadSupport` interfaces on the same table would require that these be the same method and therefore return the same class, which would be forced to support all `ReaderFactory` uses.\r\n\r\nIf construction of the reader factory happens with different methods in each `ReadSupport`, then it is up to the implementation whether they are the same class or different ones. They can use the same method name to create readers in that case.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T19:04:31Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import java.io.Serializable;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.vectorized.ColumnarBatch;\n+\n+/**\n+ * A factory used to create {@link ContinuousPartitionReader} instances.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousPartitionReaderFactory extends Serializable {"
  }],
  "prId": 22009
}]