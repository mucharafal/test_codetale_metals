[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This class will be used to create a `WriteConfig` that instructs the data source to replace partitions in the existing data with partitions of a dataframe. The logical plan would be `DynamicPartitionOverwrite`.",
    "commit": "847300f76391c5e171e3f54b21bf6f2efc177f0e",
    "createdAt": "2018-08-22T21:44:51Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.writer;\n+\n+import org.apache.spark.sql.sources.v2.DataSourceOptions;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * An interface that adds support to {@link BatchWriteSupport} for a replace data operation that\n+ * replaces partitions dynamically with the output of a write operation.\n+ * <p>\n+ * Data source implementations can implement this interface in addition to {@link BatchWriteSupport}\n+ * to support write operations that replace all partitions in the output table that are present\n+ * in the write's output data.\n+ * <p>\n+ * This is used to implement INSERT OVERWRITE ... PARTITIONS.\n+ */\n+public interface BatchPartitionOverwriteSupport {"
  }],
  "prId": 22190
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This class will be used to create a `WriteConfig` that instructs the data source to replace partitions in the existing data with partitions of a dataframe. The logical plan would be `DynamicPartitionOverwrite`.",
    "commit": "847300f76391c5e171e3f54b21bf6f2efc177f0e",
    "createdAt": "2018-08-22T21:46:47Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.writer;\n+\n+import org.apache.spark.sql.sources.v2.DataSourceOptions;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * An interface that adds support to {@link BatchWriteSupport} for a replace data operation that\n+ * replaces partitions dynamically with the output of a write operation.\n+ * <p>\n+ * Data source implementations can implement this interface in addition to {@link BatchWriteSupport}\n+ * to support write operations that replace all partitions in the output table that are present\n+ * in the write's output data.\n+ * <p>\n+ * This is used to implement INSERT OVERWRITE ... PARTITIONS.\n+ */\n+public interface BatchPartitionOverwriteSupport extends BatchWriteSupport {",
    "line": 33
  }],
  "prId": 22190
}]