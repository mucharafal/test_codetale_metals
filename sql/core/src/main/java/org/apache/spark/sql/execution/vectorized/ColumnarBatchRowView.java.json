[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "Does it make sense to create another constructor not to allocate `MutableColumnarRow` as an optimization?   \r\nThis is because most of the use cases are to immediately call `rowIterator()` that obviously never calls `getRow()`.",
    "commit": "acd0aaa41dd71844b1948d88cab3a44373c27c42",
    "createdAt": "2019-05-08T19:33:35Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.vectorized;\n+\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.vectorized.ColumnarBatch;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * This class provides a row view of a {@link ColumnarBatch}, so that Spark can access the data\n+ * row by row\n+ */\n+public final class ColumnarBatchRowView {\n+\n+  private final ColumnarBatch batch;\n+\n+  // Staging row returned from `getRow`.\n+  private final MutableColumnarRow row;\n+\n+  public ColumnarBatchRowView(ColumnarBatch batch) {",
    "line": 36
  }],
  "prId": 24546
}]