[{
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "I thought this was a bit convoluted at first, but on reflection I can understand why this additional flexibility is valuable. I think it'd be worth writing an example here of what a source might want to do other than ignore the invalid metrics.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T21:09:58Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.reader.DataSourceReader;\n+\n+/**\n+ * A mix in interface for {@link DataSourceReader}. Data source readers can implement this\n+ * interface to report custom metrics that gets reported under the\n+ * {@link org.apache.spark.sql.streaming.SourceProgress}\n+ *\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsCustomReaderMetrics extends DataSourceReader {\n+    /**\n+     * Returns custom metrics specific to this data source.\n+     */\n+    CustomMetrics getCustomMetrics();\n+\n+    /**\n+     * Invoked if the custom metrics returned by {@link #getCustomMetrics()} is invalid"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "Oh wait, this is the same thing we talked about in the initial round of review. I think \"throw an error when developing the connector so you can make sure your metrics work right\" would still be a good alternative to mention in the doc.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T21:20:33Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.reader.DataSourceReader;\n+\n+/**\n+ * A mix in interface for {@link DataSourceReader}. Data source readers can implement this\n+ * interface to report custom metrics that gets reported under the\n+ * {@link org.apache.spark.sql.streaming.SourceProgress}\n+ *\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsCustomReaderMetrics extends DataSourceReader {\n+    /**\n+     * Returns custom metrics specific to this data source.\n+     */\n+    CustomMetrics getCustomMetrics();\n+\n+    /**\n+     * Invoked if the custom metrics returned by {@link #getCustomMetrics()} is invalid"
  }, {
    "author": {
      "login": "arunmahadevan"
    },
    "body": "Updated javadoc to explain the same.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T22:50:37Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.reader.DataSourceReader;\n+\n+/**\n+ * A mix in interface for {@link DataSourceReader}. Data source readers can implement this\n+ * interface to report custom metrics that gets reported under the\n+ * {@link org.apache.spark.sql.streaming.SourceProgress}\n+ *\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsCustomReaderMetrics extends DataSourceReader {\n+    /**\n+     * Returns custom metrics specific to this data source.\n+     */\n+    CustomMetrics getCustomMetrics();\n+\n+    /**\n+     * Invoked if the custom metrics returned by {@link #getCustomMetrics()} is invalid"
  }],
  "prId": 21721
}]