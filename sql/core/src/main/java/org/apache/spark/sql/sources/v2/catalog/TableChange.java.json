[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "It's great to have an example to show how to use this API, can we add an example to all the methods here?",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T02:08:04Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Are you looking for examples in Javadoc, or an example implementation?",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T16:25:12Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I added an example to the Javadocs:\r\n\r\n```scala\r\nimport TableChange._\r\nval catalog = source.asInstanceOf[TableSupport].catalog()\r\ncatalog.alterTable(ident,\r\n    addColumn(\"x\", IntegerType),\r\n    renameColumn(\"a\", \"b\"),\r\n    deleteColumn(\"c\")\r\n  )\r\n```",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T17:21:39Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x."
  }],
  "prId": 21306
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is great!",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T02:08:26Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {"
  }],
  "prId": 21306
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Just noticed that these aren't public, but should be because they will be passed to implementations through `alterTable`.\r\n\r\nThese should also implement `unapply` for Scala implementations.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T16:32:49Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x.\n+   *\n+   * @param name the current field name\n+   * @param newName the new name\n+   * @return a TableChange for the rename\n+   */\n+  static TableChange renameColumn(String name, String newName) {\n+    return new RenameColumn(name, newName);\n+  }\n+\n+  /**\n+   * Create a TableChange for updating the type of a field.\n+   * <p>\n+   * The name is used to find the field to update.\n+   *\n+   * @param name the field name\n+   * @param newDataType the new data type\n+   * @return a TableChange for the update\n+   */\n+  static TableChange updateColumn(String name, DataType newDataType) {\n+    return new UpdateColumn(name, newDataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for deleting a field from a table.\n+   *\n+   * @param name the name of the field to delete\n+   * @return a TableChange for the delete\n+   */\n+  static TableChange deleteColumn(String name) {\n+    return new DeleteColumn(name);\n+  }\n+\n+  final class AddColumn implements TableChange {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Nevermind, I forgot that these are in an interface so they are automatically public.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T16:51:04Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x.\n+   *\n+   * @param name the current field name\n+   * @param newName the new name\n+   * @return a TableChange for the rename\n+   */\n+  static TableChange renameColumn(String name, String newName) {\n+    return new RenameColumn(name, newName);\n+  }\n+\n+  /**\n+   * Create a TableChange for updating the type of a field.\n+   * <p>\n+   * The name is used to find the field to update.\n+   *\n+   * @param name the field name\n+   * @param newDataType the new data type\n+   * @return a TableChange for the update\n+   */\n+  static TableChange updateColumn(String name, DataType newDataType) {\n+    return new UpdateColumn(name, newDataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for deleting a field from a table.\n+   *\n+   * @param name the name of the field to delete\n+   * @return a TableChange for the delete\n+   */\n+  static TableChange deleteColumn(String name) {\n+    return new DeleteColumn(name);\n+  }\n+\n+  final class AddColumn implements TableChange {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "And, I'm not sure it's possible to implement unapply in Java. Not even implementing Product works.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-04T17:12:20Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.catalog;\n+\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * TableChange subclasses represent requested changes to a table. These are passed to\n+ * {@link DataSourceCatalog#alterTable}.\n+ */\n+public interface TableChange {\n+\n+  /**\n+   * Create a TableChange for adding a top-level column to a table.\n+   * <p>\n+   * Because \".\" may be interpreted as a field path separator or may be used in field names, it is\n+   * not allowed in names passed to this method. To add to nested types or to add fields with\n+   * names that contain \".\", use {@link #addColumn(String, String, DataType)}.\n+   *\n+   * @param name the new top-level column name\n+   * @param dataType the new column's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String name, DataType dataType) {\n+    return new AddColumn(null, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for adding a nested column to a table.\n+   * <p>\n+   * The parent name is used to find the parent struct type where the nested field will be added.\n+   * If the parent name is null, the new column will be added to the root as a top-level column.\n+   * If parent identifies a struct, a new column is added to that struct. If it identifies a list,\n+   * the column is added to the list element struct, and if it identifies a map, the new column is\n+   * added to the map's value struct.\n+   * <p>\n+   * The given name is used to name the new column and names containing \".\" are not handled\n+   * differently.\n+   *\n+   * @param parent the new field's parent\n+   * @param name the new field name\n+   * @param dataType the new field's data type\n+   * @return a TableChange for the addition\n+   */\n+  static TableChange addColumn(String parent, String name, DataType dataType) {\n+    return new AddColumn(parent, name, dataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for renaming a field.\n+   * <p>\n+   * The name is used to find the field to rename. The new name will replace the name of the type.\n+   * For example, renameColumn(\"a.b.c\", \"x\") should produce column a.b.x.\n+   *\n+   * @param name the current field name\n+   * @param newName the new name\n+   * @return a TableChange for the rename\n+   */\n+  static TableChange renameColumn(String name, String newName) {\n+    return new RenameColumn(name, newName);\n+  }\n+\n+  /**\n+   * Create a TableChange for updating the type of a field.\n+   * <p>\n+   * The name is used to find the field to update.\n+   *\n+   * @param name the field name\n+   * @param newDataType the new data type\n+   * @return a TableChange for the update\n+   */\n+  static TableChange updateColumn(String name, DataType newDataType) {\n+    return new UpdateColumn(name, newDataType);\n+  }\n+\n+  /**\n+   * Create a TableChange for deleting a field from a table.\n+   *\n+   * @param name the name of the field to delete\n+   * @return a TableChange for the delete\n+   */\n+  static TableChange deleteColumn(String name) {\n+    return new DeleteColumn(name);\n+  }\n+\n+  final class AddColumn implements TableChange {"
  }],
  "prId": 21306
}]