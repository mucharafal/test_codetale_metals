[{
  "comments": [{
    "author": {
      "login": "tedyu"
    },
    "body": "Should the map parameter be of type SortedMap ?\r\nWith ordinary Map, the traversal order is not fixed. It may produce non-deterministic result if the map's size is bigger than this BoundedSortedMap's size",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-05T06:17:17Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class BoundedSortedMap<K, V> extends TreeMap<K, V> {\n+\n+  private final int limit;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param comparator comparator instance to compare between keys\n+   * @param limit      bounded size\n+   */\n+  public BoundedSortedMap(Comparator<K> comparator, int limit) {\n+    super(comparator);\n+    this.limit = limit;\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends K, ? extends V> map) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Unfortunately this is inherited from Map interface so we can't modify its signature. \r\nAnd assuming that `put` is implemented correctly, this can guarantee the size of BoundedSortedMap, since it defers to `put` method to restrict map's size.",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-05T07:00:36Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class BoundedSortedMap<K, V> extends TreeMap<K, V> {\n+\n+  private final int limit;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param comparator comparator instance to compare between keys\n+   * @param limit      bounded size\n+   */\n+  public BoundedSortedMap(Comparator<K> comparator, int limit) {\n+    super(comparator);\n+    this.limit = limit;\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends K, ? extends V> map) {"
  }],
  "prId": 21700
}, {
  "comments": [{
    "author": {
      "login": "tedyu"
    },
    "body": "I can think of some optimization here:\r\nIf the map's size is bigger than or equal to this BoundedSortedMap's size, you can call clear on this sortedMap first if map.lastKey() is lower than this.firstKey - since all of this sortedMap's elements would be evicted.\r\nOn the other hand, if map.firstKey() is higher than this.lastKey and this sortedMap is at full capacity, there is no need to enter the loop - no element from map would be taken anyway.",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-05T06:22:15Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class BoundedSortedMap<K, V> extends TreeMap<K, V> {\n+\n+  private final int limit;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param comparator comparator instance to compare between keys\n+   * @param limit      bounded size\n+   */\n+  public BoundedSortedMap(Comparator<K> comparator, int limit) {\n+    super(comparator);\n+    this.limit = limit;\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends K, ? extends V> map) {\n+    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Thanks for the great suggestion. While we can't assume that map's type is SortedMap, looks like we could check the type of map in runtime and apply your suggestion. Will apply it.",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-05T07:03:23Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class BoundedSortedMap<K, V> extends TreeMap<K, V> {\n+\n+  private final int limit;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param comparator comparator instance to compare between keys\n+   * @param limit      bounded size\n+   */\n+  public BoundedSortedMap(Comparator<K> comparator, int limit) {\n+    super(comparator);\n+    this.limit = limit;\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends K, ? extends V> map) {\n+    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {"
  }],
  "prId": 21700
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "This is a very general (and complicated) interface to use in only one place. Can we just have the state store handle its cleanup logic directly?",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-10T16:21:33Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public final class BoundedSortedMap<K, V> extends TreeMap<K, V> {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I just handled it in HDFSBackedStateStoreProvider and refactored out afterwards cause this makes HDFSBackedStateStoreProvider code clearer (I feel HDFSBackedStateStoreProvider is less structurized, and I've a patch #21357 to refactor a bit), but I agree with you that this might be used only once for HDFSBackedStateStoreProvider. I'll handle it in HDFSBackedStateStoreProvider. Thanks!",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-10T20:10:09Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public final class BoundedSortedMap<K, V> extends TreeMap<K, V> {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Moved the logic to HDFSBackedStateStoreProvider and removed BoundedSortedMap as well as test suite.",
    "commit": "cf78a2a25791a683c0ee36b08bdc79edd54f212a",
    "createdAt": "2018-07-10T22:28:53Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.streaming.state;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This class implements bounded {@link java.util.SortedMap} based on {@link java.util.TreeMap}.\n+ *\n+ * As TreeMap does, this implementation sorts elements in natural order, and cuts off\n+ * smaller elements to retain at most bigger N elements.\n+ *\n+ * You can provide reversed order of comparator to retain smaller elements instead.\n+ *\n+ * This class is not thread-safe, so synchronization would be needed to use this concurrently.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public final class BoundedSortedMap<K, V> extends TreeMap<K, V> {"
  }],
  "prId": 21700
}]