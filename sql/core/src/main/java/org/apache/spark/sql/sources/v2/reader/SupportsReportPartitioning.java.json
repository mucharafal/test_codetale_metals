[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "nit: .... no matter the reader implements this interface or not.",
    "commit": "1b319aaaab3719ddd89decf9f3239945b43c08e9",
    "createdAt": "2018-03-06T03:57:40Z",
    "diffHunk": "@@ -23,6 +23,10 @@\n /**\n  * A mix in interface for {@link DataSourceReader}. Data source readers can implement this\n  * interface to report data partitioning and try to avoid shuffle at Spark side.\n+ *\n+ * Note that Spark will always infer a\n+ * {@link org.apache.spark.sql.catalyst.plans.physical.SinglePartition} partitioning when the\n+ * reader creates exactly 1 {@link DataReaderFactory}."
  }],
  "prId": 20726
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "We should not expose internal classes. How about\r\n```\r\nNote that sometimes Spark can avoid shuffle if the reader creates\r\nexactly 1 {@link DataReaderFactory}, even if the reader does not implement this interface.\r\n```",
    "commit": "1b319aaaab3719ddd89decf9f3239945b43c08e9",
    "createdAt": "2018-03-16T21:49:14Z",
    "diffHunk": "@@ -23,6 +23,11 @@\n /**\n  * A mix in interface for {@link DataSourceReader}. Data source readers can implement this\n  * interface to report data partitioning and try to avoid shuffle at Spark side.\n+ *\n+ * Note that Spark will always infer a\n+ * {@link org.apache.spark.sql.catalyst.plans.physical.SinglePartition} partitioning when the"
  }],
  "prId": 20726
}]