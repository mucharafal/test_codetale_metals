[{
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "I think it might be better to create a new interface ContinuousDataReaderFactory, and implement this there as something like `createDataReaderWithOffset(PartitionOffset offset)`. That way the intended lifecycle is explicit.",
    "commit": "21f574e2a3ad3c8e68b92776d2a141d7fcb90502",
    "createdAt": "2018-02-27T18:07:34Z",
    "diffHunk": "@@ -33,4 +33,16 @@\n      * as a restart checkpoint.\n      */\n     PartitionOffset getOffset();\n+\n+    /**\n+     * Set the start offset for the current record, only used in task retry. If setOffset keep\n+     * default implementation, it means current ContinuousDataReader can't support task level retry.\n+     *\n+     * @param offset last offset before task retry.\n+     */\n+    default void setOffset(PartitionOffset offset) {",
    "line": 11
  }, {
    "author": {
      "login": "xuanyuanking"
    },
    "body": "Cool, that's more clearer.",
    "commit": "21f574e2a3ad3c8e68b92776d2a141d7fcb90502",
    "createdAt": "2018-02-28T07:33:08Z",
    "diffHunk": "@@ -33,4 +33,16 @@\n      * as a restart checkpoint.\n      */\n     PartitionOffset getOffset();\n+\n+    /**\n+     * Set the start offset for the current record, only used in task retry. If setOffset keep\n+     * default implementation, it means current ContinuousDataReader can't support task level retry.\n+     *\n+     * @param offset last offset before task retry.\n+     */\n+    default void setOffset(PartitionOffset offset) {",
    "line": 11
  }],
  "prId": 20675
}]