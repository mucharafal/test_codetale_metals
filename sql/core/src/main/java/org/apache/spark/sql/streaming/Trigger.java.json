[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "2.3.0?",
    "commit": "b4f79762c083735011bf98250c39c263876c8cc8",
    "createdAt": "2017-12-15T05:04:48Z",
    "diffHunk": "@@ -95,4 +96,57 @@ public static Trigger ProcessingTime(String interval) {\n   public static Trigger Once() {\n     return OneTimeTrigger$.MODULE$;\n   }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * @since 2.3.0\n+   */\n+  public static Trigger Continuous(long intervalMs) {\n+    return ContinuousTrigger.apply(intervalMs);\n+  }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    import java.util.concurrent.TimeUnit\n+   *    df.writeStream.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+   * }}}\n+   *\n+   * @since 2.3.0\n+   */\n+  public static Trigger Continuous(long interval, TimeUnit timeUnit) {\n+    return ContinuousTrigger.create(interval, timeUnit);\n+  }\n+\n+  /**\n+   * (Scala-friendly)\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    import scala.concurrent.duration._\n+   *    df.writeStream.trigger(Trigger.Continuous(10.seconds))\n+   * }}}\n+   * @since 2.2.0"
  }],
  "prId": 19984
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "2.3.0?",
    "commit": "b4f79762c083735011bf98250c39c263876c8cc8",
    "createdAt": "2017-12-15T05:04:57Z",
    "diffHunk": "@@ -95,4 +96,57 @@ public static Trigger ProcessingTime(String interval) {\n   public static Trigger Once() {\n     return OneTimeTrigger$.MODULE$;\n   }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * @since 2.3.0\n+   */\n+  public static Trigger Continuous(long intervalMs) {\n+    return ContinuousTrigger.apply(intervalMs);\n+  }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    import java.util.concurrent.TimeUnit\n+   *    df.writeStream.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))\n+   * }}}\n+   *\n+   * @since 2.3.0\n+   */\n+  public static Trigger Continuous(long interval, TimeUnit timeUnit) {\n+    return ContinuousTrigger.create(interval, timeUnit);\n+  }\n+\n+  /**\n+   * (Scala-friendly)\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    import scala.concurrent.duration._\n+   *    df.writeStream.trigger(Trigger.Continuous(10.seconds))\n+   * }}}\n+   * @since 2.2.0\n+   */\n+  public static Trigger Continuous(Duration interval) {\n+    return ContinuousTrigger.apply(interval);\n+  }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    df.writeStream.trigger(Trigger.Continuous(\"10 seconds\"))\n+   * }}}\n+   * @since 2.2.0"
  }],
  "prId": 19984
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "`Trigger.Continuous(10, TimeUnit.SECONDS)` instead of `ProcessingTime.create(10, TimeUnit.SECONDS)`?",
    "commit": "b4f79762c083735011bf98250c39c263876c8cc8",
    "createdAt": "2017-12-15T07:09:35Z",
    "diffHunk": "@@ -95,4 +96,57 @@ public static Trigger ProcessingTime(String interval) {\n   public static Trigger Once() {\n     return OneTimeTrigger$.MODULE$;\n   }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * @since 2.3.0\n+   */\n+  public static Trigger Continuous(long intervalMs) {\n+    return ContinuousTrigger.apply(intervalMs);\n+  }\n+\n+  /**\n+   * A trigger that continuously processes streaming data, asynchronously checkpointing at\n+   * the specified interval.\n+   *\n+   * {{{\n+   *    import java.util.concurrent.TimeUnit\n+   *    df.writeStream.trigger(ProcessingTime.create(10, TimeUnit.SECONDS))"
  }],
  "prId": 19984
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: move this below `import org.apache.spark.annotation.InterfaceStability;`",
    "commit": "b4f79762c083735011bf98250c39c263876c8cc8",
    "createdAt": "2017-12-21T21:25:53Z",
    "diffHunk": "@@ -19,6 +19,7 @@\n \n import java.util.concurrent.TimeUnit;\n \n+import org.apache.spark.sql.execution.streaming.continuous.ContinuousTrigger;"
  }],
  "prId": 19984
}]