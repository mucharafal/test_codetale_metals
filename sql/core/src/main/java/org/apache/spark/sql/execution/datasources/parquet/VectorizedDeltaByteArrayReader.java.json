[{
  "comments": [{
    "author": {
      "login": "attilapiros"
    },
    "body": "Nit: missing empty line.",
    "commit": "35fc3029de19bbd7b5326b1d962cc29af8be7cbd",
    "createdAt": "2019-03-26T13:17:20Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.parquet;",
    "line": 17
  }],
  "prId": 23988
}, {
  "comments": [{
    "author": {
      "login": "attilapiros"
    },
    "body": "I am a bit uncertain here but I have tried `binary.getBytes()` and it worked. \r\nI know currently the buffer is backed by a byte array. \r\n\r\nSo my questions:\r\n- Can we use `binary.getBytes()` for both cases?\r\n- What would be its disadvantages?  ",
    "commit": "35fc3029de19bbd7b5326b1d962cc29af8be7cbd",
    "createdAt": "2019-03-26T14:30:58Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.parquet;\n+\n+import org.apache.parquet.bytes.ByteBufferInputStream;\n+import org.apache.parquet.column.values.ValuesReader;\n+import org.apache.parquet.column.values.deltastrings.DeltaByteArrayReader;\n+import org.apache.parquet.io.api.Binary;\n+import org.apache.spark.sql.execution.vectorized.WritableColumnVector;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * An implementation of the Parquet DELTA_BYTE_ARRAY decoder that supports the vectorized interface.\n+ */\n+public class VectorizedDeltaByteArrayReader extends ValuesReader implements VectorizedValuesReader {\n+  private final DeltaByteArrayReader deltaByteArrayReader = new DeltaByteArrayReader();\n+\n+  @Override\n+  public void initFromPage(int valueCount, ByteBufferInputStream in) throws IOException {\n+    deltaByteArrayReader.initFromPage(valueCount, in);\n+  }\n+\n+  @Override\n+  public void skip() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public byte readByte() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Binary readBinary(int len) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readBooleans(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readBytes(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readIntegers(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readLongs(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readFloats(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readDoubles(int total, WritableColumnVector c, int rowId) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void readBinary(int total, WritableColumnVector c, int rowId) {\n+    for (int i = 0; i < total; i++) {\n+      Binary binary = deltaByteArrayReader.readBytes();\n+      ByteBuffer buffer = binary.toByteBuffer();\n+      if (buffer.hasArray()) {",
    "line": 89
  }],
  "prId": 23988
}]