[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "With this API, the implementation can return None if `epochId` is duplicated. How can we achieve this with the new `StreamWriteSupport`?",
    "commit": "b43faa08932c909f11f27e28dbcea8c2ed7eb3ef",
    "createdAt": "2018-01-24T12:25:30Z",
    "diffHunk": "@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.sources.v2.streaming;\n-\n-import java.util.Optional;\n-\n-import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.execution.streaming.BaseStreamingSink;\n-import org.apache.spark.sql.sources.v2.DataSourceV2;\n-import org.apache.spark.sql.sources.v2.DataSourceV2Options;\n-import org.apache.spark.sql.sources.v2.writer.DataSourceV2Writer;\n-import org.apache.spark.sql.streaming.OutputMode;\n-import org.apache.spark.sql.types.StructType;\n-\n-/**\n- * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide data writing ability and save the data from a microbatch to the data source.\n- */\n-@InterfaceStability.Evolving\n-public interface MicroBatchWriteSupport extends BaseStreamingSink {\n-\n-  /**\n-   * Creates an optional {@link DataSourceV2Writer} to save the data to this data source. Data\n-   * sources can return None if there is no writing needed to be done.\n-   *\n-   * @param queryId A unique string for the writing query. It's possible that there are many writing\n-   *                queries running at the same time, and the returned {@link DataSourceV2Writer}\n-   *                can use this id to distinguish itself from others.\n-   * @param epochId The unique numeric ID of the batch within this writing query. This is an\n-   *                incrementing counter representing a consistent set of data; the same batch may\n-   *                be started multiple times in failure recovery scenarios, but it will always\n-   *                contain the same records.\n-   * @param schema the schema of the data to be written.\n-   * @param mode the output mode which determines what successive batch output means to this\n-   *             sink, please refer to {@link OutputMode} for more details.\n-   * @param options the options for the returned data source writer, which is an immutable\n-   *                case-insensitive string-to-string map.\n-   */\n-  Optional<DataSourceV2Writer> createMicroBatchWriter(",
    "line": 54
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "The writer can drop the duplicate epoch on commit. This is of course less efficient, but the scenario only happens in the rare case where the driver fails between running the writer and dumping to the commit log, so I think that's fine. (The writer will have to implement the drop-on-commit path either way.)",
    "commit": "b43faa08932c909f11f27e28dbcea8c2ed7eb3ef",
    "createdAt": "2018-01-24T17:59:34Z",
    "diffHunk": "@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.sources.v2.streaming;\n-\n-import java.util.Optional;\n-\n-import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.execution.streaming.BaseStreamingSink;\n-import org.apache.spark.sql.sources.v2.DataSourceV2;\n-import org.apache.spark.sql.sources.v2.DataSourceV2Options;\n-import org.apache.spark.sql.sources.v2.writer.DataSourceV2Writer;\n-import org.apache.spark.sql.streaming.OutputMode;\n-import org.apache.spark.sql.types.StructType;\n-\n-/**\n- * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide data writing ability and save the data from a microbatch to the data source.\n- */\n-@InterfaceStability.Evolving\n-public interface MicroBatchWriteSupport extends BaseStreamingSink {\n-\n-  /**\n-   * Creates an optional {@link DataSourceV2Writer} to save the data to this data source. Data\n-   * sources can return None if there is no writing needed to be done.\n-   *\n-   * @param queryId A unique string for the writing query. It's possible that there are many writing\n-   *                queries running at the same time, and the returned {@link DataSourceV2Writer}\n-   *                can use this id to distinguish itself from others.\n-   * @param epochId The unique numeric ID of the batch within this writing query. This is an\n-   *                incrementing counter representing a consistent set of data; the same batch may\n-   *                be started multiple times in failure recovery scenarios, but it will always\n-   *                contain the same records.\n-   * @param schema the schema of the data to be written.\n-   * @param mode the output mode which determines what successive batch output means to this\n-   *             sink, please refer to {@link OutputMode} for more details.\n-   * @param options the options for the returned data source writer, which is an immutable\n-   *                case-insensitive string-to-string map.\n-   */\n-  Optional<DataSourceV2Writer> createMicroBatchWriter(",
    "line": 54
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "agreed.",
    "commit": "b43faa08932c909f11f27e28dbcea8c2ed7eb3ef",
    "createdAt": "2018-01-25T05:10:02Z",
    "diffHunk": "@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.sources.v2.streaming;\n-\n-import java.util.Optional;\n-\n-import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.execution.streaming.BaseStreamingSink;\n-import org.apache.spark.sql.sources.v2.DataSourceV2;\n-import org.apache.spark.sql.sources.v2.DataSourceV2Options;\n-import org.apache.spark.sql.sources.v2.writer.DataSourceV2Writer;\n-import org.apache.spark.sql.streaming.OutputMode;\n-import org.apache.spark.sql.types.StructType;\n-\n-/**\n- * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide data writing ability and save the data from a microbatch to the data source.\n- */\n-@InterfaceStability.Evolving\n-public interface MicroBatchWriteSupport extends BaseStreamingSink {\n-\n-  /**\n-   * Creates an optional {@link DataSourceV2Writer} to save the data to this data source. Data\n-   * sources can return None if there is no writing needed to be done.\n-   *\n-   * @param queryId A unique string for the writing query. It's possible that there are many writing\n-   *                queries running at the same time, and the returned {@link DataSourceV2Writer}\n-   *                can use this id to distinguish itself from others.\n-   * @param epochId The unique numeric ID of the batch within this writing query. This is an\n-   *                incrementing counter representing a consistent set of data; the same batch may\n-   *                be started multiple times in failure recovery scenarios, but it will always\n-   *                contain the same records.\n-   * @param schema the schema of the data to be written.\n-   * @param mode the output mode which determines what successive batch output means to this\n-   *             sink, please refer to {@link OutputMode} for more details.\n-   * @param options the options for the returned data source writer, which is an immutable\n-   *                case-insensitive string-to-string map.\n-   */\n-  Optional<DataSourceV2Writer> createMicroBatchWriter(",
    "line": 54
  }],
  "prId": 20369
}]