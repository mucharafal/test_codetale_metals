[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's 3.0.0 now",
    "commit": "26a448dea1bad715bbfa6a8b5d0269e9ae12bab9",
    "createdAt": "2019-01-07T14:33:31Z",
    "diffHunk": "@@ -74,4 +71,40 @@\n   public static <T> TypedColumn<T, Long> sumLong(MapFunction<T, Long> f) {\n     return new TypedSumLong<T>(f).toColumnJava();\n   }\n+\n+  /**\n+   * Min aggregate function for floating point (double) type.\n+   *\n+   * @since 2.4.0"
  }],
  "prId": 23304
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`Min` -> `Max`. Actually I will elaborate it more. Please avoid abbreviation like min or max in doc.",
    "commit": "26a448dea1bad715bbfa6a8b5d0269e9ae12bab9",
    "createdAt": "2019-01-14T12:30:58Z",
    "diffHunk": "@@ -74,4 +71,40 @@\n   public static <T> TypedColumn<T, Long> sumLong(MapFunction<T, Long> f) {\n     return new TypedSumLong<T>(f).toColumnJava();\n   }\n+\n+  /**\n+   * Min aggregate function for floating point (double) type.\n+   *\n+   * @since 3.0.0\n+   */\n+  public static <T> TypedColumn<T, Double> min(MapFunction<T, Double> f) {\n+    return new JavaTypedMinDouble<T>(f).toColumn();\n+  }\n+\n+  /**\n+   * Min aggregate function for integral (long, i.e. 64 bit integer) type.\n+   *\n+   * @since 3.0.0\n+   */\n+  public static <T> TypedColumn<T, Long> minLong(MapFunction<T, Long> f) {\n+    return new JavaTypedMinLong<T>(f).toColumn();\n+  }\n+\n+  /**\n+   * Min aggregate function for floating point (double) type."
  }, {
    "author": {
      "login": "10110346"
    },
    "body": "Ok,thanks",
    "commit": "26a448dea1bad715bbfa6a8b5d0269e9ae12bab9",
    "createdAt": "2019-01-15T00:52:56Z",
    "diffHunk": "@@ -74,4 +71,40 @@\n   public static <T> TypedColumn<T, Long> sumLong(MapFunction<T, Long> f) {\n     return new TypedSumLong<T>(f).toColumnJava();\n   }\n+\n+  /**\n+   * Min aggregate function for floating point (double) type.\n+   *\n+   * @since 3.0.0\n+   */\n+  public static <T> TypedColumn<T, Double> min(MapFunction<T, Double> f) {\n+    return new JavaTypedMinDouble<T>(f).toColumn();\n+  }\n+\n+  /**\n+   * Min aggregate function for integral (long, i.e. 64 bit integer) type.\n+   *\n+   * @since 3.0.0\n+   */\n+  public static <T> TypedColumn<T, Long> minLong(MapFunction<T, Long> f) {\n+    return new JavaTypedMinLong<T>(f).toColumn();\n+  }\n+\n+  /**\n+   * Min aggregate function for floating point (double) type."
  }],
  "prId": 23304
}]