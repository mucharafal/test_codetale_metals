[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "If we intend creating a new interface as mix-in, we may not need to create individual interfaces for each DataSourceReader and DataSourceWriter. We could have only one interface and let DataSourceReader and DataSourceWriter add such mix-in interface.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T04:06:53Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.writer.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.writer.DataSourceWriter;\n+\n+/**\n+ * A mix in interface for {@link DataSourceWriter}. Data source writers can implement this",
    "line": 24
  }, {
    "author": {
      "login": "arunmahadevan"
    },
    "body": "The intention was to restrict the mixin so that it can be applied only to `DataSourceReader` and `DataSourceWriter` (similar pattern followed in other mixins) by inheriting the appropriate types. Unfortunately theres no common ancestor for the mixin to inherit from so I had to duplicate the interface. Agree that its not ideal. \r\n\r\nA few options:\r\n\r\n1. Have a common ancestor marker interface (say `DataSourceComponent`) which is the super type of `DataSourceReader` and `DataSourceWriter`. Then we can have a single mixin that is a subtype of that interface. We may encounter similar usages for other mixins in future.\r\n2. The mixin does not inherit anything (neither DataSourceReader nor DataSourceWriter). Here we cannot impose a restriction on the type of classes the mixin can be applied to.\r\n3. Duplicate interfaces (the proposed option in the patch).\r\n\r\nI prefer option 1, but would like to proceed based on the feedback.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T16:38:59Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.writer.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.writer.DataSourceWriter;\n+\n+/**\n+ * A mix in interface for {@link DataSourceWriter}. Data source writers can implement this",
    "line": 24
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "OK got your intention. I think it makes sense. I'm OK with all three options and personally prefer 1 or 2 if the intention is to mix-in, but let's see committers' feedback on this.",
    "commit": "01e8451503e84ad471cd93373d2f2d6eaf43251c",
    "createdAt": "2018-07-30T23:05:31Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.sources.v2.writer.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.CustomMetrics;\n+import org.apache.spark.sql.sources.v2.writer.DataSourceWriter;\n+\n+/**\n+ * A mix in interface for {@link DataSourceWriter}. Data source writers can implement this",
    "line": 24
  }],
  "prId": 21721
}]