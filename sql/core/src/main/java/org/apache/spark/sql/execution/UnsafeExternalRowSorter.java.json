[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "nit: indents ",
    "commit": "5623c7a5a042827bd277853df0dd9e84e8ca1a9c",
    "createdAt": "2019-10-30T23:18:57Z",
    "diffHunk": "@@ -168,39 +167,40 @@ public void cleanupResources() {\n     sorter.cleanupResources();\n   }\n \n-  public Iterator<UnsafeRow> sort() throws IOException {\n+  public Iterator<InternalRow> sort() throws IOException {\n     try {\n       final UnsafeSorterIterator sortedIterator = sorter.getSortedIterator();\n       if (!sortedIterator.hasNext()) {\n         // Since we won't ever call next() on an empty iterator, we need to clean up resources\n         // here in order to prevent memory leaks.\n         cleanupResources();\n       }\n-      return new AbstractIterator<UnsafeRow>() {\n+      return new RowIterator() {\n \n         private final int numFields = schema.length();\n         private UnsafeRow row = new UnsafeRow(numFields);\n \n         @Override\n-        public boolean hasNext() {\n-          return !isReleased && sortedIterator.hasNext();\n-        }\n-\n-        @Override\n-        public UnsafeRow next() {\n+        public boolean advanceNext() {\n           try {\n-            sortedIterator.loadNext();\n-            row.pointTo(\n-              sortedIterator.getBaseObject(),\n-              sortedIterator.getBaseOffset(),\n-              sortedIterator.getRecordLength());\n-            if (!hasNext()) {\n-              UnsafeRow copy = row.copy(); // so that we don't have dangling pointers to freed page\n-              row = null; // so that we don't keep references to the base object\n-              cleanupResources();\n-              return copy;\n+            if (!isReleased && sortedIterator.hasNext()) {\n+              sortedIterator.loadNext();\n+              row.pointTo(\n+                  sortedIterator.getBaseObject(),\n+                  sortedIterator.getBaseOffset(),\n+                  sortedIterator.getRecordLength());",
    "line": 51
  }],
  "prId": 26229
}]