[{
  "comments": [{
    "author": {
      "login": "j-baker"
    },
    "body": "OptionalLong for sizeInBytes? It's not obvious that sizeInBytes is well defined for e.g. JDBC datasources, but row count can generally be easily estimated from the query plan.",
    "commit": "d2c86f4339d59f227bef61b1c97f9770ce1233b9",
    "createdAt": "2017-09-12T08:50:13Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.upward;\n+\n+import java.util.OptionalLong;\n+\n+/**\n+ * An interface to represent statistics for a data source.\n+ */\n+public interface Statistics {\n+  long sizeInBytes();"
  }, {
    "author": {
      "login": "j-baker"
    },
    "body": "like, I get that it's non-optional at the moment, but it's odd that we have a method that the normal implementor will have to replace with\r\n\r\n```\r\npublic long sizeInBytes() {\r\n    return Long.MAX_VALUE;\r\n}\r\n```",
    "commit": "d2c86f4339d59f227bef61b1c97f9770ce1233b9",
    "createdAt": "2017-09-12T09:07:15Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.upward;\n+\n+import java.util.OptionalLong;\n+\n+/**\n+ * An interface to represent statistics for a data source.\n+ */\n+public interface Statistics {\n+  long sizeInBytes();"
  }, {
    "author": {
      "login": "j-baker"
    },
    "body": "and now is a good time to fix it :)",
    "commit": "d2c86f4339d59f227bef61b1c97f9770ce1233b9",
    "createdAt": "2017-09-12T09:09:38Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.upward;\n+\n+import java.util.OptionalLong;\n+\n+/**\n+ * An interface to represent statistics for a data source.\n+ */\n+public interface Statistics {\n+  long sizeInBytes();"
  }],
  "prId": 19136
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "this package name is really confusing. maybe just put all of them in the v2.reader package. There isn't that many classes ... if you are worried about discoverability, use a common interface, or create a top level class and put the interfaces there.",
    "commit": "d2c86f4339d59f227bef61b1c97f9770ce1233b9",
    "createdAt": "2017-09-13T13:48:01Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.upward;"
  }],
  "prId": 19136
}]