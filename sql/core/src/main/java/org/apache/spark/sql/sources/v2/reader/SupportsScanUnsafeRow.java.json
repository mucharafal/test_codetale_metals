[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think we still need this trait.\r\n\r\nIn Spark SQL there is a contract that all operators produce `UnsafeRow`, except some Dataset related operators. We have operators assuming the input rows are `UnsafeRow` and do type cast, e.g. operators which use `GenerateUnsafeRowJoiner`.\r\n\r\nThat is to say, the data source scan has to do an unsafe projection to make sure it produces unsafe rows. This will be a waste if the data source already produces unsafe rows.\r\n\r\nFor file-based data source, we solve this issue by adding a flag `needsUnsafeRowConversion` to decide if we need the unsafe projection or not. Another solution is what @rdblue proposed in the dev list discussion: do `isInstanOf[UnsafeRow]` check for each input row and skip unsafe projection if it's already unsafe row. That may have a performance penalty because of the per-row check.\r\n\r\nSo this trait is still useful, at least for the built-in file-based data sources.",
    "commit": "d1fa32e201e73f281a87d46a3510f0e3082c1d35",
    "createdAt": "2018-04-23T12:46:43Z",
    "diffHunk": "@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.sources.v2.reader;\n-\n-import java.util.List;\n-\n-import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.Row;\n-import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n-\n-/**\n- * A mix-in interface for {@link DataSourceReader}. Data source readers can implement this\n- * interface to output {@link UnsafeRow} directly and avoid the row copy at Spark side.\n- * This is an experimental and unstable interface, as {@link UnsafeRow} is not public and may get\n- * changed in the future Spark versions.\n- */\n-@InterfaceStability.Unstable\n-public interface SupportsScanUnsafeRow extends DataSourceReader {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "The check I was referring to is implemented in generated code. The projection added in `DataSourceV2Strategy` handles the cases where part or all of the incoming row is `UnsafeRow`.",
    "commit": "d1fa32e201e73f281a87d46a3510f0e3082c1d35",
    "createdAt": "2018-05-10T21:29:19Z",
    "diffHunk": "@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.sources.v2.reader;\n-\n-import java.util.List;\n-\n-import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.Row;\n-import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n-\n-/**\n- * A mix-in interface for {@link DataSourceReader}. Data source readers can implement this\n- * interface to output {@link UnsafeRow} directly and avoid the row copy at Spark side.\n- * This is an experimental and unstable interface, as {@link UnsafeRow} is not public and may get\n- * changed in the future Spark versions.\n- */\n-@InterfaceStability.Unstable\n-public interface SupportsScanUnsafeRow extends DataSourceReader {"
  }],
  "prId": 21118
}]