[{
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "Is `datasource` a placeholder here, or would Kafka configs now be e.g. `spark.datasource.kafka.[...]`?",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T23:08:45Z",
    "diffHunk": "@@ -27,10 +27,10 @@\n @InterfaceStability.Evolving\n public interface SessionConfigSupport extends DataSourceV2 {\n \n-    /**\n-     * Key prefix of the session configs to propagate. Spark will extract all session configs that\n-     * starts with `spark.datasource.$keyPrefix`, turn `spark.datasource.$keyPrefix.xxx -&gt; yyy`\n-     * into `xxx -&gt; yyy`, and propagate them to all data source operations in this session.\n-     */\n-    String keyPrefix();\n+  /**\n+   * Key prefix of the session configs to propagate. Spark will extract all session configs that\n+   * starts with `spark.datasource.$keyPrefix`, turn `spark.datasource.$keyPrefix.xxx -&gt; yyy`"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "`datasource` is a string literal here. So kafka source should implement the `keyPrefix` as `kafka`, and then all configs starts with `spark.datasource.kafka` will be propagated to kafka source.\r\n\r\nsee the test: https://github.com/windjammertechnologies/spark/commit/9c289a5cb46e00cd60db4794357f070dfdf80691#diff-e6ed4ac7b1ceb2f3a25e92b031aaecbbR24",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-10T02:53:55Z",
    "diffHunk": "@@ -27,10 +27,10 @@\n @InterfaceStability.Evolving\n public interface SessionConfigSupport extends DataSourceV2 {\n \n-    /**\n-     * Key prefix of the session configs to propagate. Spark will extract all session configs that\n-     * starts with `spark.datasource.$keyPrefix`, turn `spark.datasource.$keyPrefix.xxx -&gt; yyy`\n-     * into `xxx -&gt; yyy`, and propagate them to all data source operations in this session.\n-     */\n-    String keyPrefix();\n+  /**\n+   * Key prefix of the session configs to propagate. Spark will extract all session configs that\n+   * starts with `spark.datasource.$keyPrefix`, turn `spark.datasource.$keyPrefix.xxx -&gt; yyy`"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "@cloud-fan, in the `TableCatalog` addition, #21306, I added this to configure catalogs. That way, a catalog is how you add configuration for all tables. Anonymous tables from the `ReadSupportProvider` classes don't really need this. I think we should remove the session config support in favor of using the catalog initialization config.\r\n\r\nI also add a CaseInsensitiveStringMap for passing config that we should move to instead of DataSourceOptions. There are two main differences:\r\n1. DataSourceOptions has methods to retrieve paths, table name, etc. that aren't needed when we use catalogs. Named tables and path-based tables should use catalogs and not pass these through options. Anonymous tables don't need standard ways to pass this information.\r\n2. It is more clear what the class does: it provides a string to string mapping with case insensitive keys. It isn't as obvious what DataSourceOptions does.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T17:52:27Z",
    "diffHunk": "@@ -27,10 +27,10 @@\n @InterfaceStability.Evolving\n public interface SessionConfigSupport extends DataSourceV2 {",
    "line": 2
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about we keep `DataSourceOptions` a pure string-to-string map and move these `getPath`, `getTableName` methods to a wrapper class? Anyway we can do it in a follower up.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-10T15:40:33Z",
    "diffHunk": "@@ -27,10 +27,10 @@\n @InterfaceStability.Evolving\n public interface SessionConfigSupport extends DataSourceV2 {",
    "line": 2
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "If we are using `TableCatalog` and an equivalent `PathCatalog` then there is no need to pass these in options anyway. The table or path is passed directly to the table created by the catalog. It's fine for now, unless you want to get #21306 first and then update this to rely on the string-to-string map.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-13T17:50:38Z",
    "diffHunk": "@@ -27,10 +27,10 @@\n @InterfaceStability.Evolving\n public interface SessionConfigSupport extends DataSourceV2 {",
    "line": 2
  }],
  "prId": 22009
}]