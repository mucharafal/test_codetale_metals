[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Another choice is to let `ScanConfig` carry the options. But `ScanConfig` is an interface and doing this will put more work at user side, so I decided to pass the options again here. Feedbacks are welcome!",
    "commit": "9f63721677cea627f43f7d536bb32b588cee30a3",
    "createdAt": "2018-10-18T14:52:56Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.reader.BatchScan;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * A mix-in interface for {@link Table}. Table implementations can mixin this interface to\n+ * provide data reading ability for batch processing.\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsBatchRead extends Table {\n+\n+  /**\n+   * Creates a {@link BatchScan} instance with a {@link ScanConfig} and user-specified options.\n+   *\n+   * @param config a {@link ScanConfig} which may contains operator pushdown information.\n+   * @param options the user-specified options, which is same as the one used to create the\n+   *                {@link ScanConfigBuilder} that built the given {@link ScanConfig}.",
    "line": 37
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think that options should be passed twice.",
    "commit": "9f63721677cea627f43f7d536bb32b588cee30a3",
    "createdAt": "2018-10-19T21:20:22Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.reader.BatchScan;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * A mix-in interface for {@link Table}. Table implementations can mixin this interface to\n+ * provide data reading ability for batch processing.\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsBatchRead extends Table {\n+\n+  /**\n+   * Creates a {@link BatchScan} instance with a {@link ScanConfig} and user-specified options.\n+   *\n+   * @param config a {@link ScanConfig} which may contains operator pushdown information.\n+   * @param options the user-specified options, which is same as the one used to create the\n+   *                {@link ScanConfigBuilder} that built the given {@link ScanConfig}.",
    "line": 37
  }],
  "prId": 22547
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Is there a benefit to having both `ScanConfig` and `BatchScan` objects? Why not have `ScanConfigBuilder` return a `BatchScan` directly by calling `buildBatch`?",
    "commit": "9f63721677cea627f43f7d536bb32b588cee30a3",
    "createdAt": "2018-10-19T21:43:30Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.sources.v2.reader.BatchScan;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * A mix-in interface for {@link Table}. Table implementations can mixin this interface to\n+ * provide data reading ability for batch processing.\n+ */\n+@InterfaceStability.Evolving\n+public interface SupportsBatchRead extends Table {\n+\n+  /**\n+   * Creates a {@link BatchScan} instance with a {@link ScanConfig} and user-specified options.\n+   *\n+   * @param config a {@link ScanConfig} which may contains operator pushdown information.\n+   * @param options the user-specified options, which is same as the one used to create the\n+   *                {@link ScanConfigBuilder} that built the given {@link ScanConfig}.\n+   */\n+  BatchScan createBatchScan(ScanConfig config, DataSourceOptions options);",
    "line": 39
  }],
  "prId": 22547
}]