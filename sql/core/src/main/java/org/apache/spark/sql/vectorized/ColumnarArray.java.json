[{
  "comments": [{
    "author": {
      "login": "xy2953396112"
    },
    "body": "Here, I think that ColumnarArray.cope() should return a ColumnarArray. Or it should be renamed copyForGenericArrayData.\r\n\r\n\r\n",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-17T06:58:17Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "Itâ€™s overrided method and I think  It's not a good idea to change the signature of the method.",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-17T23:52:44Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Why do we need to support this copy() here? Is this useful for something?",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T11:41:29Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "I just found this [improvement](https://issues.apache.org/jira/browse/SPARK-25713?jql=project%20%3D%20SPARK%20AND%20issuetype%20%3D%20Improvement%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20assignee%20in%20(EMPTY)%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC)  ",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T11:46:51Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "So, I just want to know why we need the improvement.",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T11:57:50Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "previously this method throw 'UnsupportedOperationException' and I guess that it's not correct behaving of override method. ",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T12:22:07Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "The only problem I see with this is that it doesn't return a ColumnarArray. I'm not sure if that's possible as ColumnVector doesn't implement a clone() or copy() method, and maybe I'm missing reasons that's not sensible. So this might be intentional. I don't see any rationale from whoever opened the JIRA",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T14:04:53Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "@srowen, @maropu, does it mean that I need to close pull request?",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T16:05:39Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "You could ping the people who wrote this code, maybe @cloud-fan .. if there's no affirmative reply in some time, yeah I'd leave this as-is.",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-21T16:07:35Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think it's no harm to implement copy, as we also did it for `ColumnarRow.copy`. But we can do better here: if the data type is primitive type like int, we can `UnsafeArrayData.fromPrimitiveArray(toIntArray())`",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T04:50:44Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "@cloud-fan, I have updated by your suggestion. ",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T06:29:33Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think this is a public API ... should be okay to fix",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T09:00:33Z",
    "diffHunk": "@@ -46,7 +47,33 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {",
    "line": 13
  }],
  "prId": 23569
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "since we want to implement copy, let's complete it for all the types. We can create a `GenericArrayData` to copy data of non-primitive type, like what you did previously.",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T12:36:37Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "@cloud-fan, Are you talking about the handling of  `StringType`, `DecimalType` and `TimestampType`?",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T12:50:55Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "yes, we can exclude complex type(struct, array, etc.).",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T13:41:22Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "@cloud-fan, Will it be correct for `StringType`? or I'm not right?\r\n```\r\n    if (dt instanceof StringType) {\r\n      GenericArrayData arrayData = new GenericArrayData(length);\r\n      for (int i = 0; i < numElements(); i++) {\r\n        arrayData.update(i, getUTF8String(i));\r\n      }\r\n      \r\n      return arrayData;\r\n    }\r\n```",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-22T13:50:37Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Actually there is a simple way\r\n```\r\nreturn new GenericArrayData(toArray(dt))\r\n```",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-23T02:22:39Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "@cloud-fan, `toArray` has two parameters  ",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-23T08:04:42Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "ayudovin"
    },
    "body": "maybe we can replace the body of method `clone` to `return new GenericArrayData(toArrayData(dt))`",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-23T08:11:00Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah sorry, not `toArray`, we can use `toObjectArray`, which only need a data type.",
    "commit": "6d684d892f50bc132ea58fab2fa9f486d8e3e5d3",
    "createdAt": "2019-01-23T08:12:48Z",
    "diffHunk": "@@ -46,7 +48,25 @@ public int numElements() {\n \n   @Override\n   public ArrayData copy() {\n-    throw new UnsupportedOperationException();\n+    DataType dt = data.dataType();\n+\n+    if (dt instanceof BooleanType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toBooleanArray());\n+    } else if (dt instanceof ByteType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toByteArray());\n+    } else if (dt instanceof ShortType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toShortArray());\n+    } else if (dt instanceof IntegerType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toIntArray());\n+    } else if (dt instanceof LongType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toLongArray());\n+    } else if (dt instanceof FloatType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toFloatArray());\n+    } else if (dt instanceof DoubleType) {\n+      return UnsafeArrayData.fromPrimitiveArray(toDoubleArray());\n+    } else {\n+      throw new RuntimeException(\"Not implemented. \" + dt);"
  }],
  "prId": 23569
}]