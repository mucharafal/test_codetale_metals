[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This class will be used to create the `WriteConfig` for idempotent overwrite operations. This would be triggered by an overwrite like this (the API could be different).\r\n\r\n```\r\ndf.writeTo(\"table\").overwrite($\"day\" === \"2018-08-22\")\r\n```\r\n\r\nThat would produce a `OverwriteData(source, deleteFilter, query)` logical plan, which would result in the exec node calling this to create the write config.",
    "commit": "847300f76391c5e171e3f54b21bf6f2efc177f0e",
    "createdAt": "2018-08-22T21:42:04Z",
    "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.writer;\n+\n+import org.apache.spark.sql.catalyst.plans.logical.Filter;\n+import org.apache.spark.sql.sources.v2.DataSourceOptions;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * An interface that adds support to {@link BatchWriteSupport} for a replace data operation that\n+ * replaces a subset of the output table with the output of a write operation. The subset removed is\n+ * determined by a set of filter expressions.\n+ * <p>\n+ * Data source implementations can implement this interface in addition to {@link BatchWriteSupport}\n+ * to support idempotent write operations that replace data matched by a set of delete filters with\n+ * the result of the write operation.\n+ * <p>\n+ * This is used to build idempotent writes. For example, a query that produces a daily summary\n+ * may be run several times as new data arrives. Each run should replace the output of the last\n+ * run for a particular day in the partitioned output table. Such a job would write using this\n+ * WriteSupport and would pass a filter matching the previous job's output, like\n+ * <code>$\"day\" === '2018-08-22'</code>, to remove that data and commit the replacement data at\n+ * the same time.\n+ */\n+public interface BatchOverwriteSupport extends BatchWriteSupport {",
    "line": 40
  }],
  "prId": 22190
}]