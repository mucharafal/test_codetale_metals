[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "why do we need this? as in, what data source would want to write directly unsaferow out? It's some internal format.\r\n",
    "commit": "7eeb3b0bd15644d3facddefcdd2a218316573953",
    "createdAt": "2017-09-20T07:01:29Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.writer;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2Writer}. Data source writers can implement this\n+ * interface to write {@link UnsafeRow} directly and avoid the row copy at Spark side.\n+ * This is an experimental and unstable interface, as {@link UnsafeRow} is not public and may get\n+ * changed in the future Spark versions.\n+ */\n+\n+@InterfaceStability.Evolving\n+@Experimental\n+@InterfaceStability.Unstable\n+public interface SupportsWriteUnsafeRow extends DataSourceV2Writer {"
  }],
  "prId": 19269
}]