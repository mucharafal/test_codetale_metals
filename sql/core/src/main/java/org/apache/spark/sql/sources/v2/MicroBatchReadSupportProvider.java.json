[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "See comment on the continuous version above.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:24:26Z",
    "diffHunk": "@@ -20,23 +20,29 @@\n import java.util.Optional;\n \n import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.sources.v2.reader.streaming.MicroBatchReader;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.streaming.MicroBatchReadSupport;\n+import org.apache.spark.sql.sources.v2.reader.streaming.Offset;\n import org.apache.spark.sql.types.StructType;\n \n /**\n  * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide streaming micro-batch data reading ability.\n+ * provide data reading ability for stream processing(micro-batch mode)."
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Nit: whitespace change that doesn't fit with typical Java style of 2 indent levels for method params.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:26:26Z",
    "diffHunk": "@@ -45,8 +51,8 @@\n    * @param options the options for the returned data source reader, which is an immutable\n    *                case-insensitive string-to-string map.\n    */\n-  MicroBatchReader createMicroBatchReader(\n-      Optional<StructType> schema,\n-      String checkpointLocation,\n-      DataSourceOptions options);\n+  MicroBatchReadSupport createMicroBatchReadSupport(\n+    Optional<StructType> schema,"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "nit: same comment as in continuous class",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T15:54:22Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.datasources.v2.DataSourceV2Utils;\n+import org.apache.spark.sql.sources.v2.reader.streaming.MicroBatchReadSupport;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n+ * provide data reading ability for micro-batch stream processing.\n+ *\n+ * This interface is used when end users want to use a data source implementation directly, e.g.\n+ * {@code SparkSession.readStream.format(...).option(...).load()}.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupportProvider extends DataSourceV2 {\n+\n+  /**\n+   * Creates a {@link MicroBatchReadSupport} to scan the data from this streaming data source.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted."
  }],
  "prId": 22009
}]