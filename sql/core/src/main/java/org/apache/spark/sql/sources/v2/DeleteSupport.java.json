[{
  "comments": [{
    "author": {
      "login": "bersprockets"
    },
    "body": "Does putting the delete method here (as opposed to say, in DataDeleters on some other thing parallel to to the DataWriters) imply that this is a driver-side operation only? I understand the use case is deleting partitions which is usually only a file system operation, but will that always be the case?",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-15T18:33:27Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not\n+   * supported because one of the filter expressions is not supported. Implementations should throw\n+   * this exception with a clear error message that identifies the unsupported expression.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws UnsupportedOperationException If one or more filter expressions is not supported\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Expression[] filters);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Yes, this is a driver-side operation. That's why the source can reject the delete. Anything that requires a parallel operation should really be implemented as read, filter, and replace data.",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-21T22:21:11Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not\n+   * supported because one of the filter expressions is not supported. Implementations should throw\n+   * this exception with a clear error message that identifies the unsupported expression.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws UnsupportedOperationException If one or more filter expressions is not supported\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Expression[] filters);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Do you think it would be more clear if this were explicitly a driver-side operation?",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-24T20:40:25Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not\n+   * supported because one of the filter expressions is not supported. Implementations should throw\n+   * this exception with a clear error message that identifies the unsupported expression.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws UnsupportedOperationException If one or more filter expressions is not supported\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Expression[] filters);"
  }, {
    "author": {
      "login": "bersprockets"
    },
    "body": ">Do you think it would be more clear if this were explicitly a driver-side operation?\r\n\r\nPossibly. Maybe in the big data world this is already obvious. To me, it looks like a general purpose delete. Maybe deletePartitions? (I am bad at naming things, however).",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-25T17:38:10Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not\n+   * supported because one of the filter expressions is not supported. Implementations should throw\n+   * this exception with a clear error message that identifies the unsupported expression.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws UnsupportedOperationException If one or more filter expressions is not supported\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Expression[] filters);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "There aren't necessarily partitions in these data sources, so I wouldn't add partitions to the method name. I think we can make this more clear with better docs though.",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-25T22:22:06Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not\n+   * supported because one of the filter expressions is not supported. Implementations should throw\n+   * this exception with a clear error message that identifies the unsupported expression.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws UnsupportedOperationException If one or more filter expressions is not supported\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Expression[] filters);"
  }],
  "prId": 21308
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "nit: is this a duplicate of the above paragraph",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-24T19:11:01Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "No, these are distinct.\r\n\r\n`UnsupportedOperationException` indicates that the source doesn't understand a filter. For example, it could be `date(ts) = '2018-05-13'` and the source doesn't support the conversion from timestamp to date.\r\n\r\n`IllegalArgumentException` is thrown when the expression is understood by the source, but the work required to perform the delete is not supported. For example, if you have data partitioned by `hour(ts)` and the delete expression is `ts > '2018-05-13T00:05:00' and ts < '2018-05-13T00:10:00'`. Deleting a 5-minute window when data is partitioned by hour probably isn't possible without rewriting data files, so the source can reject it.",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-05-24T20:00:52Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "After updating this to use Filter, the UnsupportedOperationException is no longer needed, so I removed it. That should also cut down on the confusion here.",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-08-15T19:33:11Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.catalyst.expressions.Expression;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   * <p>\n+   * Implementations may throw {@link UnsupportedOperationException} if the delete operation is not"
  }],
  "prId": 21308
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This seems different from what we discussed in the dev list about the new abstraction. I expect to see\r\n```\r\nWrite newDeleteWrite(Filter[] filters);\r\n```\r\n\r\nDo I miss something?",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-09-10T13:53:02Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.sources.Filter;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Filter[] filters);",
    "line": 45
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Maybe it's a little unclear: this delete is not a write. It is a driver-side operation using table metadata, like dropping matching partitions in a Hive table or dropping matching files in an Iceberg table. That way, there are no tasks and we don't need to use the commit protocol.\r\n\r\nIf we want to filter data files, the overwrite API I've proposed is the right way to do it. Spark could read, filter the rows, and replace all of the files that were read.\r\n\r\nIf there are files that have both rows that should be removed and rows that should be kept, the source should throw IllegalArgumentException to reject the delete.",
    "commit": "e32e6c4a4c3df527a5fddb8b694b0ed303e16fc4",
    "createdAt": "2018-09-10T16:13:16Z",
    "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.sql.sources.Filter;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2} delete support. Data sources can implement this\n+ * interface to provide the ability to delete data from tables that matches filter expressions.\n+ * <p>\n+ * Data sources must implement this interface to support logical operations that combine writing\n+ * data with deleting data, like overwriting partitions.\n+ */\n+public interface DeleteSupport extends DataSourceV2 {\n+  /**\n+   * Delete data from a data source table that matches filter expressions.\n+   * <p>\n+   * Rows are deleted from the data source iff all of the filter expressions match. That is, the\n+   * expressions must be interpreted as a set of filters that are ANDed together.\n+   * <p>\n+   * Implementations may reject a delete operation if the delete isn't possible without significant\n+   * effort. For example, partitioned data sources may reject deletes that do not filter by\n+   * partition columns because the filter may require rewriting files without deleted records.\n+   * To reject a delete implementations should throw {@link IllegalArgumentException} with a clear\n+   * error message that identifies which expression was rejected.\n+   *\n+   * @param filters filter expressions, used to select rows to delete when all expressions match\n+   * @throws IllegalArgumentException If the delete is rejected due to required effort\n+   */\n+  void deleteWhere(Filter[] filters);",
    "line": 45
  }],
  "prId": 21308
}]