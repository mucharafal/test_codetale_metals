[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why doesn't this accept a `ScanConfig`? Aren't changes to the source only relevant if they affect a scan?\r\n\r\ncc @jose-torres.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T20:10:05Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}\n+   * instance.\n+   */\n+  default boolean needsReconfiguration() {"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "The motivation for this method is things like Kafka source repartitioning. If a topic gets partitions added to it (or a subscription pattern gets topics added to it), Spark needs to schedule a new job which will scan the new partitions/topics, even though the Spark-side scan hasn't changed.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T20:15:52Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}\n+   * instance.\n+   */\n+  default boolean needsReconfiguration() {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I think of a ReadSupport as something that can be read or scanned and ContinuousReadSupport as a stream that can be read. In that abstraction, the \"something that can be read\" probably isn't the right place to track whether a particular scan requires reconfiguration: a *scan* requires reconfiguration if that scan is based on partitions that are out of date.\r\n\r\nTo me, that indicates that a Kafka `ScanConfig` should keep track of kafka partitions and then `needsReconfiguration` should return true if the Kafka topic now has a different set of partitions than the ones in the `ScanConfig`. Does that make sense?\r\n\r\nI think it would also be more consistent in the API to add `ScanConfig` here.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T21:23:13Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}\n+   * instance.\n+   */\n+  default boolean needsReconfiguration() {"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "Makes sense to me.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T21:28:41Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}\n+   * instance.\n+   */\n+  default boolean needsReconfiguration() {"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Shouldn't this be `createContinuousReaderFactory`? If the method is the same across `BatchReadSupport`, `MicroBatchReadSupport`, and `ContinuousReadSupport`, then implementing both batch and continuous would require a factory that always returns both continuous and batch readers. Separate methods would allow each implementation to use a base class and add continuous or micro-batch support to different classes.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T20:21:00Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This would also match the write side: this commit adds `createBatchWriterFactory`.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T20:27:36Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I did it in many places, to allow a data source to implement both batch and streaming without conflicts. But here is a little different, `ContinuousPartitionReaderFactory` is a child of `PartitionReaderFactory`, which means a data source can return `ContinuousPartitionReaderFactory` for both batch and streaming.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T02:21:02Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "That's the problem. It forces those to be the same instance. With two separate methods I could use the same class or I could choose not to. I think this should make separate calls depending on the read support.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T15:48:58Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * continuous mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  @Override\n+  ContinuousPartitionReaderFactory createReaderFactory(ScanConfig config);"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "@jose-torres  with the new abstraction of `ScanConfig`, do we still need to create a new `ContinuousReadSupport` for reconfiguration?",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T18:45:39Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface that defines how to scan the data from data source for continuous streaming\n+ * processing.\n+ *\n+ * The execution engine will create an instance of this interface at the start of a streaming query,\n+ * then call {@link #newScanConfigBuilder(Offset)} and create an instance of {@link ScanConfig} for\n+ * the duration of the streaming query or until {@link #needsReconfiguration(ScanConfig)} is true.\n+ * The {@link ScanConfig} will be used to create input partitions and reader factory to process data\n+ * for its duration. At the end {@link #stop()} will be called when the streaming execution is\n+ * completed. Note that a single query may have multiple executions due to restart or failure\n+ * recovery.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * to do operators pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ContinuousPartitionReaderFactory createContinuousReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}",
    "line": 71
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "No, I think we just need a new `ScanConfig`. (But this PR is already very large and that will require execution layer changes, so I'd suggest filing a followup for that.)",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T17:40:46Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface that defines how to scan the data from data source for continuous streaming\n+ * processing.\n+ *\n+ * The execution engine will create an instance of this interface at the start of a streaming query,\n+ * then call {@link #newScanConfigBuilder(Offset)} and create an instance of {@link ScanConfig} for\n+ * the duration of the streaming query or until {@link #needsReconfiguration(ScanConfig)} is true.\n+ * The {@link ScanConfig} will be used to create input partitions and reader factory to process data\n+ * for its duration. At the end {@link #stop()} will be called when the streaming execution is\n+ * completed. Note that a single query may have multiple executions due to restart or failure\n+ * recovery.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * to do operators pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ContinuousPartitionReaderFactory createContinuousReaderFactory(ScanConfig config);\n+\n+  /**\n+   * Merge partitioned offsets coming from {@link ContinuousPartitionReader} instances\n+   * for each partition to a single global offset.\n+   */\n+  Offset mergeOffsets(PartitionOffset[] offsets);\n+\n+  /**\n+   * The execution engine will call this method in every epoch to determine if new input\n+   * partitions need to be generated, which may be required if for example the underlying\n+   * source system has had partitions added or removed.\n+   *\n+   * If true, the query will be shut down and restarted with a new {@link ContinuousReadSupport}",
    "line": 71
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Nit: There are still several cases of this javadoc style problem.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T18:46:07Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.InputPartition;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface that defines how to scan the data from data source for continuous streaming\n+ * processing.\n+ *\n+ * The execution engine will create an instance of this interface at the start of a streaming query,\n+ * then call {@link #newScanConfigBuilder(Offset)} and create an instance of {@link ScanConfig} for\n+ * the duration of the streaming query or until {@link #needsReconfiguration(ScanConfig)} is true.\n+ * The {@link ScanConfig} will be used to create input partitions and reader factory to process data\n+ * for its duration. At the end {@link #stop()} will be called when the streaming execution is\n+ * completed. Note that a single query may have multiple executions due to restart or failure\n+ * recovery.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * to do operators pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link ContinuousReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start);\n+\n+  /**\n+   * Returns a factory to produce {@link ContinuousPartitionReader}s for {@link InputPartition}s."
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "I would also add this documentation on the relevant methods. So getContinuousReadSupport and getMicroBatchReadSupport would say something like \"Spark will call this method at the beginning of each streaming query to get a ReadSupport\", newScanConfigBuilder would say something like \"Spark will get a ScanConfig once for each data scanning job\".",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-21T14:58:03Z",
    "diffHunk": "@@ -24,16 +24,17 @@\n import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n \n /**\n- * An interface that defines how to scan the data from data source for continuous streaming\n+ * An interface that defines how to load the data from data source for continuous streaming\n  * processing.\n  *\n- * The execution engine will create an instance of this interface at the start of a streaming query,\n- * then call {@link #newScanConfigBuilder(Offset)} and create an instance of {@link ScanConfig} for\n- * the duration of the streaming query or until {@link #needsReconfiguration(ScanConfig)} is true.\n- * The {@link ScanConfig} will be used to create input partitions and reader factory to process data\n- * for its duration. At the end {@link #stop()} will be called when the streaming execution is\n- * completed. Note that a single query may have multiple executions due to restart or failure\n- * recovery.\n+ * The execution engine will get an instance of this interface from a data source provider\n+ * (e.g. {@link org.apache.spark.sql.sources.v2.ContinuousReadSupportProvider}) at the start of a\n+ * streaming query, then call {@link #newScanConfigBuilder(Offset)} to create an instance of\n+ * {@link ScanConfig} for the duration of the streaming query or until\n+ * {@link #needsReconfiguration(ScanConfig)} is true. The {@link ScanConfig} will be used to create\n+ * input partitions and reader factory to scan data for its duration. At the end {@link #stop()}\n+ * will be called when the streaming execution is completed. Note that a single query may have\n+ * multiple executions due to restart or failure recovery."
  }],
  "prId": 22009
}]