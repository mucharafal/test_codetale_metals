[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think that the data source should be responsible for providing a SparkSession. Spark has a session and configures the data source.\r\n\r\nI think this interface should allow Spark to pass a broadcasted Hadoop Configuration to the source instead.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-13T22:39:45Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2;\n+\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.broadcast.Broadcast;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n+import org.apache.spark.util.SerializableConfiguration;\n+\n+import java.util.Map;\n+\n+import scala.reflect.ClassTag;\n+/**\n+ * A helper interface to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+public interface BroadcastedHadoopConf {\n+  SparkSession sparkSession();\n+  CaseInsensitiveStringMap options();",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "I don't think I understand what you mean here, could you try and rephrase it? Sorry.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-13T22:50:04Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2;\n+\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.broadcast.Broadcast;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n+import org.apache.spark.util.SerializableConfiguration;\n+\n+import java.util.Map;\n+\n+import scala.reflect.ClassTag;\n+/**\n+ * A helper interface to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+public interface BroadcastedHadoopConf {\n+  SparkSession sparkSession();\n+  CaseInsensitiveStringMap options();",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "To clarify: do you mean you want us to use reflection for something implementing this interface inside of the DSv2 code path? Or do you mean something else?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-13T23:08:19Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2;\n+\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.broadcast.Broadcast;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n+import org.apache.spark.util.SerializableConfiguration;\n+\n+import java.util.Map;\n+\n+import scala.reflect.ClassTag;\n+/**\n+ * A helper interface to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+public interface BroadcastedHadoopConf {\n+  SparkSession sparkSession();\n+  CaseInsensitiveStringMap options();",
    "line": 38
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Data sources aren't passed a Spark session, so it doesn't make sense that this interface requires the source to provide one. If we think sources need access to a Spark session, then we should add an interface that sets the session directly. (I know the built-in sources have one, but that's because those are v1 sources that have been slightly modified to fit into v2.)\r\n\r\nThe benefit of having an interface like this is to avoid needing the Spark session. That's  currently done by accessing the Spark session from the environment (e.g. `SparkSession.builder.getOrCreate()`) and we want to avoid making sources do that.\r\n\r\nThat's why I think the way this works should be to set a broadcasted configuration on a `Table` implementation that extends this interface using a method like `setBroadcastedConf`.\r\n\r\nI'm on ASF slack if you'd like to talk about this more directly.",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-13T23:43:29Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2;\n+\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.broadcast.Broadcast;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n+import org.apache.spark.util.SerializableConfiguration;\n+\n+import java.util.Map;\n+\n+import scala.reflect.ClassTag;\n+/**\n+ * A helper interface to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+public interface BroadcastedHadoopConf {\n+  SparkSession sparkSession();\n+  CaseInsensitiveStringMap options();",
    "line": 38
  }, {
    "author": {
      "login": "holdenk"
    },
    "body": "Ok so we did a quick chat. It’s possible that this and one other small use case are the only reasons the sources currently have a Spark Session inside of them and the design goal\r\nof DSv2 was to get rid of that. So I’ll see if this can be avoided, but if it’s more than broadcasting the Hadoop conf and case sensitive options then I’ll switch the API to just pass in a Spark session and we can stick with this API. Does that sound like a reasonable summary @rdblue?",
    "commit": "aadd185a3d98d1ed056c0a8498c254db19298b81",
    "createdAt": "2019-11-14T00:16:32Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2;\n+\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import org.apache.spark.SparkContext;\n+import org.apache.spark.annotation.DeveloperApi;\n+import org.apache.spark.broadcast.Broadcast;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n+import org.apache.spark.util.SerializableConfiguration;\n+\n+import java.util.Map;\n+\n+import scala.reflect.ClassTag;\n+/**\n+ * A helper interface to serialize and broadcast the Hadoop configuration for readers.\n+ */\n+@DeveloperApi\n+public interface BroadcastedHadoopConf {\n+  SparkSession sparkSession();\n+  CaseInsensitiveStringMap options();",
    "line": 38
  }],
  "prId": 26005
}]