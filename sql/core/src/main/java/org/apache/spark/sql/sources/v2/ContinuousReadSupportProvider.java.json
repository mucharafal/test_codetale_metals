[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Nit: a space is missing. Why not use \"for continuous stream processing\" instead? I think that's more clear.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:15:11Z",
    "diffHunk": "@@ -20,17 +20,30 @@\n import java.util.Optional;\n \n import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReader;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReadSupport;\n+import org.apache.spark.sql.sources.v2.reader.streaming.Offset;\n import org.apache.spark.sql.types.StructType;\n \n /**\n  * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide data reading ability for continuous stream processing.\n+ * provide data reading ability for stream processing(continuous mode)."
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I think this should be more clear about normal operation and reconfiguration. It should say that Spark will call `newScanConfigBuilder` and will use that `ReadSupport` instance for the duration of the streaming app or until `needsReconfiguration` is true. Reconfiguration starts over calling `newScanConfigBuilder`. That would be more clear for implementers to understand.\r\n\r\nAlso, why is this description on the provider and not in `ContinuousReadSupport`? This is just one way to get the implementation.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:21:16Z",
    "diffHunk": "@@ -20,17 +20,30 @@\n import java.util.Optional;\n \n import org.apache.spark.annotation.InterfaceStability;\n-import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReader;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReadSupport;\n+import org.apache.spark.sql.sources.v2.reader.streaming.Offset;\n import org.apache.spark.sql.types.StructType;\n \n /**\n  * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n- * provide data reading ability for continuous stream processing.\n+ * provide data reading ability for stream processing(continuous mode).\n  */\n @InterfaceStability.Evolving\n-public interface ContinuousReadSupport extends DataSourceV2 {\n+public interface ContinuousReadSupportProvider extends DataSourceV2 {\n+\n   /**\n-   * Creates a {@link ContinuousReader} to scan the data from this data source.\n+   * Creates a {@link ContinuousReadSupport} to scan the data from this streaming data source.\n+   *\n+   * The execution engine will create a {@link ContinuousReadSupport} at the start of a streaming\n+   * query, alternate calls to {@link ContinuousReadSupport#newScanConfigBuilder(Offset)}"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I though this was going to have two versions instead of passing the schema? FYI @jose-torres",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:25:37Z",
    "diffHunk": "@@ -39,7 +52,7 @@\n    * @param options the options for the returned data source reader, which is an immutable\n    *                case-insensitive string-to-string map.\n    */\n-  ContinuousReader createContinuousReader(\n+  ContinuousReadSupport createContinuousReadSupport(\n     Optional<StructType> schema,"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "nit: This comment has been carried over to a lot of different places as we evolve the API. It's still true but I don't think it's really applicable here.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T15:51:15Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.datasources.v2.DataSourceV2Utils;\n+import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReadSupport;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n+ * provide data reading ability for continuous stream processing.\n+ *\n+ * This interface is used when end users want to use a data source implementation directly, e.g.\n+ * {@code SparkSession.readStream.format(...).option(...).load()}.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupportProvider extends DataSourceV2 {\n+\n+  /**\n+   * Creates a {@link ContinuousReadSupport} to scan the data from this streaming data source.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted."
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Javadoc style: this should go above the params.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T17:54:20Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.datasources.v2.DataSourceV2Utils;\n+import org.apache.spark.sql.sources.v2.reader.streaming.ContinuousReadSupport;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * A mix-in interface for {@link DataSourceV2}. Data sources can implement this interface to\n+ * provide data reading ability for continuous stream processing.\n+ *\n+ * This interface is used when end users want to use a data source implementation directly, e.g.\n+ * {@code SparkSession.readStream.format(...).option(...).load()}.\n+ */\n+@InterfaceStability.Evolving\n+public interface ContinuousReadSupportProvider extends DataSourceV2 {\n+\n+  /**\n+   * Creates a {@link ContinuousReadSupport} to scan the data from this streaming data source.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   *\n+   * @param schema the user provided schema.\n+   * @param checkpointLocation a path to Hadoop FS scratch space that can be used for failure\n+   *                           recovery. Readers for the same logical source in the same query\n+   *                           will be given the same checkpointLocation.\n+   * @param options the options for the returned data source reader, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   *\n+   * By default this method throws {@link UnsupportedOperationException}, implementations should"
  }],
  "prId": 22009
}]