[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I'd also talk about how this class contains singletons and factory methods for constructing datatypes.\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-28T18:53:15Z",
    "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.",
    "line": 25
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Done.\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-29T00:17:17Z",
    "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.",
    "line": 25
  }],
  "prId": 1346
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Add another method that has a default for containsNull?\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-28T19:14:32Z",
    "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.\n+ */\n+public abstract class DataType {\n+\n+  /**\n+   * Gets the StringType object.\n+   */\n+  public static final StringType StringType = new StringType();\n+\n+  /**\n+   * Gets the BinaryType object.\n+   */\n+  public static final BinaryType BinaryType = new BinaryType();\n+\n+  /**\n+   * Gets the BooleanType object.\n+   */\n+  public static final BooleanType BooleanType = new BooleanType();\n+\n+  /**\n+   * Gets the TimestampType object.\n+   */\n+  public static final TimestampType TimestampType = new TimestampType();\n+\n+  /**\n+   * Gets the DecimalType object.\n+   */\n+  public static final DecimalType DecimalType = new DecimalType();\n+\n+  /**\n+   * Gets the DoubleType object.\n+   */\n+  public static final DoubleType DoubleType = new DoubleType();\n+\n+  /**\n+   * Gets the FloatType object.\n+   */\n+  public static final FloatType FloatType = new FloatType();\n+\n+  /**\n+   * Gets the ByteType object.\n+   */\n+  public static final ByteType ByteType = new ByteType();\n+\n+  /**\n+   * Gets the IntegerType object.\n+   */\n+  public static final IntegerType IntegerType = new IntegerType();\n+\n+  /**\n+   * Gets the LongType object.\n+   */\n+  public static final LongType LongType = new LongType();\n+\n+  /**\n+   * Gets the ShortType object.\n+   */\n+  public static final ShortType ShortType = new ShortType();\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}) and\n+   * whether the array contains null values ({@code containsNull}).\n+   * @param elementType\n+   * @param containsNull\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType, boolean containsNull) {"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Done.\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-29T00:17:11Z",
    "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.\n+ */\n+public abstract class DataType {\n+\n+  /**\n+   * Gets the StringType object.\n+   */\n+  public static final StringType StringType = new StringType();\n+\n+  /**\n+   * Gets the BinaryType object.\n+   */\n+  public static final BinaryType BinaryType = new BinaryType();\n+\n+  /**\n+   * Gets the BooleanType object.\n+   */\n+  public static final BooleanType BooleanType = new BooleanType();\n+\n+  /**\n+   * Gets the TimestampType object.\n+   */\n+  public static final TimestampType TimestampType = new TimestampType();\n+\n+  /**\n+   * Gets the DecimalType object.\n+   */\n+  public static final DecimalType DecimalType = new DecimalType();\n+\n+  /**\n+   * Gets the DoubleType object.\n+   */\n+  public static final DoubleType DoubleType = new DoubleType();\n+\n+  /**\n+   * Gets the FloatType object.\n+   */\n+  public static final FloatType FloatType = new FloatType();\n+\n+  /**\n+   * Gets the ByteType object.\n+   */\n+  public static final ByteType ByteType = new ByteType();\n+\n+  /**\n+   * Gets the IntegerType object.\n+   */\n+  public static final IntegerType IntegerType = new IntegerType();\n+\n+  /**\n+   * Gets the LongType object.\n+   */\n+  public static final LongType LongType = new LongType();\n+\n+  /**\n+   * Gets the ShortType object.\n+   */\n+  public static final ShortType ShortType = new ShortType();\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}) and\n+   * whether the array contains null values ({@code containsNull}).\n+   * @param elementType\n+   * @param containsNull\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType, boolean containsNull) {"
  }],
  "prId": 1346
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "remove the  return tag if you are not going to say anything about it. also remove it for other functions in this pr.\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-29T08:31:22Z",
    "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.\n+ *\n+ * To get/create specific data type, users should use singleton objects and factory methods\n+ * provided by this class.\n+ */\n+public abstract class DataType {\n+\n+  /**\n+   * Gets the StringType object.\n+   */\n+  public static final StringType StringType = new StringType();\n+\n+  /**\n+   * Gets the BinaryType object.\n+   */\n+  public static final BinaryType BinaryType = new BinaryType();\n+\n+  /**\n+   * Gets the BooleanType object.\n+   */\n+  public static final BooleanType BooleanType = new BooleanType();\n+\n+  /**\n+   * Gets the TimestampType object.\n+   */\n+  public static final TimestampType TimestampType = new TimestampType();\n+\n+  /**\n+   * Gets the DecimalType object.\n+   */\n+  public static final DecimalType DecimalType = new DecimalType();\n+\n+  /**\n+   * Gets the DoubleType object.\n+   */\n+  public static final DoubleType DoubleType = new DoubleType();\n+\n+  /**\n+   * Gets the FloatType object.\n+   */\n+  public static final FloatType FloatType = new FloatType();\n+\n+  /**\n+   * Gets the ByteType object.\n+   */\n+  public static final ByteType ByteType = new ByteType();\n+\n+  /**\n+   * Gets the IntegerType object.\n+   */\n+  public static final IntegerType IntegerType = new IntegerType();\n+\n+  /**\n+   * Gets the LongType object.\n+   */\n+  public static final LongType LongType = new LongType();\n+\n+  /**\n+   * Gets the ShortType object.\n+   */\n+  public static final ShortType ShortType = new ShortType();\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}).\n+   * The field of {@code containsNull} is set to {@code false}.\n+   *\n+   * @param elementType\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType) {\n+    if (elementType == null) {\n+      throw new IllegalArgumentException(\"elementType should not be null.\");\n+    }\n+\n+    return new ArrayType(elementType, false);\n+  }\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}) and\n+   * whether the array contains null values ({@code containsNull}).\n+   * @param elementType\n+   * @param containsNull\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType, boolean containsNull) {\n+    if (elementType == null) {\n+      throw new IllegalArgumentException(\"elementType should not be null.\");\n+    }\n+\n+    return new ArrayType(elementType, containsNull);\n+  }\n+\n+  /**\n+   * Creates a MapType by specifying the data type of keys ({@code keyType}) and values\n+   * ({@code keyType}). The field of {@code valueContainsNull} is set to {@code true}.\n+   *\n+   * @param keyType\n+   * @param valueType\n+   * @return"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "actually also params. if you don't explain any of them, just remove them.\n",
    "commit": "1d45977bd69e5569444a6086562e5528b886123b",
    "createdAt": "2014-07-29T08:31:42Z",
    "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.api.java.types;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * The base type of all Spark SQL data types.\n+ *\n+ * To get/create specific data type, users should use singleton objects and factory methods\n+ * provided by this class.\n+ */\n+public abstract class DataType {\n+\n+  /**\n+   * Gets the StringType object.\n+   */\n+  public static final StringType StringType = new StringType();\n+\n+  /**\n+   * Gets the BinaryType object.\n+   */\n+  public static final BinaryType BinaryType = new BinaryType();\n+\n+  /**\n+   * Gets the BooleanType object.\n+   */\n+  public static final BooleanType BooleanType = new BooleanType();\n+\n+  /**\n+   * Gets the TimestampType object.\n+   */\n+  public static final TimestampType TimestampType = new TimestampType();\n+\n+  /**\n+   * Gets the DecimalType object.\n+   */\n+  public static final DecimalType DecimalType = new DecimalType();\n+\n+  /**\n+   * Gets the DoubleType object.\n+   */\n+  public static final DoubleType DoubleType = new DoubleType();\n+\n+  /**\n+   * Gets the FloatType object.\n+   */\n+  public static final FloatType FloatType = new FloatType();\n+\n+  /**\n+   * Gets the ByteType object.\n+   */\n+  public static final ByteType ByteType = new ByteType();\n+\n+  /**\n+   * Gets the IntegerType object.\n+   */\n+  public static final IntegerType IntegerType = new IntegerType();\n+\n+  /**\n+   * Gets the LongType object.\n+   */\n+  public static final LongType LongType = new LongType();\n+\n+  /**\n+   * Gets the ShortType object.\n+   */\n+  public static final ShortType ShortType = new ShortType();\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}).\n+   * The field of {@code containsNull} is set to {@code false}.\n+   *\n+   * @param elementType\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType) {\n+    if (elementType == null) {\n+      throw new IllegalArgumentException(\"elementType should not be null.\");\n+    }\n+\n+    return new ArrayType(elementType, false);\n+  }\n+\n+  /**\n+   * Creates an ArrayType by specifying the data type of elements ({@code elementType}) and\n+   * whether the array contains null values ({@code containsNull}).\n+   * @param elementType\n+   * @param containsNull\n+   * @return\n+   */\n+  public static ArrayType createArrayType(DataType elementType, boolean containsNull) {\n+    if (elementType == null) {\n+      throw new IllegalArgumentException(\"elementType should not be null.\");\n+    }\n+\n+    return new ArrayType(elementType, containsNull);\n+  }\n+\n+  /**\n+   * Creates a MapType by specifying the data type of keys ({@code keyType}) and values\n+   * ({@code keyType}). The field of {@code valueContainsNull} is set to {@code true}.\n+   *\n+   * @param keyType\n+   * @param valueType\n+   * @return"
  }],
  "prId": 1346
}]