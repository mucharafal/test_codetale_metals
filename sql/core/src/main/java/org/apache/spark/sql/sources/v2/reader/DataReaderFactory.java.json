[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`... where the data reader returned by this reader factory can run faster ...`",
    "commit": "5d6c4fe7bd4b6ffaa9dbf6a0d6eeed169e76228c",
    "createdAt": "2018-01-29T07:05:01Z",
    "diffHunk": "@@ -22,19 +22,19 @@\n import org.apache.spark.annotation.InterfaceStability;\n \n /**\n- * A read task returned by {@link DataSourceV2Reader#createReadTasks()} and is responsible for\n- * creating the actual data reader. The relationship between {@link ReadTask} and {@link DataReader}\n+ * A reader factory returned by {@link DataSourceV2Reader#createDataReaderFactories()} and is responsible for\n+ * creating the actual data reader. The relationship between {@link DataReaderFactory} and {@link DataReader}\n  * is similar to the relationship between {@link Iterable} and {@link java.util.Iterator}.\n  *\n- * Note that, the read task will be serialized and sent to executors, then the data reader will be\n- * created on executors and do the actual reading. So {@link ReadTask} must be serializable and\n+ * Note that, the reader factory will be serialized and sent to executors, then the data reader will be\n+ * created on executors and do the actual reading. So {@link DataReaderFactory} must be serializable and\n  * {@link DataReader} doesn't need to be.\n  */\n @InterfaceStability.Evolving\n-public interface ReadTask<T> extends Serializable {\n+public interface DataReaderFactory<T> extends Serializable {\n \n   /**\n-   * The preferred locations where this read task can run faster, but Spark does not guarantee that\n+   * The preferred locations where this data reader factory can run faster, but Spark does not guarantee that"
  }],
  "prId": 20397
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we can follow the `DataWriterFactory` and just say `... to do the actual reading work.`",
    "commit": "5d6c4fe7bd4b6ffaa9dbf6a0d6eeed169e76228c",
    "createdAt": "2018-01-29T07:06:08Z",
    "diffHunk": "@@ -50,7 +50,7 @@\n   }\n \n   /**\n-   * Returns a data reader to do the actual reading work for this read task.\n+   * Returns a data reader to do the actual reading work for this data reader factory."
  }],
  "prId": 20397
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`this data reader` -> `the data reader`",
    "commit": "5d6c4fe7bd4b6ffaa9dbf6a0d6eeed169e76228c",
    "createdAt": "2018-01-29T13:12:20Z",
    "diffHunk": "@@ -22,21 +22,23 @@\n import org.apache.spark.annotation.InterfaceStability;\n \n /**\n- * A read task returned by {@link DataSourceV2Reader#createReadTasks()} and is responsible for\n- * creating the actual data reader. The relationship between {@link ReadTask} and {@link DataReader}\n+ * A reader factory returned by {@link DataSourceV2Reader#createDataReaderFactories()} and is\n+ * responsible for creating the actual data reader. The relationship between\n+ * {@link DataReaderFactory} and {@link DataReader}\n  * is similar to the relationship between {@link Iterable} and {@link java.util.Iterator}.\n  *\n- * Note that, the read task will be serialized and sent to executors, then the data reader will be\n- * created on executors and do the actual reading. So {@link ReadTask} must be serializable and\n- * {@link DataReader} doesn't need to be.\n+ * Note that, the reader factory will be serialized and sent to executors, then the data reader\n+ * will be created on executors and do the actual reading. So {@link DataReaderFactory} must be\n+ * serializable and {@link DataReader} doesn't need to be.\n  */\n @InterfaceStability.Evolving\n-public interface ReadTask<T> extends Serializable {\n+public interface DataReaderFactory<T> extends Serializable {\n \n   /**\n-   * The preferred locations where this read task can run faster, but Spark does not guarantee that\n-   * this task will always run on these locations. The implementations should make sure that it can\n-   * be run on any location. The location is a string representing the host name.\n+   * The preferred locations where this data reader returned by this reader factory can run faster,"
  }],
  "prId": 20397
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`not guarantee to always run the data reader on these locations.` ",
    "commit": "5d6c4fe7bd4b6ffaa9dbf6a0d6eeed169e76228c",
    "createdAt": "2018-01-29T13:13:01Z",
    "diffHunk": "@@ -22,21 +22,23 @@\n import org.apache.spark.annotation.InterfaceStability;\n \n /**\n- * A read task returned by {@link DataSourceV2Reader#createReadTasks()} and is responsible for\n- * creating the actual data reader. The relationship between {@link ReadTask} and {@link DataReader}\n+ * A reader factory returned by {@link DataSourceV2Reader#createDataReaderFactories()} and is\n+ * responsible for creating the actual data reader. The relationship between\n+ * {@link DataReaderFactory} and {@link DataReader}\n  * is similar to the relationship between {@link Iterable} and {@link java.util.Iterator}.\n  *\n- * Note that, the read task will be serialized and sent to executors, then the data reader will be\n- * created on executors and do the actual reading. So {@link ReadTask} must be serializable and\n- * {@link DataReader} doesn't need to be.\n+ * Note that, the reader factory will be serialized and sent to executors, then the data reader\n+ * will be created on executors and do the actual reading. So {@link DataReaderFactory} must be\n+ * serializable and {@link DataReader} doesn't need to be.\n  */\n @InterfaceStability.Evolving\n-public interface ReadTask<T> extends Serializable {\n+public interface DataReaderFactory<T> extends Serializable {\n \n   /**\n-   * The preferred locations where this read task can run faster, but Spark does not guarantee that\n-   * this task will always run on these locations. The implementations should make sure that it can\n-   * be run on any location. The location is a string representing the host name.\n+   * The preferred locations where this data reader returned by this reader factory can run faster,\n+   * but Spark does not guarantee that this task will always run on these locations."
  }],
  "prId": 20397
}]