[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why does this accept a starting offset?",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T20:23:05Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "a concrete example is in kafka data source, it needs to know the start offset to decide the latest offset, for purposes like rate control.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T02:21:49Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Can you explain that more? Isn't the latest offset always the same? How does it depend on start?",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T15:49:58Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "There's a weak form of rate control implemented by simply having sources lie about what the latest offset is. For example you might set maxOffsetsPerTrigger = 100, and then the Kafka source will pretend that only 100 more offsets exist even if there are really more available.\r\n\r\nUnfortunately, we're going to need to continue to support such options at least until the next major version after we have better rate limiting, so I don't think this can be removed from the source API right now.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T16:10:12Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think that hacky rate control in one source is a good reason for adding this to the API. Can we special-case the Kafka reader in the mean time without exposing this publicly?",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T18:43:21Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "I agree in principle, but I don't know of any way to special case it without allowing latestOffset to depend on start.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T18:48:31Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "(Note that this is not just the Kafka reader - file streams have a similar option.)",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T18:51:06Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "How about a private[spark] trait that exposes this method? Then it would be accessible within Spark but not available publicly.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-09T22:06:40Z",
    "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2.reader.streaming;\n+\n+import org.apache.spark.annotation.InterfaceStability;\n+import org.apache.spark.sql.execution.streaming.BaseStreamingSource;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfig;\n+import org.apache.spark.sql.sources.v2.reader.ScanConfigBuilder;\n+\n+/**\n+ * An interface which defines how to scan the data from data source for streaming processing with\n+ * micro-batch mode.\n+ */\n+@InterfaceStability.Evolving\n+public interface MicroBatchReadSupport extends StreamingReadSupport, BaseStreamingSource {\n+\n+  /**\n+   * Returns a builder of {@link ScanConfig}. The builder can take some query specific information\n+   * like which operators to pushdown, streaming offsets, etc., and keep these information in the\n+   * created {@link ScanConfig}.\n+   *\n+   * This is the first step of the data scan. All other methods in {@link MicroBatchReadSupport}\n+   * needs to take {@link ScanConfig} as an input.\n+   *\n+   * If this method fails (by throwing an exception), the action will fail and no Spark job will be\n+   * submitted.\n+   */\n+  ScanConfigBuilder newScanConfigBuilder(Offset start, Offset end);\n+\n+  /**\n+   * Returns the most recent offset available.\n+   */\n+  Offset latestOffset(Offset start);"
  }],
  "prId": 22009
}]