[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This doesn't return `Optional`.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:27:51Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data"
  }],
  "prId": 22009
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "This should also remove the query ID (equivalent to job ID?).",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-07T18:29:27Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data\n+   * sources can return None if there is no writing needed to be done.\n+   *\n+   * @param queryId A unique string for the writing query. It's possible that there are many\n+   *                writing queries running at the same time, and the returned\n+   *                {@link StreamingWriteSupport} can use this id to distinguish itself from others.\n+   * @param schema the schema of the data to be written.\n+   * @param mode the output mode which determines what successive epoch output means to this\n+   *             sink, please refer to {@link OutputMode} for more details.\n+   * @param options the options for the returned data source writer, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   */\n+  StreamingWriteSupport createStreamingWritSupport(\n+    String queryId,"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "for the batch API, I think we can remove job id and ask the data source to generate UUID themselves. But for streaming, I'm not sure. Maybe we need it for failure recovery or streaming restart, cc @jose-torres ",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T02:12:51Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data\n+   * sources can return None if there is no writing needed to be done.\n+   *\n+   * @param queryId A unique string for the writing query. It's possible that there are many\n+   *                writing queries running at the same time, and the returned\n+   *                {@link StreamingWriteSupport} can use this id to distinguish itself from others.\n+   * @param schema the schema of the data to be written.\n+   * @param mode the output mode which determines what successive epoch output means to this\n+   *             sink, please refer to {@link OutputMode} for more details.\n+   * @param options the options for the returned data source writer, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   */\n+  StreamingWriteSupport createStreamingWritSupport(\n+    String queryId,"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "If it needs to be there for streaming, then let's make sure it is in both APIs. It can help when debugging writes in batch, too.\r\n\r\nOne more thing: isn't the abstraction that a `WriteSupport` is something that can be written to, like the `ReadSupport` is something that can be scanned? A Table fits both, as do Streams.\r\n\r\nIf that's the case, then why pass the query ID when creating the `WriteSupport` or stream? The stream doesn't need a UUID, the actual write does. On the read side, there's `ScanConfig` that is used to hold the state for a scan, but on the read side there is no equivalent and we end up with odd uses of the abstraction like this.\r\n\r\nWhat about creating an equivalent of `ScanConfig` for the write side?\r\n\r\n@jose-torres, it would be great to hear your opinion on this, too.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T16:08:53Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data\n+   * sources can return None if there is no writing needed to be done.\n+   *\n+   * @param queryId A unique string for the writing query. It's possible that there are many\n+   *                writing queries running at the same time, and the returned\n+   *                {@link StreamingWriteSupport} can use this id to distinguish itself from others.\n+   * @param schema the schema of the data to be written.\n+   * @param mode the output mode which determines what successive epoch output means to this\n+   *             sink, please refer to {@link OutputMode} for more details.\n+   * @param options the options for the returned data source writer, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   */\n+  StreamingWriteSupport createStreamingWritSupport(\n+    String queryId,"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Also, it may be a good idea to separate the read and write sides into two PRs. That way we can focus on one or the other without context switching from read to write and back. Up to you though.",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T16:10:14Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data\n+   * sources can return None if there is no writing needed to be done.\n+   *\n+   * @param queryId A unique string for the writing query. It's possible that there are many\n+   *                writing queries running at the same time, and the returned\n+   *                {@link StreamingWriteSupport} can use this id to distinguish itself from others.\n+   * @param schema the schema of the data to be written.\n+   * @param mode the output mode which determines what successive epoch output means to this\n+   *             sink, please refer to {@link OutputMode} for more details.\n+   * @param options the options for the returned data source writer, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   */\n+  StreamingWriteSupport createStreamingWritSupport(\n+    String queryId,"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Most of this PR is for the read side API change. There isn't much change in the write API, so I'd like to keep it as it is. Also it's a lot of work for me to pull out the write side changes...",
    "commit": "51cda76897353344427aaa666e29be408263eeb1",
    "createdAt": "2018-08-08T17:12:35Z",
    "diffHunk": "@@ -29,24 +28,24 @@\n  * provide data writing ability for structured streaming.\n  */\n @InterfaceStability.Evolving\n-public interface StreamWriteSupport extends DataSourceV2, BaseStreamingSink {\n+public interface StreamingWriteSupportProvider extends DataSourceV2, BaseStreamingSink {\n \n-    /**\n-     * Creates an optional {@link StreamWriter} to save the data to this data source. Data\n-     * sources can return None if there is no writing needed to be done.\n-     *\n-     * @param queryId A unique string for the writing query. It's possible that there are many\n-     *                writing queries running at the same time, and the returned\n-     *                {@link DataSourceWriter} can use this id to distinguish itself from others.\n-     * @param schema the schema of the data to be written.\n-     * @param mode the output mode which determines what successive epoch output means to this\n-     *             sink, please refer to {@link OutputMode} for more details.\n-     * @param options the options for the returned data source writer, which is an immutable\n-     *                case-insensitive string-to-string map.\n-     */\n-    StreamWriter createStreamWriter(\n-        String queryId,\n-        StructType schema,\n-        OutputMode mode,\n-        DataSourceOptions options);\n+  /**\n+   * Creates an optional {@link StreamingWriteSupport} to save the data to this data source. Data\n+   * sources can return None if there is no writing needed to be done.\n+   *\n+   * @param queryId A unique string for the writing query. It's possible that there are many\n+   *                writing queries running at the same time, and the returned\n+   *                {@link StreamingWriteSupport} can use this id to distinguish itself from others.\n+   * @param schema the schema of the data to be written.\n+   * @param mode the output mode which determines what successive epoch output means to this\n+   *             sink, please refer to {@link OutputMode} for more details.\n+   * @param options the options for the returned data source writer, which is an immutable\n+   *                case-insensitive string-to-string map.\n+   */\n+  StreamingWriteSupport createStreamingWritSupport(\n+    String queryId,"
  }],
  "prId": 22009
}]