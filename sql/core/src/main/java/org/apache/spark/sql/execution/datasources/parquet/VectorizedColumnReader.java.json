[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "indents too",
    "commit": "3bbc2b02d658112a546c5472586b0042075d390b",
    "createdAt": "2018-03-31T20:47:07Z",
    "diffHunk": "@@ -231,6 +232,18 @@ private boolean shouldConvertTimestamps() {\n     return convertTz != null && !convertTz.equals(UTC);\n   }\n \n+  /**\n+   * Helper function to construct exception for parquet schema mismatch.\n+   */\n+  private ParquetSchemaColumnConvertNotSupportedException constructConvertNotSupportedException(\n+          ColumnDescriptor descriptor,\n+          WritableColumnVector column) {"
  }],
  "prId": 20953
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "the same here",
    "commit": "3bbc2b02d658112a546c5472586b0042075d390b",
    "createdAt": "2018-03-31T20:47:15Z",
    "diffHunk": "@@ -231,6 +232,18 @@ private boolean shouldConvertTimestamps() {\n     return convertTz != null && !convertTz.equals(UTC);\n   }\n \n+  /**\n+   * Helper function to construct exception for parquet schema mismatch.\n+   */\n+  private ParquetSchemaColumnConvertNotSupportedException constructConvertNotSupportedException(\n+          ColumnDescriptor descriptor,\n+          WritableColumnVector column) {\n+    return new ParquetSchemaColumnConvertNotSupportedException(\n+            Arrays.toString(descriptor.getPath()),"
  }],
  "prId": 20953
}]