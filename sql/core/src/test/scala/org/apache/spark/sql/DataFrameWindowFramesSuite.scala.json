[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "\"unbounded\" -> \"bounded\"",
    "commit": "d1e24542da403e5417a663c675d73a2f95ac77ef",
    "createdAt": "2017-12-21T05:43:42Z",
    "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.expressions.Window\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * Window frame testing for DataFrame API.\n+ */\n+class DataFrameWindowFramesSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"lead/lag with empty data frame\") {\n+    val df = Seq.empty[(Int, String)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Nil)\n+  }\n+\n+  test(\"lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"3\", null) :: Row(1, null, \"1\") :: Row(2, \"4\", null) :: Row(2, null, \"2\") :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"1\", null) :: Row(1, null, \"3\") :: Row(2, \"2\", null) :: Row(2, null, \"4\") :: Nil)\n+  }\n+\n+  test(\"lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"3\") :: Row(1, \"1\", null) :: Row(2, null, \"4\") :: Row(2, \"2\", null) :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"1\") :: Row(1, \"3\", null) :: Row(2, null, \"2\") :: Row(2, \"4\", null) :: Nil)\n+  }\n+\n+  test(\"lead/lag with default value\") {\n+    val default = \"n/a\"\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\"), (2, \"5\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 2, default).over(window),\n+        lag(\"value\", 2, default).over(window),\n+        lead(\"value\", -2, default).over(window),\n+        lag(\"value\", -2, default).over(window)),\n+      Row(1, default, default, default, default) :: Row(1, default, default, default, default) ::\n+        Row(2, \"5\", default, default, \"5\") :: Row(2, default, \"2\", \"2\", default) ::\n+        Row(2, default, default, default, default) :: Nil)\n+  }\n+\n+  test(\"rows/range between with empty data frame\") {\n+    val df = Seq.empty[(String, Int)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        'key,\n+        first(\"value\").over(\n+          window.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)),\n+        first(\"value\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Nil)\n+  }\n+\n+  test(\"rows between should accept int/long values as boundary\") {\n+    val df = Seq((1L, \"1\"), (1L, \"1\"), (2147483650L, \"1\"), (3L, \"2\"), (2L, \"1\"), (2147483650L, \"2\"))\n+      .toDF(\"key\", \"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483647))),\n+      Seq(Row(1, 3), Row(1, 4), Row(2, 2), Row(3, 2), Row(2147483650L, 1), Row(2147483650L, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483648L))))\n+    assert(e.message.contains(\"Boundary end is not a valid integer: 2147483648\"))\n+  }\n+\n+  test(\"range between should accept at most one ORDER BY expression when unbounded\") {",
    "line": 143
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Fixed.",
    "commit": "d1e24542da403e5417a663c675d73a2f95ac77ef",
    "createdAt": "2017-12-21T14:27:22Z",
    "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.expressions.Window\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * Window frame testing for DataFrame API.\n+ */\n+class DataFrameWindowFramesSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"lead/lag with empty data frame\") {\n+    val df = Seq.empty[(Int, String)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Nil)\n+  }\n+\n+  test(\"lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"3\", null) :: Row(1, null, \"1\") :: Row(2, \"4\", null) :: Row(2, null, \"2\") :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"1\", null) :: Row(1, null, \"3\") :: Row(2, \"2\", null) :: Row(2, null, \"4\") :: Nil)\n+  }\n+\n+  test(\"lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"3\") :: Row(1, \"1\", null) :: Row(2, null, \"4\") :: Row(2, \"2\", null) :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"1\") :: Row(1, \"3\", null) :: Row(2, null, \"2\") :: Row(2, \"4\", null) :: Nil)\n+  }\n+\n+  test(\"lead/lag with default value\") {\n+    val default = \"n/a\"\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\"), (2, \"5\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 2, default).over(window),\n+        lag(\"value\", 2, default).over(window),\n+        lead(\"value\", -2, default).over(window),\n+        lag(\"value\", -2, default).over(window)),\n+      Row(1, default, default, default, default) :: Row(1, default, default, default, default) ::\n+        Row(2, \"5\", default, default, \"5\") :: Row(2, default, \"2\", \"2\", default) ::\n+        Row(2, default, default, default, default) :: Nil)\n+  }\n+\n+  test(\"rows/range between with empty data frame\") {\n+    val df = Seq.empty[(String, Int)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        'key,\n+        first(\"value\").over(\n+          window.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)),\n+        first(\"value\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Nil)\n+  }\n+\n+  test(\"rows between should accept int/long values as boundary\") {\n+    val df = Seq((1L, \"1\"), (1L, \"1\"), (2147483650L, \"1\"), (3L, \"2\"), (2L, \"1\"), (2147483650L, \"2\"))\n+      .toDF(\"key\", \"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483647))),\n+      Seq(Row(1, 3), Row(1, 4), Row(2, 2), Row(3, 2), Row(2147483650L, 1), Row(2147483650L, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483648L))))\n+    assert(e.message.contains(\"Boundary end is not a valid integer: 2147483648\"))\n+  }\n+\n+  test(\"range between should accept at most one ORDER BY expression when unbounded\") {",
    "line": 143
  }],
  "prId": 20019
}, {
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "This is actually a TypeCoercion issue, I'm not sure whether we should cover it here or `TypeCoercionSuite`",
    "commit": "d1e24542da403e5417a663c675d73a2f95ac77ef",
    "createdAt": "2017-12-21T05:46:23Z",
    "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.expressions.Window\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * Window frame testing for DataFrame API.\n+ */\n+class DataFrameWindowFramesSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"lead/lag with empty data frame\") {\n+    val df = Seq.empty[(Int, String)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Nil)\n+  }\n+\n+  test(\"lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"3\", null) :: Row(1, null, \"1\") :: Row(2, \"4\", null) :: Row(2, null, \"2\") :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"1\", null) :: Row(1, null, \"3\") :: Row(2, \"2\", null) :: Row(2, null, \"4\") :: Nil)\n+  }\n+\n+  test(\"lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"3\") :: Row(1, \"1\", null) :: Row(2, null, \"4\") :: Row(2, \"2\", null) :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"1\") :: Row(1, \"3\", null) :: Row(2, null, \"2\") :: Row(2, \"4\", null) :: Nil)\n+  }\n+\n+  test(\"lead/lag with default value\") {\n+    val default = \"n/a\"\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\"), (2, \"5\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 2, default).over(window),\n+        lag(\"value\", 2, default).over(window),\n+        lead(\"value\", -2, default).over(window),\n+        lag(\"value\", -2, default).over(window)),\n+      Row(1, default, default, default, default) :: Row(1, default, default, default, default) ::\n+        Row(2, \"5\", default, default, \"5\") :: Row(2, default, \"2\", \"2\", default) ::\n+        Row(2, default, default, default, default) :: Nil)\n+  }\n+\n+  test(\"rows/range between with empty data frame\") {\n+    val df = Seq.empty[(String, Int)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        'key,\n+        first(\"value\").over(\n+          window.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)),\n+        first(\"value\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Nil)\n+  }\n+\n+  test(\"rows between should accept int/long values as boundary\") {\n+    val df = Seq((1L, \"1\"), (1L, \"1\"), (2147483650L, \"1\"), (3L, \"2\"), (2L, \"1\"), (2147483650L, \"2\"))\n+      .toDF(\"key\", \"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483647))),\n+      Seq(Row(1, 3), Row(1, 4), Row(2, 2), Row(3, 2), Row(2147483650L, 1), Row(2147483650L, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483648L))))\n+    assert(e.message.contains(\"Boundary end is not a valid integer: 2147483648\"))\n+  }\n+\n+  test(\"range between should accept at most one ORDER BY expression when unbounded\") {\n+    val df = Seq((1, 1)).toDF(\"key\", \"value\")\n+    val window = Window.orderBy($\"key\", $\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        min(\"key\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Seq(Row(1, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        min(\"key\").over(window.rangeBetween(-1, 1))))\n+    assert(e.message.contains(\"A range window frame with value boundaries cannot be used in a \" +\n+      \"window specification with multiple order by expressions\"))\n+  }\n+\n+  test(\"range between should accept numeric values only when bounded\") {"
  }, {
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "I bit enhanced this area but not yet moved. What do you think, would it be good idea to move this test there? This is as window related as type coercion.",
    "commit": "d1e24542da403e5417a663c675d73a2f95ac77ef",
    "createdAt": "2017-12-21T14:31:11Z",
    "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.expressions.Window\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+/**\n+ * Window frame testing for DataFrame API.\n+ */\n+class DataFrameWindowFramesSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"lead/lag with empty data frame\") {\n+    val df = Seq.empty[(Int, String)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Nil)\n+  }\n+\n+  test(\"lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"3\", null) :: Row(1, null, \"1\") :: Row(2, \"4\", null) :: Row(2, null, \"2\") :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with positive offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 1).over(window),\n+        lag(\"value\", 1).over(window)),\n+      Row(1, \"1\", null) :: Row(1, null, \"3\") :: Row(2, \"2\", null) :: Row(2, null, \"4\") :: Nil)\n+  }\n+\n+  test(\"lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"3\") :: Row(1, \"1\", null) :: Row(2, null, \"4\") :: Row(2, \"2\", null) :: Nil)\n+  }\n+\n+  test(\"reverse lead/lag with negative offset\") {\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\".desc)\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", -1).over(window),\n+        lag(\"value\", -1).over(window)),\n+      Row(1, null, \"1\") :: Row(1, \"3\", null) :: Row(2, null, \"2\") :: Row(2, \"4\", null) :: Nil)\n+  }\n+\n+  test(\"lead/lag with default value\") {\n+    val default = \"n/a\"\n+    val df = Seq((1, \"1\"), (2, \"2\"), (1, \"3\"), (2, \"4\"), (2, \"5\")).toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        lead(\"value\", 2, default).over(window),\n+        lag(\"value\", 2, default).over(window),\n+        lead(\"value\", -2, default).over(window),\n+        lag(\"value\", -2, default).over(window)),\n+      Row(1, default, default, default, default) :: Row(1, default, default, default, default) ::\n+        Row(2, \"5\", default, default, \"5\") :: Row(2, default, \"2\", \"2\", default) ::\n+        Row(2, default, default, default, default) :: Nil)\n+  }\n+\n+  test(\"rows/range between with empty data frame\") {\n+    val df = Seq.empty[(String, Int)].toDF(\"key\", \"value\")\n+    val window = Window.partitionBy($\"key\").orderBy($\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        'key,\n+        first(\"value\").over(\n+          window.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)),\n+        first(\"value\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Nil)\n+  }\n+\n+  test(\"rows between should accept int/long values as boundary\") {\n+    val df = Seq((1L, \"1\"), (1L, \"1\"), (2147483650L, \"1\"), (3L, \"2\"), (2L, \"1\"), (2147483650L, \"2\"))\n+      .toDF(\"key\", \"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483647))),\n+      Seq(Row(1, 3), Row(1, 4), Row(2, 2), Row(3, 2), Row(2147483650L, 1), Row(2147483650L, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        $\"key\",\n+        count(\"key\").over(\n+          Window.partitionBy($\"value\").orderBy($\"key\").rowsBetween(0, 2147483648L))))\n+    assert(e.message.contains(\"Boundary end is not a valid integer: 2147483648\"))\n+  }\n+\n+  test(\"range between should accept at most one ORDER BY expression when unbounded\") {\n+    val df = Seq((1, 1)).toDF(\"key\", \"value\")\n+    val window = Window.orderBy($\"key\", $\"value\")\n+\n+    checkAnswer(\n+      df.select(\n+        $\"key\",\n+        min(\"key\").over(\n+          window.rangeBetween(Window.unboundedPreceding, Window.unboundedFollowing))),\n+      Seq(Row(1, 1))\n+    )\n+\n+    val e = intercept[AnalysisException](\n+      df.select(\n+        min(\"key\").over(window.rangeBetween(-1, 1))))\n+    assert(e.message.contains(\"A range window frame with value boundaries cannot be used in a \" +\n+      \"window specification with multiple order by expressions\"))\n+  }\n+\n+  test(\"range between should accept numeric values only when bounded\") {"
  }],
  "prId": 20019
}]