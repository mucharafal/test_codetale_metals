[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Rename this class accordingly",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T01:04:50Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Will rename.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T08:14:19Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {"
  }],
  "prId": 21733
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "what is output attribute in this context? should be inputRowAttributes?",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T01:41:31Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {\n+  import TestMaterial._\n+\n+  test(\"StateManager v1 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 1)\n+\n+    // in V1, input row is stored as value\n+    testGetPutIterOnStateManager(stateManager, OUTPUT_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW, TEST_ROW)\n+  }\n+\n+  // ============================ StateManagerImplV2 ============================\n+  test(\"StateManager v2 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 2)\n+\n+    // in V2, row for values itself (excluding keys from input row) is stored as value\n+    // so that stored value doesn't have key part, but state manager V2 will provide same output\n+    // as V1 when getting row for key\n+    testGetPutIterOnStateManager(stateManager, VALUES_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW,\n+      TEST_VALUE_ROW)\n+  }\n+\n+  private def newStateManager(\n+      keysAttributes: Seq[Attribute],\n+      outputAttributes: Seq[Attribute],"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Yes, and actually, for StateManager, `input row attributes` and `output attributes` are same according to how StateStore*Exec work, so I picked either one. I'm happy to rename if `inputRowAttributes` is clearer to give insight which schema should be passed.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T08:17:15Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {\n+  import TestMaterial._\n+\n+  test(\"StateManager v1 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 1)\n+\n+    // in V1, input row is stored as value\n+    testGetPutIterOnStateManager(stateManager, OUTPUT_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW, TEST_ROW)\n+  }\n+\n+  // ============================ StateManagerImplV2 ============================\n+  test(\"StateManager v2 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 2)\n+\n+    // in V2, row for values itself (excluding keys from input row) is stored as value\n+    // so that stored value doesn't have key part, but state manager V2 will provide same output\n+    // as V1 when getting row for key\n+    testGetPutIterOnStateManager(stateManager, VALUES_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW,\n+      TEST_VALUE_ROW)\n+  }\n+\n+  private def newStateManager(\n+      keysAttributes: Seq[Attribute],\n+      outputAttributes: Seq[Attribute],"
  }],
  "prId": 21733
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Why are all of these in caps. Usually only simple constants like numbers or strings are in caps. This looks weird.\r\n\r\nAlso putting them in an object later make me jump back and forth too much to verify whats going on.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T01:42:59Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {\n+  import TestMaterial._\n+\n+  test(\"StateManager v1 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 1)\n+\n+    // in V1, input row is stored as value\n+    testGetPutIterOnStateManager(stateManager, OUTPUT_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW, TEST_ROW)\n+  }\n+\n+  // ============================ StateManagerImplV2 ============================\n+  test(\"StateManager v2 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 2)\n+\n+    // in V2, row for values itself (excluding keys from input row) is stored as value\n+    // so that stored value doesn't have key part, but state manager V2 will provide same output\n+    // as V1 when getting row for key\n+    testGetPutIterOnStateManager(stateManager, VALUES_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW,\n+      TEST_VALUE_ROW)\n+  }\n+\n+  private def newStateManager(\n+      keysAttributes: Seq[Attribute],\n+      outputAttributes: Seq[Attribute],\n+      version: Int): StreamingAggregationStateManager = {\n+    StreamingAggregationStateManager.createStateManager(keysAttributes, outputAttributes, version)\n+  }\n+\n+  private def testGetPutIterOnStateManager(\n+      stateManager: StreamingAggregationStateManager,\n+      expectedValueExpressions: Seq[Attribute],\n+      inputRow: UnsafeRow,\n+      expectedStateKey: UnsafeRow,\n+      expectedStateValue: UnsafeRow): Unit = {\n+\n+    assert(stateManager.getValueExpressions === expectedValueExpressions)\n+\n+    val memoryStateStore = new MemoryStateStore()\n+    stateManager.put(memoryStateStore, inputRow)\n+\n+    assert(memoryStateStore.iterator().size === 1)\n+\n+    val keyRow = stateManager.extractKey(inputRow)\n+    assert(keyRow === expectedStateKey)\n+\n+    // iterate state store and verify whether expected format of key and value are stored\n+    val pair = memoryStateStore.iterator().next()\n+    assert(pair.key === keyRow)\n+    assert(pair.value === expectedStateValue)\n+    assert(stateManager.restoreOriginRow(pair) === inputRow)\n+\n+    // verify the stored value once again via get\n+    assert(memoryStateStore.get(keyRow) === expectedStateValue)\n+\n+    // state manager should return row which is same as input row regardless of format version\n+    assert(inputRow === stateManager.get(memoryStateStore, keyRow))\n+  }\n+\n+}\n+\n+object TestMaterial {\n+  val KEYS: Seq[String] = Seq(\"key1\", \"key2\")"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I intended to use them like `static final` fields: so treated them as constants and follow the style guide for constants - `Constants should be all uppercase letters and be put in a companion object.` That's why I extracted them into separate object (though it is not a companion object due to naming better) as well as naming as uppercases.\r\n\r\nBut that is not intentional and definitely bad if it requires us to jump back and forth. I'm going to place them as earliest part of class for now, but please let me know you are seeing better place to put.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T08:07:48Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, SpecificInternalRow, UnsafeProjection, UnsafeRow}\n+import org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection\n+import org.apache.spark.sql.execution.streaming.StatefulOperatorsHelper.StreamingAggregationStateManager\n+import org.apache.spark.sql.streaming.StreamTest\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+class StatefulOperatorsHelperSuite extends StreamTest {\n+  import TestMaterial._\n+\n+  test(\"StateManager v1 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 1)\n+\n+    // in V1, input row is stored as value\n+    testGetPutIterOnStateManager(stateManager, OUTPUT_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW, TEST_ROW)\n+  }\n+\n+  // ============================ StateManagerImplV2 ============================\n+  test(\"StateManager v2 - get, put, iter\") {\n+    val stateManager = newStateManager(KEYS_ATTRIBUTES, OUTPUT_ATTRIBUTES, 2)\n+\n+    // in V2, row for values itself (excluding keys from input row) is stored as value\n+    // so that stored value doesn't have key part, but state manager V2 will provide same output\n+    // as V1 when getting row for key\n+    testGetPutIterOnStateManager(stateManager, VALUES_ATTRIBUTES, TEST_ROW, TEST_KEY_ROW,\n+      TEST_VALUE_ROW)\n+  }\n+\n+  private def newStateManager(\n+      keysAttributes: Seq[Attribute],\n+      outputAttributes: Seq[Attribute],\n+      version: Int): StreamingAggregationStateManager = {\n+    StreamingAggregationStateManager.createStateManager(keysAttributes, outputAttributes, version)\n+  }\n+\n+  private def testGetPutIterOnStateManager(\n+      stateManager: StreamingAggregationStateManager,\n+      expectedValueExpressions: Seq[Attribute],\n+      inputRow: UnsafeRow,\n+      expectedStateKey: UnsafeRow,\n+      expectedStateValue: UnsafeRow): Unit = {\n+\n+    assert(stateManager.getValueExpressions === expectedValueExpressions)\n+\n+    val memoryStateStore = new MemoryStateStore()\n+    stateManager.put(memoryStateStore, inputRow)\n+\n+    assert(memoryStateStore.iterator().size === 1)\n+\n+    val keyRow = stateManager.extractKey(inputRow)\n+    assert(keyRow === expectedStateKey)\n+\n+    // iterate state store and verify whether expected format of key and value are stored\n+    val pair = memoryStateStore.iterator().next()\n+    assert(pair.key === keyRow)\n+    assert(pair.value === expectedStateValue)\n+    assert(stateManager.restoreOriginRow(pair) === inputRow)\n+\n+    // verify the stored value once again via get\n+    assert(memoryStateStore.get(keyRow) === expectedStateValue)\n+\n+    // state manager should return row which is same as input row regardless of format version\n+    assert(inputRow === stateManager.get(memoryStateStore, keyRow))\n+  }\n+\n+}\n+\n+object TestMaterial {\n+  val KEYS: Seq[String] = Seq(\"key1\", \"key2\")"
  }],
  "prId": 21733
}]