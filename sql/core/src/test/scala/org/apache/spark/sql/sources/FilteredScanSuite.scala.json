[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "comment?\n",
    "commit": "92dfc5508571bd176d7b8cf436404ad9c497ab11",
    "createdAt": "2015-11-02T00:11:23Z",
    "diffHunk": "@@ -101,6 +130,10 @@ object FiltersPushed {\n   var list: Seq[Filter] = Nil\n }\n \n+object ColumnsRequired {\n+  var set: Set[String] = Set.empty\n+}"
  }],
  "prId": 9399
}, {
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Which tests trigger this case?\n",
    "commit": "92dfc5508571bd176d7b8cf436404ad9c497ab11",
    "createdAt": "2015-11-02T00:12:27Z",
    "diffHunk": "@@ -44,16 +44,46 @@ case class SimpleFilteredScan(from: Int, to: Int)(@transient val sqlContext: SQL\n       StructField(\"b\", IntegerType, nullable = false) ::\n       StructField(\"c\", StringType, nullable = false) :: Nil)\n \n+  /**\n+   * Given an array of [[Filter]]s, returns an array of [[Filter]]s that this data source relation\n+   * cannot handle.  Spark SQL will apply all returned [[Filter]]s against rows returned by this\n+   * data source relation.\n+   *\n+   * @since 1.6.0\n+   */\n+  override def unhandledFilters(filters: Array[Filter]): Array[Filter] = {\n+    def unhandled(filter: Filter): Boolean = {\n+      filter match {\n+        case EqualTo(\"b\", v) => true\n+        case EqualNullSafe(\"b\", v) => true\n+        case LessThan(\"b\", v: Int) => true\n+        case LessThanOrEqual(\"b\", v: Int) => true\n+        case GreaterThan(\"b\", v: Int) => true\n+        case GreaterThanOrEqual(\"b\", v: Int) => true\n+        case In(\"b\", values) => true\n+        case IsNull(\"b\") => true\n+        case IsNotNull(\"b\") => true\n+        case Not(pred) => unhandled(pred)\n+        case And(left, right) => unhandled(left) || unhandled(right)\n+        case Or(left, right) => unhandled(left) || unhandled(right)\n+        case _ => false"
  }],
  "prId": 9399
}, {
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Let's also add checks to make sure the `Filter` operator added by Spark SQL only contains unhandled predicates, unconvertible predicates, and predicates involving partition columns.\n",
    "commit": "92dfc5508571bd176d7b8cf436404ad9c497ab11",
    "createdAt": "2015-11-03T06:26:16Z",
    "diffHunk": "@@ -202,51 +232,60 @@ class FilteredScanSuite extends DataSourceTest with SharedSQLContext {\n     \"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\",\n     Seq(Row(5, 5 * 2, \"e\" * 5 + \"E\" * 5)))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT a FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT b FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT a, b FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 1\", 1)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 = a\", 1)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\"))\n+  testPushDown(\"SELECT b FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"b\"))\n+  testPushDown(\"SELECT a, b FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\", \"b\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 1\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 = a\", 1, Set(\"a\", \"b\", \"c\"))\n+\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1\", 9, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a >= 2\", 9, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1\", 9)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a >= 2\", 9)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 < a\", 9, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 <= a\", 9, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 < a\", 9)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 <= a\", 9)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 > a\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 >= a\", 2, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 > a\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 >= a\", 2)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 1\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a <= 2\", 2, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 1\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a <= 2\", 2)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1 AND a < 10\", 8, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1 AND a < 10\", 8)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a IN (1,3,5)\", 3, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a IN (1,3,5)\", 3)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 20\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE b = 1\", 10, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 20\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE b = 1\", 10)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 5 AND a > 1\", 3, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 3 OR a > 8\", 4, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE NOT (a < 6)\", 5, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 5 AND a > 1\", 3)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 3 OR a > 8\", 4)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE NOT (a < 6)\", 5)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'c%'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'C%'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'c%'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'C%'\", 0)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%D'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%d'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%D'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%d'\", 0)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%Ee%'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%Ee%'\", 0)\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c = 'aaaaaAAAAA'\", 1, Set(\"c\"))\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c IN ('aaaaaAAAAA', 'foo')\", 1, Set(\"c\"))\n \n-  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c = 'aaaaaAAAAA'\", 1)\n-  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c IN ('aaaaaAAAAA', 'foo')\", 1)\n+  // Columns only referenced by UDF filter must be required, as UDF filters can't be pushed down.\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE udf_even(A)\", 10, Set(\"a\", \"c\"))\n \n-  def testPushDown(sqlString: String, expectedCount: Int): Unit = {\n+  def testPushDown("
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "`SimpleFilteredScan` doesn't support partitioning. Updated `SimpleTextRelation` to make it support column pruning and filter push-down, and implemented `unhandledFilters` there to add these tests.\n",
    "commit": "92dfc5508571bd176d7b8cf436404ad9c497ab11",
    "createdAt": "2015-11-03T14:51:07Z",
    "diffHunk": "@@ -202,51 +232,60 @@ class FilteredScanSuite extends DataSourceTest with SharedSQLContext {\n     \"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\",\n     Seq(Row(5, 5 * 2, \"e\" * 5 + \"E\" * 5)))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT a FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT b FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT a, b FROM oneToTenFiltered WHERE A = 1\", 1)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 1\", 1)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 = a\", 1)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\"))\n+  testPushDown(\"SELECT b FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"b\"))\n+  testPushDown(\"SELECT a, b FROM oneToTenFiltered WHERE A = 1\", 1, Set(\"a\", \"b\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 1\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 = a\", 1, Set(\"a\", \"b\", \"c\"))\n+\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1\", 9, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a >= 2\", 9, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1\", 9)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a >= 2\", 9)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 < a\", 9, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 <= a\", 9, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 < a\", 9)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 <= a\", 9)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 > a\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 >= a\", 2, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 1 > a\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE 2 >= a\", 2)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 1\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a <= 2\", 2, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 1\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a <= 2\", 2)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1 AND a < 10\", 8, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a > 1 AND a < 10\", 8)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a IN (1,3,5)\", 3, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a IN (1,3,5)\", 3)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 20\", 0, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE b = 1\", 10, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a = 20\", 0)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE b = 1\", 10)\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 5 AND a > 1\", 3, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 3 OR a > 8\", 4, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE NOT (a < 6)\", 5, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 5 AND a > 1\", 3)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE a < 3 OR a > 8\", 4)\n-  testPushDown(\"SELECT * FROM oneToTenFiltered WHERE NOT (a < 6)\", 5)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'c%'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'C%'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'c%'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like 'C%'\", 0)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%D'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%d'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%D'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%d'\", 0)\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\", 1, Set(\"a\", \"b\", \"c\"))\n+  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%Ee%'\", 0, Set(\"a\", \"b\", \"c\"))\n \n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%eE%'\", 1)\n-  testPushDown(\"SELECT a, b, c FROM oneToTenFiltered WHERE c like '%Ee%'\", 0)\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c = 'aaaaaAAAAA'\", 1, Set(\"c\"))\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c IN ('aaaaaAAAAA', 'foo')\", 1, Set(\"c\"))\n \n-  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c = 'aaaaaAAAAA'\", 1)\n-  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE c IN ('aaaaaAAAAA', 'foo')\", 1)\n+  // Columns only referenced by UDF filter must be required, as UDF filters can't be pushed down.\n+  testPushDown(\"SELECT c FROM oneToTenFiltered WHERE udf_even(A)\", 10, Set(\"a\", \"c\"))\n \n-  def testPushDown(sqlString: String, expectedCount: Int): Unit = {\n+  def testPushDown("
  }],
  "prId": 9399
}]