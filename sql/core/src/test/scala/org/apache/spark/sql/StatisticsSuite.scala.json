[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "you can also check if the value is within 3 standard deviations.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-16T13:16:15Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "How to get the standard deviations?\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-18T03:29:24Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "It should be:\n1. estimate column statistics for several times.\n2. calculate mean and standard deviation of ndv for the multiple statistics.\n3. check if the real ndv value is within (mean + 3 \\* sd, mean - 3 \\* sd).\n\nPlease correct me if it is wrong.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T04:49:29Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "Why 3 standard deviations?\nI think for tests in this suite, we just need to make sure we get the stats, we should leave the accuracy test to `HyperLogLogPlusPlusSuite`, right?\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T05:35:01Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "`assert(colStats.ndv.get >= 0)` might be too loose. Can we check if it is more than (or equal to) 0 and less than (or equal to) the number of values in the column?\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T06:08:44Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "What if the number of values is equal to ndv (e.g. primary key)? Can we expect the approximate ndv from HyperLogLogPlusPlus is always less than the accurate ndv?\nBesides, ndv can be equal to zero.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T06:17:00Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I mean `0 <= ndv <= count(col)`.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T06:19:32Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Because the check here for estimated ndv value is not really related to the actual ndv value, we can't make sure if we really get the estimated ndv back. Especially we only use `ndv > 0` to check it. In an extreme case, we can replace the ndv expression with a literal(0) in the aggregation, the test would not check it out.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T06:24:27Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Of course my previous suggestion `0 <= ndv <= count(col)` is also failed for this standard. Using sd to check it is more reliable. I am not strong against this. But it should be better. See what @hvanhovell and @cloud-fan think?\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T06:26:52Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "I think I may know what @hvanhovell meant. The standard deviation is the parameter we pass to HyperLogLogPlusPlus, so the code may look like this:\n\n``` java\n        // ndv is an approximate value, so we make sure we have the value, and it should be\n        // within 3*SD's of the given rsd.\n        assert(colStats.ndv.get >= 0)\n        if (expectedColStats.ndv.get == 0) {\n          assert(colStats.ndv.get == 0)\n        } else if (expectedColStats.ndv.get > 0) {\n          val rsd = spark.sessionState.conf.ndvMaxError\n          val error = math.abs((colStats.ndv.get / expectedColStats.ndv.get.toDouble) - 1.0d)\n          assert(error <= rsd * 3.0d, \"Error should be within 3 std. errors.\")\n        }\n```\n\nWhat do you think?\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T17:15:30Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "I just think it is better to test this a bit more thoroughly. The HLL++ tests use a similar test.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T21:10:29Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "BTW: sorry for the very cryptic initial comment.\n",
    "commit": "734abad045a5378d14489a4e956b7a8e1c95a811",
    "createdAt": "2016-09-19T21:23:11Z",
    "diffHunk": "@@ -101,4 +101,47 @@ class StatisticsSuite extends QueryTest with SharedSQLContext {\n       checkTableStats(tableName, expectedRowCount = Some(2))\n     }\n   }\n+\n+  test(\"test column-level statistics for data source table created in InMemoryCatalog\") {\n+    def checkColStats(colStats: BasicColStats, expectedColStats: BasicColStats): Unit = {\n+      assert(colStats.dataType == expectedColStats.dataType)\n+      assert(colStats.numNulls == expectedColStats.numNulls)\n+      assert(colStats.max == expectedColStats.max)\n+      assert(colStats.min == expectedColStats.min)\n+      if (expectedColStats.ndv.isDefined) {\n+        // ndv is an approximate value, so we just make sure we have the value\n+        assert(colStats.ndv.get >= 0)"
  }],
  "prId": 15090
}]