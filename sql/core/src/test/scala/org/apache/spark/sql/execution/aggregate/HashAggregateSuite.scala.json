[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Move to `AggregationQuerySuite`?",
    "commit": "4c00a2b5386f318fbbded9e7f7e1daee7782758b",
    "createdAt": "2019-09-18T14:00:56Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSparkSession\n+import org.apache.spark.sql.types._\n+\n+class HashAggregateSuite extends SharedSparkSession {\n+\n+  import testImplicits._\n+\n+  test(\"SPARK-29140 HashAggregateExec aggregating binary type doesn't break codegen compilation\") {\n+    val withDistinct = countDistinct($\"c1\")"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Thanks, didn't indicate the existence of suite. Will move.",
    "commit": "4c00a2b5386f318fbbded9e7f7e1daee7782758b",
    "createdAt": "2019-09-18T20:40:08Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSparkSession\n+import org.apache.spark.sql.types._\n+\n+class HashAggregateSuite extends SharedSparkSession {\n+\n+  import testImplicits._\n+\n+  test(\"SPARK-29140 HashAggregateExec aggregating binary type doesn't break codegen compilation\") {\n+    val withDistinct = countDistinct($\"c1\")"
  }],
  "prId": 25830
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "plz check the result.",
    "commit": "4c00a2b5386f318fbbded9e7f7e1daee7782758b",
    "createdAt": "2019-09-18T14:01:43Z",
    "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.aggregate\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.functions._\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSparkSession\n+import org.apache.spark.sql.types._\n+\n+class HashAggregateSuite extends SharedSparkSession {\n+\n+  import testImplicits._\n+\n+  test(\"SPARK-29140 HashAggregateExec aggregating binary type doesn't break codegen compilation\") {\n+    val withDistinct = countDistinct($\"c1\")\n+\n+    val schema = new StructType().add(\"c1\", BinaryType, nullable = true)\n+    val schemaWithId = StructType(StructField(\"id\", IntegerType, nullable = false) +: schema.fields)\n+\n+    withSQLConf(\n+        SQLConf.CODEGEN_SPLIT_AGGREGATE_FUNC.key -> \"true\",\n+        SQLConf.CODEGEN_METHOD_SPLIT_THRESHOLD.key -> \"1\") {\n+      val emptyRows = spark.sparkContext.parallelize(Seq.empty[Row], 1)\n+      val aggDf = spark.createDataFrame(emptyRows, schemaWithId)\n+        .groupBy($\"id\" % 10 as \"group\")\n+        .agg(withDistinct)\n+        .orderBy(\"group\")\n+      aggDf.collect().toSeq"
  }],
  "prId": 25830
}]