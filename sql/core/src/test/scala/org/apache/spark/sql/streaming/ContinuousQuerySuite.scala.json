[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "stale doc\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T23:51:23Z",
    "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.sql.StreamTest\n+import org.apache.spark.sql.execution.streaming.{CompositeOffset, LongOffset, MemoryStream, StreamExecution}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class ContinuousQuerySuite extends StreamTest with SharedSQLContext {\n+\n+  import AwaitTerminationTester._\n+  import testImplicits._\n+\n+  test(\"lifecycle states and awaitTermination\") {\n+    val inputData = MemoryStream[Int]\n+    val mapped = inputData.toDS().map { 6 / _}\n+\n+    testStream(mapped)(\n+      AssertOnQuery(_.isActive === true),\n+      AssertOnQuery(_.exception.isEmpty),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3),\n+      TestAwaitTermination(ExpectBlocked),\n+      TestAwaitTermination(ExpectBlocked, timeoutMs = 2000),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 10, expectedReturnValue = false),\n+      StopStream,\n+      AssertOnQuery(_.isActive === false),\n+      AssertOnQuery(_.exception.isEmpty),\n+      TestAwaitTermination(ExpectNotBlocked),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 2000, expectedReturnValue = true),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 10, expectedReturnValue = true),\n+      StartStream,\n+      AssertOnQuery(_.isActive === true),\n+      AddData(inputData, 0),\n+      ExpectFailure[SparkException],\n+      AssertOnQuery(_.isActive === false),\n+      TestAwaitTermination(ExpectException[SparkException]),\n+      TestAwaitTermination(ExpectException[SparkException], timeoutMs = 2000),\n+      TestAwaitTermination(ExpectException[SparkException], timeoutMs = 10),\n+      AssertOnQuery(\n+        q => q.exception.get.startOffset.get === q.streamProgress.toCompositeOffset(Seq(inputData)),\n+        \"incorrect start offset on exception\")\n+    )\n+  }\n+\n+  test(\"source and sink statuses\") {\n+    val inputData = MemoryStream[Int]\n+    val mapped = inputData.toDS().map(6 / _)\n+\n+    testStream(mapped)(\n+      AssertOnQuery(_.sourceStatuses.length === 1),\n+      AssertOnQuery(_.sourceStatuses(0).description.contains(\"Memory\")),\n+      AssertOnQuery(_.sourceStatuses(0).offset === None),\n+      AssertOnQuery(_.sinkStatus.description.contains(\"Memory\")),\n+      AssertOnQuery(_.sinkStatus.offset === None),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3),\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(0))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(0)))),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3, 6, 3),\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(1))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(1)))),\n+      AddData(inputData, 0),\n+      ExpectFailure[SparkException],\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(2))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(1))))\n+    )\n+  }\n+\n+  /**\n+   * A [[StreamAction]] to test the behavior of `StandingQuery.awaitTermination()`.\n+   *\n+   * @param expectedBehavior  Expected behavior (not blocked, blocked, or exception thrown)\n+   * @param timeoutMs         Timeout in milliseconds\n+   *                          When timeoutMs <= 0, awaitTermination() is tested (i.e. w/o timeout)\n+   *                          When timeoutMs > 0, awaitTermination(timeoutMs) is tested\n+   * @param expectedReturnValue Expected return value when awaitTermination(timeoutMs) is used\n+   */\n+  case class TestAwaitTermination(\n+      expectedBehavior: ExpectedBehavior,\n+      timeoutMs: Int = -1,\n+      expectedReturnValue: Boolean = false\n+    ) extends AssertOnQuery(\n+      TestAwaitTermination.assertOnQueryCondition(expectedBehavior, timeoutMs, expectedReturnValue),\n+      \"Error testing awaitTermination behavior\"\n+    ) {\n+    override def toString(): String = {\n+      s\"TestAwaitTermination($expectedBehavior, timeoutMs = $timeoutMs, \" +\n+        s\"expectedReturnValue = $expectedReturnValue)\"\n+    }\n+  }\n+\n+  object TestAwaitTermination {\n+\n+    /**\n+     * Tests the behavior of `StandingQuery.awaitTermination`."
  }],
  "prId": 11030
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "stale doc\n",
    "commit": "458199b3cb7acd3f57bcc425830ea219f92b91d8",
    "createdAt": "2016-02-05T23:51:32Z",
    "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.sql.StreamTest\n+import org.apache.spark.sql.execution.streaming.{CompositeOffset, LongOffset, MemoryStream, StreamExecution}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class ContinuousQuerySuite extends StreamTest with SharedSQLContext {\n+\n+  import AwaitTerminationTester._\n+  import testImplicits._\n+\n+  test(\"lifecycle states and awaitTermination\") {\n+    val inputData = MemoryStream[Int]\n+    val mapped = inputData.toDS().map { 6 / _}\n+\n+    testStream(mapped)(\n+      AssertOnQuery(_.isActive === true),\n+      AssertOnQuery(_.exception.isEmpty),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3),\n+      TestAwaitTermination(ExpectBlocked),\n+      TestAwaitTermination(ExpectBlocked, timeoutMs = 2000),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 10, expectedReturnValue = false),\n+      StopStream,\n+      AssertOnQuery(_.isActive === false),\n+      AssertOnQuery(_.exception.isEmpty),\n+      TestAwaitTermination(ExpectNotBlocked),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 2000, expectedReturnValue = true),\n+      TestAwaitTermination(ExpectNotBlocked, timeoutMs = 10, expectedReturnValue = true),\n+      StartStream,\n+      AssertOnQuery(_.isActive === true),\n+      AddData(inputData, 0),\n+      ExpectFailure[SparkException],\n+      AssertOnQuery(_.isActive === false),\n+      TestAwaitTermination(ExpectException[SparkException]),\n+      TestAwaitTermination(ExpectException[SparkException], timeoutMs = 2000),\n+      TestAwaitTermination(ExpectException[SparkException], timeoutMs = 10),\n+      AssertOnQuery(\n+        q => q.exception.get.startOffset.get === q.streamProgress.toCompositeOffset(Seq(inputData)),\n+        \"incorrect start offset on exception\")\n+    )\n+  }\n+\n+  test(\"source and sink statuses\") {\n+    val inputData = MemoryStream[Int]\n+    val mapped = inputData.toDS().map(6 / _)\n+\n+    testStream(mapped)(\n+      AssertOnQuery(_.sourceStatuses.length === 1),\n+      AssertOnQuery(_.sourceStatuses(0).description.contains(\"Memory\")),\n+      AssertOnQuery(_.sourceStatuses(0).offset === None),\n+      AssertOnQuery(_.sinkStatus.description.contains(\"Memory\")),\n+      AssertOnQuery(_.sinkStatus.offset === None),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3),\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(0))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(0)))),\n+      AddData(inputData, 1, 2),\n+      CheckAnswer(6, 3, 6, 3),\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(1))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(1)))),\n+      AddData(inputData, 0),\n+      ExpectFailure[SparkException],\n+      AssertOnQuery(_.sourceStatuses(0).offset === Some(LongOffset(2))),\n+      AssertOnQuery(_.sinkStatus.offset === Some(CompositeOffset.fill(LongOffset(1))))\n+    )\n+  }\n+\n+  /**\n+   * A [[StreamAction]] to test the behavior of `StandingQuery.awaitTermination()`."
  }],
  "prId": 11030
}]