[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Shall we have multiple relations with split schema for each? It wouldn't necessarily have one big deep nested schema which makes hard to read.",
    "commit": "8d822eea805e1b2dc40b866ca8ac4893e53ad51b",
    "createdAt": "2018-08-13T08:26:14Z",
    "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.exceptions.TestFailedException\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.NamedExpression\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.catalyst.plans.logical.LocalRelation\n+import org.apache.spark.sql.types._\n+\n+class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n+  private val innerSchemaCol1 = StructField(\"col2\", StructType(\n+    StructField(\"field1\", IntegerType) ::\n+      StructField(\"field2\", ArrayType(IntegerType, containsNull = false)) ::\n+      StructField(\"field3\", ArrayType(StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) ::\n+          StructField(\"subfield3\", ArrayType(IntegerType)) :: Nil)), nullable = false) ::\n+      StructField(\"field4\", MapType(StringType, StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", ArrayType(IntegerType, containsNull = false))\n+          :: Nil), valueContainsNull = false)) ::\n+      StructField(\"field5\", ArrayType(StructType(\n+        StructField(\"subfield1\", StructType(\n+          StructField(\"subsubfield1\", IntegerType) ::\n+            StructField(\"subsubfield2\", IntegerType) :: Nil), nullable = false) ::\n+          StructField(\"subfield2\", StructType(\n+            StructField(\"subsubfield1\", StructType(\n+              StructField(\"subsubsubfield1\", StringType) :: Nil)) ::\n+              StructField(\"subsubfield2\", IntegerType) :: Nil)) :: Nil)), nullable = false) ::\n+      StructField(\"field6\", StructType(\n+        StructField(\"subfield1\", StringType, nullable = false) ::\n+          StructField(\"subfield2\", StringType) :: Nil)) ::\n+      StructField(\"field7\", StructType(\n+        StructField(\"subfield1\", StructType(\n+          StructField(\"subsubfield1\", IntegerType) ::\n+            StructField(\"subsubfield2\", IntegerType) :: Nil)) :: Nil)) ::\n+      StructField(\"field8\", MapType(StringType, ArrayType(StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", ArrayType(IntegerType, containsNull = false))\n+          :: Nil)), valueContainsNull = false)) ::\n+      StructField(\"field9\", MapType(StringType, IntegerType, valueContainsNull = false)) :: Nil))\n+\n+  // The test schema as a tree string, i.e. `schema.treeString`\n+  // root\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: struct (nullable = true)\n+  //  |    |-- field1: integer (nullable = true)\n+  //  |    |-- field2: array (nullable = true)\n+  //  |    |    |-- element: integer (containsNull = false)\n+  //  |    |-- field3: array (nullable = false)\n+  //  |    |    |-- element: struct (containsNull = true)\n+  //  |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |-- subfield2: integer (nullable = true)\n+  //  |    |    |    |-- subfield3: array (nullable = true)\n+  //  |    |    |    |    |-- element: integer (containsNull = true)\n+  //  |    |-- field4: map (nullable = true)\n+  //  |    |    |-- key: string\n+  //  |    |    |-- value: struct (valueContainsNull = false)\n+  //  |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |-- subfield2: array (nullable = true)\n+  //  |    |    |    |    |-- element: integer (containsNull = false)\n+  //  |    |-- field5: array (nullable = false)\n+  //  |    |    |-- element: struct (containsNull = true)\n+  //  |    |    |    |-- subfield1: struct (nullable = false)\n+  //  |    |    |    |    |-- subsubfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subsubfield2: integer (nullable = true)\n+  //  |    |    |    |-- subfield2: struct (nullable = true)\n+  //  |    |    |    |    |-- subsubfield1: struct (nullable = true)\n+  //  |    |    |    |    |    |-- subsubsubfield1: string (nullable = true)\n+  //  |    |    |    |    |-- subsubfield2: integer (nullable = true)\n+  //  |    |-- field6: struct (nullable = true)\n+  //  |    |    |-- subfield1: string (nullable = false)\n+  //  |    |    |-- subfield2: string (nullable = true)\n+  //  |    |-- field7: struct (nullable = true)\n+  //  |    |    |-- subfield1: struct (nullable = true)\n+  //  |    |    |    |-- subsubfield1: integer (nullable = true)\n+  //  |    |    |    |-- subsubfield2: integer (nullable = true)\n+  //  |    |-- field8: map (nullable = true)\n+  //  |    |    |-- key: string\n+  //  |    |    |-- value: array (valueContainsNull = false)\n+  //  |    |    |    |-- element: struct (containsNull = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: array (nullable = true)\n+  //  |    |    |    |    |    |-- element: integer (containsNull = false)\n+  //  |    |-- field9: map (nullable = true)\n+  //  |    |    |-- key: string\n+  //  |    |    |-- value: integer (valueContainsNull = false)\n+  //  |-- col3: array (nullable = false)\n+  //  |    |-- element: struct (containsNull = false)\n+  //  |    |    |-- field1: struct (nullable = true)\n+  //  |    |    |    |-- subfield1: integer (nullable = false)\n+  //  |    |    |    |-- subfield2: integer (nullable = true)\n+  //  |    |    |-- field2: map (nullable = true)\n+  //  |    |    |    |-- key: string\n+  //  |    |    |    |-- value: integer (valueContainsNull = false)\n+  //  |-- col4: map (nullable = false)\n+  //  |    |-- key: string\n+  //  |    |-- value: struct (valueContainsNull = false)\n+  //  |    |    |-- field1: struct (nullable = true)\n+  //  |    |    |    |-- subfield1: integer (nullable = false)\n+  //  |    |    |    |-- subfield2: integer (nullable = true)\n+  //  |    |    |-- field2: map (nullable = true)\n+  //  |    |    |    |-- key: string\n+  //  |    |    |    |-- value: integer (valueContainsNull = false)\n+  //  |-- col5: array (nullable = true)\n+  //  |    |-- element: map (containsNull = true)\n+  //  |    |    |-- key: string\n+  //  |    |    |-- value: struct (valueContainsNull = false)\n+  //  |    |    |    |-- field1: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  //  |-- col6: map (nullable = true)\n+  //  |    |-- key: string\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field1: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  //  |-- col7: array (nullable = true)\n+  //  |    |-- element: struct (containsNull = true)\n+  //  |    |    |-- field1: integer (nullable = false)\n+  //  |    |    |-- field2: struct (nullable = true)\n+  //  |    |    |    |-- subfield1: integer (nullable = false)\n+  //  |    |    |-- field3: array (nullable = true)\n+  //  |    |    |    |-- element: struct (containsNull = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = false)\n+  //  |-- col8: array (nullable = true)\n+  //  |    |-- element: struct (containsNull = true)\n+  //  |    |    |-- field1: array (nullable = false)\n+  //  |    |    |    |-- element: integer (containsNull = false)\n+  private val schema =\n+    StructType(\n+      StructField(\"col1\", StringType, nullable = false) ::\n+      innerSchemaCol1 ::\n+      StructField(\"col3\", ArrayType(StructType(\n+        StructField(\"field1\", StructType(\n+         StructField(\"subfield1\", IntegerType, nullable = false) ::\n+         StructField(\"subfield2\", IntegerType) :: Nil)) ::\n+       StructField(\"field2\", MapType(StringType, IntegerType, valueContainsNull = false))\n+          :: Nil), containsNull = false), nullable = false) ::\n+     StructField(\"col4\", MapType(StringType, StructType(\n+       StructField(\"field1\", StructType(\n+         StructField(\"subfield1\", IntegerType, nullable = false) ::\n+         StructField(\"subfield2\", IntegerType) :: Nil)) ::\n+       StructField(\"field2\", MapType(StringType, IntegerType, valueContainsNull = false))\n+         :: Nil), valueContainsNull = false), nullable = false) ::\n+     StructField(\"col5\", ArrayType(MapType(StringType, StructType(\n+       StructField(\"field1\", StructType(\n+         StructField(\"subfield1\", IntegerType) ::\n+         StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), valueContainsNull = false))) ::\n+     StructField(\"col6\", MapType(StringType, ArrayType(StructType(\n+       StructField(\"field1\", StructType(\n+         StructField(\"subfield1\", IntegerType) ::\n+         StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false))) ::\n+     StructField(\"col7\", ArrayType(StructType(\n+       StructField(\"field1\", IntegerType, nullable = false) ::\n+       StructField(\"field2\", StructType(\n+         StructField(\"subfield1\", IntegerType, nullable = false) :: Nil)) ::\n+       StructField(\"field3\", ArrayType(StructType(\n+         StructField(\"subfield1\", IntegerType, nullable = false) :: Nil))) :: Nil))) ::\n+     StructField(\"col8\", ArrayType(StructType(\n+       StructField(\"field1\", ArrayType(IntegerType, containsNull = false), nullable = false)\n+         :: Nil))) :: Nil)\n+\n+  private val testRelation = LocalRelation(schema.toAttributes)"
  }],
  "prId": 21889
}]