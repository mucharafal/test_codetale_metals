[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what do you mean by `dynamic clause`?",
    "commit": "c4eeee5b4f8bdaff442fea7db2f26d1db102c3d4",
    "createdAt": "2019-07-29T08:56:28Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2\n+\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.internal.SQLConf.{PARTITION_OVERWRITE_MODE, PartitionOverwriteMode}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DataSourceV2DataFrameSuite extends QueryTest with SharedSQLContext with BeforeAndAfter {\n+  import testImplicits._\n+\n+  before {\n+    spark.conf.set(\"spark.sql.catalog.testcat\", classOf[TestInMemoryTableCatalog].getName)\n+    spark.conf.set(\"spark.sql.catalog.testcat2\", classOf[TestInMemoryTableCatalog].getName)\n+\n+    val df = spark.createDataFrame(Seq((1L, \"a\"), (2L, \"b\"), (3L, \"c\"))).toDF(\"id\", \"data\")\n+    df.createOrReplaceTempView(\"source\")\n+    val df2 = spark.createDataFrame(Seq((4L, \"d\"), (5L, \"e\"), (6L, \"f\"))).toDF(\"id\", \"data\")\n+    df2.createOrReplaceTempView(\"source2\")\n+  }\n+\n+  after {\n+    spark.catalog(\"testcat\").asInstanceOf[TestInMemoryTableCatalog].clearTables()\n+    spark.sql(\"DROP VIEW source\")\n+    spark.sql(\"DROP VIEW source2\")\n+  }\n+\n+  test(\"insertInto: append\") {\n+    val t1 = \"testcat.ns1.ns2.tbl\"\n+    withTable(t1) {\n+      sql(s\"CREATE TABLE $t1 (id bigint, data string) USING foo\")\n+      spark.table(\"source\").select(\"id\", \"data\").write.insertInto(t1)\n+      checkAnswer(spark.table(t1), spark.table(\"source\"))\n+    }\n+  }\n+\n+  test(\"insertInto: append - across catalog\") {\n+    val t1 = \"testcat.ns1.ns2.tbl\"\n+    val t2 = \"testcat2.db.tbl\"\n+    withTable(t1, t2) {\n+      sql(s\"CREATE TABLE $t1 USING foo AS TABLE source\")\n+      sql(s\"CREATE TABLE $t2 (id bigint, data string) USING foo\")\n+      spark.table(t1).write.insertInto(t2)\n+      checkAnswer(spark.table(t2), spark.table(\"source\"))\n+    }\n+  }\n+\n+  test(\"insertInto: append partitioned table - dynamic clause\") {"
  }, {
    "author": {
      "login": "jzhuge"
    },
    "body": "This is a copy-paste issue. I will remove \" - dynamic clause\" from the title. insertInto does not have anything similar to INSERT INTO's PARTITION clause.",
    "commit": "c4eeee5b4f8bdaff442fea7db2f26d1db102c3d4",
    "createdAt": "2019-07-29T16:25:26Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2\n+\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.internal.SQLConf.{PARTITION_OVERWRITE_MODE, PartitionOverwriteMode}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DataSourceV2DataFrameSuite extends QueryTest with SharedSQLContext with BeforeAndAfter {\n+  import testImplicits._\n+\n+  before {\n+    spark.conf.set(\"spark.sql.catalog.testcat\", classOf[TestInMemoryTableCatalog].getName)\n+    spark.conf.set(\"spark.sql.catalog.testcat2\", classOf[TestInMemoryTableCatalog].getName)\n+\n+    val df = spark.createDataFrame(Seq((1L, \"a\"), (2L, \"b\"), (3L, \"c\"))).toDF(\"id\", \"data\")\n+    df.createOrReplaceTempView(\"source\")\n+    val df2 = spark.createDataFrame(Seq((4L, \"d\"), (5L, \"e\"), (6L, \"f\"))).toDF(\"id\", \"data\")\n+    df2.createOrReplaceTempView(\"source2\")\n+  }\n+\n+  after {\n+    spark.catalog(\"testcat\").asInstanceOf[TestInMemoryTableCatalog].clearTables()\n+    spark.sql(\"DROP VIEW source\")\n+    spark.sql(\"DROP VIEW source2\")\n+  }\n+\n+  test(\"insertInto: append\") {\n+    val t1 = \"testcat.ns1.ns2.tbl\"\n+    withTable(t1) {\n+      sql(s\"CREATE TABLE $t1 (id bigint, data string) USING foo\")\n+      spark.table(\"source\").select(\"id\", \"data\").write.insertInto(t1)\n+      checkAnswer(spark.table(t1), spark.table(\"source\"))\n+    }\n+  }\n+\n+  test(\"insertInto: append - across catalog\") {\n+    val t1 = \"testcat.ns1.ns2.tbl\"\n+    val t2 = \"testcat2.db.tbl\"\n+    withTable(t1, t2) {\n+      sql(s\"CREATE TABLE $t1 USING foo AS TABLE source\")\n+      sql(s\"CREATE TABLE $t2 (id bigint, data string) USING foo\")\n+      spark.table(t1).write.insertInto(t2)\n+      checkAnswer(spark.table(t2), spark.table(\"source\"))\n+    }\n+  }\n+\n+  test(\"insertInto: append partitioned table - dynamic clause\") {"
  }],
  "prId": 24980
}]