[{
  "comments": [{
    "author": {
      "login": "wangyum"
    },
    "body": "It is best to add tests in [`MsSqlServerIntegrationSuite`](https://github.com/apache/spark/blob/master/external/docker-integration-tests/src/test/scala/org/apache/spark/sql/jdbc/MsSqlServerIntegrationSuite.scala) as well.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-06-26T06:37:03Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "@wangyum Thanks for pointing me to MsSqlServerIntegration.  Agree that's a good place to add these test. Looks like these test spin up a SQL server for test. Is this run in CI? Any pointers to how to run these test.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-01T07:47:45Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "```\r\n./build/mvn install -DskipTests\r\n./build/mvn test -Pdocker-integration-tests -pl :spark-docker-integration-tests_2.12\r\n```\r\n\r\nhttp://spark.apache.org/docs/latest/building-spark.html#running-docker-based-integration-test-suites",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-01T07:56:38Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "Thanks",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-01T17:37:27Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "@wangyum Thanks for this comment. Integration test brought to light another issue that i have now fixed in JDBCutils.scala (Byte was being written as Int, thus Byte with value 255 was interpreted as -1, resulting in a JDBC exception). ",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-03T23:19:56Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We need spaces among parameters.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-06T18:31:30Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {\n+    val msSqlServerDialect = JdbcDialects.get(\"jdbc:sqlserver\")\n+    val metadata = new MetadataBuilder().putLong(\"scale\", 1)\n+\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.TINYINT,\"TINYINT\",1,metadata).get =="
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "Thanks dongjoon. I have resolved these. ",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-08T17:45:31Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {\n+    val msSqlServerDialect = JdbcDialects.get(\"jdbc:sqlserver\")\n+    val metadata = new MetadataBuilder().putLong(\"scale\", 1)\n+\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.TINYINT,\"TINYINT\",1,metadata).get =="
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "indentation?",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-06T18:31:38Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {\n+    val msSqlServerDialect = JdbcDialects.get(\"jdbc:sqlserver\")\n+    val metadata = new MetadataBuilder().putLong(\"scale\", 1)\n+\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.TINYINT,\"TINYINT\",1,metadata).get ==\n+          ByteType)"
  }, {
    "author": {
      "login": "shivsood"
    },
    "body": "Resolved. Sorry, about this oversight.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-08T17:46:00Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {\n+    val msSqlServerDialect = JdbcDialects.get(\"jdbc:sqlserver\")\n+    val metadata = new MetadataBuilder().putLong(\"scale\", 1)\n+\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.TINYINT,\"TINYINT\",1,metadata).get ==\n+          ByteType)"
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Let's remove this empty line.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:14:26Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+"
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Let's remove this empty line.",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:14:47Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {\n+    val msSqlServerDialect = JdbcDialects.get(\"jdbc:sqlserver\")\n+    val metadata = new MetadataBuilder().putLong(\"scale\", 1)\n+\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.TINYINT, \"TINYINT\", 1,\n+      metadata).get == ByteType)\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.SMALLINT, \"SMALLINT\", 1,\n+      metadata).get == ShortType)\n+    assert(msSqlServerDialect.getCatalystType(java.sql.Types.REAL, \"REAL\", 1,\n+      metadata).get == FloatType)\n+"
  }],
  "prId": 24969
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since this is a bug fix, please use `SPARK-28151` prefix to this test case.\r\n```scala\r\n-  test(\"MsSqlServerDialect catalyst type mapping\") {\r\n+  test(\"SPARK-28151 MsSqlServerDialect catalyst type mapping\") {\r\n```",
    "commit": "f2700eb517246a72873090dffd35635e93283015",
    "createdAt": "2019-07-09T04:16:08Z",
    "diffHunk": "@@ -895,6 +895,24 @@ class JDBCSuite extends QueryTest\n       \"BIT\")\n     assert(msSqlServerDialect.getJDBCType(BinaryType).map(_.databaseTypeDefinition).get ==\n       \"VARBINARY(MAX)\")\n+    assert(msSqlServerDialect.getJDBCType(ByteType).map(_.databaseTypeDefinition).get ==\n+      \"TINYINT\")\n+\n+    assert(msSqlServerDialect.getJDBCType(ShortType).map(_.databaseTypeDefinition).get ==\n+      \"SMALLINT\")\n+  }\n+\n+  test(\"MsSqlServerDialect catalyst type mapping\") {"
  }],
  "prId": 24969
}]