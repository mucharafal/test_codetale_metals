[{
  "comments": [{
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "empty line\n",
    "commit": "4ef099b41843ce5a97aae5395e532bdb5e77e2f6",
    "createdAt": "2015-01-12T03:45:51Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.analysis.{EmptyCatalog, OverrideCatalog, SimpleCatalog}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.{BeforeAndAfter, FunSuite, Matchers}\n+\n+\n+class ShowTablesSuite extends FunSuite with Matchers with BeforeAndAfter {\n+\n+  val simpleCatalog = new SimpleCatalog(true)\n+\n+  val expectedTablesOne = List(\"org.apache.spark.sql.ListTablesSuite.foo\",\n+    \"org.apache.spark.sql.ListTablesSuite.bar\",\n+    \"org.apache.spark.sql.ListTablesSuite.baz\")\n+\n+  val expectedTablesTwo = List(\"org.apache.spark.sql.ListTablesSuite.Larry\",\n+    \"org.apache.spark.sql.ListTablesSuite.Moe\",\n+    \"org.apache.spark.sql.ListTablesSuite.Curly\")\n+\n+  val overrideCatalog = new SimpleCatalog(true) with OverrideCatalog\n+\n+  val overrideCaseInsensitiveCatalog = new SimpleCatalog(false) with OverrideCatalog\n+\n+\n+  before {\n+    expectedTablesOne.map(t => simpleCatalog.registerTable(Seq(t), null))\n+    expectedTablesOne.map(t => overrideCatalog.registerTable(Seq(\"A\", t), null))\n+    expectedTablesTwo.map(t => overrideCatalog.registerTable(Seq(\"B\", t), null))\n+    expectedTablesOne.map(t => overrideCaseInsensitiveCatalog.registerTable(Seq(\"x\", t), null))\n+    expectedTablesTwo.map(t => overrideCaseInsensitiveCatalog.registerTable(Seq(\"y\", t), null))\n+\n+    expectedTablesOne.map(t =>\n+      TestSQLContext.registerRDDAsTable(new SchemaRDD(TestSQLContext,null),t))\n+  }\n+\n+  after {\n+    simpleCatalog.unregisterAllTables()\n+    overrideCatalog.unregisterAllTables()\n+  }\n+\n+  test(\"SPARK-3299 showTables (foo, bar, baz) from SimpleCatalog\") {\n+    val returnedTables = simpleCatalog.showTables(None)\n+    returnedTables should contain theSameElementsAs expectedTablesOne\n+  }\n+\n+  test(\"SPARK-3299 showTables works correctly when no databases defined for tables\"){\n+      val newTables = List(\"tableX\", \"tableY\", \"tableZ\")\n+\n+      newTables.map(t => overrideCatalog.registerTable(Seq(t), null))\n+\n+      val returnedTables = overrideCatalog.showTables(Some(\"A\"))\n+      returnedTables should contain theSameElementsAs expectedTablesOne\n+  }\n+",
    "line": 69
  }],
  "prId": 3872
}, {
  "comments": [{
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "empty line\n",
    "commit": "4ef099b41843ce5a97aae5395e532bdb5e77e2f6",
    "createdAt": "2015-01-12T03:46:04Z",
    "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.analysis.{EmptyCatalog, OverrideCatalog, SimpleCatalog}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.{BeforeAndAfter, FunSuite, Matchers}\n+\n+"
  }],
  "prId": 3872
}]