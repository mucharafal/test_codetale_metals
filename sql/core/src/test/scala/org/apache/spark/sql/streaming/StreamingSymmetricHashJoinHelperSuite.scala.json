[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: just importing `org.apache.spark.sql.types._` is sufficient to use `IntegerType`, dont need `DataTypes.IntegerType`",
    "commit": "23db42c5ae2011d57ba774435306487bac76f01b",
    "createdAt": "2017-10-13T01:47:00Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.sql.Column\n+import org.apache.spark.sql.catalyst.analysis.SimpleAnalyzer\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.execution.{LeafExecNode, LocalTableScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.columnar.InMemoryTableScanExec\n+import org.apache.spark.sql.execution.streaming.StreamingSymmetricHashJoinHelper.JoinConditionSplitPredicates\n+import org.apache.spark.sql.types.DataTypes\n+\n+class StreamingSymmetricHashJoinHelperSuite extends StreamTest {\n+  import org.apache.spark.sql.functions._\n+\n+  val attributeA = AttributeReference(\"a\", DataTypes.IntegerType)()"
  }],
  "prId": 19452
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Nit: why should rightSideOnly be empty? The literals CAN be evaluated using right side only. This feels very asymmetrical situation.",
    "commit": "23db42c5ae2011d57ba774435306487bac76f01b",
    "createdAt": "2017-10-13T11:49:06Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.sql.Column\n+import org.apache.spark.sql.catalyst.analysis.SimpleAnalyzer\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.execution.{LeafExecNode, LocalTableScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.columnar.InMemoryTableScanExec\n+import org.apache.spark.sql.execution.streaming.StreamingSymmetricHashJoinHelper.JoinConditionSplitPredicates\n+import org.apache.spark.sql.types.DataTypes\n+\n+class StreamingSymmetricHashJoinHelperSuite extends StreamTest {\n+  import org.apache.spark.sql.functions._\n+\n+  val attributeA = AttributeReference(\"a\", DataTypes.IntegerType)()\n+  val attributeB = AttributeReference(\"b\", DataTypes.IntegerType)()\n+  val attributeC = AttributeReference(\"c\", DataTypes.IntegerType)()\n+  val attributeD = AttributeReference(\"d\", DataTypes.IntegerType)()\n+  val colA = new Column(attributeA)\n+  val colB = new Column(attributeB)\n+  val colC = new Column(attributeC)\n+  val colD = new Column(attributeD)\n+\n+  val left = new LocalTableScanExec(Seq(attributeA, attributeB), Seq())\n+  val right = new LocalTableScanExec(Seq(attributeC, attributeD), Seq())\n+\n+  test(\"empty\") {\n+    val split = JoinConditionSplitPredicates(None, left, right)\n+    assert(split.leftSideOnly.isEmpty)\n+    assert(split.rightSideOnly.isEmpty)\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.isEmpty)\n+  }\n+\n+  test(\"only literals\") {\n+    // Literal-only conjuncts end up on the left side because that's the first bucket they fit in.\n+    // There's no semantic reason they couldn't be in any bucket.\n+    val predicate = (lit(1) < lit(5) && lit(6) < lit(7) && lit(0) === lit(-1)).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.contains(predicate))\n+    assert(split.rightSideOnly.isEmpty)"
  }, {
    "author": {
      "login": "jose-torres"
    },
    "body": "I don't want to get into duplicating predicates here for the sake of symmetry. I could move literals to the post-join part maybe?",
    "commit": "23db42c5ae2011d57ba774435306487bac76f01b",
    "createdAt": "2017-10-13T17:59:33Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.sql.Column\n+import org.apache.spark.sql.catalyst.analysis.SimpleAnalyzer\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.execution.{LeafExecNode, LocalTableScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.columnar.InMemoryTableScanExec\n+import org.apache.spark.sql.execution.streaming.StreamingSymmetricHashJoinHelper.JoinConditionSplitPredicates\n+import org.apache.spark.sql.types.DataTypes\n+\n+class StreamingSymmetricHashJoinHelperSuite extends StreamTest {\n+  import org.apache.spark.sql.functions._\n+\n+  val attributeA = AttributeReference(\"a\", DataTypes.IntegerType)()\n+  val attributeB = AttributeReference(\"b\", DataTypes.IntegerType)()\n+  val attributeC = AttributeReference(\"c\", DataTypes.IntegerType)()\n+  val attributeD = AttributeReference(\"d\", DataTypes.IntegerType)()\n+  val colA = new Column(attributeA)\n+  val colB = new Column(attributeB)\n+  val colC = new Column(attributeC)\n+  val colD = new Column(attributeD)\n+\n+  val left = new LocalTableScanExec(Seq(attributeA, attributeB), Seq())\n+  val right = new LocalTableScanExec(Seq(attributeC, attributeD), Seq())\n+\n+  test(\"empty\") {\n+    val split = JoinConditionSplitPredicates(None, left, right)\n+    assert(split.leftSideOnly.isEmpty)\n+    assert(split.rightSideOnly.isEmpty)\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.isEmpty)\n+  }\n+\n+  test(\"only literals\") {\n+    // Literal-only conjuncts end up on the left side because that's the first bucket they fit in.\n+    // There's no semantic reason they couldn't be in any bucket.\n+    val predicate = (lit(1) < lit(5) && lit(6) < lit(7) && lit(0) === lit(-1)).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.contains(predicate))\n+    assert(split.rightSideOnly.isEmpty)"
  }],
  "prId": 19452
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "the tests would be much more intuitive and therefore easier to read if these columns and variables are named such that they are obviously part of left of right. E.g. leftAttribute1 instead of attributeA, leftCol1 instead of colA, etc.",
    "commit": "23db42c5ae2011d57ba774435306487bac76f01b",
    "createdAt": "2017-10-13T11:52:21Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.sql.Column\n+import org.apache.spark.sql.catalyst.analysis.SimpleAnalyzer\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.execution.{LeafExecNode, LocalTableScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.columnar.InMemoryTableScanExec\n+import org.apache.spark.sql.execution.streaming.StreamingSymmetricHashJoinHelper.JoinConditionSplitPredicates\n+import org.apache.spark.sql.types.DataTypes\n+\n+class StreamingSymmetricHashJoinHelperSuite extends StreamTest {\n+  import org.apache.spark.sql.functions._\n+\n+  val attributeA = AttributeReference(\"a\", DataTypes.IntegerType)()\n+  val attributeB = AttributeReference(\"b\", DataTypes.IntegerType)()\n+  val attributeC = AttributeReference(\"c\", DataTypes.IntegerType)()\n+  val attributeD = AttributeReference(\"d\", DataTypes.IntegerType)()"
  }],
  "prId": 19452
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "shouldnt we also test right only for left outer joins, and vice versa?",
    "commit": "23db42c5ae2011d57ba774435306487bac76f01b",
    "createdAt": "2017-10-13T20:33:41Z",
    "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import org.apache.spark.sql.Column\n+import org.apache.spark.sql.catalyst.analysis.SimpleAnalyzer\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.execution.{LeafExecNode, LocalTableScanExec, SparkPlan}\n+import org.apache.spark.sql.execution.columnar.InMemoryTableScanExec\n+import org.apache.spark.sql.execution.streaming.StreamingSymmetricHashJoinHelper.JoinConditionSplitPredicates\n+import org.apache.spark.sql.types.DataTypes\n+\n+class StreamingSymmetricHashJoinHelperSuite extends StreamTest {\n+  import org.apache.spark.sql.functions._\n+\n+  val attributeA = AttributeReference(\"a\", DataTypes.IntegerType)()\n+  val attributeB = AttributeReference(\"b\", DataTypes.IntegerType)()\n+  val attributeC = AttributeReference(\"c\", DataTypes.IntegerType)()\n+  val attributeD = AttributeReference(\"d\", DataTypes.IntegerType)()\n+  val colA = new Column(attributeA)\n+  val colB = new Column(attributeB)\n+  val colC = new Column(attributeC)\n+  val colD = new Column(attributeD)\n+\n+  val left = new LocalTableScanExec(Seq(attributeA, attributeB), Seq())\n+  val right = new LocalTableScanExec(Seq(attributeC, attributeD), Seq())\n+\n+  test(\"empty\") {\n+    val split = JoinConditionSplitPredicates(None, left, right)\n+    assert(split.leftSideOnly.isEmpty)\n+    assert(split.rightSideOnly.isEmpty)\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.isEmpty)\n+  }\n+\n+  test(\"only literals\") {\n+    // Literal-only conjuncts end up on the left side because that's the first bucket they fit in.\n+    // There's no semantic reason they couldn't be in any bucket.\n+    val predicate = (lit(1) < lit(5) && lit(6) < lit(7) && lit(0) === lit(-1)).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.contains(predicate))\n+    assert(split.rightSideOnly.isEmpty)\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.contains(predicate))\n+  }\n+\n+  test(\"only left\") {\n+    val predicate = (colA > lit(1) && colB > lit(5) && colA < colB).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.contains(predicate))\n+    assert(split.rightSideOnly.isEmpty)\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.contains(predicate))\n+  }\n+\n+  test(\"only right\") {\n+    val predicate = (colC > lit(1) && colD > lit(5) && colD < colC).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.isEmpty)\n+    assert(split.rightSideOnly.contains(predicate))\n+    assert(split.bothSides.isEmpty)\n+    assert(split.full.contains(predicate))\n+  }\n+\n+  test(\"mixed conjuncts\") {\n+    val predicate = (colA > colB && colC > colD && colA === colC && lit(1) === lit(1)).expr\n+    val split = JoinConditionSplitPredicates(Some(predicate), left, right)\n+\n+    assert(split.leftSideOnly.contains((colA > colB && lit(1) === lit(1)).expr))\n+    assert(split.rightSideOnly.contains((colC > colD).expr))\n+    assert(split.bothSides.contains((colA === colC).expr))\n+    assert(split.full.contains(predicate))\n+  }"
  }],
  "prId": 19452
}]