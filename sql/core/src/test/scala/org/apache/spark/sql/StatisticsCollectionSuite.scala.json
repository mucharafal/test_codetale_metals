[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @maropu .\r\n- Could you rebase once more to resolve the conflicts?\r\n- Can we advertise this SQL statement as a first example in the PR description instead of the raw public API?\r\nAlthough we add a public API to `CacheManager`, `CacheManager` is still documented as an internal to Spark SQL.",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-12T04:39:09Z",
    "diffHunk": "@@ -470,4 +471,34 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedTempView\", \"tempView\") {\n+      spark.sql(\n+        \"\"\"CACHE TABLE cachedTempView AS\n+          |  SELECT c0, avg(c1) AS v1, avg(c2) AS v2\n+          |  FROM (SELECT id % 3 AS c0, id % 5 AS c1, 2 AS c2 FROM range(1, 30))\n+          |  GROUP BY c0\n+        \"\"\".stripMargin)\n+\n+      // Analyzes one column in the cached logical plan\n+      spark.sql(\"ANALYZE TABLE cachedTempView COMPUTE STATISTICS FOR COLUMNS v1\".stripMargin)"
  }],
  "prId": 24047
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Maybe, `cachedQuery` is better than `cachedTempView`?\r\nFor me, `cachedTempView` sounds like the following.\r\n```sql\r\nCREATE TEMPORARY VIEW tempView AS ...\r\nCACHE TABLE tempView\r\n```\r\n\r\nWe can rename this from `cachedTempView` to `cachedQuery` first. Then, we can add a new test case for the real cached temp views of the above SQL case before line 496.",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-15T03:51:33Z",
    "diffHunk": "@@ -470,4 +471,34 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedTempView\", \"tempView\") {\n+      spark.sql(\n+        \"\"\"CACHE TABLE cachedTempView AS"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "fixed.",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-15T10:47:21Z",
    "diffHunk": "@@ -470,4 +471,34 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedTempView\", \"tempView\") {\n+      spark.sql(\n+        \"\"\"CACHE TABLE cachedTempView AS"
  }],
  "prId": 24047
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Also, please add a test coverage on the global temp view.",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-15T03:52:56Z",
    "diffHunk": "@@ -470,4 +471,34 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedTempView\", \"tempView\") {\n+      spark.sql(\n+        \"\"\"CACHE TABLE cachedTempView AS\n+          |  SELECT c0, avg(c1) AS v1, avg(c2) AS v2\n+          |  FROM (SELECT id % 3 AS c0, id % 5 AS c1, 2 AS c2 FROM range(1, 30))\n+          |  GROUP BY c0\n+        \"\"\".stripMargin)\n+\n+      // Analyzes one column in the cached logical plan\n+      spark.sql(\"ANALYZE TABLE cachedTempView COMPUTE STATISTICS FOR COLUMNS v1\")\n+      val queryStats1 = spark.table(\"cachedTempView\").queryExecution\n+        .optimizedPlan.stats.attributeStats\n+      assert(queryStats1.map(_._1.name).toSet === Set(\"v1\"))\n+\n+      // Analyzes two more columns\n+      spark.sql(\"ANALYZE TABLE cachedTempView COMPUTE STATISTICS FOR COLUMNS c0, v2\")\n+      val queryStats2 = spark.table(\"cachedTempView\").queryExecution\n+        .optimizedPlan.stats.attributeStats\n+      assert(queryStats2.map(_._1.name).toSet === Set(\"c0\", \"v1\", \"v2\"))\n+\n+      // Analyzes in a temporary table\n+      spark.sql(\"CREATE TEMPORARY VIEW tempView AS SELECT * FROM range(1, 30)\")\n+      val errMsg = intercept[NoSuchTableException] {\n+        spark.sql(\"ANALYZE TABLE tempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      }.getMessage\n+      assert(errMsg.contains(\"Table or view 'tempView' not found in database 'default'\"))\n+    }",
    "line": 73
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok, added.",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-15T10:47:14Z",
    "diffHunk": "@@ -470,4 +471,34 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedTempView\", \"tempView\") {\n+      spark.sql(\n+        \"\"\"CACHE TABLE cachedTempView AS\n+          |  SELECT c0, avg(c1) AS v1, avg(c2) AS v2\n+          |  FROM (SELECT id % 3 AS c0, id % 5 AS c1, 2 AS c2 FROM range(1, 30))\n+          |  GROUP BY c0\n+        \"\"\".stripMargin)\n+\n+      // Analyzes one column in the cached logical plan\n+      spark.sql(\"ANALYZE TABLE cachedTempView COMPUTE STATISTICS FOR COLUMNS v1\")\n+      val queryStats1 = spark.table(\"cachedTempView\").queryExecution\n+        .optimizedPlan.stats.attributeStats\n+      assert(queryStats1.map(_._1.name).toSet === Set(\"v1\"))\n+\n+      // Analyzes two more columns\n+      spark.sql(\"ANALYZE TABLE cachedTempView COMPUTE STATISTICS FOR COLUMNS c0, v2\")\n+      val queryStats2 = spark.table(\"cachedTempView\").queryExecution\n+        .optimizedPlan.stats.attributeStats\n+      assert(queryStats2.map(_._1.name).toSet === Set(\"c0\", \"v1\", \"v2\"))\n+\n+      // Analyzes in a temporary table\n+      spark.sql(\"CREATE TEMPORARY VIEW tempView AS SELECT * FROM range(1, 30)\")\n+      val errMsg = intercept[NoSuchTableException] {\n+        spark.sql(\"ANALYZE TABLE tempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      }.getMessage\n+      assert(errMsg.contains(\"Table or view 'tempView' not found in database 'default'\"))\n+    }",
    "line": 73
  }],
  "prId": 24047
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "@dongjoon-hyun Sorry, but I fond my silly mistake now...., so could you check https://github.com/apache/spark/pull/24198?",
    "commit": "c6f0fb5e7d0a9b5ede73e1111c058894c65ee238",
    "createdAt": "2019-03-25T03:44:10Z",
    "diffHunk": "@@ -470,4 +471,77 @@ class StatisticsCollectionSuite extends StatisticsCollectionTestBase with Shared\n       }\n     }\n   }\n+\n+  def getStatAttrNames(tableName: String): Set[String] = {\n+    val queryStats = spark.table(tableName).queryExecution.optimizedPlan.stats.attributeStats\n+    queryStats.map(_._1.name).toSet\n+  }\n+\n+  test(\"analyzes column statistics in cached query\") {\n+    withTempView(\"cachedQuery\") {\n+      sql(\n+        \"\"\"CACHE TABLE cachedQuery AS\n+          |  SELECT c0, avg(c1) AS v1, avg(c2) AS v2\n+          |  FROM (SELECT id % 3 AS c0, id % 5 AS c1, 2 AS c2 FROM range(1, 30))\n+          |  GROUP BY c0\n+        \"\"\".stripMargin)\n+\n+      // Analyzes one column in the cached logical plan\n+      sql(\"ANALYZE TABLE cachedQuery COMPUTE STATISTICS FOR COLUMNS v1\")\n+      assert(getStatAttrNames(\"cachedQuery\") === Set(\"v1\"))\n+\n+      // Analyzes two more columns\n+      sql(\"ANALYZE TABLE cachedQuery COMPUTE STATISTICS FOR COLUMNS c0, v2\")\n+      assert(getStatAttrNames(\"cachedQuery\")  === Set(\"c0\", \"v1\", \"v2\"))\n+    }\n+  }\n+\n+  test(\"analyzes column statistics in cached local temporary view\") {\n+    withTempView(\"tempView\") {\n+      // Analyzes in a temporary view\n+      sql(\"CREATE TEMPORARY VIEW tempView AS SELECT * FROM range(1, 30)\")\n+      val errMsg = intercept[AnalysisException] {\n+        sql(\"ANALYZE TABLE tempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      }.getMessage\n+      assert(errMsg.contains(s\"Table or view 'tempView' not found in database 'default'\"))\n+\n+      // Cache the view then analyze it\n+      sql(\"CACHE TABLE tempView\")\n+      assert(getStatAttrNames(\"tempView\") !== Set(\"id\"))\n+      sql(\"ANALYZE TABLE tempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      assert(getStatAttrNames(\"tempView\") === Set(\"id\"))\n+    }\n+  }\n+\n+  test(\"analyzes column statistics in cached global temporary view\") {\n+    withGlobalTempView(\"gTempView\") {\n+      val globalTempDB = spark.sharedState.globalTempViewManager.database\n+      val errMsg1 = intercept[NoSuchTableException] {\n+        sql(s\"ANALYZE TABLE $globalTempDB.gTempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      }.getMessage\n+      assert(errMsg1.contains(s\"Table or view 'gTempView' not found in database '$globalTempDB'\"))\n+      // Analyzes in a global temporary view\n+      sql(\"CREATE GLOBAL TEMP VIEW gTempView AS SELECT * FROM range(1, 30)\")\n+      val errMsg2 = intercept[AnalysisException] {\n+        sql(s\"ANALYZE TABLE $globalTempDB.gTempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      }.getMessage\n+      assert(errMsg2.contains(s\"Table or view 'gTempView' not found in database '$globalTempDB'\"))\n+\n+      // Cache the view then analyze it\n+      sql(s\"CACHE TABLE $globalTempDB.gTempView\")\n+      assert(getStatAttrNames(s\"$globalTempDB.gTempView\") !== Set(\"id\"))\n+      sql(s\"ANALYZE TABLE $globalTempDB.gTempView COMPUTE STATISTICS FOR COLUMNS id\")\n+      assert(getStatAttrNames(s\"$globalTempDB.gTempView\") === Set(\"id\"))\n+    }\n+  }\n+\n+  test(\"analyzes column statistics in cached catalog view\") {\n+    withTempDatabase { database =>\n+      sql(s\"CREATE VIEW $database.v AS SELECT 1 c\")\n+      sql(s\"CACHE TABLE $database.v\")\n+      assert(getStatAttrNames(s\"$database.v\") !== Set(\"id\"))\n+      sql(s\"ANALYZE TABLE $database.v COMPUTE STATISTICS FOR COLUMNS c\")\n+      assert(getStatAttrNames(s\"$database.v\") !== Set(\"id\"))",
    "line": 82
  }],
  "prId": 24047
}]