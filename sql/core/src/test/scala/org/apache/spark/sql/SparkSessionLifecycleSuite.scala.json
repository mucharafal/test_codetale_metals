[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. `test(\"test` -> `test(\"`.",
    "commit": "92c7b22ab5a1db0f25b4b418277b793b0e851491",
    "createdAt": "2019-06-09T00:39:15Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.config.UI.UI_ENABLED\n+\n+\n+/**\n+ * Test cases for the lifecycle of a [[SparkSession]].\n+ */\n+class SparkSessionLifecycleSuite extends SparkFunSuite {\n+  test(\"test SparkContext stopped when last SparkSession is stopped \") {"
  }],
  "prId": 24807
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we add assert below this line?\r\n```\r\nassert(!session1.sparkContext.isStopped)\r\n```",
    "commit": "92c7b22ab5a1db0f25b4b418277b793b0e851491",
    "createdAt": "2019-06-09T00:40:39Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.config.UI.UI_ENABLED\n+\n+\n+/**\n+ * Test cases for the lifecycle of a [[SparkSession]].\n+ */\n+class SparkSessionLifecycleSuite extends SparkFunSuite {\n+  test(\"test SparkContext stopped when last SparkSession is stopped \") {\n+    val session1 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"a\")\n+      .getOrCreate()\n+\n+    assert(!session1.sparkContext.isStopped)\n+\n+    val session2 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"b\")\n+      .getOrCreate()\n+\n+    session1.stop()"
  }],
  "prId": 24807
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "This test looks almost duplicated with the first one.\r\nAlso, this test case seems to be dangerous because it doesn't clean up the `SparkContext`.\r\nLet's remove this.",
    "commit": "92c7b22ab5a1db0f25b4b418277b793b0e851491",
    "createdAt": "2019-06-09T00:42:06Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.config.UI.UI_ENABLED\n+\n+\n+/**\n+ * Test cases for the lifecycle of a [[SparkSession]].\n+ */\n+class SparkSessionLifecycleSuite extends SparkFunSuite {\n+  test(\"test SparkContext stopped when last SparkSession is stopped \") {\n+    val session1 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"a\")\n+      .getOrCreate()\n+\n+    assert(!session1.sparkContext.isStopped)\n+\n+    val session2 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"b\")\n+      .getOrCreate()\n+\n+    session1.stop()\n+    session2.stop()\n+    assert(session1.sparkContext.isStopped)\n+  }\n+\n+  test(\"test SparkContext is not stopped when other sessions exist\") {\n+    val session1 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"a\")\n+      .getOrCreate()\n+\n+    assert(!session1.sparkContext.isStopped)\n+\n+    val session2 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"b\")\n+      .getOrCreate()\n+\n+    session1.stop()\n+    assert(!session1.sparkContext.isStopped)"
  }, {
    "author": {
      "login": "vinooganesh"
    },
    "body": "Yeah, I was torn about this one, but agreed, will remove",
    "commit": "92c7b22ab5a1db0f25b4b418277b793b0e851491",
    "createdAt": "2019-06-10T14:44:30Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.internal.config.UI.UI_ENABLED\n+\n+\n+/**\n+ * Test cases for the lifecycle of a [[SparkSession]].\n+ */\n+class SparkSessionLifecycleSuite extends SparkFunSuite {\n+  test(\"test SparkContext stopped when last SparkSession is stopped \") {\n+    val session1 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"a\")\n+      .getOrCreate()\n+\n+    assert(!session1.sparkContext.isStopped)\n+\n+    val session2 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"b\")\n+      .getOrCreate()\n+\n+    session1.stop()\n+    session2.stop()\n+    assert(session1.sparkContext.isStopped)\n+  }\n+\n+  test(\"test SparkContext is not stopped when other sessions exist\") {\n+    val session1 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"a\")\n+      .getOrCreate()\n+\n+    assert(!session1.sparkContext.isStopped)\n+\n+    val session2 = SparkSession.builder()\n+      .master(\"local\")\n+      .config(UI_ENABLED.key, value = false)\n+      .config(\"some-config\", \"b\")\n+      .getOrCreate()\n+\n+    session1.stop()\n+    assert(!session1.sparkContext.isStopped)"
  }],
  "prId": 24807
}]