[{
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "nit: s/in/on",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T09:51:38Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {"
  }],
  "prId": 21815
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "Redundant `toDF`",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T09:52:30Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)"
  }],
  "prId": 21815
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "This `isInstanceOf` is a bit non-Scala IMHO and I'd prefer `collectFirst { case op: FileSourceScanExec => op }` instead.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T09:54:17Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)\n+      val df = spark.read.parquet(path.getAbsolutePath)\n+      val fileSourceScanExec =\n+        df.queryExecution.sparkPlan.find(_.isInstanceOf[FileSourceScanExec]).get"
  }],
  "prId": 21815
}, {
  "comments": [{
    "author": {
      "login": "jaceklaskowski"
    },
    "body": "It's a named test so I'd get rid of the `try-catch` block because:\r\n\r\n1. It's going to fail the test anyway\r\n2. The title of the test matches the `fail` message.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T09:57:41Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)\n+      val df = spark.read.parquet(path.getAbsolutePath)\n+      val fileSourceScanExec =\n+        df.queryExecution.sparkPlan.find(_.isInstanceOf[FileSourceScanExec]).get\n+      try {\n+        spark.range(1).foreach(_ => fileSourceScanExec.canonicalized)\n+      } catch {\n+        case e: Throwable => fail(\"FileSourceScanExec was not canonicalizable\", e)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Hm, this gives an explicit scope about which condition is a failure case though. I believe this is a rather pattern. If both are okay, let me just keep in this way.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T10:50:59Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)\n+      val df = spark.read.parquet(path.getAbsolutePath)\n+      val fileSourceScanExec =\n+        df.queryExecution.sparkPlan.find(_.isInstanceOf[FileSourceScanExec]).get\n+      try {\n+        spark.range(1).foreach(_ => fileSourceScanExec.canonicalized)\n+      } catch {\n+        case e: Throwable => fail(\"FileSourceScanExec was not canonicalizable\", e)"
  }],
  "prId": 21815
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "not sure whether it is feasible (maybe in a followup?), but it would be great if we can test the canonicalization of all the Exec nodes in order to prevent such issue in the future... what do you think?",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T10:02:21Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)\n+      val df = spark.read.parquet(path.getAbsolutePath)\n+      val fileSourceScanExec =\n+        df.queryExecution.sparkPlan.find(_.isInstanceOf[FileSourceScanExec]).get\n+      try {\n+        spark.range(1).foreach(_ => fileSourceScanExec.canonicalized)"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Yes, I think of course it is.. it took me a while to make a small and simple test for it.. Hope leave it out of this PR's scope though.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-19T10:41:15Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable in executor side\") {\n+    withTempPath { path =>\n+      spark.range(1).toDF().write.parquet(path.getAbsolutePath)\n+      val df = spark.read.parquet(path.getAbsolutePath)\n+      val fileSourceScanExec =\n+        df.queryExecution.sparkPlan.find(_.isInstanceOf[FileSourceScanExec]).get\n+      try {\n+        spark.range(1).foreach(_ => fileSourceScanExec.canonicalized)"
  }],
  "prId": 21815
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'd like to put this test in `QueryPlanSuite`, with name `SPARK-XXXX: query plans can be serialized and deserialized`.\r\n\r\nIn the test we don't need to trigger a job, just call `spark.env.serializer` to serialize and deserialize the `FileSourceScanExec`",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-20T06:24:16Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable on executor side\") {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "There's few things bothering for that actually - it's kind of messy to create `FileSourceScanExec` without `SparkSession` (and also without other utils from `SharedSQLContext`), and `QueryPlanSuite` is under `catalyst` whereas this plan itself is under `execution` in SQL core.\r\n\r\nAnd, I actually believe this test more targets to make the plan canonicalizable after it's de/serialized since this plan itself is serializable and deserializable already but it's not canonicalizable after that - which I believe is more specific to `FileSourceScanExec` in a way.\r\n\r\nLet me try to clean up based on your comment anyway.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-20T08:44:53Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable on executor side\") {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I found `SparkPlanSuite` could be another place to add to address your comment. Let me stick to `FileSourceScanExec` but please let me know if you prefer this please. I don't mind changing it.",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-20T08:57:09Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable on executor side\") {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "`SparkPlanSuite` SGTM",
    "commit": "be6e5941991ca045100456e11a59a9b2eb77a1ea",
    "createdAt": "2018-07-20T09:00:43Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileSourceScanExecSuite extends SharedSQLContext {\n+  test(\"FileSourceScanExec should be canonicalizable on executor side\") {"
  }],
  "prId": 21815
}]