[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: Why do you need this conf for this test?\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-18T21:52:36Z",
    "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      FileLog(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {"
  }],
  "prId": 12435
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: formatting is weird\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-18T21:53:03Z",
    "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      FileLog(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        val expected = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+        assert(expected === new String(sinkLog.serialize(logs), UTF_8))\n+\n+        assert(FileStreamSinkLog.VERSION === new String(sinkLog.serialize(Nil), UTF_8))\n+      }\n+    }\n+  }\n+\n+  test(\"deserialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+\n+        val expected = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        assert(expected === sinkLog.deserialize(logs.getBytes(UTF_8)))\n+\n+        assert(Nil === sinkLog.deserialize(FileStreamSinkLog.VERSION.getBytes(UTF_8)))\n+      }\n+    }\n+  }\n+\n+  test(\"batchIdToPath\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        assert(\"0\" === sinkLog.batchIdToPath(0).getName)\n+        assert(\"1\" === sinkLog.batchIdToPath(1).getName)\n+        assert(\"2.compact\" === sinkLog.batchIdToPath(2).getName)\n+        assert(\"3\" === sinkLog.batchIdToPath(3).getName)\n+        assert(\"4\" === sinkLog.batchIdToPath(4).getName)\n+        assert(\"5.compact\" === sinkLog.batchIdToPath(5).getName)\n+      }\n+    }\n+  }\n+\n+  test(\"compact\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        for (batchId <- 0 to 10) {\n+          sinkLog.add(batchId, Seq(FileLog(\"/a/b/\" + batchId, 100L, FileStreamSinkLog.ADD_ACTION)))\n+          assert(sinkLog.allLogs() === (0 to batchId).map {\n+            id => FileLog(\"/a/b/\" + id, 100L, FileStreamSinkLog.ADD_ACTION)\n+          })\n+        }\n+      }\n+    }\n+  }\n+\n+  test(\"delete expired file\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\",\n+      // Set it to 0 so that we can detect the deleting behaviour deterministically"
  }],
  "prId": 12435
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "shouldnt this test actually verify that the logs are actually being compacted? As in *.compact files are actually being generated which contains all the contents of the previous logs. If there was not compaction actually happening, then this test wouldnt fail.\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-18T21:56:29Z",
    "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      FileLog(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        val expected = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+        assert(expected === new String(sinkLog.serialize(logs), UTF_8))\n+\n+        assert(FileStreamSinkLog.VERSION === new String(sinkLog.serialize(Nil), UTF_8))\n+      }\n+    }\n+  }\n+\n+  test(\"deserialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+\n+        val expected = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        assert(expected === sinkLog.deserialize(logs.getBytes(UTF_8)))\n+\n+        assert(Nil === sinkLog.deserialize(FileStreamSinkLog.VERSION.getBytes(UTF_8)))\n+      }\n+    }\n+  }\n+\n+  test(\"batchIdToPath\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        assert(\"0\" === sinkLog.batchIdToPath(0).getName)\n+        assert(\"1\" === sinkLog.batchIdToPath(1).getName)\n+        assert(\"2.compact\" === sinkLog.batchIdToPath(2).getName)\n+        assert(\"3\" === sinkLog.batchIdToPath(3).getName)\n+        assert(\"4\" === sinkLog.batchIdToPath(4).getName)\n+        assert(\"5.compact\" === sinkLog.batchIdToPath(5).getName)\n+      }\n+    }\n+  }\n+\n+  test(\"compact\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {"
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "Verified the content of the compaction files in this test.\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-18T22:57:46Z",
    "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      FileLog(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        val expected = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+        assert(expected === new String(sinkLog.serialize(logs), UTF_8))\n+\n+        assert(FileStreamSinkLog.VERSION === new String(sinkLog.serialize(Nil), UTF_8))\n+      }\n+    }\n+  }\n+\n+  test(\"deserialize\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        val logs = s\"\"\"${FileStreamSinkLog.VERSION}\n+            |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+            |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+            |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+\n+        val expected = Seq(\n+          FileLog(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+          FileLog(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+          FileLog(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+        assert(expected === sinkLog.deserialize(logs.getBytes(UTF_8)))\n+\n+        assert(Nil === sinkLog.deserialize(FileStreamSinkLog.VERSION.getBytes(UTF_8)))\n+      }\n+    }\n+  }\n+\n+  test(\"batchIdToPath\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        assert(\"0\" === sinkLog.batchIdToPath(0).getName)\n+        assert(\"1\" === sinkLog.batchIdToPath(1).getName)\n+        assert(\"2.compact\" === sinkLog.batchIdToPath(2).getName)\n+        assert(\"3\" === sinkLog.batchIdToPath(3).getName)\n+        assert(\"4\" === sinkLog.batchIdToPath(4).getName)\n+        assert(\"5.compact\" === sinkLog.batchIdToPath(5).getName)\n+      }\n+    }\n+  }\n+\n+  test(\"compact\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {"
  }],
  "prId": 12435
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: this and line 147 can be deduped\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-19T01:32:14Z",
    "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      SinkFileStatus(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withFileStreamSinkLog { sinkLog =>\n+      val logs = Seq(\n+        SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+        SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+        SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+      val expected = s\"\"\"${FileStreamSinkLog.VERSION}\n+          |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+          |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+          |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+      assert(expected === new String(sinkLog.serialize(logs), UTF_8))\n+\n+      assert(FileStreamSinkLog.VERSION === new String(sinkLog.serialize(Nil), UTF_8))\n+    }\n+  }\n+\n+  test(\"deserialize\") {\n+    withFileStreamSinkLog { sinkLog =>\n+      val logs = s\"\"\"${FileStreamSinkLog.VERSION}\n+          |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+          |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+          |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+\n+      val expected = Seq(\n+        SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+        SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+        SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+      assert(expected === sinkLog.deserialize(logs.getBytes(UTF_8)))\n+\n+      assert(Nil === sinkLog.deserialize(FileStreamSinkLog.VERSION.getBytes(UTF_8)))\n+    }\n+  }\n+\n+  test(\"batchIdToPath\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        assert(\"0\" === sinkLog.batchIdToPath(0).getName)\n+        assert(\"1\" === sinkLog.batchIdToPath(1).getName)\n+        assert(\"2.compact\" === sinkLog.batchIdToPath(2).getName)\n+        assert(\"3\" === sinkLog.batchIdToPath(3).getName)\n+        assert(\"4\" === sinkLog.batchIdToPath(4).getName)\n+        assert(\"5.compact\" === sinkLog.batchIdToPath(5).getName)\n+      }\n+    }\n+  }\n+\n+  test(\"compact\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        for (batchId <- 0 to 10) {\n+          sinkLog.add(\n+            batchId,\n+            Seq(SinkFileStatus(\"/a/b/\" + batchId, 100L, FileStreamSinkLog.ADD_ACTION)))\n+          assert(sinkLog.allFiles() === (0 to batchId).map {\n+            id => SinkFileStatus(\"/a/b/\" + id, 100L, FileStreamSinkLog.ADD_ACTION)\n+          })\n+          if (isCompactionBatch(batchId, 3)) {\n+            // Since batchId is a compaction batch, the batch log file should contain all logs\n+            assert(sinkLog.get(batchId).getOrElse(Nil) === (0 to batchId).map {\n+              id => SinkFileStatus(\"/a/b/\" + id, 100L, FileStreamSinkLog.ADD_ACTION)"
  }],
  "prId": 12435
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "How about EXPIRED_TIME --> CLEANUP_DELAY\nI think this is more intuitive. \n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-19T01:39:00Z",
    "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  import FileStreamSinkLog._\n+\n+  test(\"getBatchIdFromFileName\") {\n+    assert(1234L === getBatchIdFromFileName(\"1234\"))\n+    assert(1234L === getBatchIdFromFileName(\"1234.compact\"))\n+    intercept[NumberFormatException] {\n+      FileStreamSinkLog.getBatchIdFromFileName(\"1234a\")\n+    }\n+  }\n+\n+  test(\"isCompactionBatch\") {\n+    assert(false === isCompactionBatch(0, compactLength = 3))\n+    assert(false === isCompactionBatch(1, compactLength = 3))\n+    assert(true === isCompactionBatch(2, compactLength = 3))\n+    assert(false === isCompactionBatch(3, compactLength = 3))\n+    assert(false === isCompactionBatch(4, compactLength = 3))\n+    assert(true === isCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getValidBatchesBeforeCompactionBatch\") {\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(0, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(1, compactLength = 3)\n+    }\n+    assert(Seq(0, 1) === getValidBatchesBeforeCompactionBatch(2, compactLength = 3))\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(3, compactLength = 3)\n+    }\n+    intercept[AssertionError] {\n+      getValidBatchesBeforeCompactionBatch(4, compactLength = 3)\n+    }\n+    assert(Seq(2, 3, 4) === getValidBatchesBeforeCompactionBatch(5, compactLength = 3))\n+  }\n+\n+  test(\"getAllValidBatches\") {\n+    assert(Seq(0) === getAllValidBatches(0, compactLength = 3))\n+    assert(Seq(0, 1) === getAllValidBatches(1, compactLength = 3))\n+    assert(Seq(2) === getAllValidBatches(2, compactLength = 3))\n+    assert(Seq(2, 3) === getAllValidBatches(3, compactLength = 3))\n+    assert(Seq(2, 3, 4) === getAllValidBatches(4, compactLength = 3))\n+    assert(Seq(5) === getAllValidBatches(5, compactLength = 3))\n+    assert(Seq(5, 6) === getAllValidBatches(6, compactLength = 3))\n+    assert(Seq(5, 6, 7) === getAllValidBatches(7, compactLength = 3))\n+    assert(Seq(8) === getAllValidBatches(8, compactLength = 3))\n+  }\n+\n+  test(\"compactLogs\") {\n+    val logs = Seq(\n+      SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+    assert(logs === compactLogs(logs))\n+\n+    val logs2 = Seq(\n+      SinkFileStatus(\"/a/b/m\", 100L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/n\", 200L, FileStreamSinkLog.ADD_ACTION),\n+      SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.DELETE_ACTION))\n+    assert(logs.dropRight(1) ++ logs2.dropRight(1) === compactLogs(logs ++ logs2))\n+  }\n+\n+  test(\"serialize\") {\n+    withFileStreamSinkLog { sinkLog =>\n+      val logs = Seq(\n+        SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+        SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+        SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+      val expected = s\"\"\"${FileStreamSinkLog.VERSION}\n+          |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+          |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+          |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+      assert(expected === new String(sinkLog.serialize(logs), UTF_8))\n+\n+      assert(FileStreamSinkLog.VERSION === new String(sinkLog.serialize(Nil), UTF_8))\n+    }\n+  }\n+\n+  test(\"deserialize\") {\n+    withFileStreamSinkLog { sinkLog =>\n+      val logs = s\"\"\"${FileStreamSinkLog.VERSION}\n+          |{\"path\":\"/a/b/x\",\"size\":100,\"action\":\"add\"}\n+          |{\"path\":\"/a/b/y\",\"size\":200,\"action\":\"delete\"}\n+          |{\"path\":\"/a/b/z\",\"size\":300,\"action\":\"add\"}\"\"\".stripMargin\n+\n+      val expected = Seq(\n+        SinkFileStatus(\"/a/b/x\", 100L, FileStreamSinkLog.ADD_ACTION),\n+        SinkFileStatus(\"/a/b/y\", 200L, FileStreamSinkLog.DELETE_ACTION),\n+        SinkFileStatus(\"/a/b/z\", 300L, FileStreamSinkLog.ADD_ACTION))\n+\n+      assert(expected === sinkLog.deserialize(logs.getBytes(UTF_8)))\n+\n+      assert(Nil === sinkLog.deserialize(FileStreamSinkLog.VERSION.getBytes(UTF_8)))\n+    }\n+  }\n+\n+  test(\"batchIdToPath\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        assert(\"0\" === sinkLog.batchIdToPath(0).getName)\n+        assert(\"1\" === sinkLog.batchIdToPath(1).getName)\n+        assert(\"2.compact\" === sinkLog.batchIdToPath(2).getName)\n+        assert(\"3\" === sinkLog.batchIdToPath(3).getName)\n+        assert(\"4\" === sinkLog.batchIdToPath(4).getName)\n+        assert(\"5.compact\" === sinkLog.batchIdToPath(5).getName)\n+      }\n+    }\n+  }\n+\n+  test(\"compact\") {\n+    withSQLConf(SQLConf.FILE_STREAM_SINK_LOG_COMPACT_LEN.key -> \"3\") {\n+      withFileStreamSinkLog { sinkLog =>\n+        for (batchId <- 0 to 10) {\n+          sinkLog.add(\n+            batchId,\n+            Seq(SinkFileStatus(\"/a/b/\" + batchId, 100L, FileStreamSinkLog.ADD_ACTION)))\n+          assert(sinkLog.allFiles() === (0 to batchId).map {\n+            id => SinkFileStatus(\"/a/b/\" + id, 100L, FileStreamSinkLog.ADD_ACTION)\n+          })\n+          if (isCompactionBatch(batchId, 3)) {\n+            // Since batchId is a compaction batch, the batch log file should contain all logs\n+            assert(sinkLog.get(batchId).getOrElse(Nil) === (0 to batchId).map {\n+              id => SinkFileStatus(\"/a/b/\" + id, 100L, FileStreamSinkLog.ADD_ACTION)\n+            })\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  test(\"delete expired file\") {\n+    // Set FILE_STREAM_SINK_LOG_EXPIRED_TIME to 0 so that we can detect the deleting behaviour"
  }],
  "prId": 12435
}, {
  "comments": [{
    "author": {
      "login": "steveloughran"
    },
    "body": "It would be nice to have this test subclassable, with the hadoop FileSystem to work with created in a subclass. Why? In #12004 I'm putting together some tests of S3/Azure/openstack integration; code designed to work explicitly against S3 is exactly the kind of tests that are needed.\n\nIf this test could be subclassed in this new cloud module, it could be run against the object stores and any consistency problems, or assumptions about timestamps may surface during those test runs\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-19T13:22:58Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {",
    "line": 26
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "It's not `final` so should be `subclassable`. Do you mean I should replace the Java File APIs in the test with Hadoop FileSystem APIs?\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-19T17:19:50Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {",
    "line": 26
  }, {
    "author": {
      "login": "steveloughran"
    },
    "body": "exactly\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-20T09:37:19Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {",
    "line": 26
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> exactly\n\nDone. Anyway, I didn't remove the usage of `withTempDir`. It's another story.\n",
    "commit": "e2cd25c0934ba8a0062c29524c27785326dde195",
    "createdAt": "2016-04-20T17:33:27Z",
    "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.nio.charset.StandardCharsets.UTF_8\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class FileStreamSinkLogSuite extends SparkFunSuite with SharedSQLContext {",
    "line": 26
  }],
  "prId": 12435
}]