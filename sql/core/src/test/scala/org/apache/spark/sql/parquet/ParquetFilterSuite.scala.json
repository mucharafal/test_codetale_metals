[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "`checkFilterPushdown` is enough for these checks, no need to wrap them with `Seq(Row(...))`.\n",
    "commit": "e33abd848ee44cde5ae4441248ee9d053c7d4978",
    "createdAt": "2015-01-20T09:27:44Z",
    "diffHunk": "@@ -227,30 +234,30 @@ class ParquetFilterSuite extends QueryTest with ParquetTest {\n \n   test(\"filter pushdown - string\") {\n     withParquetRDD((1 to 4).map(i => Tuple1(i.toString))) { rdd =>\n-      checkFilterPushdown(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n-      checkFilterPushdown(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n+      checkFilterPushdown1(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n         (1 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n         (2 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(\"3\")\n-      checkFilterPushdown(rdd, '_1)('_1 < \"2\" || '_1 > \"3\", classOf[Operators.Or]) {\n+      checkFilterPushdown1(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(Seq(Row(\"3\")))",
    "line": 197
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "no that one takes only an int?\n",
    "commit": "e33abd848ee44cde5ae4441248ee9d053c7d4978",
    "createdAt": "2015-01-20T19:26:59Z",
    "diffHunk": "@@ -227,30 +234,30 @@ class ParquetFilterSuite extends QueryTest with ParquetTest {\n \n   test(\"filter pushdown - string\") {\n     withParquetRDD((1 to 4).map(i => Tuple1(i.toString))) { rdd =>\n-      checkFilterPushdown(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n-      checkFilterPushdown(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n+      checkFilterPushdown1(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n         (1 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n         (2 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(\"3\")\n-      checkFilterPushdown(rdd, '_1)('_1 < \"2\" || '_1 > \"3\", classOf[Operators.Or]) {\n+      checkFilterPushdown1(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(Seq(Row(\"3\")))",
    "line": 197
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "it is not possible to override it because we used fancy currying. if we had used just a normal argument then I could've overriden it.\n",
    "commit": "e33abd848ee44cde5ae4441248ee9d053c7d4978",
    "createdAt": "2015-01-20T19:27:32Z",
    "diffHunk": "@@ -227,30 +234,30 @@ class ParquetFilterSuite extends QueryTest with ParquetTest {\n \n   test(\"filter pushdown - string\") {\n     withParquetRDD((1 to 4).map(i => Tuple1(i.toString))) { rdd =>\n-      checkFilterPushdown(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n-      checkFilterPushdown(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n+      checkFilterPushdown1(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n         (1 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n         (2 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(\"3\")\n-      checkFilterPushdown(rdd, '_1)('_1 < \"2\" || '_1 > \"3\", classOf[Operators.Or]) {\n+      checkFilterPushdown1(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(Seq(Row(\"3\")))",
    "line": 197
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "But why did you make `checkFilterPushdown` only accept an `Int`? The original version accepts `Any`.\n",
    "commit": "e33abd848ee44cde5ae4441248ee9d053c7d4978",
    "createdAt": "2015-01-20T21:13:23Z",
    "diffHunk": "@@ -227,30 +234,30 @@ class ParquetFilterSuite extends QueryTest with ParquetTest {\n \n   test(\"filter pushdown - string\") {\n     withParquetRDD((1 to 4).map(i => Tuple1(i.toString))) { rdd =>\n-      checkFilterPushdown(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n-      checkFilterPushdown(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n+      checkFilterPushdown1(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n         (1 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n         (2 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(\"3\")\n-      checkFilterPushdown(rdd, '_1)('_1 < \"2\" || '_1 > \"3\", classOf[Operators.Or]) {\n+      checkFilterPushdown1(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(Seq(Row(\"3\")))",
    "line": 197
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "Yeah, I admit currying is not necessary and troublesome here... I can fix it in another PR.\n",
    "commit": "e33abd848ee44cde5ae4441248ee9d053c7d4978",
    "createdAt": "2015-01-20T21:15:07Z",
    "diffHunk": "@@ -227,30 +234,30 @@ class ParquetFilterSuite extends QueryTest with ParquetTest {\n \n   test(\"filter pushdown - string\") {\n     withParquetRDD((1 to 4).map(i => Tuple1(i.toString))) { rdd =>\n-      checkFilterPushdown(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n-      checkFilterPushdown(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1.isNull, classOf[Eq[java.lang.String]])(Seq.empty[Row])\n+      checkFilterPushdown1(rdd, '_1)('_1.isNotNull, classOf[NotEq[java.lang.String]]) {\n         (1 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n+      checkFilterPushdown1(rdd, '_1)('_1 === \"1\", classOf[Eq[String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 !== \"1\", classOf[Operators.NotEq[String]]) {\n         (2 to 4).map(i => Row.apply(i.toString))\n       }\n \n-      checkFilterPushdown(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)('_1 <  \"2\", classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >  \"3\", classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 <= \"1\", classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 >= \"4\", classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(\"1\")\n-      checkFilterPushdown(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(\"4\")\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") === '_1, classOf[Eq  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"2\") >   '_1, classOf[Lt  [java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"3\") <   '_1, classOf[Gt  [java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"1\") >=  '_1, classOf[LtEq[java.lang.String]])(Seq(Row(\"1\")))\n+      checkFilterPushdown1(rdd, '_1)(Literal(\"4\") <=  '_1, classOf[GtEq[java.lang.String]])(Seq(Row(\"4\")))\n \n-      checkFilterPushdown(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(\"4\")\n-      checkFilterPushdown(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(\"3\")\n-      checkFilterPushdown(rdd, '_1)('_1 < \"2\" || '_1 > \"3\", classOf[Operators.Or]) {\n+      checkFilterPushdown1(rdd, '_1)(!('_1 < \"4\"), classOf[Operators.GtEq[java.lang.String]])(Seq(Row(\"4\")))\n+      checkFilterPushdown1(rdd, '_1)('_1 > \"2\" && '_1 < \"4\", classOf[Operators.And])(Seq(Row(\"3\")))",
    "line": 197
  }],
  "prId": 4115
}]