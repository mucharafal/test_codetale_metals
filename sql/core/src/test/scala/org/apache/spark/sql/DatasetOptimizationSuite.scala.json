[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit.\r\n```scala\r\n      val mapData = Seq(\r\n        (Map((\"k\", Map((\"k2\", (\"a_1\", 11))))), 1),\r\n        (Map((\"k\", Map((\"k2\", (\"b_1\", 22))))), 2),\r\n        (Map((\"k\", Map((\"k2\", (\"c_1\", 33))))), 3))\r\n```",
    "commit": "982741e5b5a5baede9c514bed98c9528f34e3326",
    "createdAt": "2019-04-01T01:01:26Z",
    "diffHunk": "@@ -142,4 +142,25 @@ class DatasetOptimizationSuite extends QueryTest with SharedSQLContext {\n       checkAnswer(df1, Seq(Row(\"1\"), Row(\"2\"), Row(\"3\")))\n     }\n   }\n+\n+  test(\"Pruned nested serializers: map of map value\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((\"k\", Map((\"k2\", (\"a_1\", 11))))), 1),\n+        (Map((\"k\", Map((\"k2\", (\"b_1\", 22))))), 2), (Map((\"k\", Map((\"k2\", (\"c_1\", 33))))), 3))"
  }],
  "prId": 24260
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit.\r\n```scala\r\n      val mapData = Seq(\r\n        (Map((Map(((\"1\", 1), \"val1\")), \"a_1\")), 1),\r\n        (Map((Map(((\"2\", 2), \"val2\")), \"b_1\")), 2),\r\n        (Map((Map(((\"3\", 3), \"val3\")), \"c_1\")), 3))\r\n```",
    "commit": "982741e5b5a5baede9c514bed98c9528f34e3326",
    "createdAt": "2019-04-01T01:01:42Z",
    "diffHunk": "@@ -142,4 +142,25 @@ class DatasetOptimizationSuite extends QueryTest with SharedSQLContext {\n       checkAnswer(df1, Seq(Row(\"1\"), Row(\"2\"), Row(\"3\")))\n     }\n   }\n+\n+  test(\"Pruned nested serializers: map of map value\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((\"k\", Map((\"k2\", (\"a_1\", 11))))), 1),\n+        (Map((\"k\", Map((\"k2\", (\"b_1\", 22))))), 2), (Map((\"k\", Map((\"k2\", (\"c_1\", 33))))), 3))\n+      val mapDs = mapData.toDS().map(t => (t._1, t._2 + 1))\n+      val df1 = mapDs.select(\"_1.k.k2._1\")\n+      testSerializer(df1, Seq(Seq(\"_1\")))\n+    }\n+  }\n+\n+  test(\"Pruned nested serializers: map of map key\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((Map(((\"1\", 1), \"val1\")), \"a_1\")), 1),\n+        (Map((Map(((\"2\", 2), \"val2\")), \"b_1\")), 2), (Map((Map(((\"3\", 3), \"val3\")), \"c_1\")), 3))"
  }],
  "prId": 24260
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since this is the only one, `df1` -> `df`?",
    "commit": "982741e5b5a5baede9c514bed98c9528f34e3326",
    "createdAt": "2019-04-01T01:04:39Z",
    "diffHunk": "@@ -142,4 +142,25 @@ class DatasetOptimizationSuite extends QueryTest with SharedSQLContext {\n       checkAnswer(df1, Seq(Row(\"1\"), Row(\"2\"), Row(\"3\")))\n     }\n   }\n+\n+  test(\"Pruned nested serializers: map of map value\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((\"k\", Map((\"k2\", (\"a_1\", 11))))), 1),\n+        (Map((\"k\", Map((\"k2\", (\"b_1\", 22))))), 2), (Map((\"k\", Map((\"k2\", (\"c_1\", 33))))), 3))\n+      val mapDs = mapData.toDS().map(t => (t._1, t._2 + 1))\n+      val df1 = mapDs.select(\"_1.k.k2._1\")"
  }],
  "prId": 24260
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto. `df1` -> `df`.",
    "commit": "982741e5b5a5baede9c514bed98c9528f34e3326",
    "createdAt": "2019-04-01T01:04:51Z",
    "diffHunk": "@@ -142,4 +142,25 @@ class DatasetOptimizationSuite extends QueryTest with SharedSQLContext {\n       checkAnswer(df1, Seq(Row(\"1\"), Row(\"2\"), Row(\"3\")))\n     }\n   }\n+\n+  test(\"Pruned nested serializers: map of map value\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((\"k\", Map((\"k2\", (\"a_1\", 11))))), 1),\n+        (Map((\"k\", Map((\"k2\", (\"b_1\", 22))))), 2), (Map((\"k\", Map((\"k2\", (\"c_1\", 33))))), 3))\n+      val mapDs = mapData.toDS().map(t => (t._1, t._2 + 1))\n+      val df1 = mapDs.select(\"_1.k.k2._1\")\n+      testSerializer(df1, Seq(Seq(\"_1\")))\n+    }\n+  }\n+\n+  test(\"Pruned nested serializers: map of map key\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val mapData = Seq((Map((Map(((\"1\", 1), \"val1\")), \"a_1\")), 1),\n+        (Map((Map(((\"2\", 2), \"val2\")), \"b_1\")), 2), (Map((Map(((\"3\", 3), \"val3\")), \"c_1\")), 3))\n+      val mapDs = mapData.toDS().map(t => (t._1, t._2 + 1))\n+      val df1 = mapDs.select(expr(\"map_keys(map_keys(_1)[0])._1[0]\"))"
  }],
  "prId": 24260
}]