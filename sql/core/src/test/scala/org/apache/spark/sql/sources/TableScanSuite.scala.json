[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Can we update the schema to have 2 or more columns (just want to make sure the comma separator works well) and to have columns with and without comments?\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T16:41:57Z",
    "diffHunk": "@@ -314,4 +314,20 @@ class TableScanSuite extends DataSourceTest {\n       sql(\"SELECT * FROM oneToTenDef\"),\n       (1 to 10).map(Row(_)).toSeq)\n   }\n+\n+  test(\"schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"the name of a student\")"
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "It will be better to also compare the expected and actual schema.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T16:52:35Z",
    "diffHunk": "@@ -314,4 +314,20 @@ class TableScanSuite extends DataSourceTest {\n       sql(\"SELECT * FROM oneToTenDef\"),\n       (1 to 10).map(Row(_)).toSeq)\n   }\n+\n+  test(\"schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"the name of a student\")"
  }, {
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "sure, I'll add one\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-12T17:29:11Z",
    "diffHunk": "@@ -314,4 +314,20 @@ class TableScanSuite extends DataSourceTest {\n       sql(\"SELECT * FROM oneToTenDef\"),\n       (1 to 10).map(Row(_)).toSeq)\n   }\n+\n+  test(\"schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"the name of a student\")"
  }],
  "prId": 3999
}, {
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "I think it is better to use `queryExecution.executedPlan` since it is the final physical. Also, this line is kind of long. How about we break it as follows.\n\n```\nval planned = sql(\"SELECT * FROM student\").queryExecution.executedPlan\nval comments = planned.schema.fields.map { ...\n```\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-21T04:52:15Z",
    "diffHunk": "@@ -315,6 +315,26 @@ class TableScanSuite extends DataSourceTest {\n       (1 to 10).map(Row(_)).toSeq)\n   }\n \n+  test(\"SPARK-5196 schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"SN\", age int comment \"SA\", grade int)\n+       |USING org.apache.spark.sql.sources.AllDataTypesScanSource\n+       |OPTIONS (\n+       |  from '1',\n+       |  to '10'\n+       |)\n+       \"\"\".stripMargin)\n+\n+       val comments = sql(\"SELECT * FROM student\").queryExecution.sparkPlan.\n+         schema.fields.map { field =>"
  }],
  "prId": 3999
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Plain asserts should be avoided in tests as they give very little information when there is a failure.  Instead use `===` or add a custom string that describes what went wrong as the second argument.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-01-29T23:38:34Z",
    "diffHunk": "@@ -344,4 +344,24 @@ class TableScanSuite extends DataSourceTest {\n     }\n     assert(schemaNeeded.getMessage.contains(\"A schema needs to be specified when using\"))\n   }\n+\n+  test(\"SPARK-5196 schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"SN\", age int comment \"SA\", grade int)\n+       |USING org.apache.spark.sql.sources.AllDataTypesScanSource\n+       |OPTIONS (\n+       |  from '1',\n+       |  to '10'\n+       |)\n+       \"\"\".stripMargin)\n+\n+       val planned = sql(\"SELECT * FROM student\").queryExecution.executedPlan\n+       val comments = planned.schema.fields.map { field =>\n+         if (field.metadata.contains(\"comment\")) field.metadata.getString(\"comment\")\n+         else \"NO_COMMENT\"\n+       }.mkString(\",\")\n+\n+    assert(comments == \"SN,SA,NO_COMMENT\")"
  }],
  "prId": 3999
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I will fix this up while merging, but I don't think it is useful to both use `===` and give a comment that doesn't include the actual answer.  Ideally, when the test fails you want to see the answer that does not match the expected answer so you can figure out what went wrong without having to go and add `println` manually.\n",
    "commit": "39150d433a9cdf6b65ea9fffb49aaed218190928",
    "createdAt": "2015-02-02T02:20:17Z",
    "diffHunk": "@@ -344,4 +344,24 @@ class TableScanSuite extends DataSourceTest {\n     }\n     assert(schemaNeeded.getMessage.contains(\"A schema needs to be specified when using\"))\n   }\n+\n+  test(\"SPARK-5196 schema field with comment\") {\n+    sql(\n+      \"\"\"\n+       |CREATE TEMPORARY TABLE student(name string comment \"SN\", age int comment \"SA\", grade int)\n+       |USING org.apache.spark.sql.sources.AllDataTypesScanSource\n+       |OPTIONS (\n+       |  from '1',\n+       |  to '10'\n+       |)\n+       \"\"\".stripMargin)\n+\n+       val planned = sql(\"SELECT * FROM student\").queryExecution.executedPlan\n+       val comments = planned.schema.fields.map { field =>\n+         if (field.metadata.contains(\"comment\")) field.metadata.getString(\"comment\")\n+         else \"NO_COMMENT\"\n+       }.mkString(\",\")\n+\n+    assert(comments === \"SN,SA,NO_COMMENT\", \"assert equals, display all comments of fields\")",
    "line": 22
  }],
  "prId": 3999
}]