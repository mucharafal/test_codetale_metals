[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Seems above changes to data generation are unnecessary too?",
    "commit": "6ea0919ec0a9dfc6b121c88790fac79aa072bc60",
    "createdAt": "2018-03-31T07:18:48Z",
    "diffHunk": "@@ -54,12 +54,22 @@ object ColumnarTestUtils {\n       case COMPACT_DECIMAL(precision, scale) => Decimal(Random.nextLong() % 100, precision, scale)\n       case LARGE_DECIMAL(precision, scale) => Decimal(Random.nextLong(), precision, scale)\n       case STRUCT(_) =>\n-        new GenericInternalRow(Array[Any](UTF8String.fromString(Random.nextString(10))))\n+        val schema = StructType(Array(StructField(\"test\", StringType)))\n+        val converter = UnsafeProjection.create(schema)\n+        converter(InternalRow(Array(UTF8String.fromString(Random.nextString(10))): _*))\n       case ARRAY(_) =>\n-        new GenericArrayData(Array[Any](Random.nextInt(), Random.nextInt()))\n+        UnsafeArrayData.fromPrimitiveArray(Array(Random.nextInt(), Random.nextInt()))\n       case MAP(_) =>\n-        ArrayBasedMapData(\n-          Map(Random.nextInt() -> UTF8String.fromString(Random.nextString(Random.nextInt(32)))))\n+        val unsafeConverter =\n+          UnsafeProjection.create(Array[DataType](MapType(IntegerType, StringType)))\n+        val row = new GenericInternalRow(1)\n+        def toUnsafeMap(map: ArrayBasedMapData): UnsafeMapData = {\n+          row.update(0, map)\n+          val unsafeRow = unsafeConverter.apply(row)\n+          unsafeRow.getMap(0).copy\n+        }\n+        toUnsafeMap(ArrayBasedMapData(\n+          Map(Random.nextInt() -> UTF8String.fromString(Random.nextString(Random.nextInt(32))))))",
    "line": 36
  }, {
    "author": {
      "login": "pwoody"
    },
    "body": "The ColumnType for Maps/Struct/Array all end up casting to their Unsafe structures to get the size for the statistics, so the test data will need to reflect that as well.",
    "commit": "6ea0919ec0a9dfc6b121c88790fac79aa072bc60",
    "createdAt": "2018-03-31T21:49:11Z",
    "diffHunk": "@@ -54,12 +54,22 @@ object ColumnarTestUtils {\n       case COMPACT_DECIMAL(precision, scale) => Decimal(Random.nextLong() % 100, precision, scale)\n       case LARGE_DECIMAL(precision, scale) => Decimal(Random.nextLong(), precision, scale)\n       case STRUCT(_) =>\n-        new GenericInternalRow(Array[Any](UTF8String.fromString(Random.nextString(10))))\n+        val schema = StructType(Array(StructField(\"test\", StringType)))\n+        val converter = UnsafeProjection.create(schema)\n+        converter(InternalRow(Array(UTF8String.fromString(Random.nextString(10))): _*))\n       case ARRAY(_) =>\n-        new GenericArrayData(Array[Any](Random.nextInt(), Random.nextInt()))\n+        UnsafeArrayData.fromPrimitiveArray(Array(Random.nextInt(), Random.nextInt()))\n       case MAP(_) =>\n-        ArrayBasedMapData(\n-          Map(Random.nextInt() -> UTF8String.fromString(Random.nextString(Random.nextInt(32)))))\n+        val unsafeConverter =\n+          UnsafeProjection.create(Array[DataType](MapType(IntegerType, StringType)))\n+        val row = new GenericInternalRow(1)\n+        def toUnsafeMap(map: ArrayBasedMapData): UnsafeMapData = {\n+          row.update(0, map)\n+          val unsafeRow = unsafeConverter.apply(row)\n+          unsafeRow.getMap(0).copy\n+        }\n+        toUnsafeMap(ArrayBasedMapData(\n+          Map(Random.nextInt() -> UTF8String.fromString(Random.nextString(Random.nextInt(32))))))",
    "line": 36
  }],
  "prId": 20935
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "If it imports more then 5, wlidcard can be used as well per style guide.",
    "commit": "6ea0919ec0a9dfc6b121c88790fac79aa072bc60",
    "createdAt": "2019-01-06T04:13:36Z",
    "diffHunk": "@@ -21,9 +21,9 @@ import scala.collection.immutable.HashSet\n import scala.util.Random\n \n import org.apache.spark.sql.catalyst.InternalRow\n-import org.apache.spark.sql.catalyst.expressions.GenericInternalRow\n-import org.apache.spark.sql.catalyst.util.{ArrayBasedMapData, GenericArrayData}\n-import org.apache.spark.sql.types.{AtomicType, Decimal}\n+import org.apache.spark.sql.catalyst.expressions.{GenericInternalRow, UnsafeArrayData, UnsafeMapData, UnsafeProjection}\n+import org.apache.spark.sql.catalyst.util.ArrayBasedMapData\n+import org.apache.spark.sql.types.{AtomicType, DataType, Decimal, IntegerType, MapType, StringType, StructField, StructType}",
    "line": 9
  }],
  "prId": 20935
}]