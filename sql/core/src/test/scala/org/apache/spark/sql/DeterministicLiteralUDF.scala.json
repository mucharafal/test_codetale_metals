[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We need a test coverage for `false`, too.",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-29T22:12:27Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.ScalaUDF\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DeterministicLiteralUDFSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"Deterministic and literal UDF optimization\") {\n+    def udfNodesCount(plan: LogicalPlan): Int = {\n+      plan.expressions.head.children.collect({\n+        case f: ScalaUDF => f\n+      }).length\n+    }\n+\n+    withSQLConf(SQLConf.DETERMINISTIC_LITERAL_UDF_FOLD_ENABLED.key -> \"true\") {"
  }, {
    "author": {
      "login": "skambha"
    },
    "body": "I have added them in the last push. ",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-30T23:12:04Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.ScalaUDF\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DeterministicLiteralUDFSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"Deterministic and literal UDF optimization\") {\n+    def udfNodesCount(plan: LogicalPlan): Int = {\n+      plan.expressions.head.children.collect({\n+        case f: ScalaUDF => f\n+      }).length\n+    }\n+\n+    withSQLConf(SQLConf.DETERMINISTIC_LITERAL_UDF_FOLD_ENABLED.key -> \"true\") {"
  }],
  "prId": 24593
}]