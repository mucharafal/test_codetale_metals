[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "these can be compressed into single lines ... similar to how it was earlier",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T01:38:40Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+\n+class MemoryStateStore extends StateStore() {\n+  import scala.collection.JavaConverters._\n+  private val map = new ConcurrentHashMap[UnsafeRow, UnsafeRow]\n+\n+  override def iterator(): Iterator[UnsafeRowPair] = {\n+    map.entrySet.iterator.asScala.map { case e => new UnsafeRowPair(e.getKey, e.getValue) }\n+  }\n+\n+  override def get(key: UnsafeRow): UnsafeRow = map.get(key)\n+\n+  override def put(key: UnsafeRow, newValue: UnsafeRow): Unit = {\n+    map.put(key.copy(), newValue.copy())\n+  }\n+\n+  override def remove(key: UnsafeRow): Unit = {\n+    map.remove(key)"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Yeah missed that. Will fix.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T08:14:11Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+\n+class MemoryStateStore extends StateStore() {\n+  import scala.collection.JavaConverters._\n+  private val map = new ConcurrentHashMap[UnsafeRow, UnsafeRow]\n+\n+  override def iterator(): Iterator[UnsafeRowPair] = {\n+    map.entrySet.iterator.asScala.map { case e => new UnsafeRowPair(e.getKey, e.getValue) }\n+  }\n+\n+  override def get(key: UnsafeRow): UnsafeRow = map.get(key)\n+\n+  override def put(key: UnsafeRow, newValue: UnsafeRow): Unit = {\n+    map.put(key.copy(), newValue.copy())\n+  }\n+\n+  override def remove(key: UnsafeRow): Unit = {\n+    map.remove(key)"
  }],
  "prId": 21733
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "nit: add docs. ",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T01:38:56Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+\n+class MemoryStateStore extends StateStore() {",
    "line": 24
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "It was actually just extracted from other place to reuse among the places, but I agree it's better to document once it is kind of public API for testing. Will add.",
    "commit": "19888abc281d7a0689bf57e4c76bda918ad9306b",
    "createdAt": "2018-08-01T08:13:42Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming.state\n+\n+import java.util.concurrent.ConcurrentHashMap\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow\n+\n+class MemoryStateStore extends StateStore() {",
    "line": 24
  }],
  "prId": 21733
}]