[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Now, this test only has one single listener whose constructor has zero arg. Could you add one more with a `SparkConf` arg in the constructor?",
    "commit": "bcc44e9945f29f60a307bfa3a90225d4419622de",
    "createdAt": "2017-10-08T05:29:49Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import org.apache.spark._\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.internal.StaticSQLConf._\n+\n+class ExecutionListenerManagerSuite extends SparkFunSuite {\n+\n+  import CountingQueryExecutionListener._\n+\n+  test(\"register query execution listeners using configuration\") {\n+    val conf = new SparkConf(false)\n+      .set(QUERY_EXECUTION_LISTENERS, Seq(classOf[CountingQueryExecutionListener].getName()))",
    "line": 32
  }, {
    "author": {
      "login": "vanzin"
    },
    "body": "That's covered by `UtilsSuite` already.",
    "commit": "bcc44e9945f29f60a307bfa3a90225d4419622de",
    "createdAt": "2017-10-09T19:55:48Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import org.apache.spark._\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.internal.StaticSQLConf._\n+\n+class ExecutionListenerManagerSuite extends SparkFunSuite {\n+\n+  import CountingQueryExecutionListener._\n+\n+  test(\"register query execution listeners using configuration\") {\n+    val conf = new SparkConf(false)\n+      .set(QUERY_EXECUTION_LISTENERS, Seq(classOf[CountingQueryExecutionListener].getName()))",
    "line": 32
  }],
  "prId": 19309
}]