[{
  "comments": [{
    "author": {
      "login": "mengxr"
    },
    "body": "We can make the error messages clearer by computing the expected range and the actual rank. It is hard to tell the whole picture from the current error message.\n",
    "commit": "a36891babc21b1b1ba26854aad10aa9af7c4ab89",
    "createdAt": "2016-02-23T07:30:18Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.execution.stat.StatFunctions.QuantileSummaries\n+\n+\n+class ApproxQuantileSuite extends SparkFunSuite {\n+\n+  private val r = new Random(1)\n+  private val n = 100\n+  private val increasing = \"increasing\" -> (0 until n).map(_.toDouble)\n+  private val decreasing = \"decreasing\" -> (n until 0 by -1).map(_.toDouble)\n+  private val random = \"random\" -> Seq.fill(n)(math.ceil(r.nextDouble() * 1000))\n+\n+  private def buildSummary(\n+      data: Seq[Double],\n+      epsi: Double,\n+      threshold: Int): QuantileSummaries = {\n+    var summary = new QuantileSummaries(threshold, epsi)\n+    data.foreach { x =>\n+      summary = summary.insert(x)\n+    }\n+    summary.compress()\n+  }\n+\n+  private def checkQuantile(quant: Double, data: Seq[Double], summary: QuantileSummaries): Unit = {\n+    val approx = summary.query(quant)\n+    // The rank of the approximation.\n+    val rank = data.count(_ < approx) // has to be <, not <= to be exact\n+    val lower = math.floor((quant - summary.epsilon) * data.size)\n+    assert(rank >= lower,\n+      s\"approx_rank: $rank ! >= $lower, requested quantile = $quant\")\n+    val upper = math.ceil((quant + summary.epsilon) * data.size)\n+    assert(rank <= upper,",
    "line": 53
  }, {
    "author": {
      "login": "thunterdb"
    },
    "body": "fixed\n",
    "commit": "a36891babc21b1b1ba26854aad10aa9af7c4ab89",
    "createdAt": "2016-02-23T18:08:25Z",
    "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.stat\n+\n+import scala.util.Random\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.execution.stat.StatFunctions.QuantileSummaries\n+\n+\n+class ApproxQuantileSuite extends SparkFunSuite {\n+\n+  private val r = new Random(1)\n+  private val n = 100\n+  private val increasing = \"increasing\" -> (0 until n).map(_.toDouble)\n+  private val decreasing = \"decreasing\" -> (n until 0 by -1).map(_.toDouble)\n+  private val random = \"random\" -> Seq.fill(n)(math.ceil(r.nextDouble() * 1000))\n+\n+  private def buildSummary(\n+      data: Seq[Double],\n+      epsi: Double,\n+      threshold: Int): QuantileSummaries = {\n+    var summary = new QuantileSummaries(threshold, epsi)\n+    data.foreach { x =>\n+      summary = summary.insert(x)\n+    }\n+    summary.compress()\n+  }\n+\n+  private def checkQuantile(quant: Double, data: Seq[Double], summary: QuantileSummaries): Unit = {\n+    val approx = summary.query(quant)\n+    // The rank of the approximation.\n+    val rank = data.count(_ < approx) // has to be <, not <= to be exact\n+    val lower = math.floor((quant - summary.epsilon) * data.size)\n+    assert(rank >= lower,\n+      s\"approx_rank: $rank ! >= $lower, requested quantile = $quant\")\n+    val upper = math.ceil((quant + summary.epsilon) * data.size)\n+    assert(rank <= upper,",
    "line": 53
  }],
  "prId": 6042
}]