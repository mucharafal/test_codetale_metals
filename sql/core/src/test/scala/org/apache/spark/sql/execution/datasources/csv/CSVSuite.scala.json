[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think `false` case test can be removed.",
    "commit": "667db3c8ec6249321de10b4c48be545dcd19784a",
    "createdAt": "2018-08-17T02:06:47Z",
    "diffHunk": "@@ -1603,6 +1603,44 @@ class CSVSuite extends QueryTest with SharedSQLContext with SQLTestUtils with Te\n       .exists(msg => msg.getRenderedMessage.contains(\"CSV header does not conform to the schema\")))\n   }\n \n+  test(\"SPARK-25134: check header on parsing of dataset with projection and column pruning\") {\n+    withSQLConf(SQLConf.CSV_PARSER_COLUMN_PRUNING.key -> \"true\") {\n+      withTempPath { path =>\n+        val dir = path.getAbsolutePath\n+        Seq((\"a\", \"b\")).toDF(\"columnA\", \"columnB\").write\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .save(dir)\n+        checkAnswer(spark.read\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .option(\"enforceSchema\", false)\n+          .load(dir)\n+          .select(\"columnA\"),\n+          Row(\"a\"))\n+      }\n+    }\n+  }\n+\n+  test(\"SPARK-25134: check header on parsing of dataset with projection and no column pruning\") {\n+    withSQLConf(SQLConf.CSV_PARSER_COLUMN_PRUNING.key -> \"false\") {"
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "ok will remove",
    "commit": "667db3c8ec6249321de10b4c48be545dcd19784a",
    "createdAt": "2018-08-17T04:15:12Z",
    "diffHunk": "@@ -1603,6 +1603,44 @@ class CSVSuite extends QueryTest with SharedSQLContext with SQLTestUtils with Te\n       .exists(msg => msg.getRenderedMessage.contains(\"CSV header does not conform to the schema\")))\n   }\n \n+  test(\"SPARK-25134: check header on parsing of dataset with projection and column pruning\") {\n+    withSQLConf(SQLConf.CSV_PARSER_COLUMN_PRUNING.key -> \"true\") {\n+      withTempPath { path =>\n+        val dir = path.getAbsolutePath\n+        Seq((\"a\", \"b\")).toDF(\"columnA\", \"columnB\").write\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .save(dir)\n+        checkAnswer(spark.read\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .option(\"enforceSchema\", false)\n+          .load(dir)\n+          .select(\"columnA\"),\n+          Row(\"a\"))\n+      }\n+    }\n+  }\n+\n+  test(\"SPARK-25134: check header on parsing of dataset with projection and no column pruning\") {\n+    withSQLConf(SQLConf.CSV_PARSER_COLUMN_PRUNING.key -> \"false\") {"
  }],
  "prId": 22123
}, {
  "comments": [{
    "author": {
      "login": "MaxGekk"
    },
    "body": "Could you check a corner case when required Schema is empty. For example, `.option(\"enforceSchema\", false)` + `count()`.",
    "commit": "667db3c8ec6249321de10b4c48be545dcd19784a",
    "createdAt": "2018-08-18T17:35:23Z",
    "diffHunk": "@@ -1603,6 +1603,25 @@ class CSVSuite extends QueryTest with SharedSQLContext with SQLTestUtils with Te\n       .exists(msg => msg.getRenderedMessage.contains(\"CSV header does not conform to the schema\")))\n   }\n \n+  test(\"SPARK-25134: check header on parsing of dataset with projection and column pruning\") {\n+    withSQLConf(SQLConf.CSV_PARSER_COLUMN_PRUNING.key -> \"true\") {\n+      withTempPath { path =>\n+        val dir = path.getAbsolutePath\n+        Seq((\"a\", \"b\")).toDF(\"columnA\", \"columnB\").write\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .save(dir)\n+        checkAnswer(spark.read\n+          .format(\"csv\")\n+          .option(\"header\", true)\n+          .option(\"enforceSchema\", false)\n+          .load(dir)\n+          .select(\"columnA\"),"
  }],
  "prId": 22123
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Also need a test case for checking enforceSchema works well when column pruning is on. ",
    "commit": "667db3c8ec6249321de10b4c48be545dcd19784a",
    "createdAt": "2018-08-20T14:43:04Z",
    "diffHunk": "@@ -1603,6 +1603,39 @@ class CSVSuite extends QueryTest with SharedSQLContext with SQLTestUtils with Te\n       .exists(msg => msg.getRenderedMessage.contains(\"CSV header does not conform to the schema\")))\n   }\n \n+  test(\"SPARK-25134: check header on parsing of dataset with projection and column pruning\") {",
    "line": 4
  }, {
    "author": {
      "login": "koertkuipers"
    },
    "body": "it seems enforceSchema always kind of \"works\" because it simply means it ignores the headers.\r\nwhat do we expect to verify in the test?",
    "commit": "667db3c8ec6249321de10b4c48be545dcd19784a",
    "createdAt": "2018-08-20T15:41:45Z",
    "diffHunk": "@@ -1603,6 +1603,39 @@ class CSVSuite extends QueryTest with SharedSQLContext with SQLTestUtils with Te\n       .exists(msg => msg.getRenderedMessage.contains(\"CSV header does not conform to the schema\")))\n   }\n \n+  test(\"SPARK-25134: check header on parsing of dataset with projection and column pruning\") {",
    "line": 4
  }],
  "prId": 22123
}]