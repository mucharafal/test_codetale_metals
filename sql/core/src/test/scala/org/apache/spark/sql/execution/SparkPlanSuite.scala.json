[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. There is an inconsistent corner case in `plan.executeTake`.\r\n```scala\r\nplan.executeTake(1)  -> raise exception\r\nplan.executeTake(0)  -> no exception\r\nplan.executeTake(-1)  -> raise exception\r\n```\r\n",
    "commit": "8346e083ce0f7afbdb5b14371725f74c87b1f8e2",
    "createdAt": "2017-08-05T21:02:17Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class SparkPlanSuite extends QueryTest with SharedSQLContext {\n+\n+  test(\"SPARK-21619 execution of a canonicalized plan should fail\") {\n+    val plan = spark.range(10).queryExecution.executedPlan.canonicalized\n+\n+    intercept[IllegalStateException] { plan.execute() }\n+    intercept[IllegalStateException] { plan.executeCollect() }\n+    intercept[IllegalStateException] { plan.executeCollectPublic() }\n+    intercept[IllegalStateException] { plan.executeToIterator() }\n+    intercept[IllegalStateException] { plan.executeBroadcast() }\n+    intercept[IllegalStateException] { plan.executeTake(1) }",
    "line": 33
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "That's not an issue with this test, is it? It's just how execution is done.\r\n",
    "commit": "8346e083ce0f7afbdb5b14371725f74c87b1f8e2",
    "createdAt": "2017-10-28T03:07:54Z",
    "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class SparkPlanSuite extends QueryTest with SharedSQLContext {\n+\n+  test(\"SPARK-21619 execution of a canonicalized plan should fail\") {\n+    val plan = spark.range(10).queryExecution.executedPlan.canonicalized\n+\n+    intercept[IllegalStateException] { plan.execute() }\n+    intercept[IllegalStateException] { plan.executeCollect() }\n+    intercept[IllegalStateException] { plan.executeCollectPublic() }\n+    intercept[IllegalStateException] { plan.executeToIterator() }\n+    intercept[IllegalStateException] { plan.executeBroadcast() }\n+    intercept[IllegalStateException] { plan.executeTake(1) }",
    "line": 33
  }],
  "prId": 18828
}]