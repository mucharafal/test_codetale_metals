[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "Since there is only one test \"OffsetSeqLogSuite:\" in the name is not needed. Rather lets name it \"serialization - deserialization\" as that is what this is testing.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T20:32:07Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {"
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "Got it.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T21:30:49Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {"
  }],
  "prId": 15626
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "incorrect continuation indent, should be 2 not eight.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T20:32:49Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      assert(metadataLog.add(0, batch0))\n+      assert(metadataLog.getLatest() === Some(0 -> batch0Serialized))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+\n+      assert(metadataLog.add(1, batch1))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))\n+\n+      // Adding the same batch does nothing\n+      metadataLog.add(1, OffsetSeq.fill(LongOffset(3)))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))"
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "Got it.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T21:32:13Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      assert(metadataLog.add(0, batch0))\n+      assert(metadataLog.getLatest() === Some(0 -> batch0Serialized))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+\n+      assert(metadataLog.add(1, batch1))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))\n+\n+      // Adding the same batch does nothing\n+      metadataLog.add(1, OffsetSeq.fill(LongOffset(3)))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))"
  }],
  "prId": 15626
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "incorrect continuation indent, should be 2 not eight.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T20:32:53Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      assert(metadataLog.add(0, batch0))\n+      assert(metadataLog.getLatest() === Some(0 -> batch0Serialized))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+\n+      assert(metadataLog.add(1, batch1))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))"
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "Got it.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T21:31:58Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      assert(metadataLog.add(0, batch0))\n+      assert(metadataLog.getLatest() === Some(0 -> batch0Serialized))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+\n+      assert(metadataLog.add(1, batch1))\n+      assert(metadataLog.get(0) === Some(batch0Serialized))\n+      assert(metadataLog.get(1) === Some(batch1Serialized))\n+      assert(metadataLog.getLatest() === Some(1 -> batch1Serialized))\n+      assert(metadataLog.get(None, Some(1)) ===\n+             Array(0 -> batch0Serialized, 1 -> batch1Serialized))"
  }],
  "prId": 15626
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "simpler to read if you use `flatmap` instead of map...map...flatten.\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T20:36:29Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>"
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "indeed!\n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T21:30:07Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))\n+\n+      val batch0Serialized = OffsetSeq.fill(batch0.offsets.map(_.map(o =>\n+        SerializedOffset(o.json))).flatten: _*)\n+\n+      val batch1Serialized = OffsetSeq.fill(batch1.offsets.map(_.map(o =>"
  }],
  "prId": 15626
}, {
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "would like to see this test with mixed offset types. how about define a custom offset and use that. \n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T20:39:29Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))"
  }, {
    "author": {
      "login": "tcondie"
    },
    "body": "I added a StringOffset type. Let me know if you'd like to see something more complex. \n",
    "commit": "dabb628d0f39aeea94fd1afbad816b856b0a0eae",
    "createdAt": "2016-10-28T21:30:40Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+\n+import org.json4s.NoTypeHints\n+import org.json4s.jackson.Serialization\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class OffsetSeqLogSuite extends SparkFunSuite with SharedSQLContext {\n+\n+  private implicit val formats = Serialization.formats(NoTypeHints)\n+\n+  testWithUninterruptibleThread(\"OffsetSeqLogSuite: basic\") {\n+    withTempDir { temp =>\n+      val dir = new File(temp, \"dir\") // use non-existent directory to test whether log make the dir\n+      val metadataLog = new OffsetSeqLog(\"v1\", spark, dir.getAbsolutePath)\n+      val batch0 = OffsetSeq.fill(LongOffset(0))\n+      val batch1 = OffsetSeq.fill(LongOffset(1), LongOffset(2))"
  }],
  "prId": 15626
}]