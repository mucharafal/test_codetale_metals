[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Move this into catalyst, and place this in the `org.apache.spark.sql.catalyst.optimizer`. I would call it the `complexTypesSuite.scala`",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:03:30Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "See the tests in that package for a example of how to create your own optimizer and stuff.",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:04:21Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r"
  }, {
    "author": {
      "login": "eyalfa"
    },
    "body": "I've tried, now I can't import SharedSQLContext, any idea?",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T22:07:45Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Short description of the tests?",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:03:52Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: clean it.",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:05:44Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r"
  }, {
    "author": {
      "login": "eyalfa"
    },
    "body": "already did, will push shortly",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:10:38Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Kind of hard to read. Could you make it shorter? For example,\r\n```Scala\r\nval mapType = MapType(\r\n  StringType,\r\n  StructType(StructField(\"att1\", LongType, nullable = false) :: Nil),\r\n  valueContainsNull = false)\r\nval expectedType = StructType(StructField(\"m\", mapType, nullable = false) :: Nil)\r\nrel.schema shouldEqual expectedType\r\n```\r\n\r\nThe same issue for all the other testcases",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:12:28Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"collapsed\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ) as \"struct1\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField(\r\n+          \"struct1\",\r\n+          StructType(\r\n+            StructField(\r\n+              \"att\",\r\n+              LongType,\r\n+              false\r\n+            ) :: Nil\r\n+          ),\r\n+          false\r\n+        ) :: Nil\r\n+      )\r"
  }, {
    "author": {
      "login": "eyalfa"
    },
    "body": "I'll have a try at it...",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:21:13Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"collapsed\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ) as \"struct1\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField(\r\n+          \"struct1\",\r\n+          StructType(\r\n+            StructField(\r\n+              \"att\",\r\n+              LongType,\r\n+              false\r\n+            ) :: Nil\r\n+          ),\r\n+          false\r\n+        ) :: Nil\r\n+      )\r"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "The dsl is also nice to use.",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:23:26Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"collapsed\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ) as \"struct1\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField(\r\n+          \"struct1\",\r\n+          StructType(\r\n+            StructField(\r\n+              \"att\",\r\n+              LongType,\r\n+              false\r\n+            ) :: Nil\r\n+          ),\r\n+          false\r\n+        ) :: Nil\r\n+      )\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: `test( \"collapsed\" )` -> `test(\"collapsed\")`\r\n\r\nPlease correct all the style issues in all the above test cases.",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:13:41Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"collapsed\" ) {\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "If it can fit one line, could you rewrite it using a single line. Thanks!",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:15:06Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r"
  }, {
    "author": {
      "login": "eyalfa"
    },
    "body": "I think it exceeds max line length",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:32:47Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Try it. ",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T23:03:49Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\r\n+import org.apache.spark.sql.catalyst.plans.PlanTest\r\n+import org.apache.spark.sql.catalyst.plans.logical.{LogicalPlan, Project}\r\n+import org.apache.spark.sql.catalyst.rules.Rule\r\n+import org.apache.spark.sql.test.SharedSQLContext\r\n+import org.apache.spark.sql.types._\r\n+import org.scalatest.{FunSuite, ShouldMatchers, Suite, Tag}\r\n+\r\n+import scala.collection.immutable.IndexedSeq\r\n+import org.apache.spark.sql.catalyst.dsl.expressions._\r\n+import org.apache.spark.sql.catalyst.dsl.plans._\r\n+\r\n+/**\r\n+* Created by eyalf on 11/4/2016.\r\n+*/\r\n+class Spark18601Suite extends PlanTest with SharedSQLContext with ShouldMatchers{\r\n+  //import testImplicits._\r\n+\r\n+  lazy val baseRelation = sqlContext.range( 1L, 1000L)\r\n+  lazy val baseOptimizedPlan = baseRelation.queryExecution.optimizedPlan\r\n+\r\n+  val idRef = ('id).long.notNull\r\n+  val idRefColumn = Column( \"id\" )\r\n+  val struct1RefColumn = Column( \"struct1\" )\r\n+\r\n+  test( \"explicit\" ) {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\") as \"outerAtt\"\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType( StructField( \"outerAtt\", LongType, nullable = false ) :: Nil )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"outerAtt\"\r\n+    )\r\n+\r\n+    comparePlans(optimized, expected)\r\n+  }\r\n+\r\n+  test( \"explicit - deduced att name\") {\r\n+    val rel = baseRelation.select(\r\n+      functions.struct( idRefColumn as \"att\" ).getField(\"att\")\r\n+    )\r\n+    rel.schema shouldEqual\r\n+      StructType(\r\n+        StructField( \"named_struct(att, id AS `att`).att\", LongType, nullable = false ) :: Nil\r\n+      )\r\n+\r\n+    val optimized = rel.queryExecution.optimizedPlan\r\n+\r\n+    val expected = baseOptimizedPlan.select(\r\n+      idRef as \"named_struct(att, id AS `att`).att\"\r\n+    )\r"
  }],
  "prId": 16043
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "You can split it to multiple lines",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-28T21:23:19Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Or simply import with a wild card if you are importing more than 6 entities.",
    "commit": "32805cfb2176ab74c21ca93ab53f92852ad7fb24",
    "createdAt": "2016-11-29T00:41:47Z",
    "diffHunk": "@@ -0,0 +1,331 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql\r\n+\r\n+import org.apache.spark.SparkFunSuite\r\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, Cast, CreateArray, CreateMap, CreateNamedStruct, CreateNamedStructLike, CreateNamedStructUnsafe, Expression, GetArrayItem, GetArrayStructFields, GetMapValue, GetStructField, IntegerLiteral, Literal}\r"
  }],
  "prId": 16043
}]