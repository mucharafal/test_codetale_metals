[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "why not just use `SQLTestUtils#withSQLConf`? no need to duplicate here\n",
    "commit": "fcec2975d74710f9d1604a01b806566e1f47f1a1",
    "createdAt": "2015-09-09T23:33:24Z",
    "diffHunk": "@@ -17,13 +17,39 @@\n \n package org.apache.spark.sql.execution.local\n \n+import scala.reflect.runtime.universe.TypeTag\n+import scala.util.Try\n import scala.util.control.NonFatal\n \n import org.apache.spark.SparkFunSuite\n-import org.apache.spark.sql.{DataFrame, Row}\n-import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.{DataFrame, DataFrameHolder, Row, SQLConf}\n+import org.apache.spark.sql.test.{SharedSQLContext, SQLTestUtils}\n \n-class LocalNodeTest extends SparkFunSuite {\n+class LocalNodeTest extends SparkFunSuite with SharedSQLContext {\n+\n+  protected val conf = new SQLConf\n+\n+  /**\n+   * Sets all configurations specified in `pairs`, calls `f`, and then restore all configurations.\n+   */\n+  protected def withConf(pairs: (String, String)*)(f: => Unit): Unit = {"
  }],
  "prId": 8535
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "same here, this is already available through `SQLTestUtils`\n",
    "commit": "fcec2975d74710f9d1604a01b806566e1f47f1a1",
    "createdAt": "2015-09-09T23:34:29Z",
    "diffHunk": "@@ -17,13 +17,39 @@\n \n package org.apache.spark.sql.execution.local\n \n+import scala.reflect.runtime.universe.TypeTag\n+import scala.util.Try\n import scala.util.control.NonFatal\n \n import org.apache.spark.SparkFunSuite\n-import org.apache.spark.sql.{DataFrame, Row}\n-import org.apache.spark.sql.test.SQLTestUtils\n+import org.apache.spark.sql.{DataFrame, DataFrameHolder, Row, SQLConf}\n+import org.apache.spark.sql.test.{SharedSQLContext, SQLTestUtils}\n \n-class LocalNodeTest extends SparkFunSuite {\n+class LocalNodeTest extends SparkFunSuite with SharedSQLContext {\n+\n+  protected val conf = new SQLConf\n+\n+  /**\n+   * Sets all configurations specified in `pairs`, calls `f`, and then restore all configurations.\n+   */\n+  protected def withConf(pairs: (String, String)*)(f: => Unit): Unit = {\n+    val (keys, values) = pairs.unzip\n+    val currentValues = keys.map(key => Try(conf.getConfString(key)).toOption)\n+    (keys, values).zipped.foreach(conf.setConfString)\n+    try f finally {\n+      keys.zip(currentValues).foreach {\n+        case (key, Some(value)) => conf.setConfString(key, value)\n+        case (key, None) => conf.unsetConf(key)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a DataFrame from a local Seq of Product.\n+   */\n+  implicit def localSeqToDataFrameHolder[A <: Product : TypeTag](data: Seq[A]): DataFrameHolder = {\n+    sqlContext.implicits.localSeqToDataFrameHolder(data)\n+  }"
  }],
  "prId": 8535
}]