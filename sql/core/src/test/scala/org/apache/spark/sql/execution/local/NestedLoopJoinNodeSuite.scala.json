[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "private\n",
    "commit": "c6e80a2f0fa71dc788a754dd9d0f7e8e89bab56f",
    "createdAt": "2015-09-11T21:51:35Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.SQLConf\n+import org.apache.spark.sql.catalyst.plans.{FullOuter, LeftOuter, RightOuter}\n+import org.apache.spark.sql.execution.joins.BuildRight\n+\n+class NestedLoopJoinNodeSuite extends LocalNodeTest {\n+\n+  import testImplicits._\n+\n+  def joinSuite(suiteName: String, confPairs: (String, String)*): Unit = {"
  }],
  "prId": 8642
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "looks like all these tests only test `BuildRight`. Shall we have some tests for `BuildLeft` as well? Might be as simple as adding `buildSide` as a param to `joinSuite`\n",
    "commit": "c6e80a2f0fa71dc788a754dd9d0f7e8e89bab56f",
    "createdAt": "2015-09-11T21:53:11Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.SQLConf\n+import org.apache.spark.sql.catalyst.plans.{FullOuter, LeftOuter, RightOuter}\n+import org.apache.spark.sql.execution.joins.BuildRight\n+\n+class NestedLoopJoinNodeSuite extends LocalNodeTest {\n+\n+  import testImplicits._\n+\n+  def joinSuite(suiteName: String, confPairs: (String, String)*): Unit = {\n+    test(s\"$suiteName: left outer join\") {\n+      withSQLConf(confPairs: _*) {\n+        checkAnswer2(\n+          upperCaseData,\n+          lowerCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              LeftOuter,\n+              Some((upperCaseData.col(\"N\") === lowerCaseData.col(\"n\")).expr))\n+          ),\n+          upperCaseData.join(lowerCaseData, $\"n\" === $\"N\", \"left\").collect())\n+\n+        checkAnswer2(\n+          upperCaseData,\n+          lowerCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              LeftOuter,\n+              Some(\n+                (upperCaseData.col(\"N\") === lowerCaseData.col(\"n\") &&\n+                  lowerCaseData.col(\"n\") > 1).expr))\n+          ),\n+          upperCaseData.join(lowerCaseData, $\"n\" === $\"N\" && $\"n\" > 1, \"left\").collect())\n+\n+        checkAnswer2(\n+          upperCaseData,\n+          lowerCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              LeftOuter,\n+              Some(\n+                (upperCaseData.col(\"N\") === lowerCaseData.col(\"n\") &&\n+                  upperCaseData.col(\"N\") > 1).expr))\n+          ),\n+          upperCaseData.join(lowerCaseData, $\"n\" === $\"N\" && $\"N\" > 1, \"left\").collect())\n+\n+        checkAnswer2(\n+          upperCaseData,\n+          lowerCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              LeftOuter,\n+              Some(\n+                (upperCaseData.col(\"N\") === lowerCaseData.col(\"n\") &&\n+                  lowerCaseData.col(\"l\") > upperCaseData.col(\"L\")).expr))\n+          ),\n+          upperCaseData.join(lowerCaseData, $\"n\" === $\"N\" && $\"l\" > $\"L\", \"left\").collect())\n+      }\n+    }\n+\n+    test(s\"$suiteName: right outer join\") {\n+      withSQLConf(confPairs: _*) {\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              RightOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\")).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\", \"right\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              RightOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\") &&\n+                lowerCaseData.col(\"n\") > 1).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\" && $\"n\" > 1, \"right\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              RightOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\") &&\n+                upperCaseData.col(\"N\") > 1).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\" && $\"N\" > 1, \"right\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              RightOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\") &&\n+                lowerCaseData.col(\"l\") > upperCaseData.col(\"L\")).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\" && $\"l\" > $\"L\", \"right\").collect())\n+      }\n+    }\n+\n+    test(s\"$suiteName: full outer join\") {\n+      withSQLConf(confPairs: _*) {\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              FullOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\")).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\", \"full\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              FullOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\") &&\n+                lowerCaseData.col(\"n\") > 1).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\" && $\"n\" > 1, \"full\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,\n+              FullOuter,\n+              Some((lowerCaseData.col(\"n\") === upperCaseData.col(\"N\") &&\n+                upperCaseData.col(\"N\") > 1).expr))\n+          ),\n+          lowerCaseData.join(upperCaseData, $\"n\" === $\"N\" && $\"N\" > 1, \"full\").collect())\n+\n+        checkAnswer2(\n+          lowerCaseData,\n+          upperCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => NestedLoopJoinNode(\n+              conf,\n+              node1,\n+              node2,\n+              BuildRight,"
  }],
  "prId": 8642
}]