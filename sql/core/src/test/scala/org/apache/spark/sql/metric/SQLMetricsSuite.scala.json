[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "nit: \"Found\"\n",
    "commit": "14a5f0a5098ae36f9ee1217fdbc882f68e19488f",
    "createdAt": "2015-08-06T23:36:09Z",
    "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.metric\n+\n+import java.io.{ByteArrayInputStream, ByteArrayOutputStream}\n+\n+import scala.collection.mutable\n+\n+import com.esotericsoftware.reflectasm.shaded.org.objectweb.asm._\n+import com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.Opcodes._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.apache.spark.util.Utils\n+\n+\n+class SQLMetricsSuite extends SparkFunSuite {\n+\n+  test(\"LongSQLMetric should not box Long\") {\n+    val l = SQLMetrics.createLongMetric(TestSQLContext.sparkContext, \"long\")\n+    val f = () => { l += 1L }\n+    BoxingFinder.getClassReader(f.getClass).foreach { cl =>\n+      val boxingFinder = new BoxingFinder()\n+      cl.accept(boxingFinder, 0)\n+      assert(boxingFinder.boxingInvokes.isEmpty, s\"Find boxing: ${boxingFinder.boxingInvokes}\")\n+    }\n+  }\n+\n+  test(\"IntSQLMetric should not box Int\") {\n+    val l = SQLMetrics.createIntMetric(TestSQLContext.sparkContext, \"Int\")\n+    val f = () => { l += 1 }\n+    BoxingFinder.getClassReader(f.getClass).foreach { cl =>\n+      val boxingFinder = new BoxingFinder()\n+      cl.accept(boxingFinder, 0)\n+      assert(boxingFinder.boxingInvokes.isEmpty, s\"Find boxing: ${boxingFinder.boxingInvokes}\")"
  }],
  "prId": 7996
}]