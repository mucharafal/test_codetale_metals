[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @viirya . \r\n- The name and functions look more broader than the claim of the PR title and description. This test suite seems to target all file-based data sources which supports Vectorization. Did I understand correctly? +1 for the idea.\r\n- Specifically, this is used in `native` ORC, `hive` ORC and Parquet testing.\r\n\r\nAlso, cc @wangyum since he is working on Hive upgrade.",
    "commit": "7962660cfa8c752349eefa7421678ccc12060864",
    "createdAt": "2019-01-23T21:01:12Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.File\n+\n+import scala.reflect.ClassTag\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+private[sql] trait DataSourceTest extends SQLTestUtils {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Maybe `FileBaseDataSourceTest`?",
    "commit": "7962660cfa8c752349eefa7421678ccc12060864",
    "createdAt": "2019-01-24T01:07:30Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.File\n+\n+import scala.reflect.ClassTag\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+private[sql] trait DataSourceTest extends SQLTestUtils {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Sounds better than `DataSourceTest`.",
    "commit": "7962660cfa8c752349eefa7421678ccc12060864",
    "createdAt": "2019-01-24T06:14:10Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.File\n+\n+import scala.reflect.ClassTag\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+private[sql] trait DataSourceTest extends SQLTestUtils {"
  }],
  "prId": 23628
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "typo pass -> passes :)",
    "commit": "7962660cfa8c752349eefa7421678ccc12060864",
    "createdAt": "2019-01-24T06:16:33Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.File\n+\n+import scala.reflect.ClassTag\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+private[sql] trait DataSourceTest extends SQLTestUtils {\n+\n+  protected val dataSourceName: String\n+  protected val vectorizedReaderEnabledKey: String\n+\n+  /**\n+   * Reads data source file from given `path` as `DataFrame` and pass it to given function."
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Thanks! :)",
    "commit": "7962660cfa8c752349eefa7421678ccc12060864",
    "createdAt": "2019-01-24T09:11:11Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import java.io.File\n+\n+import scala.reflect.ClassTag\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.{DataFrame, SaveMode}\n+import org.apache.spark.sql.test.SQLTestUtils\n+\n+private[sql] trait DataSourceTest extends SQLTestUtils {\n+\n+  protected val dataSourceName: String\n+  protected val vectorizedReaderEnabledKey: String\n+\n+  /**\n+   * Reads data source file from given `path` as `DataFrame` and pass it to given function."
  }],
  "prId": 23628
}]