[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I would keep this line as was. ",
    "commit": "65179a2bdd1623fb7f4077cdc316de5a7436c49d",
    "createdAt": "2018-05-21T02:28:00Z",
    "diffHunk": "@@ -107,20 +107,26 @@ class UnivocityParserSuite extends SparkFunSuite {\n     assert(parser.makeConverter(\"_1\", BooleanType, options = options).apply(\"true\") == true)\n \n     val timestampsOptions =\n-      new CSVOptions(Map(\"timestampFormat\" -> \"dd/MM/yyyy hh:mm\"), \"GMT\")\n+      new CSVOptions(Map(\"timestampFormat\" -> \"dd/MM/yyyy HH:mm\"), \"GMT\")\n     val customTimestamp = \"31/01/2015 00:00\"\n-    val expectedTime = timestampsOptions.timestampFormat.parse(customTimestamp).getTime\n+\n+    val expectedTime = LocalDateTime.parse(customTimestamp, timestampsOptions.timestampFormatter)\n+      .atZone(options.timeZone.toZoneId)\n+      .toInstant.toEpochMilli\n     val castedTimestamp =\n-      parser.makeConverter(\"_1\", TimestampType, nullable = true, options = timestampsOptions)\n+      parser.makeConverter(\"_1\", TimestampType, nullable = true, timestampsOptions)\n         .apply(customTimestamp)\n     assert(castedTimestamp == expectedTime * 1000L)\n \n-    val customDate = \"31/01/2015\"\n     val dateOptions = new CSVOptions(Map(\"dateFormat\" -> \"dd/MM/yyyy\"), \"GMT\")\n-    val expectedDate = dateOptions.dateFormat.parse(customDate).getTime\n+    val customDate = \"31/01/2015\"\n+\n+    val expectedDate = LocalDate.parse(customDate, dateOptions.dateFormatter)\n+      .atStartOfDay(options.timeZone.toZoneId)\n+      .toInstant.toEpochMilli\n     val castedDate =\n-      parser.makeConverter(\"_1\", DateType, nullable = true, options = dateOptions)",
    "line": 36
  }, {
    "author": {
      "login": "sergey-rubtsov"
    },
    "body": "ok",
    "commit": "65179a2bdd1623fb7f4077cdc316de5a7436c49d",
    "createdAt": "2018-05-21T13:07:57Z",
    "diffHunk": "@@ -107,20 +107,26 @@ class UnivocityParserSuite extends SparkFunSuite {\n     assert(parser.makeConverter(\"_1\", BooleanType, options = options).apply(\"true\") == true)\n \n     val timestampsOptions =\n-      new CSVOptions(Map(\"timestampFormat\" -> \"dd/MM/yyyy hh:mm\"), \"GMT\")\n+      new CSVOptions(Map(\"timestampFormat\" -> \"dd/MM/yyyy HH:mm\"), \"GMT\")\n     val customTimestamp = \"31/01/2015 00:00\"\n-    val expectedTime = timestampsOptions.timestampFormat.parse(customTimestamp).getTime\n+\n+    val expectedTime = LocalDateTime.parse(customTimestamp, timestampsOptions.timestampFormatter)\n+      .atZone(options.timeZone.toZoneId)\n+      .toInstant.toEpochMilli\n     val castedTimestamp =\n-      parser.makeConverter(\"_1\", TimestampType, nullable = true, options = timestampsOptions)\n+      parser.makeConverter(\"_1\", TimestampType, nullable = true, timestampsOptions)\n         .apply(customTimestamp)\n     assert(castedTimestamp == expectedTime * 1000L)\n \n-    val customDate = \"31/01/2015\"\n     val dateOptions = new CSVOptions(Map(\"dateFormat\" -> \"dd/MM/yyyy\"), \"GMT\")\n-    val expectedDate = dateOptions.dateFormat.parse(customDate).getTime\n+    val customDate = \"31/01/2015\"\n+\n+    val expectedDate = LocalDate.parse(customDate, dateOptions.dateFormatter)\n+      .atStartOfDay(options.timeZone.toZoneId)\n+      .toInstant.toEpochMilli\n     val castedDate =\n-      parser.makeConverter(\"_1\", DateType, nullable = true, options = dateOptions)",
    "line": 36
  }],
  "prId": 21363
}]