[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "These tests are very rudimentary set of tests to test the DataFrameReader code path. Note that in Spark 1.6, there were no tests at all. Also I believe that a lot of the DF functionality is tested through other test suites (e.g. partitioning columns is tested through PartitionedParquetSuite)\n",
    "commit": "29ca23b74c16440dbb1e440423615357ec8015bf",
    "createdAt": "2016-06-13T23:46:53Z",
    "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.test\n+\n+import org.apache.spark.sql._\n+import org.apache.spark.sql.sources._\n+import org.apache.spark.sql.types.{StringType, StructField, StructType}\n+import org.apache.spark.util.Utils\n+\n+\n+object LastOptions {\n+\n+  var parameters: Map[String, String] = null\n+  var schema: Option[StructType] = null\n+  var saveMode: SaveMode = null\n+\n+  def clear(): Unit = {\n+    parameters = null\n+    schema = null\n+    saveMode = null\n+  }\n+}\n+\n+\n+/** Dummy provider. */\n+class DefaultSource\n+  extends RelationProvider\n+  with SchemaRelationProvider\n+  with CreatableRelationProvider {\n+\n+  case class FakeRelation(sqlContext: SQLContext) extends BaseRelation {\n+    override def schema: StructType = StructType(Seq(StructField(\"a\", StringType)))\n+  }\n+\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String],\n+      schema: StructType\n+    ): BaseRelation = {\n+    LastOptions.parameters = parameters\n+    LastOptions.schema = Some(schema)\n+    FakeRelation(sqlContext)\n+  }\n+\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String]\n+    ): BaseRelation = {\n+    LastOptions.parameters = parameters\n+    LastOptions.schema = None\n+    FakeRelation(sqlContext)\n+  }\n+\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      mode: SaveMode,\n+      parameters: Map[String, String],\n+      data: DataFrame): BaseRelation = {\n+    LastOptions.parameters = parameters\n+    LastOptions.schema = None\n+    LastOptions.saveMode = mode\n+    FakeRelation(sqlContext)\n+  }\n+}\n+\n+\n+class DataFrameReaderWriterSuite extends QueryTest with SharedSQLContext {",
    "line": 82
  }],
  "prId": 13653
}]