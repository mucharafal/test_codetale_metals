[{
  "comments": [{
    "author": {
      "login": "maryannxue"
    },
    "body": "Nit: you could also do\r\n```\r\n      val countSubqueryBroadcasts =\r\n        plan.collectInPlanAndSubqueries({ case _: SubqueryBroadcastExec => 1 }).sum\r\n      val countReusedSubqueryBroadcasts =\r\n        plan.collectInPlanAndSubqueries({\r\n          case ReusedSubqueryExec(_: SubqueryBroadcastExec) => 1\r\n        }).sum\r\n\r\n      assert(countSubqueryBroadcasts == 1)\r\n      assert(countReusedSubqueryBroadcasts == 1)\r\n```",
    "commit": "f86b8c3142fba8f4ed9d2e628c4eb085f26e8f8e",
    "createdAt": "2019-09-05T14:43:16Z",
    "diffHunk": "@@ -1238,7 +1238,10 @@ class DynamicPartitionPruningSuite\n \n       val plan = df.queryExecution.executedPlan\n       val countSubqueryBroadcasts =\n-        plan.collectInPlanAndSubqueries({ case _: SubqueryBroadcastExec => 1 }).sum\n+        plan.collectInPlanAndSubqueries({",
    "line": 5
  }, {
    "author": {
      "login": "peter-toth"
    },
    "body": "Ok, changed it.\r\nWhat do you think about removing `expressions.InSubquery` from `PlanAdaptiveSubqueries`? I don't see why it is there, but not sure that it should be removed in this PR.",
    "commit": "f86b8c3142fba8f4ed9d2e628c4eb085f26e8f8e",
    "createdAt": "2019-09-05T15:26:51Z",
    "diffHunk": "@@ -1238,7 +1238,10 @@ class DynamicPartitionPruningSuite\n \n       val plan = df.queryExecution.executedPlan\n       val countSubqueryBroadcasts =\n-        plan.collectInPlanAndSubqueries({ case _: SubqueryBroadcastExec => 1 }).sum\n+        plan.collectInPlanAndSubqueries({",
    "line": 5
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "We have `InSubqueryExec` now in DPP, so better keep it.",
    "commit": "f86b8c3142fba8f4ed9d2e628c4eb085f26e8f8e",
    "createdAt": "2019-09-05T19:37:19Z",
    "diffHunk": "@@ -1238,7 +1238,10 @@ class DynamicPartitionPruningSuite\n \n       val plan = df.queryExecution.executedPlan\n       val countSubqueryBroadcasts =\n-        plan.collectInPlanAndSubqueries({ case _: SubqueryBroadcastExec => 1 }).sum\n+        plan.collectInPlanAndSubqueries({",
    "line": 5
  }, {
    "author": {
      "login": "peter-toth"
    },
    "body": "Ok, I've reverted the change.",
    "commit": "f86b8c3142fba8f4ed9d2e628c4eb085f26e8f8e",
    "createdAt": "2019-09-06T09:59:08Z",
    "diffHunk": "@@ -1238,7 +1238,10 @@ class DynamicPartitionPruningSuite\n \n       val plan = df.queryExecution.executedPlan\n       val countSubqueryBroadcasts =\n-        plan.collectInPlanAndSubqueries({ case _: SubqueryBroadcastExec => 1 }).sum\n+        plan.collectInPlanAndSubqueries({",
    "line": 5
  }],
  "prId": 25644
}]