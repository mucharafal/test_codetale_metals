[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`extends PlanTest`",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T06:51:30Z",
    "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.{sources, QueryTest}\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends QueryTest with SharedSQLContext {"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Fixed. Thanks!",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T06:59:26Z",
    "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.{sources, QueryTest}\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends QueryTest with SharedSQLContext {"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "No need to call `Literal` here. It will be implicitly casted to Literal\r\n```\r\nexpressions.EqualTo(attrInt,1))\r\n```",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T07:02:59Z",
    "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.{sources, QueryTest}\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends QueryTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = AttributeReference(\"cint\", IntegerType)()\n+    val attrStr = AttributeReference(\"cstr\", StringType)()\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, Literal(1)))"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Fixed. Thanks!",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T07:20:44Z",
    "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.{sources, QueryTest}\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends QueryTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = AttributeReference(\"cint\", IntegerType)()\n+    val attrStr = AttributeReference(\"cstr\", StringType)()\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, Literal(1)))"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "```Scala\r\nimport org.apache.spark.sql.catalyst.dsl.expressions._\r\n```\r\n\r\nYou can simplify your test cases. \r\n\r\n```Scala\r\n    val attrInt = 'cint.int\r\n    val attrStr = 'cstr.string\r\n```",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T07:04:24Z",
    "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = AttributeReference(\"cint\", IntegerType)()\n+    val attrStr = AttributeReference(\"cstr\", StringType)()"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Fixed. Thanks!",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T07:20:48Z",
    "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types._\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = AttributeReference(\"cint\", IntegerType)()\n+    val attrStr = AttributeReference(\"cstr\", StringType)()"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "would be better to add a comment to say that `abs` is not supported",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:02:43Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:02:50Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 50),\n+        sources.LessThan(\"cint\", 100))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    // SPARK-22548 Incorrect nested AND expression pushed down to JDBC data source\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(\n+            expressions.Abs(attrInt), 10)"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:02:58Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 50),\n+        sources.LessThan(\"cint\", 100))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    // SPARK-22548 Incorrect nested AND expression pushed down to JDBC data source\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.And(\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 1),\n+            expressions.GreaterThanOrEqual(\n+              expressions.Abs(attrInt),"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:03:11Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 50),\n+        sources.LessThan(\"cint\", 100))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    // SPARK-22548 Incorrect nested AND expression pushed down to JDBC data source\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.And(\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 1),\n+            expressions.GreaterThanOrEqual(\n+              expressions.Abs(attrInt),\n+              10)\n+          ),\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 50),\n+            expressions.GreaterThanOrEqual(attrInt, 100)\n+          )\n+        )))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.Or(\n+        sources.EqualTo(\"cint\", 1),\n+        sources.EqualTo(\"cint\", 10)),\n+      sources.Or(\n+        sources.GreaterThan(\"cint\", 0),\n+        sources.LessThan(\"cint\", -10))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(attrInt, 10)\n+        ),\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 0),\n+          expressions.LessThan(attrInt, -10)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(\n+            expressions.Abs(attrInt), 10)"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:03:34Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 50),\n+        sources.LessThan(\"cint\", 100))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    // SPARK-22548 Incorrect nested AND expression pushed down to JDBC data source\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.And(\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 1),\n+            expressions.GreaterThanOrEqual(\n+              expressions.Abs(attrInt),\n+              10)\n+          ),\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 50),\n+            expressions.GreaterThanOrEqual(attrInt, 100)\n+          )\n+        )))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.Or(\n+        sources.EqualTo(\"cint\", 1),\n+        sources.EqualTo(\"cint\", 10)),\n+      sources.Or(\n+        sources.GreaterThan(\"cint\", 0),\n+        sources.LessThan(\"cint\", -10))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(attrInt, 10)\n+        ),\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 0),\n+          expressions.LessThan(attrInt, -10)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 0),\n+          expressions.LessThan(attrInt, -10)\n+        )\n+      ))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.EqualTo(\"cint\", 6),\n+        sources.IsNotNull(\"cint\"))))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.EqualTo(attrInt, 6),\n+          expressions.IsNotNull(attrInt)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.EqualTo(expressions.Abs(attrInt), 6),\n+          expressions.IsNotNull(attrInt)\n+        )\n+      ))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.Or(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.Or(\n+        sources.EqualTo(\"cint\", 6),\n+        sources.IsNotNull(\"cint\"))))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 6),\n+          expressions.IsNotNull(attrInt)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.Or(\n+          expressions.EqualTo(expressions.Abs(attrInt), 6),"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:04:07Z",
    "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 50),\n+        sources.LessThan(\"cint\", 100))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    // SPARK-22548 Incorrect nested AND expression pushed down to JDBC data source\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 50),\n+          expressions.LessThan(attrInt, 100)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.And(\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 1),\n+            expressions.GreaterThanOrEqual(\n+              expressions.Abs(attrInt),\n+              10)\n+          ),\n+          expressions.Or(\n+            expressions.LessThanOrEqual(attrInt, 50),\n+            expressions.GreaterThanOrEqual(attrInt, 100)\n+          )\n+        )))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.Or(\n+        sources.EqualTo(\"cint\", 1),\n+        sources.EqualTo(\"cint\", 10)),\n+      sources.Or(\n+        sources.GreaterThan(\"cint\", 0),\n+        sources.LessThan(\"cint\", -10))))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(attrInt, 10)\n+        ),\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 0),\n+          expressions.LessThan(attrInt, -10)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.Or(\n+          expressions.EqualTo(attrInt, 1),\n+          expressions.EqualTo(\n+            expressions.Abs(attrInt), 10)\n+        ),\n+        expressions.Or(\n+          expressions.GreaterThan(attrInt, 0),\n+          expressions.LessThan(attrInt, -10)\n+        )\n+      ))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10)),\n+      sources.And(\n+        sources.EqualTo(\"cint\", 6),\n+        sources.IsNotNull(\"cint\"))))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.EqualTo(attrInt, 6),\n+          expressions.IsNotNull(attrInt)\n+        )\n+      ))\n+    }\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.And(\n+          expressions.GreaterThan(attrInt, 1),\n+          expressions.LessThan(attrInt, 10)\n+        ),\n+        expressions.And(\n+          expressions.EqualTo(expressions.Abs(attrInt), 6),"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we move the comment to this line? i.e.\r\n```\r\n// `Abs` expression cannot be pushed down\r\nexpressions.Subtract(expressions.Abs(attrInt), 2), 1))\r\n```",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T08:39:30Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+    // Functions such as 'Abs' are not supported\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Fixed. Thanks.",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T22:39:55Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(attrStr, Literal(null)))\n+    }\n+    assertResult(Some(sources.EqualNullSafe(\"cstr\", null))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualNullSafe(Literal(null), attrStr))\n+    }\n+\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThan(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThan(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThan(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.GreaterThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(attrInt, 1))\n+    }\n+    assertResult(Some(sources.LessThanOrEqual(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.GreaterThanOrEqual(1, attrInt))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.InSet(attrInt, Set(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.In(\"cint\", Array(1, 2, 3)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.In(attrInt, Seq(1, 2, 3)))\n+    }\n+\n+    assertResult(Some(sources.IsNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNull(attrInt))\n+    }\n+    assertResult(Some(sources.IsNotNull(\"cint\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.IsNotNull(attrInt))\n+    }\n+\n+    assertResult(Some(sources.And(\n+      sources.GreaterThan(\"cint\", 1),\n+      sources.LessThan(\"cint\", 10)))) {\n+      DataSourceStrategy.translateFilter(expressions.And(\n+        expressions.GreaterThan(attrInt, 1),\n+        expressions.LessThan(attrInt, 10)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Or(\n+      sources.GreaterThanOrEqual(\"cint\", 8),\n+      sources.LessThanOrEqual(\"cint\", 2)))) {\n+      DataSourceStrategy.translateFilter(expressions.Or(\n+        expressions.GreaterThanOrEqual(attrInt, 8),\n+        expressions.LessThanOrEqual(attrInt, 2)\n+      ))\n+    }\n+\n+    assertResult(Some(sources.Not(\n+      sources.GreaterThanOrEqual(\"cint\", 8)))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Not(expressions.GreaterThanOrEqual(attrInt, 8)\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringStartsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.StartsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringEndsWith(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EndsWith(attrStr, \"a\"\n+        ))\n+    }\n+\n+    assertResult(Some(sources.StringContains(\"cstr\", \"a\"))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.Contains(attrStr, \"a\"\n+        ))\n+    }\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+    // Functions such as 'Abs' are not supported\n+    assertResult(None) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.LessThanOrEqual(\n+          expressions.Subtract(expressions.Abs(attrInt), 2), 1))"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Looks like we can have a small helper function:\r\n\r\n```scala\r\ndef testTranslateFilter(catalystFilter: Expression, result: Option[sources.Filter]): Unit = {\r\n  assertResult(result) {\r\n    DataSourceStrategy.translateFilter(catalystFilter)\r\n  }\r\n}\r\n```\r\n\r\nSo the tests can be rewritten as:\r\n```scala\r\ntestTranslateFilter(expressions.EqualTo(attrInt, 1), Some(sources.EqualTo(\"cint\", 1)))\r\n```",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T12:41:35Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Thanks! I've followed your suggestion and the test suite looks cleaner now. ",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T22:39:24Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    assertResult(Some(sources.EqualTo(\"cint\", 1))) {\n+      DataSourceStrategy.translateFilter(\n+        expressions.EqualTo(attrInt, 1))\n+    }"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "As you import `expressions._`, I think we can write `EqualTo` instead of `expressions.EqualTo` for catalyst predicates below?\r\n\r\nBecause you always write `sources.`EqualTo`, I think we don't confuse with them?",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T12:44:22Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "Thanks for the suggestion. Fixed. ",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T22:38:34Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions\n+import org.apache.spark.sql.catalyst.expressions._"
  }],
  "prId": 19776
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "?",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T22:57:58Z",
    "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    testTranslateFilter(EqualTo(attrInt, 1), Some(sources.EqualTo(\"cint\", 1)))\n+    testTranslateFilter(EqualTo(1, attrInt), Some(sources.EqualTo(\"cint\", 1)))\n+\n+    testTranslateFilter(EqualNullSafe(attrStr, Literal(null)),\n+      Some(sources.EqualNullSafe(\"cstr\", null)))\n+    testTranslateFilter(EqualNullSafe(Literal(null), attrStr),\n+      Some(sources.EqualNullSafe(\"cstr\", null)))\n+\n+    testTranslateFilter(GreaterThan(attrInt, 1), Some(sources.GreaterThan(\"cint\", 1)))\n+    testTranslateFilter(GreaterThan(1, attrInt), Some(sources.LessThan(\"cint\", 1)))\n+\n+    testTranslateFilter(LessThan(attrInt, 1), Some(sources.LessThan(\"cint\", 1)))\n+    testTranslateFilter(LessThan(1, attrInt), Some(sources.GreaterThan(\"cint\", 1)))\n+\n+    testTranslateFilter(GreaterThanOrEqual(attrInt, 1), Some(sources.GreaterThanOrEqual(\"cint\", 1)))\n+    testTranslateFilter(GreaterThanOrEqual(1, attrInt), Some(sources.LessThanOrEqual(\"cint\", 1)))\n+\n+    testTranslateFilter(LessThanOrEqual(attrInt, 1), Some(sources.LessThanOrEqual(\"cint\", 1)))\n+    testTranslateFilter(LessThanOrEqual(1, attrInt), Some(sources.GreaterThanOrEqual(\"cint\", 1)))\n+\n+    testTranslateFilter(InSet(attrInt, Set(1, 2, 3)), Some(sources.In(\"cint\", Array(1, 2, 3))))\n+\n+    testTranslateFilter(In(attrInt, Seq(1, 2, 3)), Some(sources.In(\"cint\", Array(1, 2, 3))))\n+\n+    testTranslateFilter(IsNull(attrInt), Some(sources.IsNull(\"cint\")))\n+    testTranslateFilter(IsNotNull(attrInt), Some(sources.IsNotNull(\"cint\")))\n+\n+    // cint > 1 AND cint < 10\n+    testTranslateFilter(And(\n+      GreaterThan(attrInt, 1),\n+      LessThan(attrInt, 10)),\n+      Some(sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10))))\n+\n+    // cint >= 8 OR cint <= 2\n+    testTranslateFilter(Or(\n+      GreaterThanOrEqual(attrInt, 8),\n+      LessThanOrEqual(attrInt, 2)),\n+      Some(sources.Or(\n+        sources.GreaterThanOrEqual(\"cint\", 8),\n+        sources.LessThanOrEqual(\"cint\", 2))))\n+\n+    testTranslateFilter(Not(GreaterThanOrEqual(attrInt, 8)),\n+      Some(sources.Not(sources.GreaterThanOrEqual(\"cint\", 8))))\n+\n+    testTranslateFilter(StartsWith(attrStr, \"a\"), Some(sources.StringStartsWith(\"cstr\", \"a\")))\n+\n+    testTranslateFilter(EndsWith(attrStr, \"a\"), Some(sources.StringEndsWith(\"cstr\", \"a\")))\n+\n+    testTranslateFilter(Contains(attrStr, \"a\"), Some(sources.StringContains(\"cstr\", \"a\")))\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    // ABS(cint) - 2 = 1\n+    testTranslateFilter(LessThanOrEqual(\n+      // Expressions are not supported"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "good catch @_@ fixed the typo. Thanks!",
    "commit": "7a19ac63fcdae6b67ff989ca90d4a3652c7d02f3",
    "createdAt": "2017-11-21T23:18:56Z",
    "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.datasources\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.sources\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class DataSourceStrategySuite extends PlanTest with SharedSQLContext {\n+\n+  test(\"translate simple expression\") {\n+    val attrInt = 'cint.int\n+    val attrStr = 'cstr.string\n+\n+    testTranslateFilter(EqualTo(attrInt, 1), Some(sources.EqualTo(\"cint\", 1)))\n+    testTranslateFilter(EqualTo(1, attrInt), Some(sources.EqualTo(\"cint\", 1)))\n+\n+    testTranslateFilter(EqualNullSafe(attrStr, Literal(null)),\n+      Some(sources.EqualNullSafe(\"cstr\", null)))\n+    testTranslateFilter(EqualNullSafe(Literal(null), attrStr),\n+      Some(sources.EqualNullSafe(\"cstr\", null)))\n+\n+    testTranslateFilter(GreaterThan(attrInt, 1), Some(sources.GreaterThan(\"cint\", 1)))\n+    testTranslateFilter(GreaterThan(1, attrInt), Some(sources.LessThan(\"cint\", 1)))\n+\n+    testTranslateFilter(LessThan(attrInt, 1), Some(sources.LessThan(\"cint\", 1)))\n+    testTranslateFilter(LessThan(1, attrInt), Some(sources.GreaterThan(\"cint\", 1)))\n+\n+    testTranslateFilter(GreaterThanOrEqual(attrInt, 1), Some(sources.GreaterThanOrEqual(\"cint\", 1)))\n+    testTranslateFilter(GreaterThanOrEqual(1, attrInt), Some(sources.LessThanOrEqual(\"cint\", 1)))\n+\n+    testTranslateFilter(LessThanOrEqual(attrInt, 1), Some(sources.LessThanOrEqual(\"cint\", 1)))\n+    testTranslateFilter(LessThanOrEqual(1, attrInt), Some(sources.GreaterThanOrEqual(\"cint\", 1)))\n+\n+    testTranslateFilter(InSet(attrInt, Set(1, 2, 3)), Some(sources.In(\"cint\", Array(1, 2, 3))))\n+\n+    testTranslateFilter(In(attrInt, Seq(1, 2, 3)), Some(sources.In(\"cint\", Array(1, 2, 3))))\n+\n+    testTranslateFilter(IsNull(attrInt), Some(sources.IsNull(\"cint\")))\n+    testTranslateFilter(IsNotNull(attrInt), Some(sources.IsNotNull(\"cint\")))\n+\n+    // cint > 1 AND cint < 10\n+    testTranslateFilter(And(\n+      GreaterThan(attrInt, 1),\n+      LessThan(attrInt, 10)),\n+      Some(sources.And(\n+        sources.GreaterThan(\"cint\", 1),\n+        sources.LessThan(\"cint\", 10))))\n+\n+    // cint >= 8 OR cint <= 2\n+    testTranslateFilter(Or(\n+      GreaterThanOrEqual(attrInt, 8),\n+      LessThanOrEqual(attrInt, 2)),\n+      Some(sources.Or(\n+        sources.GreaterThanOrEqual(\"cint\", 8),\n+        sources.LessThanOrEqual(\"cint\", 2))))\n+\n+    testTranslateFilter(Not(GreaterThanOrEqual(attrInt, 8)),\n+      Some(sources.Not(sources.GreaterThanOrEqual(\"cint\", 8))))\n+\n+    testTranslateFilter(StartsWith(attrStr, \"a\"), Some(sources.StringStartsWith(\"cstr\", \"a\")))\n+\n+    testTranslateFilter(EndsWith(attrStr, \"a\"), Some(sources.StringEndsWith(\"cstr\", \"a\")))\n+\n+    testTranslateFilter(Contains(attrStr, \"a\"), Some(sources.StringContains(\"cstr\", \"a\")))\n+  }\n+\n+  test(\"translate complex expression\") {\n+    val attrInt = 'cint.int\n+\n+    // ABS(cint) - 2 = 1\n+    testTranslateFilter(LessThanOrEqual(\n+      // Expressions are not supported"
  }],
  "prId": 19776
}]