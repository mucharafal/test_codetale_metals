[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Could you post some of the results? \n",
    "commit": "4c679b59b34ea01474baa5d4ac4ce89133a1720d",
    "createdAt": "2016-10-05T19:58:00Z",
    "diffHunk": "@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.spark.sql.execution.benchmark\r\n+\r\n+import scala.concurrent.duration._\r\n+\r\n+import org.apache.spark.SparkConf\r\n+import org.apache.spark.sql.catalyst.util._\r\n+import org.apache.spark.util.Benchmark\r\n+\r\n+/**\r\n+ * Benchmark [[PrimitiveArray]] for DataFrame and Dataset program using primitive array\r\n+ * To run this:\r\n+ *  1. replace ignore(...) with test(...)\r\n+ *  2. build/sbt \"sql/test-only *benchmark.PrimitiveArrayDataBenchmark\"\r\n+ *\r\n+ * Benchmarks in this file are skipped in normal builds.\r\n+ */\r\n+class PrimitiveArrayBenchmark extends BenchmarkBase {\r"
  }],
  "prId": 15044
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what this `count` do? warmup?\n",
    "commit": "4c679b59b34ea01474baa5d4ac4ce89133a1720d",
    "createdAt": "2016-11-05T13:47:13Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[PrimitiveArray]] for DataFrame and Dataset program using primitive array\n+ * To run this:\n+ *  1. replace ignore(...) with test(...)\n+ *  2. build/sbt \"sql/test-only *benchmark.PrimitiveArrayDataBenchmark\"\n+ *\n+ * Benchmarks in this file are skipped in normal builds.\n+ */\n+class PrimitiveArrayBenchmark extends BenchmarkBase {\n+\n+  def writeDatasetArray(iters: Int): Unit = {\n+    import sparkSession.implicits._\n+\n+    val count = 1024 * 1024 * 2\n+\n+    val sc = sparkSession.sparkContext\n+    val primitiveIntArray = Array.fill[Int](count)(65535)\n+    val dsInt = sc.parallelize(Seq(primitiveIntArray), 1).toDS\n+    dsInt.count"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Want to force to build dataset\n",
    "commit": "4c679b59b34ea01474baa5d4ac4ce89133a1720d",
    "createdAt": "2016-11-06T20:20:33Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[PrimitiveArray]] for DataFrame and Dataset program using primitive array\n+ * To run this:\n+ *  1. replace ignore(...) with test(...)\n+ *  2. build/sbt \"sql/test-only *benchmark.PrimitiveArrayDataBenchmark\"\n+ *\n+ * Benchmarks in this file are skipped in normal builds.\n+ */\n+class PrimitiveArrayBenchmark extends BenchmarkBase {\n+\n+  def writeDatasetArray(iters: Int): Unit = {\n+    import sparkSession.implicits._\n+\n+    val count = 1024 * 1024 * 2\n+\n+    val sc = sparkSession.sparkContext\n+    val primitiveIntArray = Array.fill[Int](count)(65535)\n+    val dsInt = sc.parallelize(Seq(primitiveIntArray), 1).toDS\n+    dsInt.count"
  }],
  "prId": 15044
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "use `n += dsInt.map(e => e).queryExecution.toRDD.collect().length`, for 2 reasons:\n1. This PR speeds up the serialization by converts external primitve array to internal unsafe array data directly. However, calling `collect` directly will converts internal row to external row, which includes deserialization.\n2. we should use the result of the benchmark code, or it may get optimized and removed.\n",
    "commit": "4c679b59b34ea01474baa5d4ac4ce89133a1720d",
    "createdAt": "2016-11-05T13:53:32Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[PrimitiveArray]] for DataFrame and Dataset program using primitive array\n+ * To run this:\n+ *  1. replace ignore(...) with test(...)\n+ *  2. build/sbt \"sql/test-only *benchmark.PrimitiveArrayDataBenchmark\"\n+ *\n+ * Benchmarks in this file are skipped in normal builds.\n+ */\n+class PrimitiveArrayBenchmark extends BenchmarkBase {\n+\n+  def writeDatasetArray(iters: Int): Unit = {\n+    import sparkSession.implicits._\n+\n+    val count = 1024 * 1024 * 2\n+\n+    val sc = sparkSession.sparkContext\n+    val primitiveIntArray = Array.fill[Int](count)(65535)\n+    val dsInt = sc.parallelize(Seq(primitiveIntArray), 1).toDS\n+    dsInt.count\n+    val intArray = { i: Int =>\n+      var n = 0\n+      while (n < iters) {\n+        dsInt.map(e => e).collect"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "I see. done\n",
    "commit": "4c679b59b34ea01474baa5d4ac4ce89133a1720d",
    "createdAt": "2016-11-06T20:20:41Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import scala.concurrent.duration._\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[PrimitiveArray]] for DataFrame and Dataset program using primitive array\n+ * To run this:\n+ *  1. replace ignore(...) with test(...)\n+ *  2. build/sbt \"sql/test-only *benchmark.PrimitiveArrayDataBenchmark\"\n+ *\n+ * Benchmarks in this file are skipped in normal builds.\n+ */\n+class PrimitiveArrayBenchmark extends BenchmarkBase {\n+\n+  def writeDatasetArray(iters: Int): Unit = {\n+    import sparkSession.implicits._\n+\n+    val count = 1024 * 1024 * 2\n+\n+    val sc = sparkSession.sparkContext\n+    val primitiveIntArray = Array.fill[Int](count)(65535)\n+    val dsInt = sc.parallelize(Seq(primitiveIntArray), 1).toDS\n+    dsInt.count\n+    val intArray = { i: Int =>\n+      var n = 0\n+      while (n < iters) {\n+        dsInt.map(e => e).collect"
  }],
  "prId": 15044
}]