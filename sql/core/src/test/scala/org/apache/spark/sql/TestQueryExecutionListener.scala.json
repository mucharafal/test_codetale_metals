[{
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "does this need a newline at the end?",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-10T22:20:21Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.QueryExecutionListener\n+\n+\n+class TestQueryExecutionListener extends QueryExecutionListener with Logging {\n+  override def onSuccess(funcName: String, qe: QueryExecution, durationNs: Long): Unit = {\n+    OnSuccessCall.isOnSuccessCalled.set(true)\n+  }\n+\n+  override def onFailure(funcName: String, qe: QueryExecution, exception: Exception): Unit = { }\n+}\n+\n+/**\n+ * This has a variable to check if `onSuccess` is actually called or not. Currently, this is for\n+ * the test case in PySpark. See SPARK-23942.\n+ */\n+object OnSuccessCall {\n+  val isOnSuccessCalled = new AtomicBoolean(false)\n+\n+  def isCalled(): Boolean = isOnSuccessCalled.get()\n+\n+  def clear(): Unit = isOnSuccessCalled.set(false)\n+}",
    "line": 44
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nope, it already has. github shows a warning and mark on this UI if it doesn't IIRC.",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-11T00:04:01Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.QueryExecutionListener\n+\n+\n+class TestQueryExecutionListener extends QueryExecutionListener with Logging {\n+  override def onSuccess(funcName: String, qe: QueryExecution, durationNs: Long): Unit = {\n+    OnSuccessCall.isOnSuccessCalled.set(true)\n+  }\n+\n+  override def onFailure(funcName: String, qe: QueryExecution, exception: Exception): Unit = { }\n+}\n+\n+/**\n+ * This has a variable to check if `onSuccess` is actually called or not. Currently, this is for\n+ * the test case in PySpark. See SPARK-23942.\n+ */\n+object OnSuccessCall {\n+  val isOnSuccessCalled = new AtomicBoolean(false)\n+\n+  def isCalled(): Boolean = isOnSuccessCalled.get()\n+\n+  def clear(): Unit = isOnSuccessCalled.set(false)\n+}",
    "line": 44
  }],
  "prId": 21007
}, {
  "comments": [{
    "author": {
      "login": "BryanCutler"
    },
    "body": "Is it possible to modify this slightly and reuse it?  https://github.com/apache/spark/blob/master/sql/core/src/test/scala/org/apache/spark/sql/util/ExecutionListenerManagerSuite.scala#L48",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-10T22:26:34Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*",
    "line": 1
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I think it's possible. Just took a look; however, mind if I had a separate one as is for Python test specifically? maybe I am too much worried but thinking about having a dependency with a class in a suite and I am a bit hesitant.",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-11T01:41:52Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*",
    "line": 1
  }, {
    "author": {
      "login": "BryanCutler"
    },
    "body": "Yeah, I think that's fine. Thanks for putting a comment in the class for what it is for.",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-11T17:09:31Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*",
    "line": 1
  }],
  "prId": 21007
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "No need to with `Logging` now?",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-11T10:26:36Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.QueryExecutionListener\n+\n+\n+class TestQueryExecutionListener extends QueryExecutionListener with Logging {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "oops true.",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-11T10:45:45Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.QueryExecutionListener\n+\n+\n+class TestQueryExecutionListener extends QueryExecutionListener with Logging {"
  }],
  "prId": 21007
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "We should get rid of this import too. :)\r\n",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-12T12:42:53Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "D'oh.",
    "commit": "7c1b3c606d9b90dbffbaa7d7442bbd609940b98f",
    "createdAt": "2018-04-12T13:20:37Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.util.concurrent.atomic.AtomicBoolean\n+\n+import org.apache.spark.internal.Logging"
  }],
  "prId": 21007
}]