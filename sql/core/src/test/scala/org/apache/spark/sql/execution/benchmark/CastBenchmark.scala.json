[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we only benchmark spaces at right? The parsing logic will return immediately if the first char is a space, so not very useful to benchmark it.",
    "commit": "d5c2a40b5bcbb095dca811b568255c5f30539fe7",
    "createdAt": "2019-11-21T08:16:59Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.spark.benchmark.Benchmark\n+\n+/**\n+ * Benchmark trim the string when casting string type to Boolean/Numeric types.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/CastBenchmark-results.txt\".\n+ * }}}\n+ */\n+object CastBenchmark extends SqlBasedBenchmark {\n+\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+\n+    val title = \"Cast String to Numeric\"\n+    runBenchmark(title) {\n+      withTempPath { dir =>\n+        val N = 500L << 14\n+        val df = spark.range(N)\n+        val types = Seq(\"int\", \"long\")\n+        df.selectExpr(s\"concat('${\" \" * 5}', id, '${\" \" * 5}') as str\")"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "make sense",
    "commit": "d5c2a40b5bcbb095dca811b568255c5f30539fe7",
    "createdAt": "2019-11-21T08:23:24Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.spark.benchmark.Benchmark\n+\n+/**\n+ * Benchmark trim the string when casting string type to Boolean/Numeric types.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/CastBenchmark-results.txt\".\n+ * }}}\n+ */\n+object CastBenchmark extends SqlBasedBenchmark {\n+\n+  override def runBenchmarkSuite(mainArgs: Array[String]): Unit = {\n+\n+    val title = \"Cast String to Numeric\"\n+    runBenchmark(title) {\n+      withTempPath { dir =>\n+        val N = 500L << 14\n+        val df = spark.range(N)\n+        val types = Seq(\"int\", \"long\")\n+        df.selectExpr(s\"concat('${\" \" * 5}', id, '${\" \" * 5}') as str\")"
  }],
  "prId": 26622
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is too specific. I think it's good enough to put it and its result in PR description. We don't have to commit it into the code base.",
    "commit": "d5c2a40b5bcbb095dca811b568255c5f30539fe7",
    "createdAt": "2019-11-21T13:57:14Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.spark.benchmark.Benchmark\n+\n+/**\n+ * Benchmark trim the string when casting string type to Boolean/Numeric types.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/CastBenchmark-results.txt\".\n+ * }}}\n+ */\n+object CastBenchmark extends SqlBasedBenchmark {"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "OK. thanks for suggestion",
    "commit": "d5c2a40b5bcbb095dca811b568255c5f30539fe7",
    "createdAt": "2019-11-21T14:55:22Z",
    "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.benchmark\n+\n+import org.apache.spark.benchmark.Benchmark\n+\n+/**\n+ * Benchmark trim the string when casting string type to Boolean/Numeric types.\n+ * To run this benchmark:\n+ * {{{\n+ *   1. without sbt:\n+ *      bin/spark-submit --class <this class> --jars <spark core test jar> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/CastBenchmark-results.txt\".\n+ * }}}\n+ */\n+object CastBenchmark extends SqlBasedBenchmark {"
  }],
  "prId": 26622
}]