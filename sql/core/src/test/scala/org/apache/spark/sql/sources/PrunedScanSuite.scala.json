[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I think it would be better to put this test in catalyst.  For example, [`FilterPushdownSuite`](https://github.com/apache/spark/blob/master/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/FilterPushdownSuite.scala).\n",
    "commit": "ede7cd84782551488ca15368aac41cff8ba0c91d",
    "createdAt": "2015-07-06T22:02:50Z",
    "diffHunk": "@@ -115,27 +115,42 @@ class PrunedScanSuite extends DataSourceTest {\n   def testPruning(sqlString: String, expectedColumns: String*): Unit = {\n     test(s\"Columns output ${expectedColumns.mkString(\",\")}: $sqlString\") {\n       val queryExecution = caseInsensitiveContext.sql(sqlString).queryExecution\n-      val rawPlan = queryExecution.executedPlan.collect {\n-        case p: execution.PhysicalRDD => p\n-      } match {\n-        case Seq(p) => p\n-        case _ => fail(s\"More than one PhysicalRDD found\\n$queryExecution\")\n-      }\n-      val rawColumns = rawPlan.output.map(_.name)\n-      val rawOutput = rawPlan.execute().first()\n-\n-      if (rawColumns != expectedColumns) {\n-        fail(\n-          s\"Wrong column names. Got $rawColumns, Expected $expectedColumns\\n\" +\n-          s\"Filters pushed: ${FiltersPushed.list.mkString(\",\")}\\n\" +\n-            queryExecution)\n-      }\n-\n-      if (rawOutput.size != expectedColumns.size) {\n-        fail(s\"Wrong output row. Got $rawOutput\\n$queryExecution\")\n-      }\n+      testPruningBase(queryExecution, expectedColumns: _*)\n     }\n   }\n \n+  def testPruning(testTitle: String, df: DataFrame, expectedColumns: String*): Unit = {\n+    test(s\"Columns output ${expectedColumns.mkString(\",\")}: $testTitle\") {\n+      testPruningBase(df.queryExecution, expectedColumns: _*)\n+    }\n+  }\n+\n+  def testPruningBase(queryExecution: SQLContext#QueryExecution, expectedColumns: String*): Unit = {\n+    val rawPlan = queryExecution.executedPlan.collect {\n+      case p: execution.PhysicalRDD => p\n+    } match {\n+      case Seq(p) => p\n+      case _ => fail(s\"More than one PhysicalRDD found\\n$queryExecution\")\n+    }\n+    val rawColumns = rawPlan.output.map(_.name)\n+    val rawOutput = rawPlan.execute().first()\n+\n+    if (rawColumns != expectedColumns) {\n+      fail(\n+        s\"Wrong column names. Got $rawColumns, Expected $expectedColumns\\n\" +\n+        s\"Filters pushed: ${FiltersPushed.list.mkString(\",\")}\\n\" +\n+          queryExecution)\n+    }\n+\n+    if (rawOutput.size != expectedColumns.size) {\n+      fail(s\"Wrong output row. Got $rawOutput\\n$queryExecution\")\n+    }\n+  }\n+\n+  val relation = new SimplePrunedScan(1, 10)(caseInsensitiveContext)\n+  val df = caseInsensitiveContext.baseRelationToDataFrame(relation)\n+  val sampledDF = df.sample(false, 0.6, 11L)\n+  val selectedDF = sampledDF.select(\"a\")\n+  testPruning(\"Sample on PrunedScan\", selectedDF, \"a\")"
  }],
  "prId": 7228
}]