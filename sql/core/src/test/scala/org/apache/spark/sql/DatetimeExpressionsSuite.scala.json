[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "again - this could be flaky across day boundaries...\n",
    "commit": "6a20b64ab169ba31d61cfffa1c6151f34304e8a2",
    "createdAt": "2015-07-02T17:20:37Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.Date\n+\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.functions._\n+\n+class DatetimeExpressionsSuite extends QueryTest {\n+  private lazy val ctx = org.apache.spark.sql.test.TestSQLContext\n+\n+  import ctx.implicits._\n+\n+  val df1 = Seq((1, 2), (3, 1)).toDF(\"a\", \"b\")\n+\n+  test(\"function current_date\") {\n+    // Date constructor would keep the original millis, we need to align it with begin of day.\n+    checkAnswer(df1.select(current_date()),\n+      Seq(\n+        Row(new Date(DateTimeUtils.daysToMillis(\n+          DateTimeUtils.millisToDays(System.currentTimeMillis())))), \n+        Row(new Date(DateTimeUtils.daysToMillis(\n+          DateTimeUtils.millisToDays(System.currentTimeMillis()))))))\n+    checkAnswer(ctx.sql(\"\"\"SELECT CURRENT_DATE()\"\"\"),\n+      Row(new Date(DateTimeUtils.daysToMillis(\n+        DateTimeUtils.millisToDays(System.currentTimeMillis())))))\n+  }\n+\n+  test(\"function current_timestamp\") {\n+    checkAnswer(df1.select(countDistinct(current_timestamp())), Row(1))\n+    // Execution in one query should return the same value\n+    checkAnswer(ctx.sql(\"\"\"SELECT CURRENT_TIMESTAMP() = CURRENT_TIMESTAMP()\"\"\"),\n+      Row(true))\n+    // By the time we run check, current timestamp has been different.\n+    // So we just check the date part.\n+    checkAnswer(ctx.sql(\"\"\"SELECT CAST(CURRENT_TIMESTAMP() AS DATE)\"\"\"),\n+      Row(new Date(DateTimeUtils.daysToMillis("
  }],
  "prId": 6985
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "don't do this here. if there is an error with the df creation, it will make all the test cases disappear since it wasn't able to construct the object.\n\nyou can add a lazy in front of val here.\n",
    "commit": "6a20b64ab169ba31d61cfffa1c6151f34304e8a2",
    "createdAt": "2015-07-03T06:21:05Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import java.sql.Date\n+\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.functions._\n+\n+class DatetimeExpressionsSuite extends QueryTest {\n+  private lazy val ctx = org.apache.spark.sql.test.TestSQLContext\n+\n+  import ctx.implicits._\n+\n+  val df1 = Seq((1, 2), (3, 1)).toDF(\"a\", \"b\")"
  }],
  "prId": 6985
}, {
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "Seems it is possible that `CURRENT_TIMESTAMP() = CURRENT_TIMESTAMP()` will return false?\n\nI see it fails jenkins (https://amplab.cs.berkeley.edu/jenkins/job/Spark-Master-SBT/3095/AMPLAB_JENKINS_BUILD_PROFILE=hadoop2.3,label=centos/testReport/junit/org.apache.spark.sql/DatetimeExpressionsSuite/function_current_timestamp/). \n",
    "commit": "6a20b64ab169ba31d61cfffa1c6151f34304e8a2",
    "createdAt": "2015-07-28T14:57:06Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.functions._\n+\n+class DatetimeExpressionsSuite extends QueryTest {\n+  private lazy val ctx = org.apache.spark.sql.test.TestSQLContext\n+\n+  import ctx.implicits._\n+\n+  lazy val df1 = Seq((1, 2), (3, 1)).toDF(\"a\", \"b\")\n+\n+  test(\"function current_date\") {\n+    val d0 = DateTimeUtils.millisToDays(System.currentTimeMillis())\n+    val d1 = DateTimeUtils.fromJavaDate(df1.select(current_date()).collect().head.getDate(0))\n+    val d2 = DateTimeUtils.fromJavaDate(\n+      ctx.sql(\"\"\"SELECT CURRENT_DATE()\"\"\").collect().head.getDate(0))\n+    val d3 = DateTimeUtils.millisToDays(System.currentTimeMillis())\n+    assert(d0 <= d1 && d1 <= d2 && d2 <= d3 && d3 - d0 <= 1)\n+  }\n+\n+  test(\"function current_timestamp\") {\n+    checkAnswer(df1.select(countDistinct(current_timestamp())), Row(1))\n+    // Execution in one query should return the same value\n+    checkAnswer(ctx.sql(\"\"\"SELECT CURRENT_TIMESTAMP() = CURRENT_TIMESTAMP()\"\"\"),",
    "line": 42
  }, {
    "author": {
      "login": "adrian-wang"
    },
    "body": "yes, this is a known issue as SPARK-9196 . we have to use a different way to evaluate this function. I think we'd better disable this function test for now.\n",
    "commit": "6a20b64ab169ba31d61cfffa1c6151f34304e8a2",
    "createdAt": "2015-07-28T16:20:55Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.functions._\n+\n+class DatetimeExpressionsSuite extends QueryTest {\n+  private lazy val ctx = org.apache.spark.sql.test.TestSQLContext\n+\n+  import ctx.implicits._\n+\n+  lazy val df1 = Seq((1, 2), (3, 1)).toDF(\"a\", \"b\")\n+\n+  test(\"function current_date\") {\n+    val d0 = DateTimeUtils.millisToDays(System.currentTimeMillis())\n+    val d1 = DateTimeUtils.fromJavaDate(df1.select(current_date()).collect().head.getDate(0))\n+    val d2 = DateTimeUtils.fromJavaDate(\n+      ctx.sql(\"\"\"SELECT CURRENT_DATE()\"\"\").collect().head.getDate(0))\n+    val d3 = DateTimeUtils.millisToDays(System.currentTimeMillis())\n+    assert(d0 <= d1 && d1 <= d2 && d2 <= d3 && d3 - d0 <= 1)\n+  }\n+\n+  test(\"function current_timestamp\") {\n+    checkAnswer(df1.select(countDistinct(current_timestamp())), Row(1))\n+    // Execution in one query should return the same value\n+    checkAnswer(ctx.sql(\"\"\"SELECT CURRENT_TIMESTAMP() = CURRENT_TIMESTAMP()\"\"\"),",
    "line": 42
  }],
  "prId": 6985
}]