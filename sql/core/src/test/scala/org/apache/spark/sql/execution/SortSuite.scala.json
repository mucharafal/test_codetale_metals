[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "This test and that one in `BroadcastJoinSuite` seems a bit overkill.",
    "commit": "8c6dfb1b1b5cfa3ae6ddb322fa4edc972549382c",
    "createdAt": "2017-12-07T12:57:15Z",
    "diffHunk": "@@ -119,4 +120,20 @@ class SortSuite extends SparkPlanTest with SharedSQLContext {\n       )\n     }\n   }\n+\n+  test(\"SPARK-22716: SortExec should not use a global variable to reference to itself\") {\n+    val ctx = new CodegenContext\n+    val df = Seq((\"a\", 1)).toDF(\"a\", \"b\").sort(\"a\")\n+    val plan = df.queryExecution.executedPlan\n+    val sortExec = plan.children.head.asInstanceOf[SortExec]\n+    sortExec.produce(ctx, plan.asInstanceOf[CodegenSupport])\n+    // we expect 8 global variables:"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "Thanks, I was also not very happy with them too, but I have not found a better way to test them. Do you have any idea/suggestion? Thanks.",
    "commit": "8c6dfb1b1b5cfa3ae6ddb322fa4edc972549382c",
    "createdAt": "2017-12-07T12:59:45Z",
    "diffHunk": "@@ -119,4 +120,20 @@ class SortSuite extends SparkPlanTest with SharedSQLContext {\n       )\n     }\n   }\n+\n+  test(\"SPARK-22716: SortExec should not use a global variable to reference to itself\") {\n+    val ctx = new CodegenContext\n+    val df = Seq((\"a\", 1)).toDF(\"a\", \"b\").sort(\"a\")\n+    val plan = df.queryExecution.executedPlan\n+    val sortExec = plan.children.head.asInstanceOf[SortExec]\n+    sortExec.produce(ctx, plan.asInstanceOf[CodegenSupport])\n+    // we expect 8 global variables:"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "If we make sure `addReferenceMinorObj` work well, the two tests may not be necessary, IMHO. Let's wait others options.",
    "commit": "8c6dfb1b1b5cfa3ae6ddb322fa4edc972549382c",
    "createdAt": "2017-12-07T13:08:13Z",
    "diffHunk": "@@ -119,4 +120,20 @@ class SortSuite extends SparkPlanTest with SharedSQLContext {\n       )\n     }\n   }\n+\n+  test(\"SPARK-22716: SortExec should not use a global variable to reference to itself\") {\n+    val ctx = new CodegenContext\n+    val df = Seq((\"a\", 1)).toDF(\"a\", \"b\").sort(\"a\")\n+    val plan = df.queryExecution.executedPlan\n+    val sortExec = plan.children.head.asInstanceOf[SortExec]\n+    sortExec.produce(ctx, plan.asInstanceOf[CodegenSupport])\n+    // we expect 8 global variables:"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "+1, we don't need new tests if we trust `addReferenceMinorObj`",
    "commit": "8c6dfb1b1b5cfa3ae6ddb322fa4edc972549382c",
    "createdAt": "2017-12-07T13:27:27Z",
    "diffHunk": "@@ -119,4 +120,20 @@ class SortSuite extends SparkPlanTest with SharedSQLContext {\n       )\n     }\n   }\n+\n+  test(\"SPARK-22716: SortExec should not use a global variable to reference to itself\") {\n+    val ctx = new CodegenContext\n+    val df = Seq((\"a\", 1)).toDF(\"a\", \"b\").sort(\"a\")\n+    val plan = df.queryExecution.executedPlan\n+    val sortExec = plan.children.head.asInstanceOf[SortExec]\n+    sortExec.produce(ctx, plan.asInstanceOf[CodegenSupport])\n+    // we expect 8 global variables:"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "thanks, I'll remove them",
    "commit": "8c6dfb1b1b5cfa3ae6ddb322fa4edc972549382c",
    "createdAt": "2017-12-07T13:29:50Z",
    "diffHunk": "@@ -119,4 +120,20 @@ class SortSuite extends SparkPlanTest with SharedSQLContext {\n       )\n     }\n   }\n+\n+  test(\"SPARK-22716: SortExec should not use a global variable to reference to itself\") {\n+    val ctx = new CodegenContext\n+    val df = Seq((\"a\", 1)).toDF(\"a\", \"b\").sort(\"a\")\n+    val plan = df.queryExecution.executedPlan\n+    val sortExec = plan.children.head.asInstanceOf[SortExec]\n+    sortExec.produce(ctx, plan.asInstanceOf[CodegenSupport])\n+    // we expect 8 global variables:"
  }],
  "prId": 19916
}]