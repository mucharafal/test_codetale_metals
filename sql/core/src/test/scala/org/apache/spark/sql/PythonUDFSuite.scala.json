[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "This quote should be not necessary, it's very easy to be forgot, see my previous comments. \n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T19:02:19Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Can you explain more what you mean here?  Which quotes are not needed?\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T20:56:29Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Oh, I'm wrong, lambda (x):  equals to lambda x:,   so it's all right.\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T22:21:18Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */"
  }],
  "prId": 1063
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "r(0).toString   should be r(1)\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T19:07:01Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Good catch!\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T22:22:21Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Oh actually, its correct as is.  The `.select('value)` is producing a row with only a single string value.  The toString is not explicitly needed though.\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T22:24:09Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "I mean that the value is the second column, so it should test against r(1).  \n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T22:33:07Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "The value was in the second column in the original relation.  However, `select('value)` is projecting only the value column into the first column.\n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T22:37:41Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "I see, I did not realize the .select(`value). \n",
    "commit": "9eda0fef2e500afe5919013b0afd0eb64ff0c213",
    "createdAt": "2014-08-01T23:48:24Z",
    "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.expressions.GenericRow\n+import org.apache.spark.sql.test.TestSQLContext\n+\n+class PythonUDFSuite extends QueryTest {\n+  import TestSQLContext._\n+\n+  val testData = sparkContext.parallelize(\n+    (1 to 100).map(i => TestData(i, i.toString)))\n+  testData.registerAsTable(\"testData\")\n+\n+  /* sqlCtx.registerFunction(\"test\", lambda (x): \"test:\" + x) */\n+  registerPython(\n+    \"test\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 100, 1, 0, 124, 0, 0, 23, 83, 113, 27, 78,\n+      85, 5, 116, 101, 115, 116, 58, 113, 28, -122, 113, 29, 41, 85, 1, 120, 113, 30, -123, 113, 31,\n+      85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 32, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62,\n+      113, 33, 75, 1, 85, 0, 113, 34, 41, 41, 116, 113, 35, 82, 113, 36, 75, 0, 125, 113, 37, -121,\n+      113, 38, 82, 113, 39, 125, 113, 40, 78, 93, 113, 41, 125, 113, 42, 116, 82, 97, 125, 113, 43,\n+      116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      10, 113, 44, 41, -127, 113, 45, 125, 113, 46, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122,\n+      101, 113, 47, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 48, 99,\n+      112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115,\n+      10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 49,\n+      41, -127, 113, 50, 125, 113, 51, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101,\n+      95, 115, 116, 114, 105, 110, 103, 115, 113, 52, -119, 115, 98, 117, 98, 104, 45, -121, 113,\n+      53, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"string\"\n+  )\n+\n+  /**\n+   * import re\n+   * sqlCtx.registerFunction(\"countMatches\",\n+   *   lambda (pattern, string): re.subn(pattern, '', string)[1], returnType = \"int\")\n+   */\n+  registerPython(\n+    \"countMatches\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 3, 75, 4, 75, 67, 85, 35, 124, 0, 0, 92, 2, 0, 125, 1, 0, 125, 2, 0,\n+      116, 0, 0, 106, 1, 0, 124, 1, 0, 100, 1, 0, 124, 2, 0, -125, 3, 0, 100, 2, 0, 25, 83, 113, 27,\n+      78, 104, 16, 75, 1, -121, 113, 28, 85, 2, 114, 101, 113, 29, 85, 4, 115, 117, 98, 110, 113,\n+      30, -122, 113, 31, 85, 2, 46, 48, 113, 32, 85, 7, 112, 97, 116, 116, 101, 114, 110, 113, 33,\n+      85, 6, 115, 116, 114, 105, 110, 103, 113, 34, -121, 113, 35, 85, 7, 60, 115, 116, 100, 105,\n+      110, 62, 113, 36, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 37, 75, 1, 85, 2, 3, 0, 113,\n+      38, 41, 41, 116, 113, 39, 82, 113, 40, 75, 0, 125, 113, 41, -121, 113, 42, 82, 113, 43, 125,\n+      113, 44, 104, 29, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105,\n+      99, 107, 108, 101, 10, 115, 117, 98, 105, 109, 112, 111, 114, 116, 10, 113, 45, 85, 2, 114,\n+      101, 113, 46, -123, 113, 47, 82, 113, 48, 115, 78, 93, 113, 49, 125, 113, 50, 116, 82, 97,\n+      125, 113, 51, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108,\n+      105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 10, 113, 52, 41, -127, 113, 53, 125, 113, 54, 40, 85, 9, 98, 97, 116, 99, 104,\n+      83, 105, 122, 101, 113, 55, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114,\n+      113, 56, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10,\n+      113, 57, 41, -127, 113, 58, 125, 113, 59, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105,\n+      116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 60, -119, 115, 98, 117, 98, 104, 53,\n+      -121, 113, 61, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  /**\n+   * sqlCtx.registerFunction(\"len\", lambda str: len(str), returnType = \"int\")\n+   */\n+  registerPython(\n+    \"len\",\n+    Array[Byte](-128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112,\n+      105, 99, 107, 108, 101, 10, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 111, 95, 109, 97,\n+      105, 110, 10, 113, 0, 93, 113, 1, 85, 11, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108,\n+      113, 2, 97, -123, 113, 3, 82, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117,\n+      100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105,\n+      111, 110, 10, 113, 4, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100,\n+      112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117,\n+      110, 99, 10, 113, 5, 99, 110, 101, 119, 10, 99, 111, 100, 101, 10, 113, 6, 40, 75, 2, 75, 2,\n+      75, 3, 75, 19, 85, 13, 116, 0, 0, -120, 0, 0, 124, 1, 0, -125, 2, 0, 83, 113, 7, 78, -123,\n+      113, 8, 85, 4, 105, 109, 97, 112, 113, 9, -123, 113, 10, 85, 5, 115, 112, 108, 105, 116, 113,\n+      11, 85, 8, 105, 116, 101, 114, 97, 116, 111, 114, 113, 12, -122, 113, 13, 85, 53, 47, 85, 115,\n+      101, 114, 115, 47, 109, 97, 114, 109, 98, 114, 117, 115, 47, 119, 111, 114, 107, 115, 112, 97,\n+      99, 101, 47, 115, 112, 97, 114, 107, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112,\n+      97, 114, 107, 47, 115, 113, 108, 46, 112, 121, 113, 14, 85, 4, 102, 117, 110, 99, 113, 15, 75,\n+      81, 85, 0, 113, 16, 85, 1, 102, 113, 17, -123, 113, 18, 41, 116, 113, 19, 82, 113, 20, 75, 1,\n+      125, 113, 21, -121, 113, 22, 82, 113, 23, 125, 113, 24, 104, 9, 99, 105, 116, 101, 114, 116,\n+      111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 25, 115, 78, 93, 113, 26, 104, 4, 40, 104,\n+      5, 104, 6, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 10, 116, 0, 0, 124, 0, 0, -125, 1, 0, 83, 113,\n+      27, 78, -123, 113, 28, 85, 3, 108, 101, 110, 113, 29, -123, 113, 30, 85, 3, 115, 116, 114,\n+      113, 31, -123, 113, 32, 85, 7, 60, 115, 116, 100, 105, 110, 62, 113, 33, 85, 8, 60, 108, 97,\n+      109, 98, 100, 97, 62, 113, 34, 75, 1, 85, 0, 113, 35, 41, 41, 116, 113, 36, 82, 113, 37, 75,\n+      0, 125, 113, 38, -121, 113, 39, 82, 113, 40, 125, 113, 41, 78, 93, 113, 42, 125, 113, 43, 116,\n+      82, 97, 125, 113, 44, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105,\n+      97, 108, 105, 122, 101, 114, 115, 10, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97,\n+      108, 105, 122, 101, 114, 10, 113, 45, 41, -127, 113, 46, 125, 113, 47, 40, 85, 9, 98, 97, 116,\n+      99, 104, 83, 105, 122, 101, 113, 48, 77, 0, 4, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122,\n+      101, 114, 113, 49, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105,\n+      122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101,\n+      114, 10, 113, 50, 41, -127, 113, 51, 125, 113, 52, 85, 19, 95, 111, 110, 108, 121, 95, 119,\n+      114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 53, -119, 115, 98, 117, 98,\n+      104, 46, -121, 113, 54, 46),\n+    new java.util.HashMap[String, String](),\n+    new java.util.LinkedList[String](),\n+    \"python\",\n+    null,\n+    \"int\"\n+  )\n+\n+  test(\"Single argument UDF\") {\n+   checkAnswer(\n+     sql(\"SELECT test(value) FROM testData\"),\n+     testData.select('value).map(r =>\n+       new GenericRow(Array[Any](\"test:\" + r(0).toString))).collect().toSeq)"
  }],
  "prId": 1063
}]