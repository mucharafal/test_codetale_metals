[{
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "The decimal we read back should be `67123.45000`, right? I am wondering if we need a better `assert` at here? Actually, why it did not fail?\n",
    "commit": "e19701a59bbbc6a709cb3b3a6ff24c141ad2f425",
    "createdAt": "2015-08-05T07:24:28Z",
    "diffHunk": "@@ -189,4 +189,17 @@ class ParquetQuerySuite extends QueryTest with ParquetTest {\n       }\n     }\n   }\n+\n+  test(\"SPARK-9119 Decimal should be correctly written into parquet\") {\n+    withTempPath { dir =>\n+      val basePath = dir.getCanonicalPath\n+      val schema = StructType(Array(StructField(\"name\", DecimalType(10, 5), false)))\n+      val rowRDD = sqlContext.sparkContext.parallelize(Array(Row(Decimal(\"67123.45\"))))\n+      val df = sqlContext.createDataFrame(rowRDD, schema)\n+      df.write.parquet(basePath)\n+\n+      val decimal = sqlContext.read.parquet(basePath).first().getDecimal(0)\n+      assert(Decimal(\"67123.45\") === Decimal(decimal))",
    "line": 14
  }, {
    "author": {
      "login": "davies"
    },
    "body": "When we compare Decimal, the zero on the most right does not matter. If we compare them as java.math.BigDecimal, it matters.\n",
    "commit": "e19701a59bbbc6a709cb3b3a6ff24c141ad2f425",
    "createdAt": "2015-08-05T07:27:46Z",
    "diffHunk": "@@ -189,4 +189,17 @@ class ParquetQuerySuite extends QueryTest with ParquetTest {\n       }\n     }\n   }\n+\n+  test(\"SPARK-9119 Decimal should be correctly written into parquet\") {\n+    withTempPath { dir =>\n+      val basePath = dir.getCanonicalPath\n+      val schema = StructType(Array(StructField(\"name\", DecimalType(10, 5), false)))\n+      val rowRDD = sqlContext.sparkContext.parallelize(Array(Row(Decimal(\"67123.45\"))))\n+      val df = sqlContext.createDataFrame(rowRDD, schema)\n+      df.write.parquet(basePath)\n+\n+      val decimal = sqlContext.read.parquet(basePath).first().getDecimal(0)\n+      assert(Decimal(\"67123.45\") === Decimal(decimal))",
    "line": 14
  }],
  "prId": 7925
}]