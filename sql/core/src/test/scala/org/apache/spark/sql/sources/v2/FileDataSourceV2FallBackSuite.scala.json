[{
  "comments": [{
    "author": {
      "login": "gaborgsomogyi"
    },
    "body": "Don't we need something like this?\r\n```\r\nspark.listenerManager.unregister(listener)\r\n```\r\n",
    "commit": "7647e78fdb593d33c1848eec30f6e7a74bc9dcd1",
    "createdAt": "2019-06-28T13:48:57Z",
    "diffHunk": "@@ -170,4 +174,41 @@ class FileDataSourceV2FallBackSuite extends QueryTest with SharedSQLContext {\n       }\n     }\n   }\n+\n+  test(\"Fallback Parquet V2 to V1\") {\n+    Seq(\"parquet\", classOf[ParquetDataSourceV2].getCanonicalName).foreach { format =>\n+      withSQLConf(SQLConf.USE_V1_SOURCE_READER_LIST.key -> format,\n+        SQLConf.USE_V1_SOURCE_WRITER_LIST.key -> format) {\n+        val commands = ArrayBuffer.empty[(String, LogicalPlan)]\n+        val exceptions = ArrayBuffer.empty[(String, Exception)]\n+        val listener = new QueryExecutionListener {\n+          override def onFailure(\n+              funcName: String,\n+              qe: QueryExecution,\n+              exception: Exception): Unit = {\n+            exceptions += funcName -> exception\n+          }\n+\n+          override def onSuccess(funcName: String, qe: QueryExecution, duration: Long): Unit = {\n+            commands += funcName -> qe.logical\n+          }\n+        }\n+        spark.listenerManager.register(listener)\n+\n+        withTempPath { path =>\n+          val inputData = spark.range(10)\n+          inputData.write.format(format).save(path.getCanonicalPath)\n+          sparkContext.listenerBus.waitUntilEmpty(1000)\n+          assert(commands.length == 1)\n+          assert(commands.head._1 == \"save\")\n+          assert(commands.head._2.isInstanceOf[InsertIntoHadoopFsRelationCommand])\n+          assert(commands.head._2.asInstanceOf[InsertIntoHadoopFsRelationCommand]\n+            .fileFormat.isInstanceOf[ParquetFileFormat])\n+          val df = spark.read.format(format).load(path.getCanonicalPath)\n+          checkAnswer(df, inputData.toDF())\n+          assert(df.queryExecution.executedPlan.find(_.isInstanceOf[FileSourceScanExec]).isDefined)"
  }],
  "prId": 25004
}]