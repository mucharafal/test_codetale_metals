[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`checkScanSchemata` -> `checkScanSchema`?",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T07:18:05Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.scalactic.Equality\n+import org.scalatest.Assertions\n+\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.types.StructType\n+\n+private[sql] trait FileSchemaPruningTest {\n+  _: Assertions =>\n+\n+  private val schemaEquality = new Equality[StructType] {\n+    override def areEqual(a: StructType, b: Any) =\n+      b match {\n+        case otherType: StructType => a sameType otherType\n+        case _ => false\n+      }\n+  }\n+\n+  protected def checkScanSchemata(df: DataFrame, expectedSchemaCatalogStrings: String*): Unit = {",
    "line": 39
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "I used the plural form here because `expectedSchemaCatalogStrings` is a varargs type.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-03T08:18:56Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.scalactic.Equality\n+import org.scalatest.Assertions\n+\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.types.StructType\n+\n+private[sql] trait FileSchemaPruningTest {\n+  _: Assertions =>\n+\n+  private val schemaEquality = new Equality[StructType] {\n+    override def areEqual(a: StructType, b: Any) =\n+      b match {\n+        case otherType: StructType => a sameType otherType\n+        case _ => false\n+      }\n+  }\n+\n+  protected def checkScanSchemata(df: DataFrame, expectedSchemaCatalogStrings: String*): Unit = {",
    "line": 39
  }],
  "prId": 16578
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`fileSourceScanSchemata` -> `fileSourceScanSchema`? and also below.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T07:18:49Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.scalactic.Equality\n+import org.scalatest.Assertions\n+\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.types.StructType\n+\n+private[sql] trait FileSchemaPruningTest {\n+  _: Assertions =>\n+\n+  private val schemaEquality = new Equality[StructType] {\n+    override def areEqual(a: StructType, b: Any) =\n+      b match {\n+        case otherType: StructType => a sameType otherType\n+        case _ => false\n+      }\n+  }\n+\n+  protected def checkScanSchemata(df: DataFrame, expectedSchemaCatalogStrings: String*): Unit = {\n+    val fileSourceScanSchemata =",
    "line": 40
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "`fileSourceScanSchemata` is a `Seq[StructType]`, so I made it plural.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-03T08:20:16Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import org.scalactic.Equality\n+import org.scalatest.Assertions\n+\n+import org.apache.spark.sql.DataFrame\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.types.StructType\n+\n+private[sql] trait FileSchemaPruningTest {\n+  _: Assertions =>\n+\n+  private val schemaEquality = new Equality[StructType] {\n+    override def areEqual(a: StructType, b: Any) =\n+      b match {\n+        case otherType: StructType => a sameType otherType\n+        case _ => false\n+      }\n+  }\n+\n+  protected def checkScanSchemata(df: DataFrame, expectedSchemaCatalogStrings: String*): Unit = {\n+    val fileSourceScanSchemata =",
    "line": 40
  }],
  "prId": 16578
}]