[{
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "I'd suggest adding test cases where all but one writer partition has committed, or all but one reader partition has reported an offset. In those cases we should verify that the StreamWriter and query commits haven't happened.",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-09T17:56:57Z",
    "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  private val startEpoch = 1L\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", startEpoch, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, startEpoch)\n+    commitPartitionEpoch(1, startEpoch)\n+    commitPartitionEpoch(2, startEpoch)\n+    reportPartitionOffset(0, startEpoch)\n+    reportPartitionOffset(1, startEpoch)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(startEpoch)\n+  }"
  }],
  "prId": 20983
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "This is a personal preference thing, but I think it might be more readable to just use the raw numbers. Something like:\r\n\r\ncommitPartitionEpoch(0, 1)\r\ncommitPartitionEpoch(1, 1)\r\n[...]\r\ncommitPartitionEpoch(0, 2)\r\ncommitPartitionEpoch(1, 2)\r\n[...]\r\n\r\nverifyCommitsInOrderOf(1, 2)",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-09T17:59:02Z",
    "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  private val startEpoch = 1L\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", startEpoch, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, startEpoch)\n+    commitPartitionEpoch(1, startEpoch)\n+    commitPartitionEpoch(2, startEpoch)\n+    reportPartitionOffset(0, startEpoch)\n+    reportPartitionOffset(1, startEpoch)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(startEpoch)\n+  }\n+\n+  test(\"consequent epochs, messages for epoch (k + 1) arrive after messages for epoch k\") {\n+    setWriterPartitions(2)\n+    setReaderPartitions(2)\n+\n+    val epochs = startEpoch to (startEpoch + 1)"
  }, {
    "author": {
      "login": "efim-poberezkin"
    },
    "body": "I agree that it would be more readable, however the fact that we test for the start epoch first might be not as obvious then since it'd be hardcoded in before. Still pretty obvious though I guess.. and probably there will be no need to change start epoch in tests so hardcoding it is fine, and readability would increase. Will change this",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-09T19:26:36Z",
    "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  private val startEpoch = 1L\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", startEpoch, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, startEpoch)\n+    commitPartitionEpoch(1, startEpoch)\n+    commitPartitionEpoch(2, startEpoch)\n+    reportPartitionOffset(0, startEpoch)\n+    reportPartitionOffset(1, startEpoch)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(startEpoch)\n+  }\n+\n+  test(\"consequent epochs, messages for epoch (k + 1) arrive after messages for epoch k\") {\n+    setWriterPartitions(2)\n+    setReaderPartitions(2)\n+\n+    val epochs = startEpoch to (startEpoch + 1)"
  }],
  "prId": 20983
}, {
  "comments": [{
    "author": {
      "login": "jose-torres"
    },
    "body": "nit: maybe `verifyNoCommitFor`",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-10T16:44:26Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", 1, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(1)\n+  }\n+\n+  test(\"single epoch, all but one writer partition has committed\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)\n+  }\n+\n+  test(\"single epoch, all but one reader partition has reported an offset\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)"
  }, {
    "author": {
      "login": "tdas"
    },
    "body": "+1\r\n`verifyNoCommitFor` is less verbose. will merge as soon as this is changed.\r\n",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-10T20:15:31Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", 1, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(1)\n+  }\n+\n+  test(\"single epoch, all but one writer partition has committed\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)\n+  }\n+\n+  test(\"single epoch, all but one reader partition has reported an offset\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)"
  }, {
    "author": {
      "login": "efim-poberezkin"
    },
    "body": "@tdas @jose-torres done",
    "commit": "8fa609cd8ad6130aa16b9bf624fe5b5e0f5ef256",
    "createdAt": "2018-04-11T08:53:19Z",
    "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.continuous\n+\n+import org.mockito.InOrder\n+import org.mockito.Matchers.{any, eq => eqTo}\n+import org.mockito.Mockito._\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mockito.MockitoSugar\n+\n+import org.apache.spark._\n+import org.apache.spark.rpc.RpcEndpointRef\n+import org.apache.spark.sql.execution.streaming.continuous._\n+import org.apache.spark.sql.sources.v2.reader.streaming.{ContinuousReader, PartitionOffset}\n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage\n+import org.apache.spark.sql.sources.v2.writer.streaming.StreamWriter\n+import org.apache.spark.sql.test.SharedSparkSession\n+\n+class EpochCoordinatorSuite\n+  extends SparkFunSuite\n+    with SharedSparkSession\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  private var epochCoordinator: RpcEndpointRef = _\n+\n+  private var writer: StreamWriter = _\n+  private var query: ContinuousExecution = _\n+  private var orderVerifier: InOrder = _\n+\n+  override def beforeEach(): Unit = {\n+    val reader = mock[ContinuousReader]\n+    writer = mock[StreamWriter]\n+    query = mock[ContinuousExecution]\n+    orderVerifier = inOrder(writer, query)\n+\n+    epochCoordinator\n+      = EpochCoordinatorRef.create(writer, reader, query, \"test\", 1, spark, SparkEnv.get)\n+  }\n+\n+  override def afterEach(): Unit = {\n+    SparkEnv.get.rpcEnv.stop(epochCoordinator)\n+  }\n+\n+  test(\"single epoch\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    // Here and in subsequent tests this is called to make a synchronous call to EpochCoordinator\n+    // so that mocks would have been acted upon by the time verification happens\n+    makeSynchronousCall()\n+\n+    verifyCommit(1)\n+  }\n+\n+  test(\"single epoch, all but one writer partition has committed\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    reportPartitionOffset(0, 1)\n+    reportPartitionOffset(1, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)\n+  }\n+\n+  test(\"single epoch, all but one reader partition has reported an offset\") {\n+    setWriterPartitions(3)\n+    setReaderPartitions(2)\n+\n+    commitPartitionEpoch(0, 1)\n+    commitPartitionEpoch(1, 1)\n+    commitPartitionEpoch(2, 1)\n+    reportPartitionOffset(0, 1)\n+\n+    makeSynchronousCall()\n+\n+    verifyCommitHasntHappened(1)"
  }],
  "prId": 20983
}]