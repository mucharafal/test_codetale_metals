[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Indent should be 2 spaces.\n",
    "commit": "d1689e2fdfed67decabe6c696a3d7f051138a7ad",
    "createdAt": "2015-01-08T15:19:27Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.sources\n+import org.apache.spark.sql._\n+\n+\n+class DDLScanSource extends RelationProvider {\n+    override def createRelation("
  }],
  "prId": 3935
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "We should probably be using the `simpleString` instead of printing the type name here.\n",
    "commit": "d1689e2fdfed67decabe6c696a3d7f051138a7ad",
    "createdAt": "2015-01-10T22:30:12Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.sources\n+import org.apache.spark.sql._\n+\n+\n+class DDLScanSource extends RelationProvider {\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String]): BaseRelation = {\n+      SimpleDDLScan(parameters(\"from\").toInt, parameters(\"TO\").toInt)(sqlContext)\n+    }\n+}\n+\n+case class SimpleDDLScan(from: Int, to: Int)(@transient val sqlContext: SQLContext)\n+  extends TableScan {\n+\n+  override def schema =\n+    StructType(Seq(StructField(\"name\", StringType, nullable = false),\n+    StructField(\"age\", IntegerType, nullable = false)))\n+\n+  override def buildScan() = sqlContext.sparkContext.parallelize(from to to).\n+    map(e => Row(s\"people$e\",e*2))\n+}\n+\n+class DDLTestSuit extends DataSourceTest {\n+  import caseInsensisitiveContext._\n+\n+  before {\n+      sql(\n+          \"\"\"\n+          |CREATE TEMPORARY TABLE ddlPeople\n+          |USING org.apache.spark.sql.sources.DDLScanSource\n+          |OPTIONS (\n+          |  From '1',\n+          |  To '10'\n+          |)\n+          \"\"\".stripMargin)\n+  }\n+\n+  sqlTest(\n+      \"SELECT * FROM ddlPeople\",\n+      (1 to 10).map(e => Row(s\"people$e\",e*2)).toSeq)\n+\n+  sqlTest(\n+      \"describe ddlPeople\",\n+      Seq(\n+          Row(\"name\", \"StringType\", null),"
  }, {
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "`simpleString` fixed\n",
    "commit": "d1689e2fdfed67decabe6c696a3d7f051138a7ad",
    "createdAt": "2015-01-11T05:15:40Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.sources\n+import org.apache.spark.sql._\n+\n+\n+class DDLScanSource extends RelationProvider {\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String]): BaseRelation = {\n+      SimpleDDLScan(parameters(\"from\").toInt, parameters(\"TO\").toInt)(sqlContext)\n+    }\n+}\n+\n+case class SimpleDDLScan(from: Int, to: Int)(@transient val sqlContext: SQLContext)\n+  extends TableScan {\n+\n+  override def schema =\n+    StructType(Seq(StructField(\"name\", StringType, nullable = false),\n+    StructField(\"age\", IntegerType, nullable = false)))\n+\n+  override def buildScan() = sqlContext.sparkContext.parallelize(from to to).\n+    map(e => Row(s\"people$e\",e*2))\n+}\n+\n+class DDLTestSuit extends DataSourceTest {\n+  import caseInsensisitiveContext._\n+\n+  before {\n+      sql(\n+          \"\"\"\n+          |CREATE TEMPORARY TABLE ddlPeople\n+          |USING org.apache.spark.sql.sources.DDLScanSource\n+          |OPTIONS (\n+          |  From '1',\n+          |  To '10'\n+          |)\n+          \"\"\".stripMargin)\n+  }\n+\n+  sqlTest(\n+      \"SELECT * FROM ddlPeople\",\n+      (1 to 10).map(e => Row(s\"people$e\",e*2)).toSeq)\n+\n+  sqlTest(\n+      \"describe ddlPeople\",\n+      Seq(\n+          Row(\"name\", \"StringType\", null),"
  }],
  "prId": 3935
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I'd probably leave the extended feature out for now unless it is actually going to do something.\n",
    "commit": "d1689e2fdfed67decabe6c696a3d7f051138a7ad",
    "createdAt": "2015-01-10T22:30:58Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.sources\n+import org.apache.spark.sql._\n+\n+\n+class DDLScanSource extends RelationProvider {\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String]): BaseRelation = {\n+      SimpleDDLScan(parameters(\"from\").toInt, parameters(\"TO\").toInt)(sqlContext)\n+    }\n+}\n+\n+case class SimpleDDLScan(from: Int, to: Int)(@transient val sqlContext: SQLContext)\n+  extends TableScan {\n+\n+  override def schema =\n+    StructType(Seq(StructField(\"name\", StringType, nullable = false),\n+    StructField(\"age\", IntegerType, nullable = false)))\n+\n+  override def buildScan() = sqlContext.sparkContext.parallelize(from to to).\n+    map(e => Row(s\"people$e\",e*2))\n+}\n+\n+class DDLTestSuit extends DataSourceTest {\n+  import caseInsensisitiveContext._\n+\n+  before {\n+      sql(\n+          \"\"\"\n+          |CREATE TEMPORARY TABLE ddlPeople\n+          |USING org.apache.spark.sql.sources.DDLScanSource\n+          |OPTIONS (\n+          |  From '1',\n+          |  To '10'\n+          |)\n+          \"\"\".stripMargin)\n+  }\n+\n+  sqlTest(\n+      \"SELECT * FROM ddlPeople\",\n+      (1 to 10).map(e => Row(s\"people$e\",e*2)).toSeq)\n+\n+  sqlTest(\n+      \"describe ddlPeople\",\n+      Seq(\n+          Row(\"name\", \"StringType\", null),\n+          Row(\"age\", \"IntegerType\", null)\n+      ))\n+\n+  sqlTest(\n+      \"describe extended ddlPeople\","
  }, {
    "author": {
      "login": "OopsOutOfMemory"
    },
    "body": "@marmbrus \nFor 'extended' feature, I think we can display the user passed parameters like sth in `OPTIONS`, what do you think ? But seems there is no interface we can get the user passed parameters in the External Datasource API. \n/cc @rxin \n",
    "commit": "d1689e2fdfed67decabe6c696a3d7f051138a7ad",
    "createdAt": "2015-01-11T00:20:19Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.sources\n+import org.apache.spark.sql._\n+\n+\n+class DDLScanSource extends RelationProvider {\n+  override def createRelation(\n+      sqlContext: SQLContext,\n+      parameters: Map[String, String]): BaseRelation = {\n+      SimpleDDLScan(parameters(\"from\").toInt, parameters(\"TO\").toInt)(sqlContext)\n+    }\n+}\n+\n+case class SimpleDDLScan(from: Int, to: Int)(@transient val sqlContext: SQLContext)\n+  extends TableScan {\n+\n+  override def schema =\n+    StructType(Seq(StructField(\"name\", StringType, nullable = false),\n+    StructField(\"age\", IntegerType, nullable = false)))\n+\n+  override def buildScan() = sqlContext.sparkContext.parallelize(from to to).\n+    map(e => Row(s\"people$e\",e*2))\n+}\n+\n+class DDLTestSuit extends DataSourceTest {\n+  import caseInsensisitiveContext._\n+\n+  before {\n+      sql(\n+          \"\"\"\n+          |CREATE TEMPORARY TABLE ddlPeople\n+          |USING org.apache.spark.sql.sources.DDLScanSource\n+          |OPTIONS (\n+          |  From '1',\n+          |  To '10'\n+          |)\n+          \"\"\".stripMargin)\n+  }\n+\n+  sqlTest(\n+      \"SELECT * FROM ddlPeople\",\n+      (1 to 10).map(e => Row(s\"people$e\",e*2)).toSeq)\n+\n+  sqlTest(\n+      \"describe ddlPeople\",\n+      Seq(\n+          Row(\"name\", \"StringType\", null),\n+          Row(\"age\", \"IntegerType\", null)\n+      ))\n+\n+  sqlTest(\n+      \"describe extended ddlPeople\","
  }],
  "prId": 3935
}]