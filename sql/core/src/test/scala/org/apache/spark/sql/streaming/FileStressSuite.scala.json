[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: stream should be volatile\n",
    "commit": "e821f2f558fc3426a13e89598eb1a3eb887daeff",
    "createdAt": "2016-03-22T23:44:12Z",
    "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.io.File\n+import java.util.UUID\n+\n+import scala.util.Random\n+import scala.util.control.NonFatal\n+\n+import org.apache.spark.sql.{ContinuousQuery, ContinuousQueryException, StreamTest}\n+import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * A stress test for streamign queries that read and write files.  This test constists of\n+ * two threads:\n+ *  - one that writes out `numRecords` distinct integers to files of random sizes (the total\n+ *    number of records is fixed but each files size / creation time is random).\n+ *  - another that continually restarts a buggy streaming query (i.e. fails with 5% probability on\n+ *    any partition).\n+ *\n+ * At the end, the resulting files are loaded and the answer is checked.\n+ */\n+class FileStressSuite extends StreamTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  test(\"fault tolerance stress test\") {\n+    val numRecords = 10000\n+    val inputDir = Utils.createTempDir(\"stream.input\").getCanonicalPath\n+    val stagingDir = Utils.createTempDir(\"stream.staging\").getCanonicalPath\n+    val outputDir = Utils.createTempDir(\"stream.output\").getCanonicalPath\n+    val checkpoint = Utils.createTempDir(\"stream.checkpoint\").getCanonicalPath\n+\n+    @volatile\n+    var continue = true\n+    var stream: ContinuousQuery = null"
  }],
  "prId": 11897
}]