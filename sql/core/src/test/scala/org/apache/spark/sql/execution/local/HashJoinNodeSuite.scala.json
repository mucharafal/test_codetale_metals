[{
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "can you make these private\n",
    "commit": "fcec2975d74710f9d1604a01b806566e1f47f1a1",
    "createdAt": "2015-09-10T01:50:03Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.SQLConf\n+import org.apache.spark.sql.execution.joins\n+\n+class HashJoinNodeSuite extends LocalNodeTest {\n+\n+  def wrapForUnsafe(f: (LocalNode, LocalNode) => LocalNode): (LocalNode, LocalNode) => LocalNode = {"
  }],
  "prId": 8535
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "inner join with one match per row\n",
    "commit": "fcec2975d74710f9d1604a01b806566e1f47f1a1",
    "createdAt": "2015-09-10T01:52:42Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.SQLConf\n+import org.apache.spark.sql.execution.joins\n+\n+class HashJoinNodeSuite extends LocalNodeTest {\n+\n+  def wrapForUnsafe(f: (LocalNode, LocalNode) => LocalNode): (LocalNode, LocalNode) => LocalNode = {\n+    if (conf.unsafeEnabled) {\n+      (left: LocalNode, right: LocalNode) => {\n+        val _left = ConvertToUnsafeNode(conf, left)\n+        val _right = ConvertToUnsafeNode(conf, right)\n+        val r = f(_left, _right)\n+        ConvertToSafeNode(conf, r)\n+      }\n+    } else {\n+      f\n+    }\n+  }\n+\n+  def joinSuite(suiteName: String, confPairs: (String, String)*): Unit = {\n+    test(s\"$suiteName: inner join where, one match per row\") {"
  }],
  "prId": 8535
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "inner join with multiple matches\n",
    "commit": "fcec2975d74710f9d1604a01b806566e1f47f1a1",
    "createdAt": "2015-09-10T01:52:49Z",
    "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.execution.local\n+\n+import org.apache.spark.sql.SQLConf\n+import org.apache.spark.sql.execution.joins\n+\n+class HashJoinNodeSuite extends LocalNodeTest {\n+\n+  def wrapForUnsafe(f: (LocalNode, LocalNode) => LocalNode): (LocalNode, LocalNode) => LocalNode = {\n+    if (conf.unsafeEnabled) {\n+      (left: LocalNode, right: LocalNode) => {\n+        val _left = ConvertToUnsafeNode(conf, left)\n+        val _right = ConvertToUnsafeNode(conf, right)\n+        val r = f(_left, _right)\n+        ConvertToSafeNode(conf, r)\n+      }\n+    } else {\n+      f\n+    }\n+  }\n+\n+  def joinSuite(suiteName: String, confPairs: (String, String)*): Unit = {\n+    test(s\"$suiteName: inner join where, one match per row\") {\n+      withConf(confPairs: _*) {\n+        checkAnswer2(\n+          upperCaseData,\n+          lowerCaseData,\n+          wrapForUnsafe(\n+            (node1, node2) => HashJoinNode(\n+              conf,\n+              Seq(upperCaseData.col(\"N\").expr),\n+              Seq(lowerCaseData.col(\"n\").expr),\n+              joins.BuildLeft,\n+              node1,\n+              node2)\n+          ),\n+          upperCaseData.join(lowerCaseData, $\"n\" === $\"N\").collect()\n+        )\n+      }\n+    }\n+\n+    test(s\"$suiteName: inner join, where, multiple matches\") {"
  }],
  "prId": 8535
}]