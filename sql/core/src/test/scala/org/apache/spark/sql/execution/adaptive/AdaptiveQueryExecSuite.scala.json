[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we can add a method\r\n```\r\ndef checkNumLocalShuffleReaders(plan: SparkPlan, expected: Int): Unit = ...\r\n```",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-11T10:43:47Z",
    "diffHunk": "@@ -125,6 +130,10 @@ class AdaptiveQueryExecSuite\n       assert(smj.size == 1)\n       val bhj = findTopLevelBroadcastHashJoin(adaptivePlan)\n       assert(bhj.size == 1)\n+      val localReaders = adaptivePlan.collect {\n+        case reader: LocalShuffleReaderExec => reader\n+      }\n+      assert(localReaders.length === 1)"
  }],
  "prId": 25295
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about \"Change merge join to broadcast join without local shuffle reader\"",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-14T08:47:45Z",
    "diffHunk": "@@ -355,6 +365,28 @@ class AdaptiveQueryExecSuite\n     }\n   }\n \n+  test(\"Change merge join to broadcast join and optimize the shuffle\" +\n+    \" reader to local shuffle reader\") {"
  }],
  "prId": 25295
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "We should update `findReusedExchange` and make it go through `LocalShuffleReaderExec`",
    "commit": "9c1dc5538afce26c4e693e353d8d4ef4231bb78c",
    "createdAt": "2019-10-14T08:50:57Z",
    "diffHunk": "@@ -221,7 +230,8 @@ class AdaptiveQueryExecSuite\n       val bhj = findTopLevelBroadcastHashJoin(adaptivePlan)\n       assert(bhj.size == 2)\n       val ex = findReusedExchange(adaptivePlan)\n-      assert(ex.size == 1)\n+      // The ReusedExchange is hidden in LocalShuffleReaderExec"
  }],
  "prId": 25295
}]