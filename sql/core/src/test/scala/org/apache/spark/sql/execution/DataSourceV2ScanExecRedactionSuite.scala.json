[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. `\"spark.redaction.string.regex\"` -> `STRING_REDACTION_PATTERN.key`?",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-27T18:59:17Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")"
  }],
  "prId": 24719
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`DataSourceScanExec` -> `DataSourceV2ScanExec`.",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-27T19:04:32Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec"
  }],
  "prId": 24719
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We already have the same function in `DataSourceScanExecRedactionSuite`. Can we try to reduce the duplications, @cloud-fan and @gengliangwang ?\r\n```scala\r\n  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\r\n    queryExecution.toString.contains(msg) ||\r\n    queryExecution.simpleString.contains(msg) ||\r\n    queryExecution.stringWithStats.contains(msg)\r\n  }\r\n```",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-27T19:07:40Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")\n+    .set(SQLConf.USE_V1_SOURCE_READER_LIST.key, \"\")\n+\n+  test(\"treeString is redacted\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+\n+      val rootPath = df.queryExecution.sparkPlan.find(_.isInstanceOf[BatchScanExec]).get\n+        .asInstanceOf[BatchScanExec].scan.asInstanceOf[OrcScan].fileIndex.rootPaths.head\n+      assert(rootPath.toString.contains(dir.toURI.getPath.stripSuffix(\"/\")))\n+      assert(!df.queryExecution.sparkPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.executedPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.toString.contains(rootPath.getName))\n+      assert(!df.queryExecution.simpleString.contains(rootPath.getName))\n+\n+      val replacement = \"*********\"\n+      assert(df.queryExecution.sparkPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.executedPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.toString.contains(replacement))\n+      assert(df.queryExecution.simpleString.contains(replacement))\n+    }\n+  }\n+\n+  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\n+    queryExecution.toString.contains(msg) ||\n+      queryExecution.simpleString.contains(msg) ||\n+      queryExecution.stringWithStats.contains(msg)\n+  }"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I think this is quite minor. We should decide the principle of adding tests for data source V2:\r\n1. Try to make tests for V2 isolated. If there is a lot of common code, create an abstract class for the test. So that someday, when the V1 is deprecated, we can remove the tests easier.\r\n\r\n2. Put both V1 and V2 test cases together to reduce duplications.\r\n\r\n\r\nPersonally, I prefer option 1.",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-28T08:48:59Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")\n+    .set(SQLConf.USE_V1_SOURCE_READER_LIST.key, \"\")\n+\n+  test(\"treeString is redacted\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+\n+      val rootPath = df.queryExecution.sparkPlan.find(_.isInstanceOf[BatchScanExec]).get\n+        .asInstanceOf[BatchScanExec].scan.asInstanceOf[OrcScan].fileIndex.rootPaths.head\n+      assert(rootPath.toString.contains(dir.toURI.getPath.stripSuffix(\"/\")))\n+      assert(!df.queryExecution.sparkPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.executedPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.toString.contains(rootPath.getName))\n+      assert(!df.queryExecution.simpleString.contains(rootPath.getName))\n+\n+      val replacement = \"*********\"\n+      assert(df.queryExecution.sparkPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.executedPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.toString.contains(replacement))\n+      assert(df.queryExecution.simpleString.contains(replacement))\n+    }\n+  }\n+\n+  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\n+    queryExecution.toString.contains(msg) ||\n+      queryExecution.simpleString.contains(msg) ||\n+      queryExecution.stringWithStats.contains(msg)\n+  }"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We had better achieve (1) by putting the utility functions into a proper utility class or we design the class hierarchy more reasonably. Removing V1 is not hard if we have a correct design. Most design principles are for reducing duplications and reusing as much as possible. ",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-28T17:41:30Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")\n+    .set(SQLConf.USE_V1_SOURCE_READER_LIST.key, \"\")\n+\n+  test(\"treeString is redacted\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+\n+      val rootPath = df.queryExecution.sparkPlan.find(_.isInstanceOf[BatchScanExec]).get\n+        .asInstanceOf[BatchScanExec].scan.asInstanceOf[OrcScan].fileIndex.rootPaths.head\n+      assert(rootPath.toString.contains(dir.toURI.getPath.stripSuffix(\"/\")))\n+      assert(!df.queryExecution.sparkPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.executedPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.toString.contains(rootPath.getName))\n+      assert(!df.queryExecution.simpleString.contains(rootPath.getName))\n+\n+      val replacement = \"*********\"\n+      assert(df.queryExecution.sparkPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.executedPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.toString.contains(replacement))\n+      assert(df.queryExecution.simpleString.contains(replacement))\n+    }\n+  }\n+\n+  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\n+    queryExecution.toString.contains(msg) ||\n+      queryExecution.simpleString.contains(msg) ||\n+      queryExecution.stringWithStats.contains(msg)\n+  }"
  }],
  "prId": 24719
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Ur, `FileSourceScanExec`? Is this correct?",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-27T19:10:03Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")\n+    .set(SQLConf.USE_V1_SOURCE_READER_LIST.key, \"\")\n+\n+  test(\"treeString is redacted\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+\n+      val rootPath = df.queryExecution.sparkPlan.find(_.isInstanceOf[BatchScanExec]).get\n+        .asInstanceOf[BatchScanExec].scan.asInstanceOf[OrcScan].fileIndex.rootPaths.head\n+      assert(rootPath.toString.contains(dir.toURI.getPath.stripSuffix(\"/\")))\n+      assert(!df.queryExecution.sparkPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.executedPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.toString.contains(rootPath.getName))\n+      assert(!df.queryExecution.simpleString.contains(rootPath.getName))\n+\n+      val replacement = \"*********\"\n+      assert(df.queryExecution.sparkPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.executedPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.toString.contains(replacement))\n+      assert(df.queryExecution.simpleString.contains(replacement))\n+    }\n+  }\n+\n+  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\n+    queryExecution.toString.contains(msg) ||\n+      queryExecution.simpleString.contains(msg) ||\n+      queryExecution.stringWithStats.contains(msg)\n+  }\n+\n+  test(\"explain is redacted using SQLConf\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+      val replacement = \"*********\"\n+\n+      // Respect SparkConf and replace file:/\n+      assert(isIncluded(df.queryExecution, replacement))\n+      assert(isIncluded(df.queryExecution, \"BatchScan\"))\n+      assert(!isIncluded(df.queryExecution, \"file:/\"))\n+\n+      withSQLConf(SQLConf.SQL_STRING_REDACTION_PATTERN.key -> \"(?i)BatchScan\") {\n+        // Respect SQLConf and replace FileScan\n+        assert(isIncluded(df.queryExecution, replacement))\n+\n+        assert(!isIncluded(df.queryExecution, \"BatchScan\"))\n+        assert(isIncluded(df.queryExecution, \"file:/\"))\n+      }\n+    }\n+  }\n+\n+  test(\"FileSourceScanExec metadata\") {"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Thanks for the careful review!",
    "commit": "cbd3236e0bee37809beac4d61071e933b0119494",
    "createdAt": "2019-05-28T08:55:59Z",
    "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution\n+\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.SparkConf\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.execution.datasources.v2.BatchScanExec\n+import org.apache.spark.sql.execution.datasources.v2.orc.OrcScan\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Suite that tests the redaction of DataSourceScanExec\n+ */\n+class DataSourceV2ScanExecRedactionSuite extends QueryTest with SharedSQLContext {\n+\n+  override protected def sparkConf: SparkConf = super.sparkConf\n+    .set(\"spark.redaction.string.regex\", \"file:/[\\\\w_/]+\")\n+    .set(SQLConf.USE_V1_SOURCE_READER_LIST.key, \"\")\n+\n+  test(\"treeString is redacted\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+\n+      val rootPath = df.queryExecution.sparkPlan.find(_.isInstanceOf[BatchScanExec]).get\n+        .asInstanceOf[BatchScanExec].scan.asInstanceOf[OrcScan].fileIndex.rootPaths.head\n+      assert(rootPath.toString.contains(dir.toURI.getPath.stripSuffix(\"/\")))\n+      assert(!df.queryExecution.sparkPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.executedPlan.treeString(verbose = true).contains(rootPath.getName))\n+      assert(!df.queryExecution.toString.contains(rootPath.getName))\n+      assert(!df.queryExecution.simpleString.contains(rootPath.getName))\n+\n+      val replacement = \"*********\"\n+      assert(df.queryExecution.sparkPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.executedPlan.treeString(verbose = true).contains(replacement))\n+      assert(df.queryExecution.toString.contains(replacement))\n+      assert(df.queryExecution.simpleString.contains(replacement))\n+    }\n+  }\n+\n+  private def isIncluded(queryExecution: QueryExecution, msg: String): Boolean = {\n+    queryExecution.toString.contains(msg) ||\n+      queryExecution.simpleString.contains(msg) ||\n+      queryExecution.stringWithStats.contains(msg)\n+  }\n+\n+  test(\"explain is redacted using SQLConf\") {\n+    withTempDir { dir =>\n+      val basePath = dir.getCanonicalPath\n+      spark.range(0, 10).toDF(\"a\").write.orc(new Path(basePath, \"foo=1\").toString)\n+      val df = spark.read.orc(basePath)\n+      val replacement = \"*********\"\n+\n+      // Respect SparkConf and replace file:/\n+      assert(isIncluded(df.queryExecution, replacement))\n+      assert(isIncluded(df.queryExecution, \"BatchScan\"))\n+      assert(!isIncluded(df.queryExecution, \"file:/\"))\n+\n+      withSQLConf(SQLConf.SQL_STRING_REDACTION_PATTERN.key -> \"(?i)BatchScan\") {\n+        // Respect SQLConf and replace FileScan\n+        assert(isIncluded(df.queryExecution, replacement))\n+\n+        assert(!isIncluded(df.queryExecution, \"BatchScan\"))\n+        assert(isIncluded(df.queryExecution, \"file:/\"))\n+      }\n+    }\n+  }\n+\n+  test(\"FileSourceScanExec metadata\") {"
  }],
  "prId": 24719
}]