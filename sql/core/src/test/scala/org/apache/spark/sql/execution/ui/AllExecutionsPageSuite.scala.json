[{
  "comments": [{
    "author": {
      "login": "shahidki31"
    },
    "body": "~~Shouldn't it be `IllegalArgumentException`?~~ . We are converting to the lowercase above line.",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T05:36:51Z",
    "diffHunk": "@@ -73,10 +73,35 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))"
  }, {
    "author": {
      "login": "07ARB"
    },
    "body": "@shahidki31, No it should be in lowercase because if you see below code there they are using .toLowerCase(Locale.ROOT) which will convert complete html contain to lowercase. \r\n\r\nval html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\r\n\r\n",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T06:00:46Z",
    "diffHunk": "@@ -73,10 +73,35 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Nice catch!",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T06:25:03Z",
    "diffHunk": "@@ -73,10 +73,35 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))"
  }],
  "prId": 26216
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For the improvement PR, we don't use JIRA ID prefix. So, let's remove `SPARK-29453: ` from the test name.",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T06:25:30Z",
    "diffHunk": "@@ -73,10 +73,35 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))\n     assert(html.contains(\"duration\"))\n   }\n \n+  test(\"SPARK-29453: correctly display tooltips for SQL Tab\") {"
  }, {
    "author": {
      "login": "07ARB"
    },
    "body": "ok",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T06:43:01Z",
    "diffHunk": "@@ -73,10 +73,35 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))\n     assert(html.contains(\"duration\"))\n   }\n \n+  test(\"SPARK-29453: correctly display tooltips for SQL Tab\") {"
  }],
  "prId": 26216
}, {
  "comments": [{
    "author": {
      "login": "shahidki31"
    },
    "body": "I think these lines aren't necessary. \r\n```\r\n    when(request.getParameter(\"failed.sort\")).thenReturn(\"Duration\")\r\n    val map = new util.HashMap[String, Array[String]]()\r\n    map.put(\"failed.sort\", Array(\"duration\"))\r\n```",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T11:38:50Z",
    "diffHunk": "@@ -73,10 +74,36 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))\n     assert(html.contains(\"duration\"))\n   }\n \n+  test(\"Display tooltips for SQL page\") {\n+    val statusStore = createStatusStore\n+    val tab = mock(classOf[SQLTab], RETURNS_SMART_NULLS)\n+    val request = mock(classOf[HttpServletRequest])\n+\n+    when(tab.sqlStore).thenReturn(statusStore)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    when(request.getParameter(\"failed.sort\")).thenReturn(\"Duration\")\n+    val map = new util.HashMap[String, Array[String]]()\n+    map.put(\"failed.sort\", Array(\"duration\"))"
  }, {
    "author": {
      "login": "07ARB"
    },
    "body": "ok i will test after removing above code and will commit.",
    "commit": "e958370dfd00d8fb6c9e2001b71c0d7cf6e592da",
    "createdAt": "2019-10-23T11:44:04Z",
    "diffHunk": "@@ -73,10 +74,36 @@ class AllExecutionsPageSuite extends SharedSparkSession with BeforeAndAfter {\n     map.put(\"failed.sort\", Array(\"duration\"))\n     when(request.getParameterMap()).thenReturn(map)\n     val html = renderSQLPage(request, tab, statusStore).toString().toLowerCase(Locale.ROOT)\n-    assert(!html.contains(\"IllegalArgumentException\"))\n+    assert(!html.contains(\"illegalargumentexception\"))\n     assert(html.contains(\"duration\"))\n   }\n \n+  test(\"Display tooltips for SQL page\") {\n+    val statusStore = createStatusStore\n+    val tab = mock(classOf[SQLTab], RETURNS_SMART_NULLS)\n+    val request = mock(classOf[HttpServletRequest])\n+\n+    when(tab.sqlStore).thenReturn(statusStore)\n+    when(tab.appName).thenReturn(\"testing\")\n+    when(tab.headerTabs).thenReturn(Seq.empty)\n+    when(request.getParameter(\"failed.sort\")).thenReturn(\"Duration\")\n+    val map = new util.HashMap[String, Array[String]]()\n+    map.put(\"failed.sort\", Array(\"duration\"))"
  }],
  "prId": 26216
}]