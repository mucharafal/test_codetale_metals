[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why not? I think this is perfectly reasonable if the data uses partition transforms.",
    "commit": "b7a5ac549c26153a3aa8bf3e73bd415929a78a1f",
    "createdAt": "2019-07-31T22:58:53Z",
    "diffHunk": "@@ -160,6 +163,68 @@ class V2SessionCatalogSuite\n     assert(catalog.tableExists(testIdent))\n   }\n \n+  test(\"createTable: duplicate column names in the table definition\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val errMsg = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT, $c1 INT) USING $v2Source\")\n+        }.getMessage\n+        assert(errMsg.contains(\"Found duplicate column(s) in the table definition of t\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: partition column names not in table definition\") {\n+    val e = intercept[AnalysisException] {\n+      sql(s\"CREATE TABLE tbl(a int, b string) USING $v2Source PARTITIONED BY (c)\")\n+    }.getMessage\n+    assert(e.contains(\"Couldn't find column c in\"))\n+  }\n+\n+  test(\"createTable: bucket column names not in table definition\") {\n+    val e = intercept[AnalysisException] {\n+      sql(s\"CREATE TABLE tbl(a int, b string) \" +\n+        s\"USING $v2Source CLUSTERED BY (c) INTO 4 BUCKETS\")\n+    }.getMessage\n+    assert(e.contains(\"Couldn't find column c in\"))\n+  }\n+\n+  test(\"createTable: column repeated in partition columns\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val e = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT) USING $v2Source PARTITIONED BY ($c0, $c1)\")\n+        }.getMessage\n+        assert(e.contains(\"Found duplicate column(s) in the partition schema\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: column repeated in bucket columns\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val e = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT) USING $v2Source \" +\n+            s\"CLUSTERED BY ($c0, $c1) INTO 2 BUCKETS\")\n+        }.getMessage\n+        assert(e.contains(\"Found duplicate column(s) in the bucket definition\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: all columns used in partitioning\") {\n+    Seq(\n+      \"PARTITIONED BY (a, b)\",\n+      \"CLUSTERED BY (a, b) INTO 2 BUCKETS\",\n+      \"PARTITIONED BY (a) CLUSTERED BY (b) INTO 2 BUCKETS\").foreach { partitioning =>\n+\n+      val e = intercept[AnalysisException] {\n+        sql(s\"CREATE TABLE t(a INT, b STRING) USING $v2Source $partitioning\")\n+      }.getMessage\n+      assert(e.contains(\"Cannot use all columns for partitioning.\"))"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "Having data only created be partition transforms and no data columns?",
    "commit": "b7a5ac549c26153a3aa8bf3e73bd415929a78a1f",
    "createdAt": "2019-07-31T23:36:30Z",
    "diffHunk": "@@ -160,6 +163,68 @@ class V2SessionCatalogSuite\n     assert(catalog.tableExists(testIdent))\n   }\n \n+  test(\"createTable: duplicate column names in the table definition\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val errMsg = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT, $c1 INT) USING $v2Source\")\n+        }.getMessage\n+        assert(errMsg.contains(\"Found duplicate column(s) in the table definition of t\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: partition column names not in table definition\") {\n+    val e = intercept[AnalysisException] {\n+      sql(s\"CREATE TABLE tbl(a int, b string) USING $v2Source PARTITIONED BY (c)\")\n+    }.getMessage\n+    assert(e.contains(\"Couldn't find column c in\"))\n+  }\n+\n+  test(\"createTable: bucket column names not in table definition\") {\n+    val e = intercept[AnalysisException] {\n+      sql(s\"CREATE TABLE tbl(a int, b string) \" +\n+        s\"USING $v2Source CLUSTERED BY (c) INTO 4 BUCKETS\")\n+    }.getMessage\n+    assert(e.contains(\"Couldn't find column c in\"))\n+  }\n+\n+  test(\"createTable: column repeated in partition columns\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val e = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT) USING $v2Source PARTITIONED BY ($c0, $c1)\")\n+        }.getMessage\n+        assert(e.contains(\"Found duplicate column(s) in the partition schema\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: column repeated in bucket columns\") {\n+    Seq((true, (\"a\", \"a\")), (false, (\"aA\", \"Aa\"))).foreach { case (caseSensitive, (c0, c1)) =>\n+      withSQLConf(SQLConf.CASE_SENSITIVE.key -> caseSensitive.toString) {\n+        val e = intercept[AnalysisException] {\n+          sql(s\"CREATE TABLE t($c0 INT) USING $v2Source \" +\n+            s\"CLUSTERED BY ($c0, $c1) INTO 2 BUCKETS\")\n+        }.getMessage\n+        assert(e.contains(\"Found duplicate column(s) in the bucket definition\"))\n+      }\n+    }\n+  }\n+\n+  test(\"createTable: all columns used in partitioning\") {\n+    Seq(\n+      \"PARTITIONED BY (a, b)\",\n+      \"CLUSTERED BY (a, b) INTO 2 BUCKETS\",\n+      \"PARTITIONED BY (a) CLUSTERED BY (b) INTO 2 BUCKETS\").foreach { partitioning =>\n+\n+      val e = intercept[AnalysisException] {\n+        sql(s\"CREATE TABLE t(a INT, b STRING) USING $v2Source $partitioning\")\n+      }.getMessage\n+      assert(e.contains(\"Cannot use all columns for partitioning.\"))"
  }],
  "prId": 25305
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I think these tests should not be specific to the v2 session catalog.",
    "commit": "b7a5ac549c26153a3aa8bf3e73bd415929a78a1f",
    "createdAt": "2019-07-31T23:00:02Z",
    "diffHunk": "@@ -160,6 +163,68 @@ class V2SessionCatalogSuite\n     assert(catalog.tableExists(testIdent))\n   }\n \n+  test(\"createTable: duplicate column names in the table definition\") {"
  }],
  "prId": 25305
}]