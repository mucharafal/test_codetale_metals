[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "The changes here in SparkPlanTest are to allow it to be used with TestHive without leading to the dreaded \"multiple active SparkContexts in the same JVM\" error.\n",
    "commit": "16c44e253998c9a0ced7fcde6a16ed7fea17392f",
    "createdAt": "2015-07-28T02:24:39Z",
    "diffHunk": "@@ -33,11 +33,13 @@ import scala.util.control.NonFatal\n  */\n class SparkPlanTest extends SparkFunSuite {\n \n+  protected def sqlContext: SQLContext = TestSQLContext",
    "line": 13
  }],
  "prId": 7710
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "If `sqlContext` is already a member of SparkPlanTest, is it possible that we don't need to pass it to `checkAnswer`?\n",
    "commit": "16c44e253998c9a0ced7fcde6a16ed7fea17392f",
    "createdAt": "2015-07-28T06:26:35Z",
    "diffHunk": "@@ -98,7 +100,7 @@ class SparkPlanTest extends SparkFunSuite {\n       planFunction: Seq[SparkPlan] => SparkPlan,\n       expectedAnswer: Seq[Row],\n       sortAnswers: Boolean = true): Unit = {\n-    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers) match {\n+    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers, sqlContext) match {",
    "line": 29
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "This is a call on the `SparkPlanTest` companion object, which doesn't have that field.\n",
    "commit": "16c44e253998c9a0ced7fcde6a16ed7fea17392f",
    "createdAt": "2015-07-28T06:27:27Z",
    "diffHunk": "@@ -98,7 +100,7 @@ class SparkPlanTest extends SparkFunSuite {\n       planFunction: Seq[SparkPlan] => SparkPlan,\n       expectedAnswer: Seq[Row],\n       sortAnswers: Boolean = true): Unit = {\n-    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers) match {\n+    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers, sqlContext) match {",
    "line": 29
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "This is minor, and does not have to be addressed in this PR, but why did we make that an `object`?  It seems like this just complicates function calls since now we can't access fields like the `sqlContext`.\n",
    "commit": "16c44e253998c9a0ced7fcde6a16ed7fea17392f",
    "createdAt": "2015-07-28T17:21:24Z",
    "diffHunk": "@@ -98,7 +100,7 @@ class SparkPlanTest extends SparkFunSuite {\n       planFunction: Seq[SparkPlan] => SparkPlan,\n       expectedAnswer: Seq[Row],\n       sortAnswers: Boolean = true): Unit = {\n-    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers) match {\n+    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers, sqlContext) match {",
    "line": 29
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think that the idea was to allow re-use of some of the SparkPlanTest functions without having to mix them into the test suite; I agree that this could maybe be simplified by making both SparkPlanTest and QueryTest into traits / mixins so that you can easily use both in the same test suite.\n",
    "commit": "16c44e253998c9a0ced7fcde6a16ed7fea17392f",
    "createdAt": "2015-07-28T20:29:54Z",
    "diffHunk": "@@ -98,7 +100,7 @@ class SparkPlanTest extends SparkFunSuite {\n       planFunction: Seq[SparkPlan] => SparkPlan,\n       expectedAnswer: Seq[Row],\n       sortAnswers: Boolean = true): Unit = {\n-    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers) match {\n+    SparkPlanTest.checkAnswer(input, planFunction, expectedAnswer, sortAnswers, sqlContext) match {",
    "line": 29
  }],
  "prId": 7710
}]