[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Either log the exception or remove the `try ... catch`?\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-08-25T05:03:03Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql._\n+\n+import org.scalatest.BeforeAndAfter\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.TestSQLContext._\n+\n+class JdbcResultSetRDDSuite extends QueryTest with BeforeAndAfter {\n+\n+  before {\n+    Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n+    val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb;create=true\")\n+    try {\n+      val create = conn.createStatement\n+      create.execute(\"\"\"\n+        CREATE TABLE FOO(\n+          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+          DATA INTEGER\n+        )\"\"\")\n+      create.close()\n+      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+      (1 to 100).foreach { i =>\n+        insert.setInt(1, i * 2)\n+        insert.executeUpdate\n+      }\n+      insert.close()\n+    } catch {\n+      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n+    } finally {\n+      conn.close()\n+    }\n+  }\n+\n+  test(\"basic functionality\") {\n+    val jdbcResultSetRDD = jdbcResultSet(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb\", \"SELECT DATA FROM FOO\")\n+    jdbcResultSetRDD.registerAsTable(\"foo\")\n+\n+    checkAnswer(\n+      sql(\"select count(*) from foo\"),\n+      100\n+    )\n+    checkAnswer(\n+      sql(\"select sum(DATA) from foo\"),\n+      10100\n+    )\n+  }\n+\n+  after {\n+    try {\n+      DriverManager.getConnection(\"jdbc:derby:;shutdown=true\")\n+    } catch {\n+      case se: SQLException if se.getSQLState == \"XJ015\" =>",
    "line": 71
  }, {
    "author": {
      "login": "chutium"
    },
    "body": "i have also no idea what is this \"XJ015\"... i took it from https://github.com/apache/spark/blob/master/core/src/test/scala/org/apache/spark/rdd/JdbcRDDSuite.scala :P\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-08-26T10:06:18Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql._\n+\n+import org.scalatest.BeforeAndAfter\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.TestSQLContext._\n+\n+class JdbcResultSetRDDSuite extends QueryTest with BeforeAndAfter {\n+\n+  before {\n+    Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n+    val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb;create=true\")\n+    try {\n+      val create = conn.createStatement\n+      create.execute(\"\"\"\n+        CREATE TABLE FOO(\n+          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+          DATA INTEGER\n+        )\"\"\")\n+      create.close()\n+      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+      (1 to 100).foreach { i =>\n+        insert.setInt(1, i * 2)\n+        insert.executeUpdate\n+      }\n+      insert.close()\n+    } catch {\n+      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n+    } finally {\n+      conn.close()\n+    }\n+  }\n+\n+  test(\"basic functionality\") {\n+    val jdbcResultSetRDD = jdbcResultSet(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb\", \"SELECT DATA FROM FOO\")\n+    jdbcResultSetRDD.registerAsTable(\"foo\")\n+\n+    checkAnswer(\n+      sql(\"select count(*) from foo\"),\n+      100\n+    )\n+    checkAnswer(\n+      sql(\"select sum(DATA) from foo\"),\n+      10100\n+    )\n+  }\n+\n+  after {\n+    try {\n+      DriverManager.getConnection(\"jdbc:derby:;shutdown=true\")\n+    } catch {\n+      case se: SQLException if se.getSQLState == \"XJ015\" =>",
    "line": 71
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Hmm, yeah good question... Perhaps @koeninger, who wrote the original test, could enlighten us?\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-09-09T02:20:39Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql._\n+\n+import org.scalatest.BeforeAndAfter\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.TestSQLContext._\n+\n+class JdbcResultSetRDDSuite extends QueryTest with BeforeAndAfter {\n+\n+  before {\n+    Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n+    val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb;create=true\")\n+    try {\n+      val create = conn.createStatement\n+      create.execute(\"\"\"\n+        CREATE TABLE FOO(\n+          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+          DATA INTEGER\n+        )\"\"\")\n+      create.close()\n+      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+      (1 to 100).foreach { i =>\n+        insert.setInt(1, i * 2)\n+        insert.executeUpdate\n+      }\n+      insert.close()\n+    } catch {\n+      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n+    } finally {\n+      conn.close()\n+    }\n+  }\n+\n+  test(\"basic functionality\") {\n+    val jdbcResultSetRDD = jdbcResultSet(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb\", \"SELECT DATA FROM FOO\")\n+    jdbcResultSetRDD.registerAsTable(\"foo\")\n+\n+    checkAnswer(\n+      sql(\"select count(*) from foo\"),\n+      100\n+    )\n+    checkAnswer(\n+      sql(\"select sum(DATA) from foo\"),\n+      10100\n+    )\n+  }\n+\n+  after {\n+    try {\n+      DriverManager.getConnection(\"jdbc:derby:;shutdown=true\")\n+    } catch {\n+      case se: SQLException if se.getSQLState == \"XJ015\" =>",
    "line": 71
  }, {
    "author": {
      "login": "koeninger"
    },
    "body": "http://db.apache.org/derby/papers/DerbyTut/embedded_intro.html\n\n\" A clean shutdown always throws SQL exception XJ015, which can be ignored. \"\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-09-09T02:42:33Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql._\n+\n+import org.scalatest.BeforeAndAfter\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.TestSQLContext._\n+\n+class JdbcResultSetRDDSuite extends QueryTest with BeforeAndAfter {\n+\n+  before {\n+    Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n+    val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb;create=true\")\n+    try {\n+      val create = conn.createStatement\n+      create.execute(\"\"\"\n+        CREATE TABLE FOO(\n+          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+          DATA INTEGER\n+        )\"\"\")\n+      create.close()\n+      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+      (1 to 100).foreach { i =>\n+        insert.setInt(1, i * 2)\n+        insert.executeUpdate\n+      }\n+      insert.close()\n+    } catch {\n+      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n+    } finally {\n+      conn.close()\n+    }\n+  }\n+\n+  test(\"basic functionality\") {\n+    val jdbcResultSetRDD = jdbcResultSet(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb\", \"SELECT DATA FROM FOO\")\n+    jdbcResultSetRDD.registerAsTable(\"foo\")\n+\n+    checkAnswer(\n+      sql(\"select count(*) from foo\"),\n+      100\n+    )\n+    checkAnswer(\n+      sql(\"select sum(DATA) from foo\"),\n+      10100\n+    )\n+  }\n+\n+  after {\n+    try {\n+      DriverManager.getConnection(\"jdbc:derby:;shutdown=true\")\n+    } catch {\n+      case se: SQLException if se.getSQLState == \"XJ015\" =>",
    "line": 71
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Thanks!  Maybe we can add this as a comment in both places?\n",
    "commit": "2013303c37eb8408ea31d285d2d3ac23ded7b3e9",
    "createdAt": "2014-09-09T02:45:03Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql._\n+\n+import org.scalatest.BeforeAndAfter\n+import org.apache.spark.sql.QueryTest\n+import org.apache.spark.sql.test.TestSQLContext._\n+\n+class JdbcResultSetRDDSuite extends QueryTest with BeforeAndAfter {\n+\n+  before {\n+    Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\")\n+    val conn = DriverManager.getConnection(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb;create=true\")\n+    try {\n+      val create = conn.createStatement\n+      create.execute(\"\"\"\n+        CREATE TABLE FOO(\n+          ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),\n+          DATA INTEGER\n+        )\"\"\")\n+      create.close()\n+      val insert = conn.prepareStatement(\"INSERT INTO FOO(DATA) VALUES(?)\")\n+      (1 to 100).foreach { i =>\n+        insert.setInt(1, i * 2)\n+        insert.executeUpdate\n+      }\n+      insert.close()\n+    } catch {\n+      case e: SQLException if e.getSQLState == \"X0Y32\" =>\n+        // table exists\n+    } finally {\n+      conn.close()\n+    }\n+  }\n+\n+  test(\"basic functionality\") {\n+    val jdbcResultSetRDD = jdbcResultSet(\"jdbc:derby:target/JdbcSchemaRDDSuiteDb\", \"SELECT DATA FROM FOO\")\n+    jdbcResultSetRDD.registerAsTable(\"foo\")\n+\n+    checkAnswer(\n+      sql(\"select count(*) from foo\"),\n+      100\n+    )\n+    checkAnswer(\n+      sql(\"select sum(DATA) from foo\"),\n+      10100\n+    )\n+  }\n+\n+  after {\n+    try {\n+      DriverManager.getConnection(\"jdbc:derby:;shutdown=true\")\n+    } catch {\n+      case se: SQLException if se.getSQLState == \"XJ015\" =>",
    "line": 71
  }],
  "prId": 1612
}]