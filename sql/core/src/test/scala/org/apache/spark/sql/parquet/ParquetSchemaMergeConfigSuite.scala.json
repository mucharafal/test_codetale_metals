[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Actually you don't need this case class for generating DataFrames. Please see my comments inlined below.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:26Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please add `override`.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:28Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "This line should be removed.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:30Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "`ParquetTest` extends `SQLTestUtils`, which provides a bunch of convenient utility methods.  One of them is `withSQLConf`, which is used to deal with temporary configuration changes, so that you don't need to restore original configurations by hand. For example:\n\n``` scala\ntest(\"a fancy test\") {\n  withSQLConf(SQLConf.PARQUET_SCHEMA_MERGING_ENABLED.key, \"false\") {\n    // Do the test\n  }\n}\n```\n\nWith this you don't need `BeforeAndAfterAll` for this test suite.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:31Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Ha, I'm nit-picking but probably not `\"lala\"` here? I can tell you must be Chinese from this single line :smiley:\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:33Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please remove the space after `(`.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:35Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please remove the space after `(`.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:37Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please remove the space after `(`.\n\nAlso, we usually use `assert(A === B)` rather than `assert(A == B)`. The former provides better error message in case of assertion failure.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:39Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)\n+      assert( sqlContext.read.parquet(parquetFile1.toString, parquetFile2.toString)"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "As I commented above, you don't need a case class to generate a DataFrame. For example, these two test cases can be simplified to:\n\n``` scala\ntest(\"Enabling/disabling schema merging\") {\n  def testSchemaMerging(expectedColumnNumber: Int): Unit {\n    withTempDir { dir =>\n      val basePath = dir.getCanonicalPath\n      sqlContext.range(0, 10).toDF(\"a\").write.parquet(new Path(basePath, \"foo=1\").toString)\n      sqlContext.range(0, 10).toDF(\"b\").write.parquet(new Path(basePath, \"foo=2\").toString)\n      assert(sqlContext.read.parquet(basePath).columns.length === expectedColumnNumber)\n    }\n  }\n\n  withSQLConf(SQLConf.PARQUET_SCHEMA_MERGING_ENABLED.key -> \"true\") {\n    testSchemaMerging(3)\n  }\n\n  withSQLConf(SQLConf.PARQUET_SCHEMA_MERGING_ENABLED.key -> \"false\") {\n    testSchemaMerging(2)\n  }\n}\n```\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:54:41Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)\n+      assert( sqlContext.read.parquet(parquetFile1.toString, parquetFile2.toString)\n+                .columns.size == 3)\n+    }\n+  }\n+\n+  test(\"Enable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, true)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)\n+      assert( sqlContext.read.parquet(parquetFile1.toString, parquetFile2.toString)\n+        .columns.size == 5)\n+    }\n+  }"
  }, {
    "author": {
      "login": "liancheng"
    },
    "body": "We should probably move this test case into `ParquetDataSourceOnQuerySuite` instead of creating a new file.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T18:38:55Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\"\n+  case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+  private val originalConf = sqlContext.conf\n+                          .getConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED)\n+\n+  override def afterAll(): Unit = {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, originalConf)\n+  }\n+\n+\n+  test(\"Disable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, false)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)\n+      assert( sqlContext.read.parquet(parquetFile1.toString, parquetFile2.toString)\n+                .columns.size == 3)\n+    }\n+  }\n+\n+  test(\"Enable SchemaMerge\") {\n+    sqlContext.conf.setConf(SQLConf.PARQUET_MERGE_SCHEMA_ENABLED, true)\n+    withTempDir { base =>\n+      val parquetFile1 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 1)\n+      makeParquetFile( (1 to 10).map(i => ParquetData(i, i.toString)), parquetFile1)\n+      val parquetFile2 = makePartitionDir(base, defaultPartitionName, \"lala\" -> 2)\n+      makeParquetFile( (1 to 10).map(i => ParquetData2(i, i.toString)), parquetFile2)\n+      assert( sqlContext.read.parquet(parquetFile1.toString, parquetFile2.toString)\n+        .columns.size == 5)\n+    }\n+  }"
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "This line can also be removed after refactoring the test cases below.\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T17:56:50Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll\n+\n+case class ParquetData2(int2Field: Int, string2Field: String)\n+\n+\n+class ParquetSchemaMergeConfigSuite  extends QueryTest with ParquetTest with BeforeAndAfterAll {\n+  val sqlContext = TestSQLContext\n+  val defaultPartitionName = \"__HIVE_DEFAULT_PARTITION__\""
  }],
  "prId": 7070
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Reorder imports. Please refer to https://github.com/databricks/scala-style-guide#imports\n",
    "commit": "c6f3e867199cd090b7fd50f65317e20d26960c2e",
    "createdAt": "2015-07-01T18:39:54Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.parquet\n+\n+import org.apache.spark.sql.{SQLConf, QueryTest}\n+import org.apache.spark.sql.test.TestSQLContext\n+import org.scalatest.BeforeAndAfterAll"
  }],
  "prId": 7070
}]