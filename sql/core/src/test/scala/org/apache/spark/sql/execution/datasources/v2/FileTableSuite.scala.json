[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for adding this test.",
    "commit": "4ca742d60f402392609886adcd67d8318a110f8a",
    "createdAt": "2019-03-26T06:09:36Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.fs.FileStatus\n+\n+import org.apache.spark.sql.{QueryTest, SparkSession}\n+import org.apache.spark.sql.sources.v2.reader.ScanBuilder\n+import org.apache.spark.sql.sources.v2.writer.WriteBuilder\n+import org.apache.spark.sql.test.{SharedSQLContext, SQLTestUtils}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class DummyFileTable(\n+    sparkSession: SparkSession,\n+    options: CaseInsensitiveStringMap,\n+    paths: Seq[String],\n+    expectedDataSchema: StructType,\n+    userSpecifiedSchema: Option[StructType])\n+  extends FileTable(sparkSession, options, paths, userSpecifiedSchema) {\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = Some(expectedDataSchema)\n+\n+  override def name(): String = \"Dummy\"\n+\n+  override def formatName: String = \"Dummy\"\n+\n+  override def newScanBuilder(options: CaseInsensitiveStringMap): ScanBuilder = null\n+\n+  override def newWriteBuilder(options: CaseInsensitiveStringMap): WriteBuilder = null\n+\n+  override def supportsDataType(dataType: DataType): Boolean = dataType == StringType\n+}\n+\n+class FileTableSuite extends QueryTest with SharedSQLContext with SQLTestUtils {\n+\n+  test(\"Data type validation should check data schema only\") {\n+    withTempPath { dir =>\n+      val df = spark.createDataFrame(Seq((\"a\", 1), (\"b\", 2))).toDF(\"v\", \"p\")\n+      val pathName = dir.getCanonicalPath\n+      df.write.partitionBy(\"p\").text(pathName)\n+      val options = new CaseInsensitiveStringMap(Map(\"path\" -> pathName).asJava)\n+      val expectedDataSchema = StructType(Seq(StructField(\"v\", StringType, true)))\n+      // DummyFileTable doesn't support Integer data type.\n+      // However, the partition schema is handled by Spark, so it is allowed to contain\n+      // Integer data type here.\n+      val table = new DummyFileTable(spark, options, Seq(pathName), expectedDataSchema, None)\n+      assert(table.dataSchema == expectedDataSchema)\n+      val expectedPartitionSchema = StructType(Seq(StructField(\"p\", IntegerType, true)))\n+      assert(table.fileIndex.partitionSchema ==  expectedPartitionSchema)\n+    }\n+  }\n+\n+  test(\"Returns correct data schema when user specified schema contains partition schema\") {",
    "line": 69
  }],
  "prId": 24203
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. additional space after `==`.",
    "commit": "4ca742d60f402392609886adcd67d8318a110f8a",
    "createdAt": "2019-03-26T06:10:35Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.execution.datasources.v2\n+\n+import scala.collection.JavaConverters._\n+\n+import org.apache.hadoop.fs.FileStatus\n+\n+import org.apache.spark.sql.{QueryTest, SparkSession}\n+import org.apache.spark.sql.sources.v2.reader.ScanBuilder\n+import org.apache.spark.sql.sources.v2.writer.WriteBuilder\n+import org.apache.spark.sql.test.{SharedSQLContext, SQLTestUtils}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class DummyFileTable(\n+    sparkSession: SparkSession,\n+    options: CaseInsensitiveStringMap,\n+    paths: Seq[String],\n+    expectedDataSchema: StructType,\n+    userSpecifiedSchema: Option[StructType])\n+  extends FileTable(sparkSession, options, paths, userSpecifiedSchema) {\n+  override def inferSchema(files: Seq[FileStatus]): Option[StructType] = Some(expectedDataSchema)\n+\n+  override def name(): String = \"Dummy\"\n+\n+  override def formatName: String = \"Dummy\"\n+\n+  override def newScanBuilder(options: CaseInsensitiveStringMap): ScanBuilder = null\n+\n+  override def newWriteBuilder(options: CaseInsensitiveStringMap): WriteBuilder = null\n+\n+  override def supportsDataType(dataType: DataType): Boolean = dataType == StringType\n+}\n+\n+class FileTableSuite extends QueryTest with SharedSQLContext with SQLTestUtils {\n+\n+  test(\"Data type validation should check data schema only\") {\n+    withTempPath { dir =>\n+      val df = spark.createDataFrame(Seq((\"a\", 1), (\"b\", 2))).toDF(\"v\", \"p\")\n+      val pathName = dir.getCanonicalPath\n+      df.write.partitionBy(\"p\").text(pathName)\n+      val options = new CaseInsensitiveStringMap(Map(\"path\" -> pathName).asJava)\n+      val expectedDataSchema = StructType(Seq(StructField(\"v\", StringType, true)))\n+      // DummyFileTable doesn't support Integer data type.\n+      // However, the partition schema is handled by Spark, so it is allowed to contain\n+      // Integer data type here.\n+      val table = new DummyFileTable(spark, options, Seq(pathName), expectedDataSchema, None)\n+      assert(table.dataSchema == expectedDataSchema)\n+      val expectedPartitionSchema = StructType(Seq(StructField(\"p\", IntegerType, true)))\n+      assert(table.fileIndex.partitionSchema ==  expectedPartitionSchema)"
  }],
  "prId": 24203
}]