[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "I thought we don't need this based on the @cloud-fan suggestion: https://github.com/apache/spark/pull/26599#issuecomment-555855696 ?\r\nIn that case, we need to throw an analysis exception for unsupported types?",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T12:06:32Z",
    "diffHunk": "@@ -277,4 +279,12 @@ class UserDefinedTypeSuite extends QueryTest with SharedSparkSession with Parque\n     val udt = new TestUDT.MyDenseVectorUDT()\n     assert(!Cast.canUpCast(udt, StringType))\n   }\n+\n+  test(\"SPARK-29961 typeof user defined type\") {\n+    val schema = new StructType().add(\"a\", new TestUDT.MyDenseVectorUDT())\n+    val data = Arrays.asList(\n+      RowFactory.create(new TestUDT.MyDenseVector(Array(1.0, 3.0, 5.0, 7.0, 9.0))))\n+    checkAnswer(spark.createDataFrame(data, schema).selectExpr(\"typeof(a)\"),\n+      Seq(Row(\"array<double>\")))",
    "line": 19
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "Spark contributors also can benefit from this function. I suggest we make it support for `udt`s . WDYT? @cloud-fan",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T12:13:04Z",
    "diffHunk": "@@ -277,4 +279,12 @@ class UserDefinedTypeSuite extends QueryTest with SharedSparkSession with Parque\n     val udt = new TestUDT.MyDenseVectorUDT()\n     assert(!Cast.canUpCast(udt, StringType))\n   }\n+\n+  test(\"SPARK-29961 typeof user defined type\") {\n+    val schema = new StructType().add(\"a\", new TestUDT.MyDenseVectorUDT())\n+    val data = Arrays.asList(\n+      RowFactory.create(new TestUDT.MyDenseVector(Array(1.0, 3.0, 5.0, 7.0, 9.0))))\n+    checkAnswer(spark.createDataFrame(data, schema).selectExpr(\"typeof(a)\"),\n+      Seq(Row(\"array<double>\")))",
    "line": 19
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "If we do want to support it, I think we should output `MyDenseVectorUDT` instead of `array<double>`",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T13:20:40Z",
    "diffHunk": "@@ -277,4 +279,12 @@ class UserDefinedTypeSuite extends QueryTest with SharedSparkSession with Parque\n     val udt = new TestUDT.MyDenseVectorUDT()\n     assert(!Cast.canUpCast(udt, StringType))\n   }\n+\n+  test(\"SPARK-29961 typeof user defined type\") {\n+    val schema = new StructType().add(\"a\", new TestUDT.MyDenseVectorUDT())\n+    val data = Arrays.asList(\n+      RowFactory.create(new TestUDT.MyDenseVector(Array(1.0, 3.0, 5.0, 7.0, 9.0))))\n+    checkAnswer(spark.createDataFrame(data, schema).selectExpr(\"typeof(a)\"),\n+      Seq(Row(\"array<double>\")))",
    "line": 19
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "this is base on how we overwrite the `sqlType` or `catalogString` of UDTs, it is `sqlType.simpleString` by default",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T13:37:30Z",
    "diffHunk": "@@ -277,4 +279,12 @@ class UserDefinedTypeSuite extends QueryTest with SharedSparkSession with Parque\n     val udt = new TestUDT.MyDenseVectorUDT()\n     assert(!Cast.canUpCast(udt, StringType))\n   }\n+\n+  test(\"SPARK-29961 typeof user defined type\") {\n+    val schema = new StructType().add(\"a\", new TestUDT.MyDenseVectorUDT())\n+    val data = Arrays.asList(\n+      RowFactory.create(new TestUDT.MyDenseVector(Array(1.0, 3.0, 5.0, 7.0, 9.0))))\n+    checkAnswer(spark.createDataFrame(data, schema).selectExpr(\"typeof(a)\"),\n+      Seq(Row(\"array<double>\")))",
    "line": 19
  }],
  "prId": 26599
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "You don't need `SPARK-29961` in the prefix: https://github.com/apache/spark-website/commit/d7aa99e926e3748928e2ddc244369518dad3216b",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T12:09:54Z",
    "diffHunk": "@@ -277,4 +279,12 @@ class UserDefinedTypeSuite extends QueryTest with SharedSparkSession with Parque\n     val udt = new TestUDT.MyDenseVectorUDT()\n     assert(!Cast.canUpCast(udt, StringType))\n   }\n+\n+  test(\"SPARK-29961 typeof user defined type\") {"
  }],
  "prId": 26599
}]