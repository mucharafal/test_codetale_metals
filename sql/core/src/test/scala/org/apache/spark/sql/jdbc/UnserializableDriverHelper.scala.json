[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "`oldDrivers.foreach(DriverManager.deregisterDriver)`. Do you need `toSeq` above?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-10T09:57:35Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\")).toSeq\n+    oldDrivers.foreach{"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "IMHO not if the previous line has `toSeq`, should I refactor to make it obvious?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T02:41:34Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\")).toSeq\n+    oldDrivers.foreach{"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "`asScala` should already make a `Seq`. You'll also probably want to just write `oldDrivers.foreach(DriverManager.deregisterDriver)` as I don't know if this will pass style checks (?) I think there's still the try-finally issue below.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T13:10:28Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\")).toSeq\n+    oldDrivers.foreach{"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Pull this up to the previous line. Same comment about foreach below.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-10T09:57:56Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\")).toSeq\n+    oldDrivers.foreach{\n+      DriverManager.deregisterDriver\n+    }\n+    DriverManager.registerDriver(UnserializableH2Driver)\n+\n+    val result = try {\n+      f\n+    }\n+    finally {"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "same as before\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-16T02:42:31Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\")).toSeq\n+    oldDrivers.foreach{\n+      DriverManager.deregisterDriver\n+    }\n+    DriverManager.registerDriver(UnserializableH2Driver)\n+\n+    val result = try {\n+      f\n+    }\n+    finally {"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This still isn't normal try-finally formatting\n\n```\ntry {\n\n} finally {\n\n}\n```\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-21T21:35:22Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))\n+    oldDrivers.foreach{ DriverManager.deregisterDriver }\n+    DriverManager.registerDriver(UnserializableH2Driver)\n+\n+    val result = try { f }\n+    finally {"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Yes, fixing try-finally formatting\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T02:14:41Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))\n+    oldDrivers.foreach{ DriverManager.deregisterDriver }\n+    DriverManager.registerDriver(UnserializableH2Driver)\n+\n+    val result = try { f }\n+    finally {"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "It's not necessary to make this local\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-21T21:35:39Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Yes, promoting to under object\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T02:05:30Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Still not right w.r.t spaces: `foo.foreach(bar)`\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-21T21:36:04Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))\n+    oldDrivers.foreach{ DriverManager.deregisterDriver }"
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Yes, both foreach are made one line\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T02:06:05Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    import scala.collection.JavaConverters._\n+\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))\n+    oldDrivers.foreach{ DriverManager.deregisterDriver }"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This is imported locally in  a few places, why? Below you don't import org.h2.Driver though. I'm not worried about changing it though.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T10:28:35Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "Patches should target specific problem and minimize collateral impact. No? Then I won't import utility package in upcoming pull requests.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T16:29:08Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I meant why is it imported inside the object scope rather than with other imports -- the use of the converters is fine and important. There are some special cases where qualified name or local imports are needed but I think by convention, the strong default is to declare all of them at the top of the compilation unit, especially fairly common ones.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-28T17:18:41Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }, {
    "author": {
      "login": "tribbloid"
    },
    "body": "OK, I was under the false impression that import of implicits may cause conflicts. But in a well designed library this rarely happens\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2015-12-30T22:33:09Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "That's a reasonable argument, though we have imported this set of implicits widely elsewhere in the code\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-01T15:53:13Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "Please move this import to the top; the arguments RE: scope of implicits are different on a case-by-case basis, but JavaConverters is a case that should pretty much always be safe to put in a somewhat global scope.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:46:41Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._",
    "line": 26
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "I'd add an explicit `.toSeq` at the end; what's probably happening is that this is becoming a one-shot scala iterator, which is causing the finally block to not re-register the old drivers.\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:48:11Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))"
  }],
  "prId": 8785
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Should probably be inside of the `try` block, no?\n",
    "commit": "996dc69bb6ec31d3d2d1e65ab7ec2abf238ac882",
    "createdAt": "2016-01-04T09:48:29Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.sql.{DriverManager, Connection}\n+import java.util.Properties\n+import java.util.logging.Logger\n+\n+object UnserializableDriverHelper {\n+\n+  import scala.collection.JavaConverters._\n+\n+  def replaceDriverDuring[T](f: => T): T = {\n+    object UnserializableH2Driver extends org.h2.Driver {\n+\n+      override def connect(url: String, info: Properties): Connection = {\n+\n+        val result = super.connect(url, info)\n+        info.put(\"unserializableDriver\", this)\n+        result\n+      }\n+\n+      override def getParentLogger: Logger = null\n+    }\n+\n+    val oldDrivers = DriverManager.getDrivers.asScala.filter(_.acceptsURL(\"jdbc:h2:\"))\n+    oldDrivers.foreach(DriverManager.deregisterDriver)\n+    DriverManager.registerDriver(UnserializableH2Driver)"
  }],
  "prId": 8785
}]