[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "I'd add a function to unify the assertion:\r\n\r\n```\r\n    def assertStore(activeQueryNames: Seq[String], inactiveQueryNames: Seq[String]): Unit = {\r\n      assert(store.allStreamQueries.size === activeQueryNames.length + inactiveQueryNames.length)\r\n      assert(store.allStreamQueries.map(_._1.name).toSet ===\r\n        (activeQueryNames ++ inactiveQueryNames).toSet)\r\n      assert(store.allStreamQueries.count(_._1.isActive) === activeQueryNames.length)\r\n      assert(store.allStreamQueries.count(!_._1.isActive) === inactiveQueryNames.length)\r\n    }\r\n```\r\n\r\nwith this function, all assertions below can be one-liner.",
    "commit": "6de18cc2e20bd8ef0167a52c869c7706f67014a2",
    "createdAt": "2019-11-20T08:46:32Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming\n+\n+import java.util.UUID\n+\n+import org.mockito.Mockito.{mock, when, RETURNS_SMART_NULLS}\n+import org.scalatest.Matchers\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.execution.streaming.StreamQueryStore\n+\n+class StreamQueryStoreSuite extends SparkFunSuite with Matchers {\n+  test(\"cache streaming query\") {\n+    val store = new StreamQueryStore\n+    val query1 = mock(classOf[StreamingQuery], RETURNS_SMART_NULLS)\n+    val query2 = mock(classOf[StreamingQuery], RETURNS_SMART_NULLS)\n+    val id1 = UUID.randomUUID()\n+    when(query1.id).thenReturn(id1)\n+    when(query2.id).thenReturn(id1)\n+    when(query1.name).thenReturn(\"query1\")\n+    when(query2.name).thenReturn(\"query2\")\n+    when(query1.isActive).thenReturn(true)\n+    when(query2.isActive).thenReturn(true)\n+    store.putIfAbsent(query1)\n+    store.putIfAbsent(query2)\n+\n+    assert(store.allStreamQueries.size === 1)"
  }],
  "prId": 26201
}]