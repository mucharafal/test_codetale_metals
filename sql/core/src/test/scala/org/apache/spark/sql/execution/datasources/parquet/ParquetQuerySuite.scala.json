[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Is this a valid way to control this configuration? It seems to pass with `false`, too.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-12T17:40:05Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This is the default, so it is possible that it isn't getting passed to Parquet correctly. I can debug it at some point to find out why it passes with `false`. I did make sure that the test case fails without the fix, so we know it should be correctly using dictionary filtering. Well, that or there were other cases that had the same problem and this hits one of those.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-13T18:16:19Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "If there is someone who leads this correctly, it's you, @rdblue . :)\r\n\r\nI knew that this is the default of parquet. With the patch of `SpecificParquetRecordReaderBase.java` or not, we should not add `no-op` invalid conf line like `withSQLConf` here. It's misleading for the whole Spark community for the future. Please debug and add the correct test case here.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-13T20:58:21Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think this is misleading. The dictionary filter needs to be on and there's no guarantee from Parquet that the default will continue to be true.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-22T00:25:06Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "That was my point, too. This configuration is needed, but this code doesn't do anything for that. To use this configuration correctly, we need to fix it first. We should not have no-op code like this.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-22T15:57:36Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "We are unable to pass the parquet-specific parameter through `withSQLConf`. Below shows the way to pass the parquet option.  \r\n\r\n```Scala\r\n    withTable(\"t1\") {\r\n      spark.createDataFrame((0 until 100).map(i => ((i * 2) % 20, s\"data-$i\"))).write\r\n        .option(\"parquet.filter.dictionary.enabled\", false).saveAsTable(\"t1\")\r\n      checkAnswer(sql(\"SELECT _2 FROM t1 WHERE t1._1 = 5\"), Seq.empty)\r\n    }\r\n```\r\n\r\nCould you help investigate why we still hit the error [without the fix] when we set `parquet.filter.dictionary.enabled` to `false`? ",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-22T22:47:53Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "using SQLConf is OK, Spark will put all SQL configs to Hadoop conf, which will be accessed by parquet writer at the executor side.\r\n\r\nI'm also curious about why turning `parquet.filter.dictionary.enabled` off can't avoid this bug.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-23T13:44:26Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Looks like the problem is a bug in Parquet. It is using the [stats property instead of the dictionary property](https://github.com/apache/parquet-mr/blob/8bbc6cb95fd9b4b9e86c924ca1e40fd555ecac1d/parquet-hadoop/src/main/java/org/apache/parquet/HadoopReadOptions.java#L83). This is minor because there is almost no reason to turn either one off now that we've built more confidence in the filters.",
    "commit": "497bdd8fc581f3c40ae97eb56d0a5f65e7d42405",
    "createdAt": "2018-05-23T19:51:04Z",
    "diffHunk": "@@ -879,6 +879,18 @@ class ParquetQuerySuite extends QueryTest with ParquetTest with SharedSQLContext\n       }\n     }\n   }\n+\n+  test(\"SPARK-24230: filter row group using dictionary\") {\n+    withSQLConf((\"parquet.filter.dictionary.enabled\", \"true\")) {",
    "line": 6
  }],
  "prId": 21295
}]