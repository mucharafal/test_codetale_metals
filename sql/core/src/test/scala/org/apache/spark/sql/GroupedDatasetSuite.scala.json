[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`withinLevel`? From the test code, seems it doesn't expect a barrier exactly at the level but within the level?",
    "commit": "68e398dcc60d1cd3f4871369149f23f607789a4e",
    "createdAt": "2018-05-27T01:59:54Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.Assertion\n+\n+import org.apache.spark.api.python.PythonEvalType\n+import org.apache.spark.sql.catalyst.expressions.PythonUDF\n+import org.apache.spark.sql.catalyst.plans.logical.AnalysisBarrier\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+\n+class GroupedDatasetSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  private val scalaUDF = udf((x: Long) => { x + 1 })\n+  private lazy val datasetWithUDF = spark.range(1).toDF(\"s\").select($\"s\", scalaUDF($\"s\"))\n+\n+  private def assertContainsAnalysisBarrier(ds: Dataset[_], atLevel: Int = 1): Assertion = {"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "Indeed, it expects a barrier exactly at level `atLevel` and not within. May you please recheck the code?",
    "commit": "68e398dcc60d1cd3f4871369149f23f607789a4e",
    "createdAt": "2018-05-27T08:19:05Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.Assertion\n+\n+import org.apache.spark.api.python.PythonEvalType\n+import org.apache.spark.sql.catalyst.expressions.PythonUDF\n+import org.apache.spark.sql.catalyst.plans.logical.AnalysisBarrier\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+\n+class GroupedDatasetSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  private val scalaUDF = udf((x: Long) => { x + 1 })\n+  private lazy val datasetWithUDF = spark.range(1).toDF(\"s\").select($\"s\", scalaUDF($\"s\"))\n+\n+  private def assertContainsAnalysisBarrier(ds: Dataset[_], atLevel: Int = 1): Assertion = {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Oh, I see. Sorry, you only take `children` at the level. Thanks.",
    "commit": "68e398dcc60d1cd3f4871369149f23f607789a4e",
    "createdAt": "2018-05-27T08:22:09Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.Assertion\n+\n+import org.apache.spark.api.python.PythonEvalType\n+import org.apache.spark.sql.catalyst.expressions.PythonUDF\n+import org.apache.spark.sql.catalyst.plans.logical.AnalysisBarrier\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+\n+class GroupedDatasetSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  private val scalaUDF = udf((x: Long) => { x + 1 })\n+  private lazy val datasetWithUDF = spark.range(1).toDF(\"s\").select($\"s\", scalaUDF($\"s\"))\n+\n+  private def assertContainsAnalysisBarrier(ds: Dataset[_], atLevel: Int = 1): Assertion = {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "nit: Is the returned `Assertion` here necessary?",
    "commit": "68e398dcc60d1cd3f4871369149f23f607789a4e",
    "createdAt": "2018-05-27T08:41:27Z",
    "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.Assertion\n+\n+import org.apache.spark.api.python.PythonEvalType\n+import org.apache.spark.sql.catalyst.expressions.PythonUDF\n+import org.apache.spark.sql.catalyst.plans.logical.AnalysisBarrier\n+import org.apache.spark.sql.functions.udf\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.sql.types.{LongType, StructField, StructType}\n+\n+class GroupedDatasetSuite extends QueryTest with SharedSQLContext {\n+  import testImplicits._\n+\n+  private val scalaUDF = udf((x: Long) => { x + 1 })\n+  private lazy val datasetWithUDF = spark.range(1).toDF(\"s\").select($\"s\", scalaUDF($\"s\"))\n+\n+  private def assertContainsAnalysisBarrier(ds: Dataset[_], atLevel: Int = 1): Assertion = {"
  }],
  "prId": 21432
}]