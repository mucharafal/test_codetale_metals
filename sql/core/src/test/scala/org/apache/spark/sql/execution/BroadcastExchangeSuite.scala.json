[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why doing prepend? Shall we call `jobEvents :+= jobEnd` which does append?",
    "commit": "5d82dd7aad830d36e24f9943f9d566fbc70b93aa",
    "createdAt": "2019-05-14T09:20:44Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.util.concurrent.{CountDownLatch, TimeUnit}\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler._\n+import org.apache.spark.sql.execution.exchange.BroadcastExchangeExec\n+import org.apache.spark.sql.execution.joins.HashedRelation\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class BroadcastExchangeSuite extends SparkPlanTest with SharedSQLContext {\n+\n+  import testImplicits._\n+\n+  test(\"BroadcastExchange should cancel the job group if timeout\") {\n+    val startLatch = new CountDownLatch(1)\n+    val endLatch = new CountDownLatch(1)\n+    var jobEvents: Seq[SparkListenerEvent] = Seq.empty[SparkListenerEvent]\n+    spark.sparkContext.addSparkListener(new SparkListener {\n+      override def onJobEnd(jobEnd: SparkListenerJobEnd): Unit = {\n+        jobEvents +:= jobEnd"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "updated",
    "commit": "5d82dd7aad830d36e24f9943f9d566fbc70b93aa",
    "createdAt": "2019-05-14T23:25:03Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution\n+\n+import java.util.concurrent.{CountDownLatch, TimeUnit}\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.scheduler._\n+import org.apache.spark.sql.execution.exchange.BroadcastExchangeExec\n+import org.apache.spark.sql.execution.joins.HashedRelation\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+class BroadcastExchangeSuite extends SparkPlanTest with SharedSQLContext {\n+\n+  import testImplicits._\n+\n+  test(\"BroadcastExchange should cancel the job group if timeout\") {\n+    val startLatch = new CountDownLatch(1)\n+    val endLatch = new CountDownLatch(1)\n+    var jobEvents: Seq[SparkListenerEvent] = Seq.empty[SparkListenerEvent]\n+    spark.sparkContext.addSparkListener(new SparkListener {\n+      override def onJobEnd(jobEnd: SparkListenerJobEnd): Unit = {\n+        jobEvents +:= jobEnd"
  }],
  "prId": 24595
}]