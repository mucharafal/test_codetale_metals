[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "mhm the indentation is really weird - i don't think we need to indent each line with one more level ...\n",
    "commit": "e832f5ba8be965e75107697fcfacc623572eb751",
    "createdAt": "2016-07-09T21:05:37Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.systemcatalog\n+\n+import org.apache.spark.sql.{QueryTest, Row}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Information Schema Suite\n+ */\n+class InformationSchemaSuite extends QueryTest with SharedSQLContext {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    InformationSchema.build(spark)\n+    sql(\"CREATE TABLE s(a int, b double)\")\n+    sql(\"CREATE TABLE t(c int, d double)\")\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      sql(\"DROP TABLE IF EXISTS t\")\n+      sql(\"DROP TABLE IF EXISTS s\")\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"databases/schemata scan\") {\n+    checkAnswer(\n+      sql(\"select * from databases\"),\n+      Row(\"default\", \"default\") :: Row(\"default\", \"information_schema\") :: Nil)\n+\n+    checkAnswer(\n+      sql(\"select * from schemata\"),\n+      Row(\"default\", \"default\") :: Row(\"default\", \"information_schema\") :: Nil)\n+  }\n+\n+  test(\"databases/schemata project\") {\n+    checkAnswer(\n+      sql(\"select SCHEMA_NAME from databases\"),\n+      Row(\"default\") :: Row(\"information_schema\") :: Nil)\n+\n+    checkAnswer(\n+      sql(\"select SCHEMA_NAME from schemata\"),\n+      Row(\"default\") :: Row(\"information_schema\") :: Nil)\n+  }\n+\n+  test(\"tables scan\") {\n+    checkAnswer(\n+      sql(\"select * from tables\"),\n+      Row(\"default\", \"default\", \"columns\", \"VIEW\") ::"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep.\n",
    "commit": "e832f5ba8be965e75107697fcfacc623572eb751",
    "createdAt": "2016-07-09T21:35:11Z",
    "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.systemcatalog\n+\n+import org.apache.spark.sql.{QueryTest, Row}\n+import org.apache.spark.sql.test.SharedSQLContext\n+\n+/**\n+ * Information Schema Suite\n+ */\n+class InformationSchemaSuite extends QueryTest with SharedSQLContext {\n+  override def beforeAll(): Unit = {\n+    super.beforeAll()\n+    InformationSchema.build(spark)\n+    sql(\"CREATE TABLE s(a int, b double)\")\n+    sql(\"CREATE TABLE t(c int, d double)\")\n+  }\n+\n+  override def afterAll(): Unit = {\n+    try {\n+      sql(\"DROP TABLE IF EXISTS t\")\n+      sql(\"DROP TABLE IF EXISTS s\")\n+    } finally {\n+      super.afterAll()\n+    }\n+  }\n+\n+  test(\"databases/schemata scan\") {\n+    checkAnswer(\n+      sql(\"select * from databases\"),\n+      Row(\"default\", \"default\") :: Row(\"default\", \"information_schema\") :: Nil)\n+\n+    checkAnswer(\n+      sql(\"select * from schemata\"),\n+      Row(\"default\", \"default\") :: Row(\"default\", \"information_schema\") :: Nil)\n+  }\n+\n+  test(\"databases/schemata project\") {\n+    checkAnswer(\n+      sql(\"select SCHEMA_NAME from databases\"),\n+      Row(\"default\") :: Row(\"information_schema\") :: Nil)\n+\n+    checkAnswer(\n+      sql(\"select SCHEMA_NAME from schemata\"),\n+      Row(\"default\") :: Row(\"information_schema\") :: Nil)\n+  }\n+\n+  test(\"tables scan\") {\n+    checkAnswer(\n+      sql(\"select * from tables\"),\n+      Row(\"default\", \"default\", \"columns\", \"VIEW\") ::"
  }],
  "prId": 14116
}]