[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Maybe, `\"\"\" ... \"\"\"` if more commits should be pushed.",
    "commit": "6d164740a6434b80d3559d72deca09729835e273",
    "createdAt": "2017-02-18T12:14:44Z",
    "diffHunk": "@@ -174,4 +174,44 @@ class JsonFunctionsSuite extends QueryTest with SharedSQLContext {\n       .select(to_json($\"struct\").as(\"json\"))\n     checkAnswer(dfTwo, readBackTwo)\n   }\n+\n+  test(\"SPARK-19637 Support to_json/from_json in SQL\") {\n+    // to_json\n+    val df1 = Seq(Tuple1(Tuple1(1))).toDF(\"a\")\n+    checkAnswer(\n+      df1.selectExpr(\"to_json(a)\"),\n+      Row(\"\"\"{\"_1\":1}\"\"\") :: Nil)\n+\n+    val df2 = Seq(Tuple1(Tuple1(java.sql.Timestamp.valueOf(\"2015-08-26 18:00:00.0\")))).toDF(\"a\")\n+    checkAnswer(\n+      df2.selectExpr(\"\"\"to_json(a, '{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),\n+      Row(\"\"\"{\"_1\":\"26/08/2015 18:00\"}\"\"\") :: Nil)\n+\n+    val errMsg1 = intercept[AnalysisException] {\n+      df2.selectExpr(\"\"\"to_json(a, '{\"k\": [{\"k\": \"v\"}]}')\"\"\").collect\n+    }\n+    assert(errMsg1.getMessage.startsWith(\n+      \"The format must be '{\\\"key\\\": \\\"value\\\", ...}', but {\\\"k\\\": [{\\\"k\\\": \\\"v\\\"}]}\"))"
  }],
  "prId": 16981
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Regarding the format of options, another way is to use the MapType.\r\n\r\nFor example, \r\n```Scala\r\nfrom_json(value, '${schema2.json}', map(\"timestampFormat\", \"dd/MM/yyyy HH:mm\"))\r\n```\r\n\r\nI am not sure whether using JSON to represent options is a good way.",
    "commit": "6d164740a6434b80d3559d72deca09729835e273",
    "createdAt": "2017-02-20T05:07:26Z",
    "diffHunk": "@@ -174,4 +174,44 @@ class JsonFunctionsSuite extends QueryTest with SharedSQLContext {\n       .select(to_json($\"struct\").as(\"json\"))\n     checkAnswer(dfTwo, readBackTwo)\n   }\n+\n+  test(\"SPARK-19637 Support to_json/from_json in SQL\") {\n+    // to_json\n+    val df1 = Seq(Tuple1(Tuple1(1))).toDF(\"a\")\n+    checkAnswer(\n+      df1.selectExpr(\"to_json(a)\"),\n+      Row(\"\"\"{\"_1\":1}\"\"\") :: Nil)\n+\n+    val df2 = Seq(Tuple1(Tuple1(java.sql.Timestamp.valueOf(\"2015-08-26 18:00:00.0\")))).toDF(\"a\")\n+    checkAnswer(\n+      df2.selectExpr(\"\"\"to_json(a, '{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),\n+      Row(\"\"\"{\"_1\":\"26/08/2015 18:00\"}\"\"\") :: Nil)\n+\n+    val errMsg1 = intercept[AnalysisException] {\n+      df2.selectExpr(\"\"\"to_json(a, '{\"k\": [{\"k\": \"v\"}]}')\"\"\").collect\n+    }\n+    assert(errMsg1.getMessage.startsWith(\n+      \"\"\"The format must be '{\"key\": \"value\", ...}', but {\"k\": [{\"k\": \"v\"}]}\"\"\"))\n+\n+    // from_json\n+    val df3 = Seq(\"\"\"{\"a\": 1}\"\"\").toDS()\n+    val schema1 = new StructType().add(\"a\", IntegerType)\n+    checkAnswer(\n+      df3.selectExpr(s\"from_json(value, '${schema1.json}')\"),\n+      Row(Row(1)) :: Nil)\n+\n+    val df4 = Seq(\"\"\"{\"time\": \"26/08/2015 18:00\"}\"\"\").toDS()\n+    val schema2 = new StructType().add(\"time\", TimestampType)\n+    checkAnswer(\n+      df4.selectExpr(\n+        s\"\"\"from_json(value, '${schema2.json}', \"\"\" +\n+           \"\"\"'{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "okay, I'll fix in that way.",
    "commit": "6d164740a6434b80d3559d72deca09729835e273",
    "createdAt": "2017-02-20T05:36:28Z",
    "diffHunk": "@@ -174,4 +174,44 @@ class JsonFunctionsSuite extends QueryTest with SharedSQLContext {\n       .select(to_json($\"struct\").as(\"json\"))\n     checkAnswer(dfTwo, readBackTwo)\n   }\n+\n+  test(\"SPARK-19637 Support to_json/from_json in SQL\") {\n+    // to_json\n+    val df1 = Seq(Tuple1(Tuple1(1))).toDF(\"a\")\n+    checkAnswer(\n+      df1.selectExpr(\"to_json(a)\"),\n+      Row(\"\"\"{\"_1\":1}\"\"\") :: Nil)\n+\n+    val df2 = Seq(Tuple1(Tuple1(java.sql.Timestamp.valueOf(\"2015-08-26 18:00:00.0\")))).toDF(\"a\")\n+    checkAnswer(\n+      df2.selectExpr(\"\"\"to_json(a, '{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),\n+      Row(\"\"\"{\"_1\":\"26/08/2015 18:00\"}\"\"\") :: Nil)\n+\n+    val errMsg1 = intercept[AnalysisException] {\n+      df2.selectExpr(\"\"\"to_json(a, '{\"k\": [{\"k\": \"v\"}]}')\"\"\").collect\n+    }\n+    assert(errMsg1.getMessage.startsWith(\n+      \"\"\"The format must be '{\"key\": \"value\", ...}', but {\"k\": [{\"k\": \"v\"}]}\"\"\"))\n+\n+    // from_json\n+    val df3 = Seq(\"\"\"{\"a\": 1}\"\"\").toDS()\n+    val schema1 = new StructType().add(\"a\", IntegerType)\n+    checkAnswer(\n+      df3.selectExpr(s\"from_json(value, '${schema1.json}')\"),\n+      Row(Row(1)) :: Nil)\n+\n+    val df4 = Seq(\"\"\"{\"time\": \"26/08/2015 18:00\"}\"\"\").toDS()\n+    val schema2 = new StructType().add(\"time\", TimestampType)\n+    checkAnswer(\n+      df4.selectExpr(\n+        s\"\"\"from_json(value, '${schema2.json}', \"\"\" +\n+           \"\"\"'{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),"
  }],
  "prId": 16981
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`collect ` is not needed",
    "commit": "6d164740a6434b80d3559d72deca09729835e273",
    "createdAt": "2017-02-20T05:10:43Z",
    "diffHunk": "@@ -174,4 +174,44 @@ class JsonFunctionsSuite extends QueryTest with SharedSQLContext {\n       .select(to_json($\"struct\").as(\"json\"))\n     checkAnswer(dfTwo, readBackTwo)\n   }\n+\n+  test(\"SPARK-19637 Support to_json/from_json in SQL\") {\n+    // to_json\n+    val df1 = Seq(Tuple1(Tuple1(1))).toDF(\"a\")\n+    checkAnswer(\n+      df1.selectExpr(\"to_json(a)\"),\n+      Row(\"\"\"{\"_1\":1}\"\"\") :: Nil)\n+\n+    val df2 = Seq(Tuple1(Tuple1(java.sql.Timestamp.valueOf(\"2015-08-26 18:00:00.0\")))).toDF(\"a\")\n+    checkAnswer(\n+      df2.selectExpr(\"\"\"to_json(a, '{\"timestampFormat\": \"dd/MM/yyyy HH:mm\"}')\"\"\"),\n+      Row(\"\"\"{\"_1\":\"26/08/2015 18:00\"}\"\"\") :: Nil)\n+\n+    val errMsg1 = intercept[AnalysisException] {\n+      df2.selectExpr(\"\"\"to_json(a, '{\"k\": [{\"k\": \"v\"}]}')\"\"\").collect"
  }],
  "prId": 16981
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: remove this comment.",
    "commit": "6d164740a6434b80d3559d72deca09729835e273",
    "createdAt": "2017-03-03T05:32:16Z",
    "diffHunk": "@@ -174,4 +174,22 @@ class JsonFunctionsSuite extends QueryTest with SharedSQLContext {\n       .select(to_json($\"struct\").as(\"json\"))\n     checkAnswer(dfTwo, readBackTwo)\n   }\n+\n+  test(\"SPARK-19637 Support to_json in SQL\") {\n+    // to_json"
  }],
  "prId": 16981
}]