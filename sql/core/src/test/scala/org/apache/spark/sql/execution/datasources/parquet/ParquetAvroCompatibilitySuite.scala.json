[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Could we revert this newline?",
    "commit": "27ac6af30cde9cd596929ab8fd076c9b41287384",
    "createdAt": "2019-08-12T20:52:52Z",
    "diffHunk": "@@ -62,12 +70,12 @@ class ParquetAvroCompatibilitySuite extends ParquetCompatibilityTest with Shared\n               .setDoubleColumn(i.toDouble + 0.2d)\n               .setBinaryColumn(ByteBuffer.wrap(s\"val_$i\".getBytes(StandardCharsets.UTF_8)))\n               .setStringColumn(s\"val_$i\")\n+              .setFixedColumn(new FixedType(generateFixedLengthByteArray(i)))\n               .build())\n         }\n       }\n \n       logParquetSchema(path)\n-",
    "line": 25
  }],
  "prId": 20826
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "I think this only tests against `spark.sql.parquet.enableVectorizedReader` is true (default), should we test non-vectorized reader too?",
    "commit": "27ac6af30cde9cd596929ab8fd076c9b41287384",
    "createdAt": "2019-08-12T21:27:39Z",
    "diffHunk": "@@ -62,12 +70,12 @@ class ParquetAvroCompatibilitySuite extends ParquetCompatibilityTest with Shared\n               .setDoubleColumn(i.toDouble + 0.2d)\n               .setBinaryColumn(ByteBuffer.wrap(s\"val_$i\".getBytes(StandardCharsets.UTF_8)))\n               .setStringColumn(s\"val_$i\")\n+              .setFixedColumn(new FixedType(generateFixedLengthByteArray(i)))\n               .build())\n         }\n       }\n \n       logParquetSchema(path)\n-\n       checkAnswer(spark.read.parquet(path), (0 until 10).map { i =>",
    "line": 26
  }],
  "prId": 20826
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit `s` seems not needed",
    "commit": "27ac6af30cde9cd596929ab8fd076c9b41287384",
    "createdAt": "2019-08-14T01:40:11Z",
    "diffHunk": "@@ -47,6 +47,14 @@ class ParquetAvroCompatibilitySuite extends ParquetCompatibilityTest with Shared\n     try f(writer) finally writer.close()\n   }\n \n+  private def generateFixedLengthByteArray(i : Int): Array[Byte] = {\n+    val fixedLengthByteArray = Array[Byte](0, 0, 0, 0, 0, 0, 0, 0)\n+    val fixedLengthByteArrayComponent = s\"val_$i\".getBytes(StandardCharsets.UTF_8)",
    "line": 6
  }],
  "prId": 20826
}]