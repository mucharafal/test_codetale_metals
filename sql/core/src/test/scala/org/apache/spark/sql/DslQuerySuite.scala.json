[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Nit: This can just be `Literal(null)`\n",
    "commit": "07700cf5dabaa54ae879c3d09b030d0c6e622860",
    "createdAt": "2014-12-02T00:08:14Z",
    "diffHunk": "@@ -282,4 +283,72 @@ class DslQuerySuite extends QueryTest {\n       (1, \"1\", \"11\") :: (2, \"2\", \"22\") :: (3, \"3\", \"33\") :: Nil\n     )\n   }\n+\n+  test(\"sqrt\") {\n+    checkAnswer(\n+      testData.select(sqrt('key)).orderBy('key asc),\n+      (1 to 100).map(n => Seq(math.sqrt(n)))\n+    )\n+\n+    checkAnswer(\n+      testData.select(sqrt('value), 'key).orderBy('key asc, 'value asc),\n+      (1 to 100).map(n => Seq(math.sqrt(n), n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(sqrt(Literal(null, NullType))),\n+      (1 to 100).map(_ => Seq(null))\n+    )\n+  }\n+\n+  test(\"abs\") {\n+    checkAnswer(\n+      testData.select(abs('key)).orderBy('key asc),\n+      (1 to 100).map(n => Seq(n))\n+    )\n+\n+    checkAnswer(\n+      negativeData.select(abs('key)).orderBy('key desc),\n+      (1 to 100).map(n => Seq(n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(abs(Literal(null, NullType))),\n+      (1 to 100).map(_ => Seq(null))\n+    )\n+  }\n+\n+  test(\"upper\") {\n+    checkAnswer(\n+      lowerCaseData.select(upper('l)),\n+      ('a' to 'd').map(c => Seq(c.toString.toUpperCase()))\n+    )\n+\n+    checkAnswer(\n+      testData.select(upper('value), 'key),\n+      (1 to 100).map(n => Seq(n.toString, n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(upper(Literal(null, NullType))),"
  }, {
    "author": {
      "login": "sarutak"
    },
    "body": "Thanks! I've modified.\n",
    "commit": "07700cf5dabaa54ae879c3d09b030d0c6e622860",
    "createdAt": "2014-12-02T01:52:43Z",
    "diffHunk": "@@ -282,4 +283,72 @@ class DslQuerySuite extends QueryTest {\n       (1, \"1\", \"11\") :: (2, \"2\", \"22\") :: (3, \"3\", \"33\") :: Nil\n     )\n   }\n+\n+  test(\"sqrt\") {\n+    checkAnswer(\n+      testData.select(sqrt('key)).orderBy('key asc),\n+      (1 to 100).map(n => Seq(math.sqrt(n)))\n+    )\n+\n+    checkAnswer(\n+      testData.select(sqrt('value), 'key).orderBy('key asc, 'value asc),\n+      (1 to 100).map(n => Seq(math.sqrt(n), n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(sqrt(Literal(null, NullType))),\n+      (1 to 100).map(_ => Seq(null))\n+    )\n+  }\n+\n+  test(\"abs\") {\n+    checkAnswer(\n+      testData.select(abs('key)).orderBy('key asc),\n+      (1 to 100).map(n => Seq(n))\n+    )\n+\n+    checkAnswer(\n+      negativeData.select(abs('key)).orderBy('key desc),\n+      (1 to 100).map(n => Seq(n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(abs(Literal(null, NullType))),\n+      (1 to 100).map(_ => Seq(null))\n+    )\n+  }\n+\n+  test(\"upper\") {\n+    checkAnswer(\n+      lowerCaseData.select(upper('l)),\n+      ('a' to 'd').map(c => Seq(c.toString.toUpperCase()))\n+    )\n+\n+    checkAnswer(\n+      testData.select(upper('value), 'key),\n+      (1 to 100).map(n => Seq(n.toString, n))\n+    )\n+\n+    checkAnswer(\n+      testData.select(upper(Literal(null, NullType))),"
  }],
  "prId": 3401
}]