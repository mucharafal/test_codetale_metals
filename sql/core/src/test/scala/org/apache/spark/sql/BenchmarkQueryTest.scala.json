[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Why warning for debug uses?",
    "commit": "2671416688ca6275556602b2f1990cd4361b95e6",
    "createdAt": "2017-12-15T01:45:35Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterAll\n+\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodeFormatter, CodeGenerator}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.execution.{SparkPlan, WholeStageCodegenExec}\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class BenchmarkQueryTest extends QueryTest with SharedSQLContext with BeforeAndAfterAll {\n+\n+  // When Utils.isTesting is true, the RuleExecutor will issue an exception when hitting\n+  // the max iteration of analyzer/optimizer batches.\n+  assert(Utils.isTesting, \"spark.testing is not set to true\")\n+\n+  /**\n+   * Drop all the tables\n+   */\n+  protected override def afterAll(): Unit = {\n+    try {\n+      // For debugging dump some statistics about how much time was spent in various optimizer rules\n+      logWarning(RuleExecutor.dumpTimeSpent())",
    "line": 40
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Also, is that a bad idea to dump the time for each query?",
    "commit": "2671416688ca6275556602b2f1990cd4361b95e6",
    "createdAt": "2017-12-15T01:52:39Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterAll\n+\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodeFormatter, CodeGenerator}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.execution.{SparkPlan, WholeStageCodegenExec}\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class BenchmarkQueryTest extends QueryTest with SharedSQLContext with BeforeAndAfterAll {\n+\n+  // When Utils.isTesting is true, the RuleExecutor will issue an exception when hitting\n+  // the max iteration of analyzer/optimizer batches.\n+  assert(Utils.isTesting, \"spark.testing is not set to true\")\n+\n+  /**\n+   * Drop all the tables\n+   */\n+  protected override def afterAll(): Unit = {\n+    try {\n+      // For debugging dump some statistics about how much time was spent in various optimizer rules\n+      logWarning(RuleExecutor.dumpTimeSpent())",
    "line": 40
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "If we do use logWarning, the messages will not be shown in the test log.",
    "commit": "2671416688ca6275556602b2f1990cd4361b95e6",
    "createdAt": "2017-12-15T03:55:09Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterAll\n+\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodeFormatter, CodeGenerator}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.execution.{SparkPlan, WholeStageCodegenExec}\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class BenchmarkQueryTest extends QueryTest with SharedSQLContext with BeforeAndAfterAll {\n+\n+  // When Utils.isTesting is true, the RuleExecutor will issue an exception when hitting\n+  // the max iteration of analyzer/optimizer batches.\n+  assert(Utils.isTesting, \"spark.testing is not set to true\")\n+\n+  /**\n+   * Drop all the tables\n+   */\n+  protected override def afterAll(): Unit = {\n+    try {\n+      // For debugging dump some statistics about how much time was spent in various optimizer rules\n+      logWarning(RuleExecutor.dumpTimeSpent())",
    "line": 40
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "This is just to give the overall picture how long each rule takes. \r\n\r\nI plan to submit another PR to track which rule takes an effect for a specific query and also record the time cost. ",
    "commit": "2671416688ca6275556602b2f1990cd4361b95e6",
    "createdAt": "2017-12-15T03:57:19Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterAll\n+\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodeFormatter, CodeGenerator}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.execution.{SparkPlan, WholeStageCodegenExec}\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class BenchmarkQueryTest extends QueryTest with SharedSQLContext with BeforeAndAfterAll {\n+\n+  // When Utils.isTesting is true, the RuleExecutor will issue an exception when hitting\n+  // the max iteration of analyzer/optimizer batches.\n+  assert(Utils.isTesting, \"spark.testing is not set to true\")\n+\n+  /**\n+   * Drop all the tables\n+   */\n+  protected override def afterAll(): Unit = {\n+    try {\n+      // For debugging dump some statistics about how much time was spent in various optimizer rules\n+      logWarning(RuleExecutor.dumpTimeSpent())",
    "line": 40
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "oh, ok",
    "commit": "2671416688ca6275556602b2f1990cd4361b95e6",
    "createdAt": "2017-12-15T03:57:53Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterAll\n+\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodeFormatter, CodeGenerator}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.execution.{SparkPlan, WholeStageCodegenExec}\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class BenchmarkQueryTest extends QueryTest with SharedSQLContext with BeforeAndAfterAll {\n+\n+  // When Utils.isTesting is true, the RuleExecutor will issue an exception when hitting\n+  // the max iteration of analyzer/optimizer batches.\n+  assert(Utils.isTesting, \"spark.testing is not set to true\")\n+\n+  /**\n+   * Drop all the tables\n+   */\n+  protected override def afterAll(): Unit = {\n+    try {\n+      // For debugging dump some statistics about how much time was spent in various optimizer rules\n+      logWarning(RuleExecutor.dumpTimeSpent())",
    "line": 40
  }],
  "prId": 19982
}]