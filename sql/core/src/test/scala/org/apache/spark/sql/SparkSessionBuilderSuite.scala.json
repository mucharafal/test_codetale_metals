[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Line 76 sets the active session?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T21:53:32Z",
    "diffHunk": "@@ -73,6 +74,7 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     SparkSession.clearActiveSession()\n \n     assert(SparkSession.builder().getOrCreate() == defaultSession)\n+    SparkSession.clearActiveSession()"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I thought line 76 may reach [here](https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/SparkSession.scala#L923). Do you want me to remove this?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T22:03:40Z",
    "diffHunk": "@@ -73,6 +74,7 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     SparkSession.clearActiveSession()\n \n     assert(SparkSession.builder().getOrCreate() == defaultSession)\n+    SparkSession.clearActiveSession()"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "That line will not set active session, right?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T22:05:29Z",
    "diffHunk": "@@ -73,6 +74,7 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     SparkSession.clearActiveSession()\n \n     assert(SparkSession.builder().getOrCreate() == defaultSession)\n+    SparkSession.clearActiveSession()"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oh, right. I'll remove this.",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T22:12:30Z",
    "diffHunk": "@@ -73,6 +74,7 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     SparkSession.clearActiveSession()\n \n     assert(SparkSession.builder().getOrCreate() == defaultSession)\n+    SparkSession.clearActiveSession()"
  }],
  "prId": 18567
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "How about adding a trait `BeforeAndAfterEach` and then extending the function `afterEach` with these logics?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T23:22:35Z",
    "diffHunk": "@@ -42,12 +42,18 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     assert(initialSession.sparkContext.conf.get(\"some-config\") == \"v2\")\n     assert(initialSession.conf.get(\"some-config\") == \"v2\")\n     SparkSession.clearDefaultSession()\n+\n+    assert(SparkSession.getDefaultSession === None)\n+    assert(SparkSession.getActiveSession === None)"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Sure. I'll update like that.",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-07T23:35:39Z",
    "diffHunk": "@@ -42,12 +42,18 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     assert(initialSession.sparkContext.conf.get(\"some-config\") == \"v2\")\n     assert(initialSession.conf.get(\"some-config\") == \"v2\")\n     SparkSession.clearDefaultSession()\n+\n+    assert(SparkSession.getDefaultSession === None)\n+    assert(SparkSession.getActiveSession === None)"
  }],
  "prId": 18567
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Seems this is only used in the first test case? shall we just move it to the first test case?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T04:52:21Z",
    "diffHunk": "@@ -17,13 +17,15 @@\n \n package org.apache.spark.sql\n \n+import org.scalatest.BeforeAndAfterEach\n+\n import org.apache.spark.{SparkConf, SparkContext, SparkFunSuite}\n import org.apache.spark.sql.internal.SQLConf\n \n /**\n  * Test cases for the builder pattern of [[SparkSession]].\n  */\n-class SparkSessionBuilderSuite extends SparkFunSuite {\n+class SparkSessionBuilderSuite extends SparkFunSuite with BeforeAndAfterEach {\n \n   private var initialSession: SparkSession = _"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "This is also used in `sparkContext` and `sparkContext` is used in 3 test cases.\r\n```\r\nprivate lazy val sparkContext: SparkContext = {\r\n    initialSession = SparkSession.builder()\r\n```",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T05:05:32Z",
    "diffHunk": "@@ -17,13 +17,15 @@\n \n package org.apache.spark.sql\n \n+import org.scalatest.BeforeAndAfterEach\n+\n import org.apache.spark.{SparkConf, SparkContext, SparkFunSuite}\n import org.apache.spark.sql.internal.SQLConf\n \n /**\n  * Test cases for the builder pattern of [[SparkSession]].\n  */\n-class SparkSessionBuilderSuite extends SparkFunSuite {\n+class SparkSessionBuilderSuite extends SparkFunSuite with BeforeAndAfterEach {\n \n   private var initialSession: SparkSession = _"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Ah, yes. The other two reference are just `stop`. I will move this.",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T05:13:43Z",
    "diffHunk": "@@ -17,13 +17,15 @@\n \n package org.apache.spark.sql\n \n+import org.scalatest.BeforeAndAfterEach\n+\n import org.apache.spark.{SparkConf, SparkContext, SparkFunSuite}\n import org.apache.spark.sql.internal.SQLConf\n \n /**\n  * Test cases for the builder pattern of [[SparkSession]].\n  */\n-class SparkSessionBuilderSuite extends SparkFunSuite {\n+class SparkSessionBuilderSuite extends SparkFunSuite with BeforeAndAfterEach {\n \n   private var initialSession: SparkSession = _"
  }],
  "prId": 18567
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we also stop the session?",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T04:52:31Z",
    "diffHunk": "@@ -36,18 +38,22 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     initialSession.sparkContext\n   }\n \n+  override def afterEach(): Unit = {\n+    // This suite should not interfere with the other test suites.\n+    SparkSession.clearDefaultSession()\n+    SparkSession.clearActiveSession()"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Sure!",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T05:05:37Z",
    "diffHunk": "@@ -36,18 +38,22 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     initialSession.sparkContext\n   }\n \n+  override def afterEach(): Unit = {\n+    // This suite should not interfere with the other test suites.\n+    SparkSession.clearDefaultSession()\n+    SparkSession.clearActiveSession()"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We need to update the unit test case because SparkContext requires `spark.master`. I'll update like that.\r\n```\r\n    if (!_conf.contains(\"spark.master\")) {\r\n      throw new SparkException(\"A master URL must be set in your configuration\")\r\n    }\r\n```",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T05:24:33Z",
    "diffHunk": "@@ -36,18 +38,22 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n     initialSession.sparkContext\n   }\n \n+  override def afterEach(): Unit = {\n+    // This suite should not interfere with the other test suites.\n+    SparkSession.clearDefaultSession()\n+    SparkSession.clearActiveSession()"
  }],
  "prId": 18567
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: the `session.stop` at the end of test case can also be removed.",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T05:53:35Z",
    "diffHunk": "@@ -95,7 +93,6 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n   }\n \n   test(\"create SparkContext first then SparkSession\") {\n-    sparkContext.stop()",
    "line": 94
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you. All of them are removed.",
    "commit": "04f47ed11108f22ee436c40d8d926033f27d6ed6",
    "createdAt": "2017-07-08T06:08:34Z",
    "diffHunk": "@@ -95,7 +93,6 @@ class SparkSessionBuilderSuite extends SparkFunSuite {\n   }\n \n   test(\"create SparkContext first then SparkSession\") {\n-    sparkContext.stop()",
    "line": 94
  }],
  "prId": 18567
}]