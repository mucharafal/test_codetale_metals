[{
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: You can use `withMockSources(firstSource: Source, otherSources: Source*)` to make it become a compile error.",
    "commit": "3462a9834f990beade996034280968685af312d6",
    "createdAt": "2017-02-28T23:21:24Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.util\n+\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.execution.streaming.Source\n+import org.apache.spark.sql.sources.StreamSourceProvider\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+/**\n+ * A StreamSourceProvider that provides mocked Sources for unit testing. Example usage:\n+ *\n+ * {{{\n+ *    MockSourceProvider.withMockSources(source1, source2) {\n+ *      val df1 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      val df2 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      df1.union(df2)\n+ *      ...\n+ *    }\n+ * }}}\n+ */\n+class MockSourceProvider extends StreamSourceProvider {\n+  override def sourceSchema(\n+      spark: SQLContext,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): (String, StructType) = {\n+    (\"dummySource\", MockSourceProvider.fakeSchema)\n+  }\n+\n+  override def createSource(\n+      spark: SQLContext,\n+      metadataPath: String,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): Source = {\n+    MockSourceProvider.sourceProviderFunction()\n+  }\n+}\n+\n+object MockSourceProvider {\n+  // Function to generate sources. May provide multiple sources if the user implements such a\n+  // function.\n+  private var sourceProviderFunction: () => Source = _\n+\n+  final val fakeSchema = StructType(StructField(\"a\", IntegerType) :: Nil)\n+\n+  def withMockSources(sources: Source*)(f: => Unit): Unit = {\n+    require(sources.nonEmpty)"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "good idea",
    "commit": "3462a9834f990beade996034280968685af312d6",
    "createdAt": "2017-02-28T23:37:36Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.util\n+\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.execution.streaming.Source\n+import org.apache.spark.sql.sources.StreamSourceProvider\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+/**\n+ * A StreamSourceProvider that provides mocked Sources for unit testing. Example usage:\n+ *\n+ * {{{\n+ *    MockSourceProvider.withMockSources(source1, source2) {\n+ *      val df1 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      val df2 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      df1.union(df2)\n+ *      ...\n+ *    }\n+ * }}}\n+ */\n+class MockSourceProvider extends StreamSourceProvider {\n+  override def sourceSchema(\n+      spark: SQLContext,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): (String, StructType) = {\n+    (\"dummySource\", MockSourceProvider.fakeSchema)\n+  }\n+\n+  override def createSource(\n+      spark: SQLContext,\n+      metadataPath: String,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): Source = {\n+    MockSourceProvider.sourceProviderFunction()\n+  }\n+}\n+\n+object MockSourceProvider {\n+  // Function to generate sources. May provide multiple sources if the user implements such a\n+  // function.\n+  private var sourceProviderFunction: () => Source = _\n+\n+  final val fakeSchema = StructType(StructField(\"a\", IntegerType) :: Nil)\n+\n+  def withMockSources(sources: Source*)(f: => Unit): Unit = {\n+    require(sources.nonEmpty)"
  }],
  "prId": 17107
}, {
  "comments": [{
    "author": {
      "login": "zsxwing"
    },
    "body": "nit: `srcProvider` is not necessary. You can just assign the func to  `sourceProviderFunction`",
    "commit": "3462a9834f990beade996034280968685af312d6",
    "createdAt": "2017-02-28T23:23:54Z",
    "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.streaming.util\n+\n+import org.apache.spark.sql.SQLContext\n+import org.apache.spark.sql.execution.streaming.Source\n+import org.apache.spark.sql.sources.StreamSourceProvider\n+import org.apache.spark.sql.types.{IntegerType, StructField, StructType}\n+\n+/**\n+ * A StreamSourceProvider that provides mocked Sources for unit testing. Example usage:\n+ *\n+ * {{{\n+ *    MockSourceProvider.withMockSources(source1, source2) {\n+ *      val df1 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      val df2 = spark.readStream\n+ *        .format(\"org.apache.spark.sql.streaming.util.MockSourceProvider\")\n+ *        .load()\n+ *\n+ *      df1.union(df2)\n+ *      ...\n+ *    }\n+ * }}}\n+ */\n+class MockSourceProvider extends StreamSourceProvider {\n+  override def sourceSchema(\n+      spark: SQLContext,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): (String, StructType) = {\n+    (\"dummySource\", MockSourceProvider.fakeSchema)\n+  }\n+\n+  override def createSource(\n+      spark: SQLContext,\n+      metadataPath: String,\n+      schema: Option[StructType],\n+      providerName: String,\n+      parameters: Map[String, String]): Source = {\n+    MockSourceProvider.sourceProviderFunction()\n+  }\n+}\n+\n+object MockSourceProvider {\n+  // Function to generate sources. May provide multiple sources if the user implements such a\n+  // function.\n+  private var sourceProviderFunction: () => Source = _\n+\n+  final val fakeSchema = StructType(StructField(\"a\", IntegerType) :: Nil)\n+\n+  def withMockSources(sources: Source*)(f: => Unit): Unit = {\n+    require(sources.nonEmpty)\n+    var i = 0\n+    val srcProvider = () => {"
  }],
  "prId": 17107
}]