[{
  "comments": [{
    "author": {
      "login": "tdas"
    },
    "body": "note to self: readFromResource",
    "commit": "4041a2297289aa6186a07e1ea74541d625174599",
    "createdAt": "2016-12-03T00:31:25Z",
    "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution.streaming\n+\n+import java.io.File\n+import java.util.UUID\n+\n+import org.apache.hadoop.conf.Configuration\n+import org.apache.hadoop.fs.Path\n+\n+import org.apache.spark.sql.streaming.StreamTest\n+\n+class StreamMetadataSuite extends StreamTest {\n+\n+  test(\"writing and reading\") {\n+    withTempDir { dir =>\n+      val id = UUID.randomUUID.toString\n+      val metadata = StreamMetadata(id)\n+      val file = new Path(new File(dir, \"test\").toString)\n+      StreamMetadata.write(metadata, file, hadoopConf)\n+      val readMetadata = StreamMetadata.read(file, hadoopConf)\n+      assert(readMetadata.nonEmpty)\n+      assert(readMetadata.get.id === id)\n+    }\n+  }\n+\n+  test(\"read Spark 2.1.0 format\") {\n+    // query-metadata-logs-version-2.1.0.txt has the execution metadata generated by Spark 2.1.0\n+    assert(\n+      readForResource(\"query-metadata-logs-version-2.1.0.txt\") ===\n+      StreamMetadata(\"d366a8bf-db79-42ca-b5a4-d9ca0a11d63e\"))\n+  }\n+\n+  private def readForResource(fileName: String): StreamMetadata = {",
    "line": 49
  }],
  "prId": 16113
}]