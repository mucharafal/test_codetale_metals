[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "should we also test the price field?\n",
    "commit": "41b9231cf68fb7a1cfc72fc07f66eb9f16d8194e",
    "createdAt": "2015-12-30T04:53:25Z",
    "diffHunk": "@@ -111,4 +111,21 @@ class JsonParsingOptionsSuite extends QueryTest with SharedSQLContext {\n     assert(df.schema.head.name == \"age\")\n     assert(df.first().getDouble(0).isNaN)\n   }\n+\n+  test(\"allowBackslashEscapingAnyCharacter off\") {\n+    val str = \"\"\"{\"name\": \"Cazen Lee\", \"price\": \"\\$10\"}\"\"\"\n+    val rdd = sqlContext.sparkContext.parallelize(Seq(str))\n+    val df = sqlContext.read.option(\"allowBackslashEscapingAnyCharacter\", \"false\").json(rdd)\n+\n+    assert(df.schema.head.name == \"_corrupt_record\")\n+  }\n+\n+  test(\"allowBackslashEscapingAnyCharacter on\") {\n+    val str = \"\"\"{\"name\": \"Cazen Lee\", \"price\": \"\\$10\"}\"\"\"\n+    val rdd = sqlContext.sparkContext.parallelize(Seq(str))\n+    val df = sqlContext.read.option(\"allowBackslashEscapingAnyCharacter\", \"true\").json(rdd)\n+\n+    assert(df.schema.head.name == \"name\")\n+    assert(df.first().getString(0) == \"Cazen Lee\")",
    "line": 19
  }, {
    "author": {
      "login": "Cazen"
    },
    "body": "You right. It needeed\nI'll modify test code soon\nThz\n",
    "commit": "41b9231cf68fb7a1cfc72fc07f66eb9f16d8194e",
    "createdAt": "2015-12-30T05:15:49Z",
    "diffHunk": "@@ -111,4 +111,21 @@ class JsonParsingOptionsSuite extends QueryTest with SharedSQLContext {\n     assert(df.schema.head.name == \"age\")\n     assert(df.first().getDouble(0).isNaN)\n   }\n+\n+  test(\"allowBackslashEscapingAnyCharacter off\") {\n+    val str = \"\"\"{\"name\": \"Cazen Lee\", \"price\": \"\\$10\"}\"\"\"\n+    val rdd = sqlContext.sparkContext.parallelize(Seq(str))\n+    val df = sqlContext.read.option(\"allowBackslashEscapingAnyCharacter\", \"false\").json(rdd)\n+\n+    assert(df.schema.head.name == \"_corrupt_record\")\n+  }\n+\n+  test(\"allowBackslashEscapingAnyCharacter on\") {\n+    val str = \"\"\"{\"name\": \"Cazen Lee\", \"price\": \"\\$10\"}\"\"\"\n+    val rdd = sqlContext.sparkContext.parallelize(Seq(str))\n+    val df = sqlContext.read.option(\"allowBackslashEscapingAnyCharacter\", \"true\").json(rdd)\n+\n+    assert(df.schema.head.name == \"name\")\n+    assert(df.first().getString(0) == \"Cazen Lee\")",
    "line": 19
  }],
  "prId": 10496
}]