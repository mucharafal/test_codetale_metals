[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "@yucai . `BenchmarkWithCodegen` is different from `BenchmarkBase`. Can we keep `BenchmarkWithCodegen`?",
    "commit": "be2d1c0e1b224386b2d3a5c43b6f2b1638604607",
    "createdAt": "2018-09-24T03:44:18Z",
    "diffHunk": "@@ -28,12 +28,15 @@ import org.apache.spark.util.random.XORShiftRandom\n \n /**\n  * Benchmark to measure performance for aggregate primitives.\n- * To run this:\n- *  build/sbt \"sql/test-only *benchmark.SortBenchmark\"\n- *\n- * Benchmarks in this file are skipped in normal builds.\n+ * {{{\n+ *   To run this benchmark:\n+ *   1. without sbt: bin/spark-submit --class <this class> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/<this class>-results.txt\".\n+ * }}}\n  */\n-class SortBenchmark extends BenchmarkWithCodegen {\n+object SortBenchmark extends BenchmarkBase {",
    "line": 26
  }, {
    "author": {
      "login": "yucai"
    },
    "body": "@dongjoon-hyun `SortBenchmark` does not use any function provided in `BenchmarkWithCodegen`, so I remove it.\r\nAnother option is like #22484 did, make `BenchmarkWithCodegen` extend `BenchmarkBase`, and then `SortBenchmark` can extend `BenchmarkWithCodegen`.\r\nDo you prefer the 2nd way?\r\n\r\nBTW, congratulations! :)",
    "commit": "be2d1c0e1b224386b2d3a5c43b6f2b1638604607",
    "createdAt": "2018-09-24T05:29:13Z",
    "diffHunk": "@@ -28,12 +28,15 @@ import org.apache.spark.util.random.XORShiftRandom\n \n /**\n  * Benchmark to measure performance for aggregate primitives.\n- * To run this:\n- *  build/sbt \"sql/test-only *benchmark.SortBenchmark\"\n- *\n- * Benchmarks in this file are skipped in normal builds.\n+ * {{{\n+ *   To run this benchmark:\n+ *   1. without sbt: bin/spark-submit --class <this class> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/<this class>-results.txt\".\n+ * }}}\n  */\n-class SortBenchmark extends BenchmarkWithCodegen {\n+object SortBenchmark extends BenchmarkBase {",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I got it. +1 for the current one. Thanks, @yucai . ",
    "commit": "be2d1c0e1b224386b2d3a5c43b6f2b1638604607",
    "createdAt": "2018-09-25T18:11:24Z",
    "diffHunk": "@@ -28,12 +28,15 @@ import org.apache.spark.util.random.XORShiftRandom\n \n /**\n  * Benchmark to measure performance for aggregate primitives.\n- * To run this:\n- *  build/sbt \"sql/test-only *benchmark.SortBenchmark\"\n- *\n- * Benchmarks in this file are skipped in normal builds.\n+ * {{{\n+ *   To run this benchmark:\n+ *   1. without sbt: bin/spark-submit --class <this class> <spark sql test jar>\n+ *   2. build/sbt \"sql/test:runMain <this class>\"\n+ *   3. generate result: SPARK_GENERATE_BENCHMARK_FILES=1 build/sbt \"sql/test:runMain <this class>\"\n+ *      Results will be written to \"benchmarks/<this class>-results.txt\".\n+ * }}}\n  */\n-class SortBenchmark extends BenchmarkWithCodegen {\n+object SortBenchmark extends BenchmarkBase {",
    "line": 26
  }],
  "prId": 22495
}]