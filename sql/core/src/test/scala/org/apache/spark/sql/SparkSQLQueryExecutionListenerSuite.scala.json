[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: no need to use `;` here",
    "commit": "a0c7c22e4097adbdf12e52db37c26a2246d4eddd",
    "createdAt": "2017-02-06T06:05:20Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mock.MockitoSugar\n+\n+import org.apache.spark.{SparkContext, SparkFunSuite}\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.{OutputParams, QueryExecutionListener}\n+\n+/**\n+ * Test cases for the property 'spark.sql.queryExecutionListeners' that adds the\n+ * @see `QueryExecutionListener` to a @see `SparkSession`\n+ */\n+class SparkSQLQueryExecutionListenerSuite\n+    extends SparkFunSuite\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  override def afterEach(): Unit = {\n+    SparkSession.clearActiveSession()\n+    SparkSession.clearDefaultSession()\n+    SparkContext.clearActiveContext()\n+  }\n+\n+  test(\"Creation of SparkContext with non-existent QueryExecutionListener class fails fast\") {\n+    intercept[ClassNotFoundException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", \"non.existent.QueryExecutionListener\")\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"QueryExecutionListener that doesn't have a default constructor fails fast\") {\n+    intercept[InstantiationException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", classOf[NoZeroArgConstructorListener].getName)\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"Normal QueryExecutionListeners gets added as listeners\") {\n+    val sparkSession = SparkSession\n+      .builder()\n+      .master(\"local\")\n+      .config(\"mykey\", \"myvalue\")\n+      .config(\"spark.sql.queryExecutionListeners\",\n+        classOf[NormalQueryExecutionListener].getName + \" ,\"\n+          + classOf[AnotherQueryExecutionListener].getName)\n+      .getOrCreate()\n+    assert(SparkSession.getDefaultSession.isDefined)\n+    assert(NormalQueryExecutionListener.successCount === 0)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 0)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onSuccess(\"test1\", mock[QueryExecution], 0)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onFailure(\"test2\", mock[QueryExecution], new Exception)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 1)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 1)\n+  }\n+}\n+\n+class NoZeroArgConstructorListener(myString: String) extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = {}\n+\n+  override def onFailure(\n+      funcName: String,\n+      qe: QueryExecution,\n+      exception: Exception,\n+      options: Option[OutputParams]\n+  ): Unit = {}\n+}\n+\n+class NormalQueryExecutionListener extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = { NormalQueryExecutionListener.successCount += 1 }\n+\n+  override def onFailure(\n+      funcName: String,\n+      qe: QueryExecution,\n+      exception: Exception,\n+      options: Option[OutputParams]\n+  ): Unit = { NormalQueryExecutionListener.failureCount += 1 }\n+}\n+\n+object NormalQueryExecutionListener {\n+  var successCount = 0;\n+  var failureCount = 0;\n+}\n+\n+class AnotherQueryExecutionListener extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = { AnotherQueryExecutionListener.successCount += 1 }\n+\n+  override def onFailure(\n+      funcName: String,\n+      qe: QueryExecution,\n+      exception: Exception,\n+      options: Option[OutputParams]\n+  ): Unit = { AnotherQueryExecutionListener.failureCount += 1 }\n+}\n+\n+object AnotherQueryExecutionListener {\n+  var successCount = 0;\n+  var failureCount = 0;",
    "line": 148
  }],
  "prId": 16664
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: no need to use `;` here",
    "commit": "a0c7c22e4097adbdf12e52db37c26a2246d4eddd",
    "createdAt": "2017-02-06T06:05:26Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mock.MockitoSugar\n+\n+import org.apache.spark.{SparkContext, SparkFunSuite}\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.{OutputParams, QueryExecutionListener}\n+\n+/**\n+ * Test cases for the property 'spark.sql.queryExecutionListeners' that adds the\n+ * @see `QueryExecutionListener` to a @see `SparkSession`\n+ */\n+class SparkSQLQueryExecutionListenerSuite\n+    extends SparkFunSuite\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  override def afterEach(): Unit = {\n+    SparkSession.clearActiveSession()\n+    SparkSession.clearDefaultSession()\n+    SparkContext.clearActiveContext()\n+  }\n+\n+  test(\"Creation of SparkContext with non-existent QueryExecutionListener class fails fast\") {\n+    intercept[ClassNotFoundException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", \"non.existent.QueryExecutionListener\")\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"QueryExecutionListener that doesn't have a default constructor fails fast\") {\n+    intercept[InstantiationException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", classOf[NoZeroArgConstructorListener].getName)\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"Normal QueryExecutionListeners gets added as listeners\") {\n+    val sparkSession = SparkSession\n+      .builder()\n+      .master(\"local\")\n+      .config(\"mykey\", \"myvalue\")\n+      .config(\"spark.sql.queryExecutionListeners\",\n+        classOf[NormalQueryExecutionListener].getName + \" ,\"\n+          + classOf[AnotherQueryExecutionListener].getName)\n+      .getOrCreate()\n+    assert(SparkSession.getDefaultSession.isDefined)\n+    assert(NormalQueryExecutionListener.successCount === 0)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 0)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onSuccess(\"test1\", mock[QueryExecution], 0)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onFailure(\"test2\", mock[QueryExecution], new Exception)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 1)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 1)\n+  }\n+}\n+\n+class NoZeroArgConstructorListener(myString: String) extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = {}\n+\n+  override def onFailure(\n+      funcName: String,\n+      qe: QueryExecution,\n+      exception: Exception,\n+      options: Option[OutputParams]\n+  ): Unit = {}\n+}\n+\n+class NormalQueryExecutionListener extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = { NormalQueryExecutionListener.successCount += 1 }\n+\n+  override def onFailure(\n+      funcName: String,\n+      qe: QueryExecution,\n+      exception: Exception,\n+      options: Option[OutputParams]\n+  ): Unit = { NormalQueryExecutionListener.failureCount += 1 }\n+}\n+\n+object NormalQueryExecutionListener {\n+  var successCount = 0;\n+  var failureCount = 0;",
    "line": 126
  }],
  "prId": 16664
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`assert(SparkSession.getDefaultSession.isEmpty)`",
    "commit": "a0c7c22e4097adbdf12e52db37c26a2246d4eddd",
    "createdAt": "2017-02-06T06:06:09Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mock.MockitoSugar\n+\n+import org.apache.spark.{SparkContext, SparkFunSuite}\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.{OutputParams, QueryExecutionListener}\n+\n+/**\n+ * Test cases for the property 'spark.sql.queryExecutionListeners' that adds the\n+ * @see `QueryExecutionListener` to a @see `SparkSession`\n+ */\n+class SparkSQLQueryExecutionListenerSuite\n+    extends SparkFunSuite\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  override def afterEach(): Unit = {\n+    SparkSession.clearActiveSession()\n+    SparkSession.clearDefaultSession()\n+    SparkContext.clearActiveContext()\n+  }\n+\n+  test(\"Creation of SparkContext with non-existent QueryExecutionListener class fails fast\") {\n+    intercept[ClassNotFoundException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", \"non.existent.QueryExecutionListener\")\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"QueryExecutionListener that doesn't have a default constructor fails fast\") {\n+    intercept[InstantiationException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", classOf[NoZeroArgConstructorListener].getName)\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)",
    "line": 60
  }],
  "prId": 16664
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "The same here. `isEmpty`",
    "commit": "a0c7c22e4097adbdf12e52db37c26a2246d4eddd",
    "createdAt": "2017-02-06T06:06:24Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mock.MockitoSugar\n+\n+import org.apache.spark.{SparkContext, SparkFunSuite}\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.{OutputParams, QueryExecutionListener}\n+\n+/**\n+ * Test cases for the property 'spark.sql.queryExecutionListeners' that adds the\n+ * @see `QueryExecutionListener` to a @see `SparkSession`\n+ */\n+class SparkSQLQueryExecutionListenerSuite\n+    extends SparkFunSuite\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  override def afterEach(): Unit = {\n+    SparkSession.clearActiveSession()\n+    SparkSession.clearDefaultSession()\n+    SparkContext.clearActiveContext()\n+  }\n+\n+  test(\"Creation of SparkContext with non-existent QueryExecutionListener class fails fast\") {\n+    intercept[ClassNotFoundException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", \"non.existent.QueryExecutionListener\")\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)",
    "line": 49
  }],
  "prId": 16664
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: -> `options: Option[OutputParams]): Unit = {}`",
    "commit": "a0c7c22e4097adbdf12e52db37c26a2246d4eddd",
    "createdAt": "2017-02-06T06:08:47Z",
    "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql\n+\n+import org.scalatest.BeforeAndAfterEach\n+import org.scalatest.mock.MockitoSugar\n+\n+import org.apache.spark.{SparkContext, SparkFunSuite}\n+import org.apache.spark.sql.execution.QueryExecution\n+import org.apache.spark.sql.util.{OutputParams, QueryExecutionListener}\n+\n+/**\n+ * Test cases for the property 'spark.sql.queryExecutionListeners' that adds the\n+ * @see `QueryExecutionListener` to a @see `SparkSession`\n+ */\n+class SparkSQLQueryExecutionListenerSuite\n+    extends SparkFunSuite\n+    with MockitoSugar\n+    with BeforeAndAfterEach {\n+\n+  override def afterEach(): Unit = {\n+    SparkSession.clearActiveSession()\n+    SparkSession.clearDefaultSession()\n+    SparkContext.clearActiveContext()\n+  }\n+\n+  test(\"Creation of SparkContext with non-existent QueryExecutionListener class fails fast\") {\n+    intercept[ClassNotFoundException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", \"non.existent.QueryExecutionListener\")\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"QueryExecutionListener that doesn't have a default constructor fails fast\") {\n+    intercept[InstantiationException] {\n+      SparkSession\n+        .builder()\n+        .master(\"local\")\n+        .config(\"spark.sql.queryExecutionListeners\", classOf[NoZeroArgConstructorListener].getName)\n+        .getOrCreate()\n+    }\n+    assert(!SparkSession.getDefaultSession.isDefined)\n+  }\n+\n+  test(\"Normal QueryExecutionListeners gets added as listeners\") {\n+    val sparkSession = SparkSession\n+      .builder()\n+      .master(\"local\")\n+      .config(\"mykey\", \"myvalue\")\n+      .config(\"spark.sql.queryExecutionListeners\",\n+        classOf[NormalQueryExecutionListener].getName + \" ,\"\n+          + classOf[AnotherQueryExecutionListener].getName)\n+      .getOrCreate()\n+    assert(SparkSession.getDefaultSession.isDefined)\n+    assert(NormalQueryExecutionListener.successCount === 0)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 0)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onSuccess(\"test1\", mock[QueryExecution], 0)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 0)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 0)\n+    sparkSession.listenerManager.onFailure(\"test2\", mock[QueryExecution], new Exception)\n+    assert(NormalQueryExecutionListener.successCount === 1)\n+    assert(NormalQueryExecutionListener.failureCount === 1)\n+    assert(AnotherQueryExecutionListener.successCount === 1)\n+    assert(AnotherQueryExecutionListener.failureCount === 1)\n+  }\n+}\n+\n+class NoZeroArgConstructorListener(myString: String) extends QueryExecutionListener {\n+\n+  override def onSuccess(\n+      funcName: String,\n+      qe: QueryExecution,\n+      durationNs: Long,\n+      options: Option[OutputParams]\n+  ): Unit = {}",
    "line": 97
  }],
  "prId": 16664
}]