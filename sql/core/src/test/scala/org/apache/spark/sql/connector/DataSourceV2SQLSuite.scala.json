[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "nit: just `sql(sqlCommand)`.",
    "commit": "c973705102b7eecbccc74fd9e9ed9152ef2a392e",
    "createdAt": "2019-11-15T07:00:16Z",
    "diffHunk": "@@ -1626,6 +1663,13 @@ class DataSourceV2SQLSuite\n     assert(e.message.contains(s\"$sqlCommand is only supported with v1 tables\"))\n   }\n \n+  private def testV1CommandNamespace(sqlCommand: String, namespace: String): Unit = {\n+    val e = intercept[AnalysisException] {\n+      sql(s\"$sqlCommand\")"
  }],
  "prId": 26540
}, {
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "Since this is very specific to your test, can you define it inside your test function? You can look at `checkFailure`, etc. in this file for an example. ",
    "commit": "c973705102b7eecbccc74fd9e9ed9152ef2a392e",
    "createdAt": "2019-11-15T17:36:19Z",
    "diffHunk": "@@ -1626,6 +1663,13 @@ class DataSourceV2SQLSuite\n     assert(e.message.contains(s\"$sqlCommand is only supported with v1 tables\"))\n   }\n \n+  private def testV1CommandNamespace(sqlCommand: String, namespace: String): Unit = {"
  }, {
    "author": {
      "login": "planga82"
    },
    "body": "Ok, good idea",
    "commit": "c973705102b7eecbccc74fd9e9ed9152ef2a392e",
    "createdAt": "2019-11-15T17:44:01Z",
    "diffHunk": "@@ -1626,6 +1663,13 @@ class DataSourceV2SQLSuite\n     assert(e.message.contains(s\"$sqlCommand is only supported with v1 tables\"))\n   }\n \n+  private def testV1CommandNamespace(sqlCommand: String, namespace: String): Unit = {"
  }],
  "prId": 26540
}, {
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "nit: `assert(info.nonEmpty)`",
    "commit": "c973705102b7eecbccc74fd9e9ed9152ef2a392e",
    "createdAt": "2019-11-15T17:38:10Z",
    "diffHunk": "@@ -766,6 +766,43 @@ class DataSourceV2SQLSuite\n     assert(expected === df.collect())\n   }\n \n+  test(\"SHOW TABLE EXTENDED not valid v1 database\") {\n+    val namespace = \"testcat.ns1.ns2\"\n+    val table = \"tbl\"\n+    withTable(s\"$namespace.$table\") {\n+      spark.sql(s\"CREATE TABLE $namespace.$table (id bigint, data string) \" +\n+        s\"USING foo PARTITIONED BY (id)\")\n+\n+      testV1CommandNamespace(s\"SHOW TABLE EXTENDED FROM $namespace LIKE 'tb*'\",\n+        namespace)\n+      testV1CommandNamespace(s\"SHOW TABLE EXTENDED IN $namespace LIKE 'tb*'\",\n+        namespace)\n+      testV1CommandNamespace(\"SHOW TABLE EXTENDED \" +\n+        s\"FROM $namespace LIKE 'tb*' PARTITION(id=1)\",\n+        namespace)\n+      testV1CommandNamespace(\"SHOW TABLE EXTENDED \" +\n+        s\"IN $namespace LIKE 'tb*' PARTITION(id=1)\",\n+        namespace)\n+    }\n+  }\n+\n+  test(\"SHOW TABLE EXTENDED valid v1\") {\n+    val expected = Seq(Row(\"\", \"source\", true), Row(\"\", \"source2\", true))\n+    val schema = new StructType()\n+      .add(\"database\", StringType, nullable = false)\n+      .add(\"tableName\", StringType, nullable = false)\n+      .add(\"isTemporary\", BooleanType, nullable = false)\n+      .add(\"information\", StringType, nullable = false)\n+\n+    val df = spark.sql(\"SHOW TABLE EXTENDED FROM default LIKE '*source*'\")\n+    val result = df.collect()\n+    val resultWithoutInfo = result.map{ case Row(db, table, temp, _) => Row(db, table, temp)}\n+\n+    assert(df.schema === schema)\n+    assert(resultWithoutInfo === expected)\n+    result.foreach{ case Row(_, _, _, info: String) => assert(info.length > 0)}"
  }],
  "prId": 26540
}, {
  "comments": [{
    "author": {
      "login": "imback82"
    },
    "body": "just `sql`?",
    "commit": "c973705102b7eecbccc74fd9e9ed9152ef2a392e",
    "createdAt": "2019-11-15T17:46:30Z",
    "diffHunk": "@@ -766,6 +766,43 @@ class DataSourceV2SQLSuite\n     assert(expected === df.collect())\n   }\n \n+  test(\"SHOW TABLE EXTENDED not valid v1 database\") {\n+    val namespace = \"testcat.ns1.ns2\"\n+    val table = \"tbl\"\n+    withTable(s\"$namespace.$table\") {\n+      spark.sql(s\"CREATE TABLE $namespace.$table (id bigint, data string) \" +"
  }],
  "prId": 26540
}]