[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I always forget your can do this...\n",
    "commit": "9011bc5addbf97543e93790da2027685ad6f661e",
    "createdAt": "2015-11-05T21:26:10Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.jdbc\n+\n+import java.net.ServerSocket\n+import java.sql.Connection\n+\n+import scala.collection.JavaConverters._\n+import scala.util.control.NonFatal\n+\n+import com.spotify.docker.client.messages.{ContainerConfig, HostConfig, PortBinding}\n+import com.spotify.docker.client._\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.concurrent.Eventually\n+import org.scalatest.time.SpanSugar._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.test.SharedSQLContext\n+import org.apache.spark.util.Utils\n+\n+abstract class DatabaseOnDocker {\n+  /**\n+   * The docker image to be pulled.\n+   */\n+  val imageName: String\n+\n+  /**\n+   * Environment variables to set inside of the Docker container while launching it.\n+   */\n+  val env: Map[String, String]\n+\n+  /**\n+   * The container-internal JDBC port that the database listens on.\n+   */\n+  val jdbcPort: Int\n+\n+  /**\n+   * Return a JDBC URL that connects to the database running at the given IP address and port.\n+   */\n+  def getJdbcUrl(ip: String, port: Int): String\n+}\n+\n+abstract class DockerJDBCIntegrationSuite\n+  extends SparkFunSuite\n+  with BeforeAndAfterAll\n+  with Eventually\n+  with SharedSQLContext {\n+\n+  val db: DatabaseOnDocker\n+\n+  private var docker: DockerClient = _\n+  private var containerId: String = _\n+  protected var jdbcUrl: String = _\n+\n+  override def beforeAll() {\n+    super.beforeAll()\n+    try {\n+      docker = DefaultDockerClient.fromEnv.build()\n+      // Ensure that the Docker image is installed:\n+      try {\n+        docker.inspectImage(db.imageName)\n+      } catch {\n+        case e: ImageNotFoundException =>\n+          log.warn(s\"Docker image ${db.imageName} not found; pulling image from registry\")\n+          docker.pull(db.imageName)\n+      }\n+      // Create the database container:\n+      val config = ContainerConfig.builder()\n+        .image(db.imageName)\n+        .networkDisabled(false)\n+        .env(db.env.map { case (k, v) => s\"$k=$v\" }.toSeq.asJava)\n+        .exposedPorts(s\"${db.jdbcPort}/tcp\")\n+        .build()\n+      containerId = docker.createContainer(config).id\n+      // Configure networking (necessary for boot2docker / Docker Machine)\n+      val externalPort: Int = {\n+        val sock = new ServerSocket(0)\n+        val port = sock.getLocalPort"
  }],
  "prId": 9503
}]