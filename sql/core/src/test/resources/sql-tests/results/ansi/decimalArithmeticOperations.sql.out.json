[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This test is to check the decimal overflow behavior. let's keep testing it: `(5e36BD + 0.1) + 5e36BD`",
    "commit": "15dae85ee44ef4e8bb7e5436d4bd60b931ee8021",
    "createdAt": "2019-11-19T13:35:19Z",
    "diffHunk": "@@ -73,19 +73,17 @@ struct<(CAST(10.300000000000000000 AS DECIMAL(21,19)) * CAST(3.00000000000000000\n -- !query 8\n select (5e36 + 0.1) + 5e36"
  }],
  "prId": 26595
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "15dae85ee44ef4e8bb7e5436d4bd60b931ee8021",
    "createdAt": "2019-11-19T13:35:30Z",
    "diffHunk": "@@ -73,19 +73,17 @@ struct<(CAST(10.300000000000000000 AS DECIMAL(21,19)) * CAST(3.00000000000000000\n -- !query 8\n select (5e36 + 0.1) + 5e36\n -- !query 8 schema\n-struct<>\n+struct<((5.0E36 + CAST(0.1 AS DOUBLE)) + 5.0E36):double>\n -- !query 8 output\n-java.lang.ArithmeticException\n-Decimal(expanded,10000000000000000000000000000000000000.1,39,1}) cannot be represented as Decimal(38, 1).\n+1.0E37\n \n \n -- !query 9\n select (-4e36 - 0.1) - 7e36"
  }],
  "prId": 26595
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "15dae85ee44ef4e8bb7e5436d4bd60b931ee8021",
    "createdAt": "2019-11-19T13:35:41Z",
    "diffHunk": "@@ -100,10 +98,9 @@ Decimal(expanded,1.5241578753238836750190519987501905210E+38,38,-1}) cannot be r\n -- !query 11\n select 1e35 / 0.1"
  }],
  "prId": 26595
}]