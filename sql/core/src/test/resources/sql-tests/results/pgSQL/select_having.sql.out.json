[{
  "comments": [{
    "author": {
      "login": "wangyum"
    },
    "body": "PostgreSQL throws:\r\n```\r\nERROR:  column \"test_having.a\" must appear in the GROUP BY clause or be used in an aggregate function\r\n```",
    "commit": "d6d8d389f7a3eb1d6b977d16c6e0ace6c42289b7",
    "createdAt": "2019-07-14T15:13:45Z",
    "diffHunk": "@@ -0,0 +1,187 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 22\n+\n+\n+-- !query 0\n+CREATE TABLE test_having (a int, b int, c string, d string) USING parquet\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A')\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b')\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c')\n+-- !query 3 schema\n+struct<>\n+-- !query 3 output\n+\n+\n+\n+-- !query 4\n+INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D')\n+-- !query 4 schema\n+struct<>\n+-- !query 4 output\n+\n+\n+\n+-- !query 5\n+INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e')\n+-- !query 5 schema\n+struct<>\n+-- !query 5 output\n+\n+\n+\n+-- !query 6\n+INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F')\n+-- !query 6 schema\n+struct<>\n+-- !query 6 output\n+\n+\n+\n+-- !query 7\n+INSERT INTO test_having VALUES (6, 4, 'cccc', 'g')\n+-- !query 7 schema\n+struct<>\n+-- !query 7 output\n+\n+\n+\n+-- !query 8\n+INSERT INTO test_having VALUES (7, 4, 'cccc', 'h')\n+-- !query 8 schema\n+struct<>\n+-- !query 8 output\n+\n+\n+\n+-- !query 9\n+INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I')\n+-- !query 9 schema\n+struct<>\n+-- !query 9 output\n+\n+\n+\n+-- !query 10\n+INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j')\n+-- !query 10 schema\n+struct<>\n+-- !query 10 output\n+\n+\n+\n+-- !query 11\n+SELECT b, c FROM test_having\n+\tGROUP BY b, c HAVING count(*) = 1 ORDER BY b, c\n+-- !query 11 schema\n+struct<b:int,c:string>\n+-- !query 11 output\n+1\tXXXX\n+3\tbbbb\n+\n+\n+-- !query 12\n+SELECT b, c FROM test_having\n+\tGROUP BY b, c HAVING b = 3 ORDER BY b, c\n+-- !query 12 schema\n+struct<b:int,c:string>\n+-- !query 12 output\n+3\tBBBB\n+3\tbbbb\n+\n+\n+-- !query 13\n+SELECT c, max(a) FROM test_having\n+\tGROUP BY c HAVING count(*) > 2 OR min(a) = max(a)\n+\tORDER BY c\n+-- !query 13 schema\n+struct<c:string,max(a):int>\n+-- !query 13 output\n+XXXX\t0\n+bbbb\t5\n+\n+\n+-- !query 14\n+SELECT min(a), max(a) FROM test_having HAVING min(a) = max(a)\n+-- !query 14 schema\n+struct<min(a):int,max(a):int>\n+-- !query 14 output\n+\n+\n+\n+-- !query 15\n+SELECT min(a), max(a) FROM test_having HAVING min(a) < max(a)\n+-- !query 15 schema\n+struct<min(a):int,max(a):int>\n+-- !query 15 output\n+0\t9\n+\n+\n+-- !query 16\n+SELECT a FROM test_having HAVING min(a) < max(a)\n+-- !query 16 schema\n+struct<>\n+-- !query 16 output\n+org.apache.spark.sql.AnalysisException",
    "line": 145
  }],
  "prId": 25151
}, {
  "comments": [{
    "author": {
      "login": "wangyum"
    },
    "body": "PostgreSQL throws:\r\n```\r\nERROR:  column \"test_having.a\" must appear in the GROUP BY clause or be used in an aggregate function\r\nLINE 1: SELECT 1 AS one FROM test_having HAVING a > 1;\r\n```",
    "commit": "d6d8d389f7a3eb1d6b977d16c6e0ace6c42289b7",
    "createdAt": "2019-07-14T15:14:17Z",
    "diffHunk": "@@ -0,0 +1,187 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 22\n+\n+\n+-- !query 0\n+CREATE TABLE test_having (a int, b int, c string, d string) USING parquet\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A')\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b')\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c')\n+-- !query 3 schema\n+struct<>\n+-- !query 3 output\n+\n+\n+\n+-- !query 4\n+INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D')\n+-- !query 4 schema\n+struct<>\n+-- !query 4 output\n+\n+\n+\n+-- !query 5\n+INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e')\n+-- !query 5 schema\n+struct<>\n+-- !query 5 output\n+\n+\n+\n+-- !query 6\n+INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F')\n+-- !query 6 schema\n+struct<>\n+-- !query 6 output\n+\n+\n+\n+-- !query 7\n+INSERT INTO test_having VALUES (6, 4, 'cccc', 'g')\n+-- !query 7 schema\n+struct<>\n+-- !query 7 output\n+\n+\n+\n+-- !query 8\n+INSERT INTO test_having VALUES (7, 4, 'cccc', 'h')\n+-- !query 8 schema\n+struct<>\n+-- !query 8 output\n+\n+\n+\n+-- !query 9\n+INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I')\n+-- !query 9 schema\n+struct<>\n+-- !query 9 output\n+\n+\n+\n+-- !query 10\n+INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j')\n+-- !query 10 schema\n+struct<>\n+-- !query 10 output\n+\n+\n+\n+-- !query 11\n+SELECT b, c FROM test_having\n+\tGROUP BY b, c HAVING count(*) = 1 ORDER BY b, c\n+-- !query 11 schema\n+struct<b:int,c:string>\n+-- !query 11 output\n+1\tXXXX\n+3\tbbbb\n+\n+\n+-- !query 12\n+SELECT b, c FROM test_having\n+\tGROUP BY b, c HAVING b = 3 ORDER BY b, c\n+-- !query 12 schema\n+struct<b:int,c:string>\n+-- !query 12 output\n+3\tBBBB\n+3\tbbbb\n+\n+\n+-- !query 13\n+SELECT c, max(a) FROM test_having\n+\tGROUP BY c HAVING count(*) > 2 OR min(a) = max(a)\n+\tORDER BY c\n+-- !query 13 schema\n+struct<c:string,max(a):int>\n+-- !query 13 output\n+XXXX\t0\n+bbbb\t5\n+\n+\n+-- !query 14\n+SELECT min(a), max(a) FROM test_having HAVING min(a) = max(a)\n+-- !query 14 schema\n+struct<min(a):int,max(a):int>\n+-- !query 14 output\n+\n+\n+\n+-- !query 15\n+SELECT min(a), max(a) FROM test_having HAVING min(a) < max(a)\n+-- !query 15 schema\n+struct<min(a):int,max(a):int>\n+-- !query 15 output\n+0\t9\n+\n+\n+-- !query 16\n+SELECT a FROM test_having HAVING min(a) < max(a)\n+-- !query 16 schema\n+struct<>\n+-- !query 16 output\n+org.apache.spark.sql.AnalysisException\n+grouping expressions sequence is empty, and 'default.test_having.`a`' is not an aggregate function. Wrap '(min(default.test_having.`a`) AS `min(a#x)`, max(default.test_having.`a`) AS `max(a#x)`)' in windowing function(s) or wrap 'default.test_having.`a`' in first() (or first_value) if you don't care which value you get.;\n+\n+\n+-- !query 17\n+SELECT 1 AS one FROM test_having HAVING a > 1\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`a`' given input columns: [one]; line 1 pos 40",
    "line": 155
  }],
  "prId": 25151
}]