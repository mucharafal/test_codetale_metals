[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "So, I think this can be worked around via `CAST(udf(max(a)) AS int)` for now",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T02:06:30Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]"
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "@HyukjinKwon For this particular case (query 24) the `CAST` wont work as its is dealing with Array type columns, which again will have different representations in Scala (WrappedArray) and Python. AFAIK, casting `array` type to `int` will result in `null`/`nan` which is again a problem.   ",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T03:42:22Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]"
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`nan` will be a problem too. For this one, I believe we can workaround via `upper(a)` or `lower(a)` for now. Since we're not testing the `NaN`, `null` differences between Python and Scala. \r\n\r\nMaybe we need a better way to handle it .. ",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T02:07:52Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]\n+\n+\n+-- !query 25\n+SELECT * FROM (\n+  SELECT earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR a IN (array(1, 1), array(2, 2))\n+)\n+-- !query 25 schema\n+struct<year:int,[1, 1]:string,[2, 2]:string>\n+-- !query 25 output\n+2012\t35000\tnan"
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "@HyukjinKwon here again similar to the case above the `nan` is coming as a result of the missing values while pivot. `a` being an array type, `upper` or `lower` isn't working as its still comparing to `null` or `None`",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T04:18:04Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]\n+\n+\n+-- !query 25\n+SELECT * FROM (\n+  SELECT earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR a IN (array(1, 1), array(2, 2))\n+)\n+-- !query 25 schema\n+struct<year:int,[1, 1]:string,[2, 2]:string>\n+-- !query 25 output\n+2012\t35000\tnan"
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's comment out those tests for now. We can say those tests are commented out because the current integrated UDFs cannot handle complex types.",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T06:31:07Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]"
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "will do",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-12T07:49:24Z",
    "diffHunk": "@@ -0,0 +1,494 @@\n+-- Automatically generated by SQLQueryTestSuite\n+-- Number of queries: 32\n+\n+\n+-- !query 0\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings)\n+-- !query 0 schema\n+struct<>\n+-- !query 0 output\n+\n+\n+\n+-- !query 1\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s)\n+-- !query 1 schema\n+struct<>\n+-- !query 1 output\n+\n+\n+\n+-- !query 2\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s)\n+-- !query 2 schema\n+struct<>\n+-- !query 2 output\n+\n+\n+\n+-- !query 3\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 3 schema\n+struct<udf(year):string,dotNET:string,Java:string>\n+-- !query 3 output\n+2012\t15000\t20000\n+2013\t48000\t30000\n+\n+\n+-- !query 4\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 4 schema\n+struct<course:string,2012:string,2013:string>\n+-- !query 4 output\n+Java\t20000\t30000\n+dotNET\t15000\t48000\n+\n+\n+-- !query 5\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 5 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(avg(cast(earnings as bigint))):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(avg(cast(earnings as bigint))):string>\n+-- !query 5 output\n+2012\t15000\t7500.0\t20000\t20000.0\n+2013\t48000\t48000.0\t30000\t30000.0\n+\n+\n+-- !query 6\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 6 schema\n+struct<dotNET:string,Java:string>\n+-- !query 6 output\n+63000\t50000\n+\n+\n+-- !query 7\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 7 schema\n+struct<dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(year)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(year)):string>\n+-- !query 7 output\n+63000\t2012\t50000\t2012\n+\n+\n+-- !query 8\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+)\n+-- !query 8 schema\n+struct<course:string,year:int,1:string,2:string>\n+-- !query 8 output\n+Java\t2012\t20000\tnan\n+Java\t2013\tnan\t30000\n+dotNET\t2012\t15000\tnan\n+dotNET\t2013\tnan\t48000\n+\n+\n+-- !query 9\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 9 schema\n+struct<year:int,dotNET_udf(sum(cast(earnings as bigint))):string,dotNET_udf(min(s)):string,Java_udf(sum(cast(earnings as bigint))):string,Java_udf(min(s)):string>\n+-- !query 9 output\n+2012\t15000\t1\t20000\t1\n+2013\t48000\t2\t30000\t2\n+\n+\n+-- !query 10\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 10 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 10 output\n+2012\t15000\t20000\n+2013\t96000\t60000\n+\n+\n+-- !query 11\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+)\n+-- !query 11 schema\n+struct<2012_s:string,2013_s:string,2012_a:string,2013_a:string,c:string>\n+-- !query 11 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 12\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+)\n+-- !query 12 schema\n+struct<firstYear_s:string,secondYear_s:string,firstYear_a:string,secondYear_a:string,c:string>\n+-- !query 12 output\n+15000\t48000\t7500.0\t48000.0\tdotNET\n+20000\t30000\t20000.0\t30000.0\tJava\n+\n+\n+-- !query 13\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 13 schema\n+struct<>\n+-- !query 13 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but 'coursesales.`earnings`' did not appear in any aggregate function.;\n+\n+\n+-- !query 14\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 14 schema\n+struct<>\n+-- !query 14 output\n+org.apache.spark.sql.AnalysisException\n+Aggregate expression required for pivot, but '__auto_generated_subquery_name.`year`' did not appear in any aggregate function.;\n+\n+\n+-- !query 15\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+)\n+-- !query 15 schema\n+struct<>\n+-- !query 15 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`year`' given input columns: [__auto_generated_subquery_name.course, __auto_generated_subquery_name.earnings]; line 4 pos 0\n+\n+\n+-- !query 16\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 16 schema\n+struct<year:int,dotNET_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,dotNET_a1:double,Java_udf(CEIL(cast(udf(sum(cast(earnings as bigint))) as double))):string,Java_a1:double>\n+-- !query 16 output\n+2012\t15000\t7501.0\t20000\t20001.0\n+2013\t48000\t48001.0\t30000\t30001.0\n+\n+\n+-- !query 17\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 17 schema\n+struct<>\n+-- !query 17 output\n+org.apache.spark.sql.AnalysisException\n+It is not allowed to use an aggregate function in the argument of another aggregate function. Please use the inner aggregate function in a sub-query.;\n+\n+\n+-- !query 18\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+)\n+-- !query 18 schema\n+struct<s:int,[dotNET, 2012]:string,[Java, 2013]:string>\n+-- !query 18 output\n+1\t15000\tnan\n+2\tnan\t30000\n+\n+\n+-- !query 19\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+)\n+-- !query 19 schema\n+struct<year:int,c1:string,c2:string>\n+-- !query 19 output\n+2012\tnan\t20000\n+2013\t48000\tnan\n+\n+\n+-- !query 20\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+)\n+-- !query 20 schema\n+struct<>\n+-- !query 20 output\n+org.apache.spark.sql.AnalysisException\n+Invalid pivot value 'dotNET': value data type string does not match pivot column data type struct<course:string,year:int>;\n+\n+\n+-- !query 21\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+)\n+-- !query 21 schema\n+struct<>\n+-- !query 21 output\n+org.apache.spark.sql.AnalysisException\n+cannot resolve '`s`' given input columns: [coursesales.course, coursesales.earnings, coursesales.year]; line 4 pos 15\n+\n+\n+-- !query 22\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+)\n+-- !query 22 schema\n+struct<>\n+-- !query 22 output\n+org.apache.spark.sql.AnalysisException\n+Literal expressions required for pivot values, found 'course#x';\n+\n+\n+-- !query 23\n+SELECT * FROM (\n+  SELECT course, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(min(a))\n+  FOR course IN ('dotNET', 'Java')\n+)\n+-- !query 23 schema\n+struct<year:int,dotNET:string,Java:string>\n+-- !query 23 output\n+2012\t[1 1]\t[1 1]\n+2013\t[2 2]\t[2 2]\n+\n+\n+-- !query 24\n+SELECT * FROM (\n+  SELECT course, year, y, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(max(a))\n+  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+)\n+-- !query 24 schema\n+struct<year:int,[2012, dotNET]:string,[2013, Java]:string>\n+-- !query 24 output\n+2012\t[1 1]\tNone\n+2013\tNone\t[2 2]"
  }],
  "prId": 25122
}]