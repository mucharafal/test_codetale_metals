[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Hi, @dilipbiswal .\r\nIs this the only exception case in `SELECT` syntax? Do we have a plan to support this `SELECT` query with `WITH`?",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T05:53:17Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+CREATE table  desc_temp3 (key int, val string) USING PARQUET;\n+\n+-- Simple Describe query\n+DESC SELECT key, key + 1 as plusone FROM desc_temp1;\n+DESC QUERY SELECT * FROM desc_temp2;\n+DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key;\n+DESC SELECT 10.00D as col1;\n+DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE);\n+DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2);\n+\n+\n+-- Error cases.\n+DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s;",
    "line": 16
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@dongjoon-hyun Yeah.. Wenchen suggested that we start with simple selects and then improve on it. I am planning to look into CTEs next. ",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T05:57:22Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+CREATE table  desc_temp3 (key int, val string) USING PARQUET;\n+\n+-- Simple Describe query\n+DESC SELECT key, key + 1 as plusone FROM desc_temp1;\n+DESC QUERY SELECT * FROM desc_temp2;\n+DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key;\n+DESC SELECT 10.00D as col1;\n+DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE);\n+DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2);\n+\n+\n+-- Error cases.\n+DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s;",
    "line": 16
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thanks!",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T06:14:02Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+CREATE table  desc_temp3 (key int, val string) USING PARQUET;\n+\n+-- Simple Describe query\n+DESC SELECT key, key + 1 as plusone FROM desc_temp1;\n+DESC QUERY SELECT * FROM desc_temp2;\n+DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key;\n+DESC SELECT 10.00D as col1;\n+DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE);\n+DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2);\n+\n+\n+-- Error cases.\n+DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s;",
    "line": 16
  }],
  "prId": 23883
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we remove this 3rd `CREATE table desc_temp3`? That is only used at multi-insert test case, `FROM ... INSERT ... INSERT`. And, we can use like the following.\r\n```\r\nFROM desc_temp1 a\r\nINSERT INTO desc_temp1 SELECT *\r\nINSERT INTO desc_temp2 SELECT *;\r\n```",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T06:27:57Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+CREATE table  desc_temp3 (key int, val string) USING PARQUET;"
  }],
  "prId": 23883
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we add `DESC QUERY FROM desc_temp1 a SELECT *` at line 13?",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T06:29:46Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+CREATE table  desc_temp3 (key int, val string) USING PARQUET;\n+\n+-- Simple Describe query\n+DESC SELECT key, key + 1 as plusone FROM desc_temp1;\n+DESC QUERY SELECT * FROM desc_temp2;\n+DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key;\n+DESC SELECT 10.00D as col1;\n+DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE);\n+DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2);",
    "line": 11
  }],
  "prId": 23883
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We need to remove this line, too. And, could you add a new line at the end? GitHub shows a warning here.",
    "commit": "7d7d7d220ee2002eb5fe073c917774000ae2f5b9",
    "createdAt": "2019-03-01T21:01:34Z",
    "diffHunk": "@@ -0,0 +1,28 @@\n+-- Test tables\n+CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET;\n+CREATE table  desc_temp2 (key int, val string) USING PARQUET;\n+\n+-- Simple Describe query\n+DESC SELECT key, key + 1 as plusone FROM desc_temp1;\n+DESC QUERY SELECT * FROM desc_temp2;\n+DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key;\n+DESC SELECT 10.00D as col1;\n+DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE);\n+DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2);\n+DESC QUERY FROM desc_temp1 a SELECT *;\n+\n+\n+-- Error cases.\n+DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s;\n+DESCRIBE QUERY WITH s AS (SELECT * from desc_temp1) SELECT * FROM s;\n+DESCRIBE INSERT INTO desc_temp1 values (1, 'val1');\n+DESCRIBE INSERT INTO desc_temp1 SELECT * FROM desc_temp2;\n+DESCRIBE\n+   FROM desc_temp1 a\n+     insert into desc_temp1 select *\n+     insert into desc_temp2 select *;\n+\n+-- cleanup\n+DROP TABLE desc_temp1;\n+DROP TABLE desc_temp2;\n+DROP TABLE desc_temp3;"
  }],
  "prId": 23883
}]