[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "I feel it's ok to move these tests to `except.sql`.",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-24T13:44:50Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES",
    "line": 1
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@maropu I thought we like to keep these sql files relatively small and not contain too many sqls.",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-24T14:15:58Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES",
    "line": 1
  }],
  "prId": 21857
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "super nit: need spaces like `(0), (1), (2), (3), ....`",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-24T13:52:42Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES\n+    (0),(1),(2),(2),(2),(2),(3),(null),(null) AS tab1(c1) ;"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@maropu Will do.",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-24T14:19:28Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES\n+    (0),(1),(2),(2),(2),(2),(3),(null),(null) AS tab1(c1) ;"
  }],
  "prId": 21857
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": ";",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-27T04:05:49Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES\n+    (0), (1), (2), (2), (2), (2), (3), (null), (null) AS tab1(c1);\n+CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES\n+    (1), (2), (2), (3), (5), (5), (null) AS tab2(c1);\n+CREATE TEMPORARY VIEW tab3 AS SELECT * FROM VALUES\n+    (1, 2), \n+    (1, 2),\n+    (1, 3),\n+    (2, 3),\n+    (2, 2)\n+    AS tab3(k, v);\n+CREATE TEMPORARY VIEW tab4 AS SELECT * FROM VALUES\n+    (1, 2), \n+    (2, 3),\n+    (2, 2),\n+    (2, 2),\n+    (2, 20)\n+    AS tab4(k, v);\n+\n+-- Basic ExceptAll\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2;\n+\n+-- ExceptAll same table in both branches\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2 WHERE c1 IS NOT NULL;\n+\n+-- Empty left relation\n+SELECT * FROM tab1 WHERE c1 > 5\n+EXCEPT ALL\n+SELECT * FROM tab2;\n+\n+-- Empty right relation\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2 WHERE c1 > 6;\n+\n+-- Type Coerced ExceptAll\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT CAST(1 AS BIGINT);\n+\n+-- Error as types of two side are not compatible\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT array(1);\n+\n+-- Basic\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4;\n+\n+-- Basic\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3;\n+\n+-- ExceptAll + Intersect\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3\n+INTERSECT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- ExceptAll + Except\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+UNION ALL\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Mismatch on number of columns across both branches\n+SELECT k FROM tab3\n+EXCEPT ALL\n+SELECT k, v FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+UNION\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+EXCEPT DISTINCT\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Join under except all. Should produce empty resultset since both left and right sets \n+-- are same.\n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k)\n+EXCEPT ALL \n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k);\n+\n+-- Join under except all (2)\n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k) \n+EXCEPT ALL \n+SELECT * \n+FROM   (SELECT tab4.v AS k, \n+               tab3.k AS v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k);\n+\n+-- Group by under ExceptAll\n+SELECT v FROM tab3 GROUP BY v\n+EXCEPT ALL\n+SELECT k FROM tab4 GROUP BY k "
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@gatorsmile Thank you. fixed.",
    "commit": "4e04883133b09189ecaba29cbe3919174da76ed8",
    "createdAt": "2018-07-27T04:50:27Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES\n+    (0), (1), (2), (2), (2), (2), (3), (null), (null) AS tab1(c1);\n+CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES\n+    (1), (2), (2), (3), (5), (5), (null) AS tab2(c1);\n+CREATE TEMPORARY VIEW tab3 AS SELECT * FROM VALUES\n+    (1, 2), \n+    (1, 2),\n+    (1, 3),\n+    (2, 3),\n+    (2, 2)\n+    AS tab3(k, v);\n+CREATE TEMPORARY VIEW tab4 AS SELECT * FROM VALUES\n+    (1, 2), \n+    (2, 3),\n+    (2, 2),\n+    (2, 2),\n+    (2, 20)\n+    AS tab4(k, v);\n+\n+-- Basic ExceptAll\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2;\n+\n+-- ExceptAll same table in both branches\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2 WHERE c1 IS NOT NULL;\n+\n+-- Empty left relation\n+SELECT * FROM tab1 WHERE c1 > 5\n+EXCEPT ALL\n+SELECT * FROM tab2;\n+\n+-- Empty right relation\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT * FROM tab2 WHERE c1 > 6;\n+\n+-- Type Coerced ExceptAll\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT CAST(1 AS BIGINT);\n+\n+-- Error as types of two side are not compatible\n+SELECT * FROM tab1\n+EXCEPT ALL\n+SELECT array(1);\n+\n+-- Basic\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4;\n+\n+-- Basic\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3;\n+\n+-- ExceptAll + Intersect\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3\n+INTERSECT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- ExceptAll + Except\n+SELECT * FROM tab4\n+EXCEPT ALL\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+UNION ALL\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Mismatch on number of columns across both branches\n+SELECT k FROM tab3\n+EXCEPT ALL\n+SELECT k, v FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+UNION\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Chain of set operations\n+SELECT * FROM tab3\n+EXCEPT ALL\n+SELECT * FROM tab4\n+EXCEPT DISTINCT\n+SELECT * FROM tab3\n+EXCEPT DISTINCT\n+SELECT * FROM tab4;\n+\n+-- Join under except all. Should produce empty resultset since both left and right sets \n+-- are same.\n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k)\n+EXCEPT ALL \n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k);\n+\n+-- Join under except all (2)\n+SELECT * \n+FROM   (SELECT tab3.k, \n+               tab4.v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k) \n+EXCEPT ALL \n+SELECT * \n+FROM   (SELECT tab4.v AS k, \n+               tab3.k AS v \n+        FROM   tab3 \n+               JOIN tab4 \n+                 ON tab3.k = tab4.k);\n+\n+-- Group by under ExceptAll\n+SELECT v FROM tab3 GROUP BY v\n+EXCEPT ALL\n+SELECT k FROM tab4 GROUP BY k "
  }],
  "prId": 21857
}]