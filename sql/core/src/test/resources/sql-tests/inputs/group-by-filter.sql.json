[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Can you add some tests for regular subqueries and correlated ones?",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-25T12:41:27Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES\n+(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)\n+AS testData(a, b);\n+\n+-- Aggregate with filter and empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData;\n+SELECT COUNT(a) FILTER (WHERE a = 1), COUNT(b) FILTER (WHERE a > 1) FROM testData;\n+\n+-- Aggregate with filter and non-empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData GROUP BY a;\n+SELECT a, COUNT(b) FILTER (WHERE a != 2) FROM testData GROUP BY b;\n+SELECT COUNT(a) FILTER (WHERE a >= 0), COUNT(b) FILTER (WHERE a >= 3) FROM testData GROUP BY a;\n+\n+-- Aggregate with filter and grouped by literals.\n+SELECT 'foo', COUNT(a) FILTER (WHERE b <= 2) FROM testData GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (hash aggregate).\n+SELECT 'foo', APPROX_COUNT_DISTINCT(a) FILTER (WHERE b >= 0) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (sort aggregate).\n+SELECT 'foo', MAX(STRUCT(a)) FILTER (WHERE b >= 1) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and complex GroupBy expressions.\n+SELECT a + b, COUNT(b) FILTER (WHERE b >= 2) FROM testData GROUP BY a + b;\n+SELECT a + 2, COUNT(b) FILTER (WHERE b IN (1, 2)) FROM testData GROUP BY a + 1;\n+SELECT a + 1 + 1, COUNT(b) FILTER (WHERE b > 0) FROM testData GROUP BY a + 1;",
    "line": 59
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-26T02:57:41Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES\n+(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)\n+AS testData(a, b);\n+\n+-- Aggregate with filter and empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData;\n+SELECT COUNT(a) FILTER (WHERE a = 1), COUNT(b) FILTER (WHERE a > 1) FROM testData;\n+\n+-- Aggregate with filter and non-empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData GROUP BY a;\n+SELECT a, COUNT(b) FILTER (WHERE a != 2) FROM testData GROUP BY b;\n+SELECT COUNT(a) FILTER (WHERE a >= 0), COUNT(b) FILTER (WHERE a >= 3) FROM testData GROUP BY a;\n+\n+-- Aggregate with filter and grouped by literals.\n+SELECT 'foo', COUNT(a) FILTER (WHERE b <= 2) FROM testData GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (hash aggregate).\n+SELECT 'foo', APPROX_COUNT_DISTINCT(a) FILTER (WHERE b >= 0) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (sort aggregate).\n+SELECT 'foo', MAX(STRUCT(a)) FILTER (WHERE b >= 1) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and complex GroupBy expressions.\n+SELECT a + b, COUNT(b) FILTER (WHERE b >= 2) FROM testData GROUP BY a + b;\n+SELECT a + 2, COUNT(b) FILTER (WHERE b IN (1, 2)) FROM testData GROUP BY a + 1;\n+SELECT a + 1 + 1, COUNT(b) FILTER (WHERE b > 0) FROM testData GROUP BY a + 1;",
    "line": 59
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Ah, can you add some tests for predicate with functions, too? https://github.com/apache/spark/blob/master/sql/core/src/test/resources/sql-tests/inputs/predicate-functions.sql",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-26T10:28:46Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES\n+(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)\n+AS testData(a, b);\n+\n+-- Aggregate with filter and empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData;\n+SELECT COUNT(a) FILTER (WHERE a = 1), COUNT(b) FILTER (WHERE a > 1) FROM testData;\n+\n+-- Aggregate with filter and non-empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData GROUP BY a;\n+SELECT a, COUNT(b) FILTER (WHERE a != 2) FROM testData GROUP BY b;\n+SELECT COUNT(a) FILTER (WHERE a >= 0), COUNT(b) FILTER (WHERE a >= 3) FROM testData GROUP BY a;\n+\n+-- Aggregate with filter and grouped by literals.\n+SELECT 'foo', COUNT(a) FILTER (WHERE b <= 2) FROM testData GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (hash aggregate).\n+SELECT 'foo', APPROX_COUNT_DISTINCT(a) FILTER (WHERE b >= 0) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (sort aggregate).\n+SELECT 'foo', MAX(STRUCT(a)) FILTER (WHERE b >= 1) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and complex GroupBy expressions.\n+SELECT a + b, COUNT(b) FILTER (WHERE b >= 2) FROM testData GROUP BY a + b;\n+SELECT a + 2, COUNT(b) FILTER (WHERE b IN (1, 2)) FROM testData GROUP BY a + 1;\n+SELECT a + 1 + 1, COUNT(b) FILTER (WHERE b > 0) FROM testData GROUP BY a + 1;",
    "line": 59
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-27T02:19:25Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES\n+(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)\n+AS testData(a, b);\n+\n+-- Aggregate with filter and empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData;\n+SELECT COUNT(a) FILTER (WHERE a = 1), COUNT(b) FILTER (WHERE a > 1) FROM testData;\n+\n+-- Aggregate with filter and non-empty GroupBy expressions.\n+SELECT a, COUNT(b) FILTER (WHERE a >= 2) FROM testData GROUP BY a;\n+SELECT a, COUNT(b) FILTER (WHERE a != 2) FROM testData GROUP BY b;\n+SELECT COUNT(a) FILTER (WHERE a >= 0), COUNT(b) FILTER (WHERE a >= 3) FROM testData GROUP BY a;\n+\n+-- Aggregate with filter and grouped by literals.\n+SELECT 'foo', COUNT(a) FILTER (WHERE b <= 2) FROM testData GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (hash aggregate).\n+SELECT 'foo', APPROX_COUNT_DISTINCT(a) FILTER (WHERE b >= 0) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and grouped by literals (sort aggregate).\n+SELECT 'foo', MAX(STRUCT(a)) FILTER (WHERE b >= 1) FROM testData WHERE a = 0 GROUP BY 1;\n+\n+-- Aggregate with filter and complex GroupBy expressions.\n+SELECT a + b, COUNT(b) FILTER (WHERE b >= 2) FROM testData GROUP BY a + b;\n+SELECT a + 2, COUNT(b) FILTER (WHERE b IN (1, 2)) FROM testData GROUP BY a + 1;\n+SELECT a + 1 + 1, COUNT(b) FILTER (WHERE b > 0) FROM testData GROUP BY a + 1;",
    "line": 59
  }],
  "prId": 26656
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Can you write most of tests for this pr here where possible? If you cannot, plz use `SQLQuerySuite` instead. (Currently, I think some tests are overlapped between `group-by-filter.sql` and `SQLQuerySuite`.",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-25T12:59:40Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES",
    "line": 4
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "I will add tests in `group-by-filter.sql`.",
    "commit": "cb31eea000d316305830ffb149f10fa5f3c5d333",
    "createdAt": "2019-11-26T02:58:22Z",
    "diffHunk": "@@ -0,0 +1,29 @@\n+-- Test filter clause for aggregate expression.\n+\n+-- Test data.\n+CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES",
    "line": 4
  }],
  "prId": 26656
}]