[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what does this comment mean?",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-21T13:35:53Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan not much actually :-). I will remove.",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-22T03:48:42Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain"
  }],
  "prId": 24759
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: add one blank line above.",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-21T13:36:38Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         INNER JOIN explain_temp2 b \n+                 ON a.key = b.key; \n+EXPLAIN FORMATTED"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan OK.\r\n",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-22T03:50:11Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         INNER JOIN explain_temp2 b \n+                 ON a.key = b.key; \n+EXPLAIN FORMATTED"
  }],
  "prId": 24759
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "inner join is the default join type, is this query different from the above one?",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-21T13:37:15Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         INNER JOIN explain_temp2 b "
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan you are right.. I will remove this case.",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-22T03:57:54Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+-- Simple explain\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         INNER JOIN explain_temp2 b "
  }],
  "prId": 24759
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Can we add one more test which has non-subquery inner children? Like `CreateViewCommand`, or `InsertIntoDataSourceCommand` as you mentioned before. ",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-22T12:51:24Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         LEFT OUTER JOIN explain_temp2 b \n+                      ON a.key = b.key;\n+\n+-- Subqueries nested.\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 \n+  WHERE  key = (SELECT max(key) \n+                FROM   explain_temp2 \n+                WHERE  key = (SELECT max(key) \n+                              FROM   explain_temp3 \n+                              WHERE  val > 0) \n+                       AND val = 2) \n+         AND val > 3;\n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 \n+  WHERE  key = (SELECT max(key) \n+                FROM   explain_temp2 \n+                WHERE  val > 0) \n+         OR\n+         key = (SELECT max(key) \n+                FROM   explain_temp3\n+                WHERE  val > 0);\n+\n+-- Reuse subquery\n+EXPLAIN FORMATTED\n+  SELECT (SELECT Avg(key) FROM explain_temp1) + (SELECT Avg(key) FROM explain_temp1)\n+  FROM explain_temp1;\n+\n+-- CTE + ReuseExchange\n+EXPLAIN FORMATTED\n+  WITH cte1 AS (\n+    SELECT *\n+    FROM explain_temp1 \n+    WHERE key > 10\n+  )\n+  SELECT * FROM cte1 a, cte1 b WHERE a.key = b.key;\n+\n+EXPLAIN FORMATTED\n+  WITH cte1 AS (\n+    SELECT key, max(val)\n+    FROM explain_temp1 \n+    WHERE key > 10\n+    GROUP BY key\n+  )\n+  SELECT * FROM cte1 a, cte1 b WHERE a.key = b.key;\n+",
    "line": 87
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan Added a test case for CreateViewCommand. It just shows structurally the plan looks okay. But unfortunately in the detail section not a whole lot shows up. Once we have the verboseString implementation for these nodes ... we should be okay. ",
    "commit": "f401175f7bd0e94db1722653734b92c9db57a779",
    "createdAt": "2019-08-23T00:15:47Z",
    "diffHunk": "@@ -0,0 +1,91 @@\n+-- Test tables\n+CREATE table  explain_temp1 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp2 (key int, val int) USING PARQUET;\n+CREATE table  explain_temp3 (key int, val int) USING PARQUET;\n+\n+SET spark.sql.codegen.wholeStage = true;\n+\n+-- single table\n+EXPLAIN FORMATTED\n+  SELECT key, max(val) \n+  FROM   explain_temp1 \n+  WHERE  key > 0 \n+  GROUP  BY key \n+  ORDER  BY key; \n+\n+EXPLAIN FORMATTED\n+  SELECT key, max(val)\n+  FROM explain_temp1\n+  WHERE key > 0\n+  GROUP BY key\n+  HAVING max(val) > 0;\n+\n+-- simple union\n+EXPLAIN FORMATTED\n+  SELECT key, val FROM explain_temp1 WHERE key > 0\n+  UNION \n+  SELECT key, val FROM explain_temp1 WHERE key > 0;\n+\n+-- Join\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a, \n+         explain_temp2 b \n+  WHERE  a.key = b.key; \n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 a \n+         LEFT OUTER JOIN explain_temp2 b \n+                      ON a.key = b.key;\n+\n+-- Subqueries nested.\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 \n+  WHERE  key = (SELECT max(key) \n+                FROM   explain_temp2 \n+                WHERE  key = (SELECT max(key) \n+                              FROM   explain_temp3 \n+                              WHERE  val > 0) \n+                       AND val = 2) \n+         AND val > 3;\n+\n+EXPLAIN FORMATTED\n+  SELECT * \n+  FROM   explain_temp1 \n+  WHERE  key = (SELECT max(key) \n+                FROM   explain_temp2 \n+                WHERE  val > 0) \n+         OR\n+         key = (SELECT max(key) \n+                FROM   explain_temp3\n+                WHERE  val > 0);\n+\n+-- Reuse subquery\n+EXPLAIN FORMATTED\n+  SELECT (SELECT Avg(key) FROM explain_temp1) + (SELECT Avg(key) FROM explain_temp1)\n+  FROM explain_temp1;\n+\n+-- CTE + ReuseExchange\n+EXPLAIN FORMATTED\n+  WITH cte1 AS (\n+    SELECT *\n+    FROM explain_temp1 \n+    WHERE key > 10\n+  )\n+  SELECT * FROM cte1 a, cte1 b WHERE a.key = b.key;\n+\n+EXPLAIN FORMATTED\n+  WITH cte1 AS (\n+    SELECT key, max(val)\n+    FROM explain_temp1 \n+    WHERE key > 10\n+    GROUP BY key\n+  )\n+  SELECT * FROM cte1 a, cte1 b WHERE a.key = b.key;\n+",
    "line": 87
  }],
  "prId": 24759
}]