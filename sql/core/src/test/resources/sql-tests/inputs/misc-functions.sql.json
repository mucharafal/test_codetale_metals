[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we test all the types?",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-19T12:35:29Z",
    "diffHunk": "@@ -0,0 +1,7 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(1);"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "added.",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-19T14:04:36Z",
    "diffHunk": "@@ -0,0 +1,7 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(1);"
  }],
  "prId": 26599
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "let's also add `struct(...)`",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-19T14:34:45Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);\n+select typeof(cast(1.0 as float)), typeof(1.0D), typeof(1.2);\n+select typeof(date '1986-05-23'),  typeof(timestamp '1986-05-23'), typeof(interval '23 days');\n+select typeof(x'ABCD'), typeof('SPARK'), typeof(cast('SPARK' as char(10))), typeof(cast('SPARK' as varchar(10)));\n+select typeof(array(1, 2)), typeof(map(1, 2));"
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "ah, thanks, I forgot this one.",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-19T14:40:56Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);\n+select typeof(cast(1.0 as float)), typeof(1.0D), typeof(1.2);\n+select typeof(date '1986-05-23'),  typeof(timestamp '1986-05-23'), typeof(interval '23 days');\n+select typeof(x'ABCD'), typeof('SPARK'), typeof(cast('SPARK' as char(10))), typeof(cast('SPARK' as varchar(10)));\n+select typeof(array(1, 2)), typeof(map(1, 2));"
  }],
  "prId": 26599
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`cast('SPARK' as char(10))` this is testing the type alias, it's not related to `typeof`, let's remove them.",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-19T14:35:42Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);\n+select typeof(cast(1.0 as float)), typeof(1.0D), typeof(1.2);\n+select typeof(date '1986-05-23'),  typeof(timestamp '1986-05-23'), typeof(interval '23 days');\n+select typeof(x'ABCD'), typeof('SPARK'), typeof(cast('SPARK' as char(10))), typeof(cast('SPARK' as varchar(10)));"
  }],
  "prId": 26599
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we use `named_struct('a', 1, 'b', 'spark')`? Then, you can simply add this to line 10 for all complex types.",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T04:40:48Z",
    "diffHunk": "@@ -0,0 +1,11 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);\n+select typeof(cast(1.0 as float)), typeof(1.0D), typeof(1.2);\n+select typeof(date '1986-05-23'),  typeof(timestamp '1986-05-23'), typeof(interval '23 days');\n+select typeof(x'ABCD'), typeof('SPARK');\n+select typeof(array(1, 2)), typeof(map(1, 2));\n+select typeof(struct(a, b)) from values (1, 'SPARK') tbl(a, b);"
  }],
  "prId": 26599
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do you know why these tests pass before we add `UTF8String.fromString`?",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T13:21:59Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);",
    "line": 6
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah I got it. The rule constant folding calls `Literal.create(e.eval(EmptyRow), e.dataType)`, which converts the data to internal format.\r\n\r\nNow I'm curious about how we expose this bug with UDT...",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T13:23:52Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);",
    "line": 6
  }, {
    "author": {
      "login": "yaooqinn"
    },
    "body": "~~In `CatalystTypeConverters`~~\r\n```scala\r\n /**\r\n   *  Converts Scala objects to Catalyst rows / types.\r\n   *\r\n   *  Note: This should be called before do evaluation on Row\r\n   *        (It does not support UDT)\r\n   *  This is used to create an RDD or test results with correct types for Catalyst.\r\n   */\r\n  def convertToCatalyst(a: Any): Any = a match {\r\n```",
    "commit": "5759be3abea554b325d7696961ebf1e2d4385f8c",
    "createdAt": "2019-11-20T13:41:56Z",
    "diffHunk": "@@ -0,0 +1,10 @@\n+-- test for misc functions\n+\n+-- typeof\n+select typeof(null);\n+select typeof(true);\n+select typeof(1Y), typeof(1S), typeof(1), typeof(1L);",
    "line": 6
  }],
  "prId": 26599
}]