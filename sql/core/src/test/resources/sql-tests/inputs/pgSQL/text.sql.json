[{
  "comments": [{
    "author": {
      "login": "wangyum"
    },
    "body": "Do we need to test `variadic` labeled argument?",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-06-13T12:47:00Z",
    "diffHunk": "@@ -0,0 +1,131 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA1/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS false;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;\n+\n+-- but not this:\n+-- Spark SQL implicit cast both side to string\n+select 3 || 4.0;\n+\n+/*\n+ * various string functions\n+ */\n+select concat('one');\n+-- Spark SQL does not support YYYYMMDD, we replace it to yyyyMMdd\n+select concat(1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws('#','one');\n+select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws(',',10,20,null,30);\n+select concat_ws('',10,20,null,30);\n+select concat_ws(NULL,10,20,null,30) is null;\n+select reverse('abcde');\n+-- [SPARK-28036] Built-in udf left/right has inconsistent behavior\n+select i, left('ahoj', i), right('ahoj', i) from range(-5, 5) t(i) order by i;\n+-- [SPARK-28037] Add built-in String Functions: quote_literal\n+select quote_literal('');\n+select quote_literal('abc''');\n+select quote_literal(e'\\\\');\n+-- check variadic labeled argument\n+select concat(variadic array[1,2,3]);"
  }],
  "prId": 24862
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "FYI: If we strictly follow ANSI/SQL, we don't allow this implicit cast along with PostgresSQL.\r\ncc: @gengliangwang ",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T01:06:20Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);",
    "line": 22
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Is this casting an integer to string? If yes, I think it is allowed in ANSI SQL and up-cast.",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-31T03:36:55Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);",
    "line": 22
  }],
  "prId": 24862
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "nit: duplicate test",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T01:14:01Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Update it to `select 'four: ' || 2+2;`?\r\n\r\nhttps://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql#L25-L26",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T02:19:02Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;"
  }],
  "prId": 24862
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Why did you comment out this? (I just want to check current output...)",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T01:24:12Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;\n+\n+-- but not this:\n+-- Spark SQL implicit cast both side to string\n+select 3 || 4.0;\n+\n+/*\n+ * various string functions\n+ */\n+select concat('one');\n+-- Spark SQL does not support YYYYMMDD, we replace it to yyyyMMdd\n+select concat(1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws('#','one');\n+select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws(',',10,20,null,30);\n+select concat_ws('',10,20,null,30);\n+select concat_ws(NULL,10,20,null,30) is null;\n+select reverse('abcde');\n+-- [SPARK-28036] Built-in udf left/right has inconsistent behavior\n+-- select i, left('ahoj', i), right('ahoj', i) from range(-5, 5) t(i) order by i;"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Because of ANSI mode:\r\n```sql\r\nspark-sql> select left('12345', 2);\r\n12\r\nspark-sql> set spark.sql.parser.ansi.enabled=true;\r\nspark.sql.parser.ansi.enabled\ttrue\r\nspark-sql> select left('12345', 2);\r\nError in query:\r\nno viable alternative at input 'left'(line 1, pos 7)\r\n\r\n== SQL ==\r\nselect left('12345', 2)\r\n-------^^^\r\n```\r\n\r\nhttps://issues.apache.org/jira/browse/SPARK-28479\r\n\r\nThe output if disable ANSI mode:\r\n\r\n**Spark SQL**:\r\n```sql\r\nspark-sql> select i, left('ahoj', i), right('ahoj', i) from range(-5, 6) t(i) order by i;\r\n-5\r\n-4\r\n-3\r\n-2\r\n-1\r\n0\r\n1\ta\tj\r\n2\tah\toj\r\n3\taho\thoj\r\n4\tahoj\tahoj\r\n5\tahoj\tahoj\r\n```\r\n**PostgreSQL**:\r\n```sql\r\npostgres=# select i, left('ahoj', i), right('ahoj', i) from generate_series(-5, 5) t(i) order by i;\r\n i  | left | right\r\n----+------+-------\r\n -5 |      |\r\n -4 |      |\r\n -3 | a    | j\r\n -2 | ah   | oj\r\n -1 | aho  | hoj\r\n  0 |      |\r\n  1 | a    | j\r\n  2 | ah   | oj\r\n  3 | aho  | hoj\r\n  4 | ahoj | ahoj\r\n  5 | ahoj | ahoj\r\n(11 rows)\r\n```",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T02:30:58Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;\n+\n+-- but not this:\n+-- Spark SQL implicit cast both side to string\n+select 3 || 4.0;\n+\n+/*\n+ * various string functions\n+ */\n+select concat('one');\n+-- Spark SQL does not support YYYYMMDD, we replace it to yyyyMMdd\n+select concat(1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws('#','one');\n+select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws(',',10,20,null,30);\n+select concat_ws('',10,20,null,30);\n+select concat_ws(NULL,10,20,null,30) is null;\n+select reverse('abcde');\n+-- [SPARK-28036] Built-in udf left/right has inconsistent behavior\n+-- select i, left('ahoj', i), right('ahoj', i) from range(-5, 5) t(i) order by i;"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Ah, I see. Can you turn temporarily off the mode for the query here?",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T03:42:20Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;\n+\n+-- but not this:\n+-- Spark SQL implicit cast both side to string\n+select 3 || 4.0;\n+\n+/*\n+ * various string functions\n+ */\n+select concat('one');\n+-- Spark SQL does not support YYYYMMDD, we replace it to yyyyMMdd\n+select concat(1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws('#','one');\n+select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws(',',10,20,null,30);\n+select concat_ws('',10,20,null,30);\n+select concat_ws(NULL,10,20,null,30) is null;\n+select reverse('abcde');\n+-- [SPARK-28036] Built-in udf left/right has inconsistent behavior\n+-- select i, left('ahoj', i), right('ahoj', i) from range(-5, 5) t(i) order by i;"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Done",
    "commit": "10204c6410204a8def8d882b1a511e33bc357033",
    "createdAt": "2019-07-30T10:26:15Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- TEXT\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/text.sql\n+\n+SELECT string('this is a text string') = string('this is a text string') AS true;\n+\n+SELECT string('this is a text string') = string('this is a text strin') AS `false`;\n+\n+CREATE TABLE TEXT_TBL (f1 string) USING parquet;\n+\n+INSERT INTO TEXT_TBL VALUES ('doh!');\n+INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');\n+\n+SELECT '' AS two, * FROM TEXT_TBL;\n+\n+-- As of 8.3 we have removed most implicit casts to text, so that for example\n+-- this no longer works:\n+-- Spark SQL implicit cast integer to string\n+select length(42);\n+\n+-- But as a special exception for usability's sake, we still allow implicit\n+-- casting to text in concatenations, so long as the other input is text or\n+-- an unknown literal.  So these work:\n+-- [SPARK-28033] String concatenation low priority than other arithmeticBinary\n+select string('four: ') || 2+2;\n+select string('four: ') || 2+2;\n+\n+-- but not this:\n+-- Spark SQL implicit cast both side to string\n+select 3 || 4.0;\n+\n+/*\n+ * various string functions\n+ */\n+select concat('one');\n+-- Spark SQL does not support YYYYMMDD, we replace it to yyyyMMdd\n+select concat(1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws('#','one');\n+select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','yyyyMMdd'));\n+select concat_ws(',',10,20,null,30);\n+select concat_ws('',10,20,null,30);\n+select concat_ws(NULL,10,20,null,30) is null;\n+select reverse('abcde');\n+-- [SPARK-28036] Built-in udf left/right has inconsistent behavior\n+-- select i, left('ahoj', i), right('ahoj', i) from range(-5, 5) t(i) order by i;"
  }],
  "prId": 24862
}]