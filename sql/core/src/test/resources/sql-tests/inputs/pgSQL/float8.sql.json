[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "It's interesting. For Spark, `Infinity`, `-Infinity`, `0.0`. `-0.0`.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:00:09Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');",
    "line": 21
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yes. All of these are known issues (case-sensitivity and trim).",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:01:16Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');",
    "line": 44
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For the above three, `NULL` looks reasonable in Spark instead of `ERROR:  invalid input syntax for type double precision`.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:02:26Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');",
    "line": 49
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Please move line 51 to below line 52. \r\nLine 52 returns `Infinity` in both Spark and PostgreSQL. So, there is no problem like SPARK-28060.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:04:32Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');\n+\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('Infinity') + 100.0;",
    "line": 51
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Yes. It is.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-15T08:53:44Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');\n+\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('Infinity') + 100.0;",
    "line": 51
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For line 54, please use `NaN` which Spark can understand because this is not for testing case sensitivity.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:05:17Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');\n+\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('Infinity') + 100.0;\n+SELECT double('Infinity') / double('Infinity');\n+SELECT double('nan') / double('nan');\n+SELECT double(decimal('nan'));",
    "line": 56
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Ah. I got this. This is blocked by #25041 because this is a new feature in Presto 12.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-10T19:08:14Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');\n+\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('Infinity') + 100.0;\n+SELECT double('Infinity') / double('Infinity');\n+SELECT double('nan') / double('nan');\n+SELECT double(decimal('nan'));\n+\n+SELECT '' AS five, * FROM FLOAT8_TBL;\n+\n+SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';\n+\n+SELECT '' AS one, f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3';\n+\n+SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;\n+\n+SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';\n+\n+SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;\n+\n+SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';\n+\n+SELECT '' AS three, f.f1, f.f1 * '-10' AS x\n+   FROM FLOAT8_TBL f\n+   WHERE f.f1 > '0.0';\n+\n+SELECT '' AS three, f.f1, f.f1 + '-10' AS x\n+   FROM FLOAT8_TBL f\n+   WHERE f.f1 > '0.0';\n+\n+SELECT '' AS three, f.f1, f.f1 / '-10' AS x\n+   FROM FLOAT8_TBL f\n+   WHERE f.f1 > '0.0';\n+\n+SELECT '' AS three, f.f1, f.f1 - '-10' AS x\n+   FROM FLOAT8_TBL f\n+   WHERE f.f1 > '0.0';\n+-- [SPARK-28007] Caret operator (^) means bitwise XOR in Spark/Hive and exponentiation in Postgres\n+-- SELECT '' AS one, f.f1 ^ '2.0' AS square_f1\n+--    FROM FLOAT8_TBL f where f.f1 = '1004.3';\n+\n+-- [SPARK-28027] Spark SQL does not support prefix operator @\n+-- absolute value\n+-- SELECT '' AS five, f.f1, @f.f1 AS abs_f1\n+--    FROM FLOAT8_TBL f;\n+\n+-- [SPARK-23906] Support Truncate number\n+-- truncate\n+-- SELECT '' AS five, f.f1, trunc(f.f1) AS trunc_f1\n+--    FROM FLOAT8_TBL f;\n+\n+-- round\n+SELECT '' AS five, f.f1, round(f.f1) AS round_f1\n+   FROM FLOAT8_TBL f;\n+\n+-- [SPARK-28135] ceil/ceiling/floor returns incorrect values\n+-- ceil / ceiling\n+select ceil(f1) as ceil_f1 from float8_tbl f;\n+select ceiling(f1) as ceiling_f1 from float8_tbl f;\n+\n+-- floor\n+select floor(f1) as floor_f1 from float8_tbl f;\n+\n+-- sign\n+select sign(f1) as sign_f1 from float8_tbl f;\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+-- square root\n+SELECT sqrt(double('64')) AS eight;\n+\n+-- [SPARK-28027] Spark SQL does not support prefix operator |/\n+-- SELECT |/ float8 '64' AS eight;\n+\n+-- SELECT '' AS three, f.f1, |/f.f1 AS sqrt_f1\n+--    FROM FLOAT8_TBL f\n+--    WHERE f.f1 > '0.0';\n+\n+-- power\n+SELECT power(double('144'), double('0.5'));\n+SELECT power(double('NaN'), double('0.5'));\n+SELECT power(double('144'), double('NaN'));\n+SELECT power(double('NaN'), double('NaN'));\n+SELECT power(double('-1'), double('NaN'));\n+-- [SPARK-28135] power returns incorrect values\n+SELECT power(double('1'), double('NaN'));\n+SELECT power(double('NaN'), double('0'));\n+\n+-- take exp of ln(f.f1)\n+SELECT '' AS three, f.f1, exp(ln(f.f1)) AS exp_ln_f1\n+   FROM FLOAT8_TBL f\n+   WHERE f.f1 > '0.0';\n+\n+-- [SPARK-28027] Spark SQL does not support prefix operator ||/\n+-- cube root\n+-- SELECT ||/ float8 '27' AS three;\n+\n+-- SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f;\n+\n+\n+SELECT '' AS five, * FROM FLOAT8_TBL;\n+\n+-- UPDATE FLOAT8_TBL\n+--    SET f1 = FLOAT8_TBL.f1 * '-1'\n+--    WHERE FLOAT8_TBL.f1 > '0.0';\n+-- Update the FLOAT8_TBL to UPDATED_FLOAT8_TBL\n+CREATE TEMPORARY VIEW UPDATED_FLOAT8_TBL as\n+SELECT\n+  CASE WHEN FLOAT8_TBL.f1 > '0.0' THEN FLOAT8_TBL.f1 * '-1' ELSE FLOAT8_TBL.f1 END AS f1\n+FROM FLOAT8_TBL;\n+\n+-- [SPARK-27923] Out of range, Spark SQL returns Infinity\n+SELECT '' AS bad, f.f1 * '1e200' from UPDATED_FLOAT8_TBL f;\n+\n+-- [SPARK-28007] Caret operator (^) means bitwise XOR in Spark/Hive and exponentiation in Postgres\n+-- SELECT '' AS bad, f.f1 ^ '1e200' from UPDATED_FLOAT8_TBL f;\n+\n+-- SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;\n+\n+-- [SPARK-27923] Cannot take logarithm of zero\n+-- SELECT '' AS bad, ln(f.f1) from UPDATED_FLOAT8_TBL f where f.f1 = '0.0' ;\n+\n+-- [SPARK-27923] Cannot take logarithm of a negative number\n+-- SELECT '' AS bad, ln(f.f1) from UPDATED_FLOAT8_TBL f where f.f1 < '0.0' ;\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- SELECT '' AS bad, exp(f.f1) from UPDATED_FLOAT8_TBL f;\n+\n+-- [SPARK-27923] Divide by zero, Spark SQL returns NULL\n+-- SELECT '' AS bad, f.f1 / '0.0' from UPDATED_FLOAT8_TBL f;\n+\n+SELECT '' AS five, * FROM UPDATED_FLOAT8_TBL;\n+\n+-- [SPARK-28133] Missing hyperbolic functions"
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "wangyum"
    },
    "body": "Do we need to rewrite `sinh(float8 'infinity')` to `sinh(double('Infinity'))`?",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-15T09:34:47Z",
    "diffHunk": "@@ -180,16 +180,16 @@ SELECT '' AS bad, f.f1 * '1e200' from UPDATED_FLOAT8_TBL f;\n \n SELECT '' AS five, * FROM UPDATED_FLOAT8_TBL;\n \n--- [SPARK-28133] Missing hyperbolic functions\n -- hyperbolic functions\n -- we run these with extra_float_digits = 0 too, since different platforms\n -- tend to produce results that vary in the last place.\n--- SELECT sinh(float8 '1');\n--- SELECT cosh(float8 '1');\n--- SELECT tanh(float8 '1');\n--- SELECT asinh(float8 '1');\n--- SELECT acosh(float8 '2');\n--- SELECT atanh(float8 '0.5');\n+SELECT sinh(double('1'));\n+SELECT cosh(double('1'));\n+SELECT tanh(double('1'));\n+SELECT asinh(double('1'));\n+SELECT acosh(double('2'));\n+SELECT atanh(double('0.5'));\n+-- [SPARK-27768] Infinity, -Infinity, NaN should be recognized in a case insensitive manner\n -- test Inf/NaN cases for hyperbolic functions\n -- SELECT sinh(float8 'infinity');"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yes, please~ It's because the main purpose of these lines are not about case sensitivity.",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-15T16:35:52Z",
    "diffHunk": "@@ -180,16 +180,16 @@ SELECT '' AS bad, f.f1 * '1e200' from UPDATED_FLOAT8_TBL f;\n \n SELECT '' AS five, * FROM UPDATED_FLOAT8_TBL;\n \n--- [SPARK-28133] Missing hyperbolic functions\n -- hyperbolic functions\n -- we run these with extra_float_digits = 0 too, since different platforms\n -- tend to produce results that vary in the last place.\n--- SELECT sinh(float8 '1');\n--- SELECT cosh(float8 '1');\n--- SELECT tanh(float8 '1');\n--- SELECT asinh(float8 '1');\n--- SELECT acosh(float8 '2');\n--- SELECT atanh(float8 '0.5');\n+SELECT sinh(double('1'));\n+SELECT cosh(double('1'));\n+SELECT tanh(double('1'));\n+SELECT asinh(double('1'));\n+SELECT acosh(double('2'));\n+SELECT atanh(double('0.5'));\n+-- [SPARK-27768] Infinity, -Infinity, NaN should be recognized in a case insensitive manner\n -- test Inf/NaN cases for hyperbolic functions\n -- SELECT sinh(float8 'infinity');"
  }],
  "prId": 24931
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Could you add a comment SPARK-28315 before line 55?",
    "commit": "f49cf432392118137a16fe5619b55dfa0520262c",
    "createdAt": "2019-07-16T03:08:04Z",
    "diffHunk": "@@ -0,0 +1,499 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- FLOAT8\n+-- https://github.com/postgres/postgres/blob/REL_12_BETA2/src/test/regress/sql/float8.sql\n+\n+CREATE TABLE FLOAT8_TBL(f1 double) USING parquet;\n+\n+INSERT INTO FLOAT8_TBL VALUES ('    0.0   ');\n+INSERT INTO FLOAT8_TBL VALUES ('1004.30  ');\n+INSERT INTO FLOAT8_TBL VALUES ('   -34.84');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e+200');\n+INSERT INTO FLOAT8_TBL VALUES ('1.2345678901234e-200');\n+\n+-- [SPARK-28024] Incorrect numeric values when out of range\n+-- test for underflow and overflow handling\n+SELECT double('10e400');\n+SELECT double('-10e400');\n+SELECT double('10e-400');\n+SELECT double('-10e-400');\n+\n+-- [SPARK-28061] Support for converting float to binary format\n+-- test smallest normalized input\n+-- SELECT float8send('2.2250738585072014E-308'::float8);\n+\n+-- [SPARK-27923] Spark SQL insert there bad inputs to NULL\n+-- bad input\n+-- INSERT INTO FLOAT8_TBL VALUES ('');\n+-- INSERT INTO FLOAT8_TBL VALUES ('     ');\n+-- INSERT INTO FLOAT8_TBL VALUES ('xyz');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.0.0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5 . 0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('5.   0');\n+-- INSERT INTO FLOAT8_TBL VALUES ('    - 3');\n+-- INSERT INTO FLOAT8_TBL VALUES ('123           5');\n+\n+-- special inputs\n+SELECT double('NaN');\n+-- [SPARK-28060] Double type can not accept some special inputs\n+SELECT double('nan');\n+SELECT double('   NAN  ');\n+SELECT double('infinity');\n+SELECT double('          -INFINiTY   ');\n+-- [SPARK-27923] Spark SQL insert there bad special inputs to NULL\n+-- bad special inputs\n+SELECT double('N A N');\n+SELECT double('NaN x');\n+SELECT double(' INFINITY    x');\n+\n+SELECT double('Infinity') + 100.0;\n+-- [SPARK-27768] Infinity, -Infinity, NaN should be recognized in a case insensitive manner\n+SELECT double('Infinity') / double('Infinity');\n+SELECT double('NaN') / double('NaN');",
    "line": 54
  }],
  "prId": 24931
}]