[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since we are not running this, shall we keep the original?\r\n```\r\ninsert into inserttest values(10, 20, '40'), (-1, 2, DEFAULT),\r\n```",
    "commit": "7dda88298b5f4a19ea78189b911a6734eb309d64",
    "createdAt": "2019-11-05T06:24:39Z",
    "diffHunk": "@@ -0,0 +1,652 @@\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+-- INSERT\n+-- https://github.com/postgres/postgres/blob/REL_12_STABLE/src/test/regress/sql/insert.sql\n+\n+--\n+-- insert with DEFAULT in the target_list\n+--\n+-- [SPARK-19842] Informational Referential Integrity Constraints Support in Spark\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+create table inserttest (col1 int, col2 int /* NOT NULL */, col3 string /* default 'testing' */) using parquet;\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- [SPARK-20845] Support specification of column names in INSERT INTO\n+-- Skip a test below because the PK constraint is violated and the query fails in PostgreSQL\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT, DEFAULT);\n+-- insert into inserttest (col2, col3) values (3, DEFAULT);\n+insert into inserttest  values (NULL, 3, 'testing');\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, 5, DEFAULT);\n+insert into inserttest values (NULL, 5, 'testing');\n+-- insert into inserttest values (DEFAULT, 5, 'test');\n+insert into inserttest values (NULL, 5, 'test');\n+-- insert into inserttest values (DEFAULT, 7);\n+insert into inserttest values (NULL, 7, 'testing');\n+\n+select * from inserttest;\n+\n+--\n+-- insert with similar expression / target_list values (all fail)\n+--\n+-- [SPARK-20845] Support specification of column names in INSERT INTO\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT);\n+-- insert into inserttest (col1, col2, col3) values (1, 2);\n+-- insert into inserttest (col1) values (1, 2);\n+-- insert into inserttest (col1) values (DEFAULT, DEFAULT);\n+\n+-- select * from inserttest;\n+\n+--\n+-- VALUES test\n+--\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- [SPARK-29715] Support SELECT statements in VALUES of INSERT INTO\n+-- insert into inserttest values(10, 20, '40'), (-1, 2, 'testing' /* DEFAULT */),"
  }],
  "prId": 26360
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Add the following before line 165?\r\n```\r\n-- [SPARK-29718] Support PARTITION BY [RANGE|LIST|HASH] and PARTITION OF in CREATE TABLE\r\n```",
    "commit": "7dda88298b5f4a19ea78189b911a6734eb309d64",
    "createdAt": "2019-11-05T06:28:01Z",
    "diffHunk": "@@ -0,0 +1,652 @@\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+-- INSERT\n+-- https://github.com/postgres/postgres/blob/REL_12_STABLE/src/test/regress/sql/insert.sql\n+\n+--\n+-- insert with DEFAULT in the target_list\n+--\n+-- [SPARK-19842] Informational Referential Integrity Constraints Support in Spark\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+create table inserttest (col1 int, col2 int /* NOT NULL */, col3 string /* default 'testing' */) using parquet;\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- [SPARK-20845] Support specification of column names in INSERT INTO\n+-- Skip a test below because the PK constraint is violated and the query fails in PostgreSQL\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT, DEFAULT);\n+-- insert into inserttest (col2, col3) values (3, DEFAULT);\n+insert into inserttest  values (NULL, 3, 'testing');\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, 5, DEFAULT);\n+insert into inserttest values (NULL, 5, 'testing');\n+-- insert into inserttest values (DEFAULT, 5, 'test');\n+insert into inserttest values (NULL, 5, 'test');\n+-- insert into inserttest values (DEFAULT, 7);\n+insert into inserttest values (NULL, 7, 'testing');\n+\n+select * from inserttest;\n+\n+--\n+-- insert with similar expression / target_list values (all fail)\n+--\n+-- [SPARK-20845] Support specification of column names in INSERT INTO\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT);\n+-- insert into inserttest (col1, col2, col3) values (1, 2);\n+-- insert into inserttest (col1) values (1, 2);\n+-- insert into inserttest (col1) values (DEFAULT, DEFAULT);\n+\n+-- select * from inserttest;\n+\n+--\n+-- VALUES test\n+--\n+-- [SPARK-29119] DEFAULT option is not supported in Spark\n+-- [SPARK-29715] Support SELECT statements in VALUES of INSERT INTO\n+-- insert into inserttest values(10, 20, '40'), (-1, 2, 'testing' /* DEFAULT */),\n+--     ((select 2), (select i from (values(3)) as foo (i)), 'values are fun!');\n+\n+-- select * from inserttest;\n+\n+--\n+-- TOASTed value test\n+--\n+insert into inserttest values(30, 50, repeat('x', 10000));\n+\n+select col1, col2, char_length(col3) from inserttest;\n+\n+drop table inserttest;\n+\n+--\n+-- check indirection (field/array assignment), cf bug #14265\n+--\n+-- these tests are aware that transformInsertStmt has 3 separate code paths\n+--\n+\n+-- [SPARK-29716] Support [CREATE|DROP] TYPE\n+-- create type insert_test_type as (if1 int, if2 array<string>);\n+\n+-- create table inserttest (f1 int, f2 int[],\n+--                          f3 insert_test_type, f4 insert_test_type[]);\n+--\n+-- insert into inserttest (f2[1], f2[2]) values (1,2);\n+-- insert into inserttest (f2[1], f2[2]) values (3,4), (5,6);\n+-- insert into inserttest (f2[1], f2[2]) select 7,8;\n+-- insert into inserttest (f2[1], f2[2]) values (1,default);  -- not supported\n+--\n+-- insert into inserttest (f3.if1, f3.if2) values (1,array['foo']);\n+-- insert into inserttest (f3.if1, f3.if2) values (1,'{foo}'), (2,'{bar}');\n+-- insert into inserttest (f3.if1, f3.if2) select 3, '{baz,quux}';\n+-- insert into inserttest (f3.if1, f3.if2) values (1,default);  -- not supported\n+--\n+-- insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar');\n+-- insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar'), ('baz', 'quux');\n+-- insert into inserttest (f3.if2[1], f3.if2[2]) select 'bear', 'beer';\n+--\n+-- insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar');\n+-- insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar'), ('baz', 'quux');\n+-- insert into inserttest (f4[1].if2[1], f4[1].if2[2]) select 'bear', 'beer';\n+--\n+-- select * from inserttest;\n+\n+-- also check reverse-listing\n+-- create table inserttest2 (f1 bigint, f2 string);\n+-- [SPARK-29717] Support [CREATE|DROP] RULE - define a new plan rewrite rule\n+-- create rule irule1 as on insert to inserttest2 do also\n+--   insert into inserttest (f3.if2[1], f3.if2[2])\n+--   values (new.f1,new.f2);\n+-- create rule irule2 as on insert to inserttest2 do also\n+--   insert into inserttest (f4[1].if1, f4[1].if2[2])\n+--   values (1,'fool'),(new.f1,new.f2);\n+-- create rule irule3 as on insert to inserttest2 do also\n+--   insert into inserttest (f4[1].if1, f4[1].if2[2])\n+--   select new.f1, new.f2;\n+-- \\d+ inserttest2\n+\n+-- drop table inserttest2;\n+-- drop table inserttest;\n+-- [SPARK-29716] Support [CREATE|DROP] TYPE\n+-- drop type insert_test_type;\n+\n+-- direct partition inserts should check partition bound constraint\n+-- [SPARK-29718] Support PARTITION BY [RANGE|LIST|HASH] and PARTITION OF in CREATE TABLE\n+-- create table range_parted (\n+-- \ta string,\n+-- \tb int\n+-- ) partition by range (a, (b+0));\n+\n+-- no partitions, so fail\n+-- insert into range_parted values ('a', 11);\n+\n+-- [SPARK-29718] Support PARTITION BY [RANGE|LIST|HASH] and PARTITION OF in CREATE TABLE\n+-- create table part1 partition of range_parted for values from ('a', 1) to ('a', 10);\n+-- create table part2 partition of range_parted for values from ('a', 10) to ('a', 20);\n+-- create table part3 partition of range_parted for values from ('b', 1) to ('b', 10);\n+-- create table part4 partition of range_parted for values from ('b', 10) to ('b', 20);\n+\n+-- fail\n+-- insert into part1 values ('a', 11);\n+-- insert into part1 values ('b', 1);\n+-- ok\n+-- insert into part1 values ('a', 1);\n+-- fail\n+-- insert into part4 values ('b', 21);\n+-- insert into part4 values ('a', 10);\n+-- ok\n+-- insert into part4 values ('b', 10);\n+\n+-- fail (partition key a has a NOT NULL constraint)\n+-- insert into part1 values (null);\n+-- fail (expression key (b+0) cannot be null either)\n+-- insert into part1 values (1);\n+\n+-- [SPARK-29718] Support PARTITION BY [RANGE|LIST|HASH] and PARTITION OF in CREATE TABLE\n+-- create table list_parted (\n+-- \ta text,\n+-- \tb int\n+-- ) partition by list (lower(a));\n+-- create table part_aa_bb partition of list_parted FOR VALUES IN ('aa', 'bb');\n+-- create table part_cc_dd partition of list_parted FOR VALUES IN ('cc', 'dd');\n+-- create table part_null partition of list_parted FOR VALUES IN (null);\n+\n+-- fail\n+-- insert into part_aa_bb values ('cc', 1);\n+-- insert into part_aa_bb values ('AAa', 1);\n+-- insert into part_aa_bb values (null);\n+-- ok\n+-- insert into part_cc_dd values ('cC', 1);\n+-- insert into part_null values (null, 0);\n+\n+-- check in case of multi-level partitioned table\n+-- [SPARK-29718] Support PARTITION BY [RANGE|LIST|HASH] and PARTITION OF in CREATE TABLE\n+-- create table part_ee_ff partition of list_parted for values in ('ee', 'ff') partition by range (b);\n+-- create table part_ee_ff1 partition of part_ee_ff for values from (1) to (10);\n+-- create table part_ee_ff2 partition of part_ee_ff for values from (10) to (20);\n+\n+-- test default partition\n+-- create table part_default partition of list_parted default;",
    "line": 166
  }],
  "prId": 26360
}]