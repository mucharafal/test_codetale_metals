[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Could you create a new dir `inputs/subquery/any-subquery`, then move this file there?",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T00:36:47Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "`inputs/in-subquery` has alot of test cases. But, this pr only tests limited cases for the new expr `ANY`. Probably, we need exhaustive test cases for this. cc: @gatorsmile @cloud-fan ",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T00:51:00Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@maropu Thanks... Also, it may help if we can have output of these new queries when they are run against one of the popular databases like oracle, db2, postgres etc. We did that for original subquery work.",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T01:03:30Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate"
  }, {
    "author": {
      "login": "francis0407"
    },
    "body": "I tried these queries in PostgreSQL and SQL Server, there are two things different:\r\n1. When compare muti-columns like this:\r\n```SQL\r\nSELECT t1a, t1b\r\nFROM   t1\r\nWHERE  (t1b, t1c) <= ANY (SELECT t2b, t2c\r\n                          FROM   t2\r\n                          WHERE  t2c > 12)\r\n```\r\nPostgreSQL output:\r\n```\r\n\"val1a\"\t6\r\n\"val1b\"\t8\r\n\"val1c\"\t8\r\n\"val1e\"\t10\r\n\"val1e\"\t10\r\n\"val1d\"\t10\r\n\"val1a\"\t6\r\n\"val1e\"\t10\r\n```\r\nBut Spark SQL output:\r\n```\r\nval1a\t6\r\nval1a\t6\r\nval1b\t8\r\nval1c\t8\r\n```\r\nThis is because PostgreSQL returns `True` for `(10, null) < (12, 16)`.\r\n\r\n2. A more important problem is that, maybe we can't simply regard `x != ANY(query)` as `Not(x = ANY(query))`. Both PostgreSQL and SQL Server explain it as `Semi Join(x <> y)`, e.g.,\r\n```SQL\r\nSELECT t1a, t1b\r\nFROM   t1\r\nWHERE  t1a != ANY (SELECT t2a\r\n                   FROM   t2)\r\nORDER BY t1a\r\n```\r\nPostgreSQL' plan:\r\n```\r\nSort  (cost=2074.04..2074.69 rows=260 width=84)\r\n  Sort Key: t1.t1a\r\n  ->  Nested Loop Semi Join  (cost=0.00..2063.62 rows=260 width=84)\r\n        Join Filter: ((t1.t1a)::text <> (t2.t2a)::text)\r\n        ->  Seq Scan on t1  (cost=0.00..15.20 rows=520 width=84)\r\n        ->  Materialize  (cost=0.00..17.80 rows=520 width=82)\r\n              ->  Seq Scan on t2  (cost=0.00..15.20 rows=520 width=82)\r\n```\r\n\r\nSo we need to handle this again...",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T07:37:01Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@francis0407 Thanks for trying. I also noticed the inconsistency in the `!=` semantics. ",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T07:46:36Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate"
  }],
  "prId": 23783
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "nit: Add a new line in the end.",
    "commit": "67b772589d5c069375fca994622ba997a1dd7c45",
    "createdAt": "2019-02-21T00:42:49Z",
    "diffHunk": "@@ -0,0 +1,184 @@\n+-- A basic test suite for ANY/SOME predicate\n+create temporary view t1 as select * from values\n+  (\"val1a\", 6S, 8, 10L, float(15.0), 20D, 20E2, timestamp '2014-04-04 01:00:00.000', date '2014-04-04'),\n+  (\"val1b\", 8S, 16, 19L, float(17.0), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),\n+  (\"val1a\", 16S, 12, 21L, float(15.0), 20D, 20E2, timestamp '2014-06-04 01:02:00.001', date '2014-06-04'),\n+  (\"val1a\", 16S, 12, 10L, float(15.0), 20D, 20E2, timestamp '2014-07-04 01:01:00.000', date '2014-07-04'),\n+  (\"val1c\", 8S, 16, 19L, float(17.0), 25D, 26E2, timestamp '2014-05-04 01:02:00.001', date '2014-05-05'),\n+  (\"val1d\", null, 16, 22L, float(17.0), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', null),\n+  (\"val1d\", null, 16, 19L, float(17.0), 25D, 26E2, timestamp '2014-07-04 01:02:00.001', null),\n+  (\"val1e\", 10S, null, 25L, float(17.0), 25D, 26E2, timestamp '2014-08-04 01:01:00.000', date '2014-08-04'),\n+  (\"val1e\", 10S, null, 19L, float(17.0), 25D, 26E2, timestamp '2014-09-04 01:02:00.001', date '2014-09-04'),\n+  (\"val1d\", 10S, null, 12L, float(17.0), 25D, 26E2, timestamp '2015-05-04 01:01:00.000', date '2015-05-04'),\n+  (\"val1a\", 6S, 8, 10L, float(15.0), 20D, 20E2, timestamp '2014-04-04 01:02:00.001', date '2014-04-04'),\n+  (\"val1e\", 10S, null, 19L, float(17.0), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04')\n+  as t1(t1a, t1b, t1c, t1d, t1e, t1f, t1g, t1h, t1i);\n+\n+create temporary view t2 as select * from values\n+  (\"val2a\", 6S, 12, 14L, float(15), 20D, 20E2, timestamp '2014-04-04 01:01:00.000', date '2014-04-04'),\n+  (\"val1b\", 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),\n+  (\"val1b\", 8S, 16, 119L, float(17), 25D, 26E2, timestamp '2015-05-04 01:01:00.000', date '2015-05-04'),\n+  (\"val1c\", 12S, 16, 219L, float(17), 25D, 26E2, timestamp '2016-05-04 01:01:00.000', date '2016-05-04'),\n+  (\"val1b\", null, 16, 319L, float(17), 25D, 26E2, timestamp '2017-05-04 01:01:00.000', null),\n+  (\"val2e\", 8S, null, 419L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),\n+  (\"val1f\", 19S, null, 519L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),\n+  (\"val1b\", 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),\n+  (\"val1b\", 8S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-07-04 01:01:00.000', date '2014-07-04'),\n+  (\"val1c\", 12S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-08-04 01:01:00.000', date '2014-08-05'),\n+  (\"val1e\", 8S, null, 19L, float(17), 25D, 26E2, timestamp '2014-09-04 01:01:00.000', date '2014-09-04'),\n+  (\"val1f\", 19S, null, 19L, float(17), 25D, 26E2, timestamp '2014-10-04 01:01:00.000', date '2014-10-04'),\n+  (\"val1b\", null, 16, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', null)\n+  as t2(t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i);\n+\n+create temporary view t3 as select * from values\n+  (\"val3a\", 6S, 12, 110L, float(15), 20D, 20E2, timestamp '2014-04-04 01:02:00.000', date '2014-04-04'),\n+  (\"val3a\", 6S, 12, 10L, float(15), 20D, 20E2, timestamp '2014-05-04 01:02:00.000', date '2014-05-04'),\n+  (\"val1b\", 10S, 12, 219L, float(17), 25D, 26E2, timestamp '2014-05-04 01:02:00.000', date '2014-05-04'),\n+  (\"val1b\", 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:02:00.000', date '2014-05-04'),\n+  (\"val1b\", 8S, 16, 319L, float(17), 25D, 26E2, timestamp '2014-06-04 01:02:00.000', date '2014-06-04'),\n+  (\"val1b\", 8S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-07-04 01:02:00.000', date '2014-07-04'),\n+  (\"val3c\", 17S, 16, 519L, float(17), 25D, 26E2, timestamp '2014-08-04 01:02:00.000', date '2014-08-04'),\n+  (\"val3c\", 17S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-09-04 01:02:00.000', date '2014-09-05'),\n+  (\"val1b\", null, 16, 419L, float(17), 25D, 26E2, timestamp '2014-10-04 01:02:00.000', null),\n+  (\"val1b\", null, 16, 19L, float(17), 25D, 26E2, timestamp '2014-11-04 01:02:00.000', null),\n+  (\"val3b\", 8S, null, 719L, float(17), 25D, 26E2, timestamp '2014-05-04 01:02:00.000', date '2014-05-04'),\n+  (\"val3b\", 8S, null, 19L, float(17), 25D, 26E2, timestamp '2015-05-04 01:02:00.000', date '2015-05-04')\n+  as t3(t3a, t3b, t3c, t3d, t3e, t3f, t3g, t3h, t3i);\n+\n+-- Simple ANY subquery\n+SELECT *\n+FROM   t1\n+WHERE  t1a = ANY (SELECT t2a\n+                  FROM   t2);\n+\n+-- Alia\n+SELECT *\n+FROM   t1\n+WHERE  t1a = SOME (SELECT t2a\n+                   FROM   t2);\n+\n+-- Type Coercion\n+SELECT *\n+FROM   t1\n+WHERE  t1c >= ANY (SELECT t2b\n+                   FROM   t2);\n+\n+-- Correlated subquery\n+SELECT *\n+FROM   t1\n+WHERE  t1c <= ANY (SELECT t2b\n+                   FROM   t2\n+                   WHERE  t1a = t2a\n+                   OR     t1b > t2b);\n+\n+-- Multi-column ANY subquery\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  (t1b, t1c) <= ANY (SELECT t2b, t2c\n+                          FROM   t2\n+                          WHERE  t2c > 12);\n+\n+-- Invalid Query(columns number)\n+SELECT *\n+FROM   t1\n+WHERE  (t1b, t1c) < ANY (SELECT t2b, t2c, t2d\n+                         FROM   t2\n+                         WHERE  t2c IS NOT NULL);\n+\n+-- Invalid Query(columns type)\n+SELECT *\n+FROM   t1\n+WHERE  (t1b, t1c) > ANY (SELECT t2b, t2h\n+                         FROM   t2\n+                         WHERE  t2b > 2);\n+\n+-- Not ANY subquery\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  t1c NOT > ANY (SELECT t2c\n+                      FROM   t2 );\n+\n+-- Self join\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  t1c > ANY (SELECT t1c\n+                  FROM   t1 );\n+\n+-- ANY subquery with join 1\n+SELECT t1a, t2a\n+FROM   t1\n+JOIN   t2\n+ON     t1c = t2c\n+WHERE  t1b > ANY (SELECT t3b\n+                  FROM   t3);\n+\n+-- ANY subquery with join 2\n+SELECT t1a, t2a\n+FROM   t1, t2\n+WHERE  t1c = t2c\n+AND    t1b > ANY (SELECT t3b\n+                  FROM   t3);\n+\n+-- ANY subquery with join 3\n+SELECT t1a, t2a\n+FROM   t1\n+JOIN   t2\n+ON     t1c = t2c\n+WHERE  t1b > ANY (SELECT t2b\n+                  FROM   t2);\n+\n+-- ANY subquery with group 1\n+SELECT t1a, Avg(t1c)\n+FROM   t1\n+WHERE  t1a = ANY (SELECT t2a\n+                  FROM   t2)\n+GROUP  BY t1a;\n+\n+-- ANY subquery with group 2\n+SELECT t1a,\n+       Max(t1b)\n+FROM   t1\n+WHERE  t1b > ANY (SELECT t2b\n+                  FROM   t2\n+                  WHERE  t1a = t2a)\n+GROUP  BY t1a,\n+          t1d;\n+\n+-- ANY subquery with group in subquery\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  t1b < ANY (SELECT Max(t2b)\n+                  FROM   t2\n+                  GROUP  BY t2a);\n+\n+-- ANY subquery with having in subquery\n+SELECT t1a, t1b, t1h\n+FROM   t1\n+WHERE  t1b = ANY (SELECT t2b\n+                  FROM   t2\n+                  GROUP BY t2b\n+                  HAVING t2b < 10);\n+\n+-- ANY subquery with having in parent\n+SELECT t1a, t1b, t1c\n+FROM   t1\n+WHERE  t1b < ANY (SELECT t2b\n+                  FROM   t2\n+                  WHERE t1c < t2c)\n+GROUP BY t1a, t1b, t1c\n+HAVING t1b <= 8;\n+\n+-- ANY subquery with order by in subquery\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  t1b < ANY (SELECT Min(t2b)\n+                  FROM   t2\n+                  GROUP  BY t2a\n+                  ORDER  BY t2a DESC);\n+\n+-- ANY subquery with order by in parent\n+SELECT t1a, t1b\n+FROM   t1\n+WHERE  t1a != ANY (SELECT t2a\n+                   FROM   t2)\n+ORDER  BY t1a;"
  }],
  "prId": 23783
}]