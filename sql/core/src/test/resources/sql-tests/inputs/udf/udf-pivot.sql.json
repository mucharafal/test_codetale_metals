[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "We can try `udf(sum(udf(earnings)))` combination too in this file in general",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T04:24:56Z",
    "diffHunk": "@@ -0,0 +1,317 @@\n+-- This test file was converted from pivot.sql.\n+\n+-- Note that currently registered UDF returns a string. So there are some differences, for instance\n+-- in string cast within UDF in Scala and Python.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))"
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "I'll add it",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T07:10:30Z",
    "diffHunk": "@@ -0,0 +1,317 @@\n+-- This test file was converted from pivot.sql.\n+\n+-- Note that currently registered UDF returns a string. So there are some differences, for instance\n+-- in string cast within UDF in Scala and Python.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))"
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "We could also try to add udf here instead to avoid to test the same combination.",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T04:25:38Z",
    "diffHunk": "@@ -0,0 +1,317 @@\n+-- This test file was converted from pivot.sql.\n+\n+-- Note that currently registered UDF returns a string. So there are some differences, for instance\n+-- in string cast within UDF in Scala and Python.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+--todo nan fix\n+-- pivot on join query with multiple group by columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+);\n+\n+-- pivot on join query with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple columns in one aggregation\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with aliases and projection\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+);\n+\n+-- pivot with projection and value aliases\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+);\n+\n+-- pivot years with non-aggregate function\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with one of the expressions as non-aggregate function\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable columns\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with complex aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with invalid arguments in aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns with aliased values\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+);\n+\n+-- pivot on multiple pivot columns with values of wrong data types\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+);\n+\n+-- pivot with non-literal values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+);\n+\n+--todo complex type fix\n+-- pivot on join query with columns of complex data types\n+--SELECT * FROM (\n+--  SELECT course, year, a\n+--  FROM courseSales\n+--  JOIN yearsWithComplexTypes ON year = y\n+--)\n+--PIVOT (\n+--  udf(min(a))\n+--  FOR course IN ('dotNET', 'Java')\n+--);\n+\n+--todo complex type fix\n+-- pivot on multiple pivot columns with agg columns of complex data types\n+--SELECT * FROM (\n+--  SELECT course, year, y, a\n+--  FROM courseSales\n+--  JOIN yearsWithComplexTypes ON year = y\n+--)\n+--PIVOT (\n+--  udf(max(a))\n+--  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+--);\n+\n+--todo nan fix\n+-- pivot on pivot column of array type\n+SELECT * FROM (\n+  SELECT earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR a IN (array(1, 1), array(2, 2))\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns containing array type\n+SELECT * FROM (\n+  SELECT course, earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y",
    "line": 246
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "Added udf there",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T09:03:00Z",
    "diffHunk": "@@ -0,0 +1,317 @@\n+-- This test file was converted from pivot.sql.\n+\n+-- Note that currently registered UDF returns a string. So there are some differences, for instance\n+-- in string cast within UDF in Scala and Python.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+--todo nan fix\n+-- pivot on join query with multiple group by columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+);\n+\n+-- pivot on join query with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple columns in one aggregation\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with aliases and projection\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+);\n+\n+-- pivot with projection and value aliases\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+);\n+\n+-- pivot years with non-aggregate function\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with one of the expressions as non-aggregate function\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable columns\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with complex aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with invalid arguments in aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns with aliased values\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+);\n+\n+-- pivot on multiple pivot columns with values of wrong data types\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+);\n+\n+-- pivot with non-literal values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+);\n+\n+--todo complex type fix\n+-- pivot on join query with columns of complex data types\n+--SELECT * FROM (\n+--  SELECT course, year, a\n+--  FROM courseSales\n+--  JOIN yearsWithComplexTypes ON year = y\n+--)\n+--PIVOT (\n+--  udf(min(a))\n+--  FOR course IN ('dotNET', 'Java')\n+--);\n+\n+--todo complex type fix\n+-- pivot on multiple pivot columns with agg columns of complex data types\n+--SELECT * FROM (\n+--  SELECT course, year, y, a\n+--  FROM courseSales\n+--  JOIN yearsWithComplexTypes ON year = y\n+--)\n+--PIVOT (\n+--  udf(max(a))\n+--  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))\n+--);\n+\n+--todo nan fix\n+-- pivot on pivot column of array type\n+SELECT * FROM (\n+  SELECT earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR a IN (array(1, 1), array(2, 2))\n+);\n+\n+--todo nan fix\n+-- pivot on multiple pivot columns containing array type\n+SELECT * FROM (\n+  SELECT course, earnings, year, a\n+  FROM courseSales\n+  JOIN yearsWithComplexTypes ON year = y",
    "line": 246
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "not a biggie but `--Note` -> `-- Note`",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:28:34Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types"
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Not a big deal but I would make the comment a bit more pretty :-) .\r\n\r\n```\r\n-- Complex type is not supported in the current UDF. Skipped for now.\r\n```",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:32:08Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(udf(earnings))), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple group by columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+);\n+\n+-- pivot on join query with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple columns in one aggregation\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with aliases and projection\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+);\n+\n+-- pivot with projection and value aliases\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+);\n+\n+-- pivot years with non-aggregate function\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with one of the expressions as non-aggregate function\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable columns\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with complex aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with invalid arguments in aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on multiple pivot columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+);\n+\n+-- pivot on multiple pivot columns with aliased values\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+);\n+\n+-- pivot on multiple pivot columns with values of wrong data types\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+);\n+\n+-- pivot with non-literal values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+);\n+\n+--todo complex type fix"
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: `--SELECT` -> `-- SELECT`. I would put one space after the comment just to be consistent in this file.",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:32:35Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(udf(earnings))), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple group by columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+);\n+\n+-- pivot on join query with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple columns in one aggregation\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with aliases and projection\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+);\n+\n+-- pivot with projection and value aliases\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+);\n+\n+-- pivot years with non-aggregate function\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with one of the expressions as non-aggregate function\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable columns\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with complex aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with invalid arguments in aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on multiple pivot columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+);\n+\n+-- pivot on multiple pivot columns with aliased values\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+);\n+\n+-- pivot on multiple pivot columns with values of wrong data types\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+);\n+\n+-- pivot with non-literal values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+);\n+\n+--todo complex type fix\n+-- pivot on join query with columns of complex data types\n+--SELECT * FROM ("
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "I'll make the comment related changes. Pretty comments are always a plus.",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:55:00Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot years with no subquery\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot courses with multiple aggregations\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(avg(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column\n+SELECT * FROM (\n+  SELECT udf(course) as course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with no group by column and with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(udf(earnings))), udf(min(year))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple group by columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, udf(s) as s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR s IN (1, 2)\n+);\n+\n+-- pivot on join query with multiple aggregations on different columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings)), udf(min(s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on join query with multiple columns in one aggregation\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings * s))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with aliases and projection\n+SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012, 2013)\n+);\n+\n+-- pivot with projection and value aliases\n+SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (\n+  SELECT year y, course c, earnings e FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(e)) s, udf(avg(e)) a\n+  FOR y IN (2012 as firstYear, 2013 secondYear)\n+);\n+\n+-- pivot years with non-aggregate function\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(abs(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with one of the expressions as non-aggregate function\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings)), year\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable columns\n+SELECT * FROM (\n+  SELECT course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (2012, 2013)\n+);\n+\n+-- pivot with complex aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with invalid arguments in aggregate expressions\n+SELECT * FROM (\n+  SELECT year, course, earnings FROM courseSales\n+)\n+PIVOT (\n+  sum(udf(avg(earnings)))\n+  FOR course IN ('dotNET', 'Java')\n+);\n+\n+-- pivot on multiple pivot columns\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))\n+);\n+\n+-- pivot on multiple pivot columns with aliased values\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)\n+);\n+\n+-- pivot on multiple pivot columns with values of wrong data types\n+SELECT * FROM (\n+  SELECT course, year, earnings, s\n+  FROM courseSales\n+  JOIN years ON year = y\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR (course, year) IN ('dotNET', 'Java')\n+);\n+\n+-- pivot with unresolvable values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (s, 2013)\n+);\n+\n+-- pivot with non-literal values\n+SELECT * FROM courseSales\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR year IN (course, 2013)\n+);\n+\n+--todo complex type fix\n+-- pivot on join query with columns of complex data types\n+--SELECT * FROM ("
  }],
  "prId": 25122
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I can test it by myself but I thought you know the results - just out of curiosity,  what do we get if we do `FOR udf(course)`?",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:35:12Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')",
    "line": 29
  }, {
    "author": {
      "login": "chitralverma"
    },
    "body": "`FOR udf(course)` in line 29 will result in a `org.apache.spark.sql.catalyst.parser.ParseException`",
    "commit": "f979a47674c589b34fcf7e988311e89b1c67821c",
    "createdAt": "2019-07-18T11:53:44Z",
    "diffHunk": "@@ -0,0 +1,307 @@\n+-- This test file was converted from pivot.sql.\n+\n+--Note some test cases have been commented as the current integrated UDFs cannot handle complex types\n+\n+create temporary view courseSales as select * from values\n+  (\"dotNET\", 2012, 10000),\n+  (\"Java\", 2012, 20000),\n+  (\"dotNET\", 2012, 5000),\n+  (\"dotNET\", 2013, 48000),\n+  (\"Java\", 2013, 30000)\n+  as courseSales(course, year, earnings);\n+\n+create temporary view years as select * from values\n+  (2012, 1),\n+  (2013, 2)\n+  as years(y, s);\n+\n+create temporary view yearsWithComplexTypes as select * from values\n+  (2012, array(1, 1), map('1', 1), struct(1, 'a')),\n+  (2013, array(2, 2), map('2', 2), struct(2, 'b'))\n+  as yearsWithComplexTypes(y, a, m, s);\n+\n+-- pivot courses\n+SELECT * FROM (\n+  SELECT udf(year), course, earnings FROM courseSales\n+)\n+PIVOT (\n+  udf(sum(earnings))\n+  FOR course IN ('dotNET', 'Java')",
    "line": 29
  }],
  "prId": 25122
}]