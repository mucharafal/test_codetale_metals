[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can we explicitly select fields with `udf`?",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T01:28:28Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "Sure. Will change to \r\n```\r\nSELECT udf(k), udf(v) FROM t1 EXCEPT SELECT udf(k), udf(v) FROM t2;\r\n```",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T06:43:21Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;"
  }],
  "prId": 25101
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Can we add a udf here too?",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T01:30:31Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))\n+                FROM     t2\n+                WHERE    t2.k = t1.k)"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "will change to ```(udf)t2.k = (udf)t1.k```",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T06:43:35Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))\n+                FROM     t2\n+                WHERE    t2.k = t1.k)"
  }],
  "prId": 25101
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I would do `udf(max(udf(...)))`",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T01:30:42Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "I tried ```udf(max(udf(t2.v)))```\r\nquery 8 schema and output changed to \r\n```\r\n-- !query 8 schema\r\nstruct<>\r\n-- !query 8 output\r\njava.lang.UnsupportedOperationException\r\nCannot evaluate expression: udf(null)\r\n```\r\nThe expected results are\r\n```\r\n-- !query 8 schema\r\nstruct<k:string>\r\n-- !query 8 output\r\ntwo\r\n```",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T06:43:30Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Let's do that, and comment the test with a new JIRA as guided in the parent JIRA (I think I wrote some words in the guide for this case as well). Actually, finding such cases and fixing it is one of the key points of doing this.",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-11T06:52:55Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "I did some more tests on this ```max```. Here are the results:\r\n```\r\n-- !query 10\r\nSELECT max(t2.v) FROM t2\r\n-- !query 10 schema\r\nstruct<max(v):int>\r\n-- !query 10 output\r\n22\r\n\r\n\r\n-- !query 11\r\nSELECT udf(t2.v) FROM t2\r\n-- !query 11 schema\r\nstruct<udf(v):string>\r\n-- !query 11 output\r\n1\r\n22\r\n5.0\r\n5.0\r\nnan\r\n\r\n\r\n-- !query 12\r\nSELECT max(udf(t2.v)) FROM t2\r\n-- !query 12 schema\r\nstruct<max(udf(v)):string>\r\n-- !query 12 output\r\nnan\r\n\r\n\r\n-- !query 13\r\nSELECT udf(max(t2.v)) FROM t2\r\n-- !query 13 schema\r\nstruct<udf(max(v)):string>\r\n-- !query 13 output\r\n22\r\n\r\n\r\n-- !query 14\r\nSELECT udf(max(udf(t2.v))) FROM t2\r\n-- !query 14 schema\r\nstruct<udf(max(udf(v))):string>\r\n-- !query 14 output\r\nnan\r\n\r\n\r\n-- !query 15\r\nSELECT *\r\nFROM   t1\r\nWHERE  t1.v <= (SELECT   max(t2.v)\r\n                FROM     t2\r\n                WHERE    t2.k = t1.k)\r\n-- !query 15 schema\r\nstruct<k:string,v:int>\r\n-- !query 15 output\r\none\t1\r\ntwo\t2\r\n\r\n\r\n-- !query 16\r\nSELECT *\r\nFROM   t1\r\nWHERE  t1.v <= (SELECT   udf(max(t2.v))\r\n                FROM     t2\r\n                WHERE    t2.k = t1.k)\r\n-- !query 16 schema\r\nstruct<>\r\n-- !query 16 output\r\njava.lang.UnsupportedOperationException\r\nCannot evaluate expression: udf(null)\r\n\r\n\r\n-- !query 17\r\nSELECT *\r\nFROM   t1\r\nWHERE  t1.v <= (SELECT   max(udf(t2.v))\r\n                FROM     t2\r\n                WHERE    t2.k = t1.k)\r\n-- !query 17 schema\r\nstruct<k:string,v:int>\r\n-- !query 17 output\r\ntwo\t2\r\n\r\n\r\n-- !query 18\r\nSELECT *\r\nFROM   t1\r\nWHERE  t1.v <= (SELECT   udf(max(udf(t2.v)))\r\n                FROM     t2\r\n                WHERE    t2.k = t1.k)\r\n-- !query 18 schema\r\nstruct<>\r\n-- !query 18 output\r\njava.lang.UnsupportedOperationException\r\nCannot evaluate expression: udf(null)\r\n```\r\nI initially thought ```max(t2.v) returns 22``` is the right behavior, but after I looked the implementation of ```functions.max(e: Column)```, I am not sure any more. This ```functions.max(e: Column)``` eventually calls this \r\n```nanSafeCompareDoubles```, and it treats NaN greater than any non-NaN double. So  ```functions.max(t2.v)``` returns ```NaN```. Is this right?\r\nShould we let ```max(t2.v) returns 22``` instead of ```NaN```?\r\n```\r\n  /**\r\n   * NaN-safe version of `java.lang.Double.compare()` which allows NaN values to be compared\r\n   * according to semantics where NaN == NaN and NaN is greater than any non-NaN double.\r\n   */\r\ndef nanSafeCompareDoubles(x: Double, y: Double): Int = {\r\n    val xIsNan: Boolean = java.lang.Double.isNaN(x)\r\n    val yIsNan: Boolean = java.lang.Double.isNaN(y)\r\n    if ((xIsNan && yIsNan) || (x == y)) 0\r\n    else if (xIsNan) 1\r\n    else if (yIsNan) -1\r\n    else if (x > y) 1\r\n    else -1\r\n  }\r\n```",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-13T02:26:11Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@huaxingao, can you file a JIRA with a reproducer, and skip the test here for now? Let's comment the tests out:\r\n\r\n```\r\n--- [SPARK-XXXX] JIRA title...\r\n--- SELECT ..\r\n---\r\n```",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-15T01:15:54Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I submitted #25204 to fix this issue.",
    "commit": "d956d374b9f4ad855bff46c98f621f821352f728",
    "createdAt": "2019-07-19T14:37:28Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+-- This test file was converted from except.sql.\n+-- Tests different scenarios of except operation\n+create temporary view t1 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 2),\n+  (\"three\", 3),\n+  (\"one\", NULL)\n+  as t1(k, v);\n+\n+create temporary view t2 as select * from values\n+  (\"one\", 1),\n+  (\"two\", 22),\n+  (\"one\", 5),\n+  (\"one\", NULL),\n+  (NULL, 5)\n+  as t2(k, v);\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t1 EXCEPT SELECT * FROM t2;\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 EXCEPT SELECT * FROM t1 where udf(v) <> 1 and v <> udf(2);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT * FROM t1 where udf(v) <> 1 and v <> udf(22) EXCEPT SELECT * FROM t1 where udf(v) <> 2 and v >= udf(3);\n+\n+\n+-- Except operation that will be replaced by Filter: SPARK-22181\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k\n+EXCEPT\n+SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT * FROM t2 where v >= udf(1) and udf(v) <> 22 EXCEPT SELECT * FROM t1;\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT (SELECT min(udf(k)) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1\n+MINUS\n+SELECT (SELECT udf(min(k)) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = udf('one');\n+\n+\n+-- Except operation that will be replaced by left anti join\n+SELECT t1.k\n+FROM   t1\n+WHERE  t1.v <= (SELECT   max(udf(t2.v))"
  }],
  "prId": 25101
}]