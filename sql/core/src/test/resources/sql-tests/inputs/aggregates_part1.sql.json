[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "https://issues.apache.org/jira/browse/SPARK-27769",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T04:47:17Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs\n+-- SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+-- FROM (VALUES ('1'), (CAST('infinity' AS DOUBLE))) v(x);\n+-- SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+-- FROM (VALUES ('infinity'), ('1')) v(x);\n+-- SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+-- FROM (VALUES ('infinity'), ('infinity')) v(x);\n+-- SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+-- FROM (VALUES ('-infinity'), ('infinity')) v(x);\n+\n+\n+-- test accuracy with a large input offset\n+SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+FROM (VALUES (100000003), (100000004), (100000006), (100000007)) v(x);\n+SELECT avg(CAST(x AS DOUBLE)), var_pop(CAST(x AS DOUBLE))\n+FROM (VALUES (7000000000005), (7000000000007)) v(x);\n+\n+-- SQL2003 binary aggregates [SPARK-23907]\n+-- SELECT regr_count(b, a) FROM aggtest;\n+-- SELECT regr_sxx(b, a) FROM aggtest;\n+-- SELECT regr_syy(b, a) FROM aggtest;\n+-- SELECT regr_sxy(b, a) FROM aggtest;\n+-- SELECT regr_avgx(b, a), regr_avgy(b, a) FROM aggtest;\n+-- SELECT regr_r2(b, a) FROM aggtest;\n+-- SELECT regr_slope(b, a), regr_intercept(b, a) FROM aggtest;\n+SELECT covar_pop(b, a), covar_samp(b, a) FROM aggtest;\n+SELECT corr(b, a) FROM aggtest;\n+\n+\n+-- test accum and combine functions directly [SPARK-23907]\n+-- CREATE TABLE regr_test (x float8, y float8);\n+-- INSERT INTO regr_test VALUES (10,150),(20,250),(30,350),(80,540),(100,200);\n+-- SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x)\n+-- FROM regr_test WHERE x IN (10,20,30,80);\n+-- SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x)\n+-- FROM regr_test;\n+-- SELECT float8_accum('{4,140,2900}'::float8[], 100);\n+-- SELECT float8_regr_accum('{4,140,2900,1290,83075,15050}'::float8[], 200, 100);\n+-- SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x)\n+-- FROM regr_test WHERE x IN (10,20,30);\n+-- SELECT count(*), sum(x), regr_sxx(y,x), sum(y),regr_syy(y,x), regr_sxy(y,x)\n+-- FROM regr_test WHERE x IN (80,100);\n+-- SELECT float8_combine('{3,60,200}'::float8[], '{0,0,0}'::float8[]);\n+-- SELECT float8_combine('{0,0,0}'::float8[], '{2,180,200}'::float8[]);\n+-- SELECT float8_combine('{3,60,200}'::float8[], '{2,180,200}'::float8[]);\n+-- SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],\n+--                            '{0,0,0,0,0,0}'::float8[]);\n+-- SELECT float8_regr_combine('{0,0,0,0,0,0}'::float8[],\n+--                            '{2,180,200,740,57800,-3400}'::float8[]);\n+-- SELECT float8_regr_combine('{3,60,200,750,20000,2000}'::float8[],\n+--                            '{2,180,200,740,57800,-3400}'::float8[]);\n+-- DROP TABLE regr_test;\n+\n+\n+-- test count, distinct\n+SELECT count(four) AS cnt_1000 FROM onek;\n+SELECT count(DISTINCT four) AS cnt_4 FROM onek;\n+\n+select ten, count(*), sum(four) from onek\n+group by ten order by ten;\n+\n+select ten, count(four), sum(DISTINCT four) from onek\n+group by ten order by ten;\n+\n+-- user-defined aggregates\n+-- SELECT newavg(four) AS avg_1 FROM onek;\n+-- SELECT newsum(four) AS sum_1500 FROM onek;\n+-- SELECT newcnt(four) AS cnt_1000 FROM onek;\n+-- SELECT newcnt(*) AS cnt_1000 FROM onek;\n+-- SELECT oldcnt(*) AS cnt_1000 FROM onek;\n+-- SELECT sum2(q1,q2) FROM int8_tbl;\n+\n+-- test for outer-level aggregates\n+\n+-- this should work\n+select ten, sum(distinct four) from onek a\n+group by ten\n+having exists (select 1 from onek b where sum(distinct a.four) = b.four);\n+\n+-- this should fail because subquery has an agg of its own in WHERE\n+select ten, sum(distinct four) from onek a\n+group by ten\n+having exists (select 1 from onek b\n+               where sum(distinct a.four + b.four) = b.four);\n+\n+-- [SPARK-27769] Test handling of sublinks within outer-level aggregates."
  }],
  "prId": 24640
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "https://issues.apache.org/jira/browse/SPARK-27768",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T04:47:37Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I removed the `correctness` label because we support `Infinity` correctly.\r\n```scala\r\nscala> sql(\"SELECT CAST('Infinity' AS DOUBLE), CAST('infinity' AS DOUBLE)\").show\r\n+------------------------+------------------------+\r\n|CAST(Infinity AS DOUBLE)|CAST(infinity AS DOUBLE)|\r\n+------------------------+------------------------+\r\n|                Infinity|                    null|\r\n+------------------------+------------------------+\r\n```",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T06:21:39Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since we already file SPARK-27768, shall we use `Infinity` here and uncomment these and move forward for the test coverage first?",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T06:23:06Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Thanks for pointing out these. We should parse these constants in a case insensitive way. See the description in https://www.postgresql.org/docs/9.3/datatype-numeric.html\r\n\r\n> When writing these values as constants in an SQL command, you must put quotes around them, for example UPDATE table SET x = 'Infinity'. On input, these strings are recognized in a case-insensitive manner. ",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T22:11:54Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Updated the JIRA and make the description more accurate. ",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-19T22:16:35Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thanks! But, that will break Hive compatibility. We had better prefer the existing compatibility with Hive over new compatibility with PostgreSQL.\r\n```\r\nhive> select CAST('infinity' AS DOUBLE), CAST('Infinity' AS DOUBLE);\r\nOK\r\nNULL\tInfinity\r\n```",
    "commit": "517dcf04653be0e9946bb412f11681d8afb8eb5b",
    "createdAt": "2019-05-20T02:49:50Z",
    "diffHunk": "@@ -0,0 +1,151 @@\n+--\n+-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group\n+--\n+--\n+-- AGGREGATES [Part 1]\n+-- https://github.com/postgres/postgres/blob/02ddd499322ab6f2f0d58692955dc9633c2150fc/src/test/regress/sql/aggregates.sql#L1-L143\n+\n+-- avoid bit-exact output here because operations may not be bit-exact.\n+-- SET extra_float_digits = 0;\n+\n+SELECT avg(four) AS avg_1 FROM onek;\n+\n+SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;\n+\n+-- In 7.1, avg(float4) is computed using float8 arithmetic.\n+-- Round the result to 3 digits to avoid platform-specific results.\n+\n+select CAST(avg(b) AS Decimal(10,3)) AS avg_107_943 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT avg(gpa) AS avg_3_4 FROM ONLY student;\n+\n+SELECT sum(four) AS sum_1500 FROM onek;\n+SELECT sum(a) AS sum_198 FROM aggtest;\n+SELECT sum(b) AS avg_431_773 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT sum(gpa) AS avg_6_8 FROM ONLY student;\n+\n+SELECT max(four) AS max_3 FROM onek;\n+SELECT max(a) AS max_100 FROM aggtest;\n+SELECT max(aggtest.b) AS max_324_78 FROM aggtest;\n+-- `student` has a column with data type POINT, which is not supported by Spark [SPARK-27766]\n+-- SELECT max(student.gpa) AS max_3_7 FROM student;\n+\n+SELECT stddev_pop(b) FROM aggtest;\n+SELECT stddev_samp(b) FROM aggtest;\n+SELECT var_pop(b) FROM aggtest;\n+SELECT var_samp(b) FROM aggtest;\n+\n+SELECT stddev_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT stddev_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_pop(CAST(b AS Decimal(38,0))) FROM aggtest;\n+SELECT var_samp(CAST(b AS Decimal(38,0))) FROM aggtest;\n+\n+-- population variance is defined for a single tuple, sample variance\n+-- is not\n+SELECT var_pop(1.0), var_samp(2.0);\n+SELECT stddev_pop(CAST(3.0 AS Decimal(38,0))), stddev_samp(CAST(4.0 AS Decimal(38,0)));\n+\n+\n+-- verify correct results for null and NaN inputs\n+select sum(CAST(null AS int)) from range(1,4);\n+select sum(CAST(null AS long)) from range(1,4);\n+select sum(CAST(null AS Decimal(38,0))) from range(1,4);\n+select sum(CAST(null AS DOUBLE)) from range(1,4);\n+select avg(CAST(null AS int)) from range(1,4);\n+select avg(CAST(null AS long)) from range(1,4);\n+select avg(CAST(null AS Decimal(38,0))) from range(1,4);\n+select avg(CAST(null AS DOUBLE)) from range(1,4);\n+select sum(CAST('NaN' AS DOUBLE)) from range(1,4);\n+select avg(CAST('NaN' AS DOUBLE)) from range(1,4);\n+\n+-- [SPARK-27768] verify correct results for infinite inputs"
  }],
  "prId": 24640
}]