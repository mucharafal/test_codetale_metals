[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "@rxin, I could make this prettier with manual parsing and tried many things but I just revert them back. I was thinking it'd be rather better if we make some changes within `ExpressionDescription` and `ExpressionInfo` and I was thinking I could do this in a followup. WDYT?\r\n\r\nIf it does not sound good to you, I am willing to add some parsing logics here, mainly, to separate examples and arguments in extended description.",
    "commit": "c711ff5363a0608c11b97c915bfc8b8cdbf2ba95",
    "createdAt": "2017-07-22T08:00:57Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+import sys\n+import os\n+from collections import namedtuple\n+\n+from pyspark.sql import SparkSession\n+\n+ExpressionInfo = namedtuple(\"ExpressionInfo\", \"className usage name extended\")\n+\n+\n+def _list_function_infos(spark):\n+    \"\"\"\n+    Returns a list of function information from JVM. Sorts wrapped expression infos by name\n+    and returns them.\n+    \"\"\"\n+\n+    jinfos = spark.sparkContext._jvm \\\n+        .org.apache.spark.sql.api.python.PythonSQLUtils.listBuiltinFunctionInfos()\n+    infos = []\n+    for jinfo in jinfos:\n+        name = jinfo.getName()\n+        usage = jinfo.getUsage()\n+        usage = usage.replace(\"_FUNC_\", name) if usage is not None else usage\n+        extended = jinfo.getExtended()\n+        extended = extended.replace(\"_FUNC_\", name) if extended is not None else extended\n+        infos.append(ExpressionInfo(\n+            className=jinfo.getClassName(),\n+            usage=usage,\n+            name=name,\n+            extended=extended))\n+    return sorted(infos, key=lambda i: i.name)\n+\n+\n+def _make_pretty_usage(usage):\n+    \"\"\"\n+    Makes the function usage description pretty and returns the string.\n+    Otherwise, returns None.\n+    \"\"\"\n+\n+    if usage is not None and usage.strip() != \"\":\n+        usage = \"\\n\".join(map(lambda u: u.strip(), usage.split(\"\\n\")))\n+        return \"%s\\n\\n\" % usage\n+\n+\n+def _make_pretty_extended(extended):\n+    \"\"\"\n+    Makes the function extended description pretty and returns the string.\n+    Otherwise, returns None.\n+    \"\"\"\n+\n+    if extended is not None and extended.strip() != \"\":"
  }],
  "prId": 18702
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Does it complicate things to put these files in some kind of `bin` directory under `sql`?",
    "commit": "c711ff5363a0608c11b97c915bfc8b8cdbf2ba95",
    "createdAt": "2017-07-25T08:43:52Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+import sys",
    "line": 18
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It should be pretty simple. Let me try.",
    "commit": "c711ff5363a0608c11b97c915bfc8b8cdbf2ba95",
    "createdAt": "2017-07-25T09:12:05Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+import sys",
    "line": 18
  }],
  "prId": 18702
}]