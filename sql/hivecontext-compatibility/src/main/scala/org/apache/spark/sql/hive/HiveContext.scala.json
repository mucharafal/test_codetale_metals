[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "if `invalidateTable` has different meaning than `refreshTable`, should we also add it to `HiveContext`? cc @yhuai \n",
    "commit": "20d50556c6a3a4ca2d69f961822a2bb058edbbec",
    "createdAt": "2016-05-19T03:12:08Z",
    "diffHunk": "@@ -58,4 +58,16 @@ class HiveContext private[hive](\n     sparkSession.sharedState.asInstanceOf[HiveSharedState]\n   }\n \n+  /**\n+   * Invalidate and refresh all the cached the metadata of the given table. For performance reasons,\n+   * Spark SQL or the external data source library it uses might cache certain metadata about a\n+   * table, such as the location of blocks. When those change outside of Spark SQL, users should\n+   * call this function to invalidate the cache.\n+   *\n+   * @since 1.3.0\n+   */\n+  def refreshTable(tableName: String): Unit = {",
    "line": 12
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "This class is for the compatibility purpose. Let's leave it as is. \n",
    "commit": "20d50556c6a3a4ca2d69f961822a2bb058edbbec",
    "createdAt": "2016-05-19T04:02:13Z",
    "diffHunk": "@@ -58,4 +58,16 @@ class HiveContext private[hive](\n     sparkSession.sharedState.asInstanceOf[HiveSharedState]\n   }\n \n+  /**\n+   * Invalidate and refresh all the cached the metadata of the given table. For performance reasons,\n+   * Spark SQL or the external data source library it uses might cache certain metadata about a\n+   * table, such as the location of blocks. When those change outside of Spark SQL, users should\n+   * call this function to invalidate the cache.\n+   *\n+   * @since 1.3.0\n+   */\n+  def refreshTable(tableName: String): Unit = {",
    "line": 12
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "+1\n",
    "commit": "20d50556c6a3a4ca2d69f961822a2bb058edbbec",
    "createdAt": "2016-05-19T04:11:12Z",
    "diffHunk": "@@ -58,4 +58,16 @@ class HiveContext private[hive](\n     sparkSession.sharedState.asInstanceOf[HiveSharedState]\n   }\n \n+  /**\n+   * Invalidate and refresh all the cached the metadata of the given table. For performance reasons,\n+   * Spark SQL or the external data source library it uses might cache certain metadata about a\n+   * table, such as the location of blocks. When those change outside of Spark SQL, users should\n+   * call this function to invalidate the cache.\n+   *\n+   * @since 1.3.0\n+   */\n+  def refreshTable(tableName: String): Unit = {",
    "line": 12
  }],
  "prId": 13156
}]