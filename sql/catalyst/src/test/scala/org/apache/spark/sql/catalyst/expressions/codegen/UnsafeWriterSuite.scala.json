[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we add a comment about how we get the `25`?",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T11:28:01Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {\n+\n+  test(\"SPARK-25538: zero-out all bits for decimals\") {\n+    // This decimal holds 8 bytes\n+    val decimal1 = Decimal(0.431)\n+    decimal1.changePrecision(38, 18)\n+    // This decimal holds 11 bytes\n+    val decimal2 = Decimal(123456789.1232456789)\n+    decimal2.changePrecision(38, 18)\n+    val unsafeRowWriter = new UnsafeRowWriter(1)\n+    unsafeRowWriter.resetRowWriter()\n+    unsafeRowWriter.write(0, decimal2, decimal2.precision, decimal2.scale)\n+    unsafeRowWriter.reset()\n+    unsafeRowWriter.write(0, decimal1, decimal1.precision, decimal1.scale)\n+    val res = unsafeRowWriter.getRow\n+    assert(res.getDecimal(0, decimal1.precision, decimal1.scale) == decimal1)\n+    // Check that the bytes which are not used by decimal1 (but are allocated) are zero-ed out\n+    assert(res.getBytes()(25) == 0x00)"
  }],
  "prId": 22602
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Actually I think this assert is strong enough, we don't need to check the zero bytes below.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T11:30:10Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {\n+\n+  test(\"SPARK-25538: zero-out all bits for decimals\") {\n+    // This decimal holds 8 bytes\n+    val decimal1 = Decimal(0.431)\n+    decimal1.changePrecision(38, 18)\n+    // This decimal holds 11 bytes\n+    val decimal2 = Decimal(123456789.1232456789)\n+    decimal2.changePrecision(38, 18)\n+    val unsafeRowWriter = new UnsafeRowWriter(1)\n+    unsafeRowWriter.resetRowWriter()\n+    unsafeRowWriter.write(0, decimal2, decimal2.precision, decimal2.scale)\n+    unsafeRowWriter.reset()\n+    unsafeRowWriter.write(0, decimal1, decimal1.precision, decimal1.scale)\n+    val res = unsafeRowWriter.getRow\n+    assert(res.getDecimal(0, decimal1.precision, decimal1.scale) == decimal1)"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "this would pass also before the fix, as only the first 8 bytes are read. I added it as an additional safety fix.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T12:42:23Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {\n+\n+  test(\"SPARK-25538: zero-out all bits for decimals\") {\n+    // This decimal holds 8 bytes\n+    val decimal1 = Decimal(0.431)\n+    decimal1.changePrecision(38, 18)\n+    // This decimal holds 11 bytes\n+    val decimal2 = Decimal(123456789.1232456789)\n+    decimal2.changePrecision(38, 18)\n+    val unsafeRowWriter = new UnsafeRowWriter(1)\n+    unsafeRowWriter.resetRowWriter()\n+    unsafeRowWriter.write(0, decimal2, decimal2.precision, decimal2.scale)\n+    unsafeRowWriter.reset()\n+    unsafeRowWriter.write(0, decimal1, decimal1.precision, decimal1.scale)\n+    val res = unsafeRowWriter.getRow\n+    assert(res.getDecimal(0, decimal1.precision, decimal1.scale) == decimal1)"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "then this doesn't demonstrate how this bug could affect correctness.\r\n\r\none better idea for this test: we create 2 row writers, one writes the decimal as what you did here, and the other one writes decimal `0.431` directly. Then we compare the 2 result rows and make sure they equals.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T13:43:00Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {\n+\n+  test(\"SPARK-25538: zero-out all bits for decimals\") {\n+    // This decimal holds 8 bytes\n+    val decimal1 = Decimal(0.431)\n+    decimal1.changePrecision(38, 18)\n+    // This decimal holds 11 bytes\n+    val decimal2 = Decimal(123456789.1232456789)\n+    decimal2.changePrecision(38, 18)\n+    val unsafeRowWriter = new UnsafeRowWriter(1)\n+    unsafeRowWriter.resetRowWriter()\n+    unsafeRowWriter.write(0, decimal2, decimal2.precision, decimal2.scale)\n+    unsafeRowWriter.reset()\n+    unsafeRowWriter.write(0, decimal1, decimal1.precision, decimal1.scale)\n+    val res = unsafeRowWriter.getRow\n+    assert(res.getDecimal(0, decimal1.precision, decimal1.scale) == decimal1)"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "thanks for the suggestion @cloud-fan, I like this approach.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T13:55:46Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {\n+\n+  test(\"SPARK-25538: zero-out all bits for decimals\") {\n+    // This decimal holds 8 bytes\n+    val decimal1 = Decimal(0.431)\n+    decimal1.changePrecision(38, 18)\n+    // This decimal holds 11 bytes\n+    val decimal2 = Decimal(123456789.1232456789)\n+    decimal2.changePrecision(38, 18)\n+    val unsafeRowWriter = new UnsafeRowWriter(1)\n+    unsafeRowWriter.resetRowWriter()\n+    unsafeRowWriter.write(0, decimal2, decimal2.precision, decimal2.scale)\n+    unsafeRowWriter.reset()\n+    unsafeRowWriter.write(0, decimal1, decimal1.precision, decimal1.scale)\n+    val res = unsafeRowWriter.getRow\n+    assert(res.getDecimal(0, decimal1.precision, decimal1.scale) == decimal1)"
  }],
  "prId": 22602
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`UnsafeWriterSuite` -> `UnsafeRowWriterSuite`? Also, renaming the file?",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T16:58:34Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "I don't think it is necessary, as we may want to include here also tests for other `UnsafeWriter` in the future.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T18:44:08Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I don't think so. We had better have both `UnsafeRowWriterSuite` and `UnsafeWriterSuite` in the future if needed.",
    "commit": "be38c4c47524605c4661333900d7b6f83ae2ce5a",
    "createdAt": "2018-10-02T18:55:41Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.Decimal\n+\n+class UnsafeWriterSuite extends SparkFunSuite {"
  }],
  "prId": 22602
}]