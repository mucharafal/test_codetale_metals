[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "should we also fix the external row? Why `copy` should return same ref?\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T03:41:33Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Copy returned the same ref because it is supposed to be immutable. See https://github.com/apache/spark/pull/10553 for more context.\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T08:43:55Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah got it, but it's not true for internal row right? It can be mutable so it's safe to remove this test.\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T09:53:59Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Well `MutableRow` is mutable, so it shouldn't hold for those. The only exception is `GenericInternalRow`.\n\nThat being said, I don't mind if you remove/modify the test.\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T10:20:19Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "As long as `InternalRow` can have mutable implementation, `InternalRow` is not immutable anymore, because it can have a struct field, whose value can be a `MutableRow`.\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T11:17:52Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "As discussed offline: I don't see the point of having an immutable `GenericInternalRow` if we cannot guarantee its immutability. We could just make every InternalRow a mutable one, and simplify the class structure in the process. I am not sure if we should make that part of the current PR though.\n",
    "commit": "c56de6da72c18b2cd1f65eed956cdee89371b075",
    "createdAt": "2016-09-15T18:22:44Z",
    "diffHunk": "@@ -121,10 +121,6 @@ class RowTest extends FunSpec with Matchers {\n       externalRow should be theSameInstanceAs externalRow.copy()\n     }\n \n-    it(\"copy should return same ref for internal rows\") {",
    "line": 4
  }],
  "prId": 15082
}]