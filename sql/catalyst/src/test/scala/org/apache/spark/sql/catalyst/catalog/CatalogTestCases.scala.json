[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "don't think you need \"[String, String]\"?\n",
    "commit": "1b40002c215445460d9c42d992736dd29b5ef700",
    "createdAt": "2016-02-04T03:01:50Z",
    "diffHunk": "@@ -27,6 +27,11 @@ import org.apache.spark.sql.AnalysisException\n  * Implementations of the [[Catalog]] interface can create test suites by extending this.\n  */\n abstract class CatalogTestCases extends SparkFunSuite {\n+  private val storageFormat = StorageFormat(\"usa\", \"$\", \"zzz\", \"serde\", Map.empty[String, String])\n+  private val part1 = TablePartition(Map[String, String](\"a\" -> \"1\"), storageFormat)",
    "line": 5
  }],
  "prId": 11069
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "update the comment above to include a partition\n",
    "commit": "1b40002c215445460d9c42d992736dd29b5ef700",
    "createdAt": "2016-02-04T03:02:20Z",
    "diffHunk": "@@ -41,16 +46,16 @@ abstract class CatalogTestCases extends SparkFunSuite {\n    */\n   private def newBasicCatalog(): Catalog = {\n     val catalog = newEmptyCatalog()\n-    catalog.createDatabase(newDb(\"db1\"), ifNotExists = false)\n-    catalog.createDatabase(newDb(\"db2\"), ifNotExists = false)\n-\n+    catalog.createDatabase(newDb(\"db1\"), ignoreIfExists = false)\n+    catalog.createDatabase(newDb(\"db2\"), ignoreIfExists = false)\n     catalog.createTable(\"db2\", newTable(\"tbl1\"), ignoreIfExists = false)\n     catalog.createTable(\"db2\", newTable(\"tbl2\"), ignoreIfExists = false)\n     catalog.createFunction(\"db2\", newFunc(\"func1\"), ignoreIfExists = false)\n+    catalog.createPartitions(\"db2\", \"tbl2\", Seq(part1, part2), ignoreIfExists = false)",
    "line": 24
  }],
  "prId": 11069
}]