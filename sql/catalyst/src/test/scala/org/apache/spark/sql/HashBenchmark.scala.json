[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "I am seeing totally different results. \n\n```\nJava HotSpot(TM) 64-Bit Server VM 1.7.0_80-b15 on Mac OS X 10.11.6\nIntel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz\n\nHash For map:                            Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\ninterpreted version                              0 /    0         85.3          11.7       1.0X\ncodegen version                                215 /  231          0.0       52443.1       0.0X\ncodegen version 64-bit                         160 /  173          0.0       38973.6       0.0X\n```\n",
    "commit": "fcb25c2d252ad89ac60626b67f85e81e7564617e",
    "createdAt": "2016-07-31T02:20:49Z",
    "diffHunk": "@@ -119,11 +146,12 @@ object HashBenchmark {\n       .add(\"map\", mapOfInt)\n       .add(\"mapOfMap\", MapType(IntegerType, mapOfInt))\n     /*\n-    Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n+    Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\n     Hash For map:                       Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n     -------------------------------------------------------------------------------------------\n-    interpreted version                      1820 / 1861          0.0      444347.2       1.0X\n-    codegen version                           205 /  223          0.0       49936.5       8.9X\n+    interpreted version                      1612 / 1618          0.0      393553.4       1.0X\n+    codegen version                           149 /  150          0.0       36381.2      10.8X\n+    codegen version 64-bit                    144 /  145          0.0       35122.1      11.2X\n      */",
    "line": 114
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "The interpreted version is actually calling `BaseGenericInternalRow`'s `hashCode` function. It is not calling the expected hash function, right?\n",
    "commit": "fcb25c2d252ad89ac60626b67f85e81e7564617e",
    "createdAt": "2016-07-31T02:32:21Z",
    "diffHunk": "@@ -119,11 +146,12 @@ object HashBenchmark {\n       .add(\"map\", mapOfInt)\n       .add(\"mapOfMap\", MapType(IntegerType, mapOfInt))\n     /*\n-    Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n+    Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\n     Hash For map:                       Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n     -------------------------------------------------------------------------------------------\n-    interpreted version                      1820 / 1861          0.0      444347.2       1.0X\n-    codegen version                           205 /  223          0.0       49936.5       8.9X\n+    interpreted version                      1612 / 1618          0.0      393553.4       1.0X\n+    codegen version                           149 /  150          0.0       36381.2      10.8X\n+    codegen version 64-bit                    144 /  145          0.0       35122.1      11.2X\n      */",
    "line": 114
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "@gatorsmile I get the following results, running the benchmark:\n\n```\n[info] Running benchmark: Hash For map\n[info]   Running case: interpreted version\n[info]   Stopped after 28358 iterations, 2000 ms\n[info]   Running case: codegen version\n[info]   Stopped after 10 iterations, 2079 ms\n[info]   Running case: codegen version 64-bit\n[info]   Stopped after 13 iterations, 2133 ms\n[info] \n[info] Java HotSpot(TM) 64-Bit Server VM 1.8.0_92-b14 on Mac OS X 10.11.6\n[info] Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz\n[info] \n[info] Hash For map:                            Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n[info] ------------------------------------------------------------------------------------------------\n[info] interpreted version                              0 /    0         61.8          16.2       1.0X\n[info] codegen version                                176 /  208          0.0       42927.5       0.0X\n[info] codegen version 64-bit                         154 /  164          0.0       37711.4       0.0X\n```\n\nSo the results are similar. \n\nI expect that there is some JVM cleverness going on here; the JVM might be caching the `hashCode()` results for  `BaseGenericInternalRow.hashCode` or is really good at predicting what is going on. We added a warmup period to the benchmarking logic in order to make the results more reliable (see the lines like `Stopped after 28358 iterations, 2000 ms`) and this might trigger this behavior.\n\nIt is by design that we call `BaseGenericInternalRow.hashCode` (I think the result of the `Hash` expression and this method should yield the same result). @cloud-fan could you explain why we did this?\n",
    "commit": "fcb25c2d252ad89ac60626b67f85e81e7564617e",
    "createdAt": "2016-07-31T10:33:11Z",
    "diffHunk": "@@ -119,11 +146,12 @@ object HashBenchmark {\n       .add(\"map\", mapOfInt)\n       .add(\"mapOfMap\", MapType(IntegerType, mapOfInt))\n     /*\n-    Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n+    Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\n     Hash For map:                       Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n     -------------------------------------------------------------------------------------------\n-    interpreted version                      1820 / 1861          0.0      444347.2       1.0X\n-    codegen version                           205 /  223          0.0       49936.5       8.9X\n+    interpreted version                      1612 / 1618          0.0      393553.4       1.0X\n+    codegen version                           149 /  150          0.0       36381.2      10.8X\n+    codegen version 64-bit                    144 /  145          0.0       35122.1      11.2X\n      */",
    "line": 114
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "This result is because we have removed the `hashCode` implementation from `ArrayBasedMapData`, and the system default `hashCode` is really fast(almost no-op).\n\nWe did this because they have same logic at the time, but it's not true now. @gatorsmile do you wanna send a PR to fix this(use interpreted hash expression instead of `BaseGenericInternalRow.hashCode`)? thanks!\n",
    "commit": "fcb25c2d252ad89ac60626b67f85e81e7564617e",
    "createdAt": "2016-08-01T02:47:05Z",
    "diffHunk": "@@ -119,11 +146,12 @@ object HashBenchmark {\n       .add(\"map\", mapOfInt)\n       .add(\"mapOfMap\", MapType(IntegerType, mapOfInt))\n     /*\n-    Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz\n+    Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\n     Hash For map:                       Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n     -------------------------------------------------------------------------------------------\n-    interpreted version                      1820 / 1861          0.0      444347.2       1.0X\n-    codegen version                           205 /  223          0.0       49936.5       8.9X\n+    interpreted version                      1612 / 1618          0.0      393553.4       1.0X\n+    codegen version                           149 /  150          0.0       36381.2      10.8X\n+    codegen version 64-bit                    144 /  145          0.0       35122.1      11.2X\n      */",
    "line": 114
  }],
  "prId": 11209
}]