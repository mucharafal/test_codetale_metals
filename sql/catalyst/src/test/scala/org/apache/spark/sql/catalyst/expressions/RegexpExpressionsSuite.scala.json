[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "You need to turn off scalastyle when having unicode.\n\n``` Scala\n// scalastyle:off\n// non ascii characters are not allowed in the source code, so we disable the scalastyle.\ncheckEvaluation(\"a€a\" like \"_€_\", true)\n...\n// scalastyle:on\n```\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T02:27:36Z",
    "diffHunk": "@@ -54,20 +57,32 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"ab\" like \"a%b\", true)\n     checkEvaluation(\"a\\nb\" like \"a%b\", true)\n \n+    //empty input\n+    checkEvaluation(\"\" like \"\", true)\n+    checkEvaluation(\"a\" like \"\", false)\n+    checkEvaluation(\"\" like \"a\", false)\n+\n+\n+    // SI-17647 double-escaping backslash\n     checkEvaluation(\"\"\"\\\\\\\\\"\"\" like \"\"\"%\\\\%\"\"\", true) // triple quotes to avoid java string escaping\n-    checkEvaluation(\"\"\"\\_%\"\"\" like \"\"\"%\\\\__\"\"\", true)\n-    checkEvaluation(\"\"\"\\_%\"\"\" like \"%\\\\\\\\__\", true)\n-    checkEvaluation(\"\"\"\\_%\"\"\" like \"\"\"%\\\\_%\"\"\", true)\n-    checkEvaluation(\"\"\"\\\\\\\\%%\"\"\" like \"\"\"\\\\%\"\"\", true)\n-    checkEvaluation(\"\"\"\\%\\\"\"\" like \"\"\"%\\%%\"\"\", true)\n-    checkEvaluation(\"\\\\\\n\\n%\\\\\" like \"\\\\\\\\___\\\\\\\\\", true)\n     checkEvaluation(\"\"\"%%\"\"\" like \"\"\"%%\"\"\", true)\n     checkEvaluation(\"\"\"\\__\"\"\" like \"\"\"\\\\\\__\"\"\", true)\n-\n     checkEvaluation(\"\"\"\\\\\\__\"\"\" like \"\"\"%\\\\%\\%\"\"\", false)\n-    checkEvaluation(\"\"\"\\_\"\"\" like \"\"\"\\_\\_\"\"\", false)\n     checkEvaluation(\"\"\"_\\\\\\%\"\"\" like \"\"\"%\\\\\"\"\", false)\n-    checkEvaluation(\"\"\"_\\\\__\"\"\" like \"\"\"_\\___\"\"\", false)\n+\n+    // unicode\n+    checkEvaluation(\"a\\u20ACa\" like \"_\\u20AC_\", true)\n+    checkEvaluation(\"a€a\" like \"_€_\", true)"
  }],
  "prId": 15398
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "more than 100 characters.\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T02:28:23Z",
    "diffHunk": "@@ -90,6 +105,28 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+\n+    checkEvaluation(\"\"\"a\\\"\"\" like regEx, false, create_row(\"\"\"a\\\"\"\"))  // TODO: should throw an exception?"
  }],
  "prId": 15398
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "remove this empty line\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T02:28:32Z",
    "diffHunk": "@@ -90,6 +105,28 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+\n+    checkEvaluation(\"\"\"a\\\"\"\" like regEx, false, create_row(\"\"\"a\\\"\"\"))  // TODO: should throw an exception?\n+\n+    checkEvaluation(\"A\" like regEx, false, create_row(\"a%\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"A%\"))\n+    checkEvaluation(\"AaA\" like regEx, true, create_row(\"_a_\"))\n+"
  }, {
    "author": {
      "login": "jodersky"
    },
    "body": "yeah, I just saw those.  It turns out that `scalastyle` is a scoped task, so you have to run `test:scalastyle` in sbt to make sure everything gets checked.\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T03:14:07Z",
    "diffHunk": "@@ -90,6 +105,28 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+\n+    checkEvaluation(\"\"\"a\\\"\"\" like regEx, false, create_row(\"\"\"a\\\"\"\"))  // TODO: should throw an exception?\n+\n+    checkEvaluation(\"A\" like regEx, false, create_row(\"a%\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"A%\"))\n+    checkEvaluation(\"AaA\" like regEx, true, create_row(\"_a_\"))\n+"
  }],
  "prId": 15398
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Updated: I got an exception from DB2 like Postgre after explicitly specifying the escape. DB2 follows the standard. It does not have a default escape. See the example:\n\n```\nselect actkwd from act where actkwd like '%A%\\' escape '\\'\nSQL0130N  The ESCAPE clause is not a single character, or the pattern string contains an invalid occurrence of the escape character.  SQLSTATE=22025\n```\n\ncc @yhuai \n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T22:06:00Z",
    "diffHunk": "@@ -74,6 +107,31 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+    // scalastyle:on nonascii\n+\n+    // TODO: should throw an exception?"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "See the description of SQL -130\n\n> SQL0130N\n> The ESCAPE clause is not a single character, or the pattern string contains an invalid occurrence of the escape character.\n> Explanation\n> The escape character must be a single character no more than two bytes in length. It can only appear in the pattern string if it is followed by itself, a percent sign, or an underscore. For more information about the ESCAPE clause on the LIKE predicate, refer to the SQL Reference.\n> User response\n> Correct the pattern string or the escape character accordingly.`\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-14T22:30:34Z",
    "diffHunk": "@@ -74,6 +107,31 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+    // scalastyle:on nonascii\n+\n+    // TODO: should throw an exception?"
  }, {
    "author": {
      "login": "jodersky"
    },
    "body": "> The escape character must be a single character no more than two bytes in length. It can only appear in the pattern string if it is followed by itself, a percent sign, or an underscore.\n\nI guess this means that point 3 should also throw an exception\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-15T00:33:20Z",
    "diffHunk": "@@ -74,6 +107,31 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+    // scalastyle:on nonascii\n+\n+    // TODO: should throw an exception?"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "To answer your point 3, I did a try in DB2. \n\n```\ndb2 => select actkwd from act where actkwd like '%A%\\a' escape '\\'\nSQL0130N  The ESCAPE clause is not a single character, or the pattern string \ncontains an invalid occurrence of the escape character.  SQLSTATE=22025\n```\n\nIn DB2, normally, our design is very conservative. If we think this could be a user error, we will stop it with an error. We do not want to give users any surprise. \n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-15T18:11:04Z",
    "diffHunk": "@@ -74,6 +107,31 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like regEx, true, create_row(\"a%b\"))\n \n     checkEvaluation(Literal.create(null, StringType) like regEx, null, create_row(\"bc%\"))\n+\n+    checkEvaluation(\"\" like regEx, true, create_row(\"\"))\n+    checkEvaluation(\"a\" like regEx, false, create_row(\"\"))\n+    checkEvaluation(\"\" like regEx, false, create_row(\"a\"))\n+\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like regEx, true, create_row(\"\"\"%\\\\%\"\"\"))\n+    checkEvaluation(\"\"\"%%\"\"\" like regEx, true, create_row(\"\"\"%%\"\"\"))\n+    checkEvaluation(\"\"\"\\__\"\"\" like regEx, true, create_row(\"\"\"\\\\\\__\"\"\"))\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like regEx, false, create_row(\"\"\"%\\\\%\\%\"\"\"))\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like regEx, false, create_row(\"\"\"%\\\\\"\"\"))\n+\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_€_\"))\n+    checkEvaluation(\"a€a\" like regEx, true, create_row(\"_\\u20AC_\"))\n+    checkEvaluation(\"a\\u20ACa\" like regEx, true, create_row(\"_€_\"))\n+    // scalastyle:on nonascii\n+\n+    // TODO: should throw an exception?"
  }],
  "prId": 15398
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "For these two invalid cases, you also need to check the error messages. For example,\n\n``` Scala\n    val e = intercept[AnalysisException] {\n      evaluate(\"\"\"a\"\"\" like \"\"\"\\a\"\"\")\n    }.getMessage\n    assert(e.contains(\"xyz\"))\n```\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-22T16:00:06Z",
    "diffHunk": "@@ -53,6 +57,40 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like \"a_b\", true)\n     checkEvaluation(\"ab\" like \"a%b\", true)\n     checkEvaluation(\"a\\nb\" like \"a%b\", true)\n+\n+    // empty input\n+    checkEvaluation(\"\" like \"\", true)\n+    checkEvaluation(\"a\" like \"\", false)\n+    checkEvaluation(\"\" like \"a\", false)\n+\n+    // SI-17647 double-escaping backslash\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like \"\"\"%\\\\%\"\"\", true) // triple quotes to avoid java string escaping\n+    checkEvaluation(\"\"\"%%\"\"\" like \"\"\"%%\"\"\", true)\n+    checkEvaluation(\"\"\"\\__\"\"\" like \"\"\"\\\\\\__\"\"\", true)\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like \"\"\"%\\\\%\\%\"\"\", false)\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like \"\"\"%\\\\\"\"\", false)\n+\n+    // unicode\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like \"_\\u20AC_\", true)\n+    checkEvaluation(\"a€a\" like \"_€_\", true)\n+    checkEvaluation(\"a€a\" like \"_\\u20AC_\", true)\n+    checkEvaluation(\"a\\u20ACa\" like \"_€_\", true)\n+    // scalastyle:on nonascii\n+\n+    // invalid escaping\n+    intercept[AnalysisException] {\n+      evaluate(\"\"\"a\"\"\" like \"\"\"\\a\"\"\")\n+    }\n+    intercept[AnalysisException] {\n+      evaluate(\"\"\"a\"\"\" like \"\"\"a\\\"\"\")\n+    }"
  }, {
    "author": {
      "login": "jodersky"
    },
    "body": "ack\n",
    "commit": "dbd305c195ba1c1661f82e3e19085778b8783794",
    "createdAt": "2016-10-22T18:49:41Z",
    "diffHunk": "@@ -53,6 +57,40 @@ class RegexpExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(\"a\\nb\" like \"a_b\", true)\n     checkEvaluation(\"ab\" like \"a%b\", true)\n     checkEvaluation(\"a\\nb\" like \"a%b\", true)\n+\n+    // empty input\n+    checkEvaluation(\"\" like \"\", true)\n+    checkEvaluation(\"a\" like \"\", false)\n+    checkEvaluation(\"\" like \"a\", false)\n+\n+    // SI-17647 double-escaping backslash\n+    checkEvaluation(\"\"\"\\\\\\\\\"\"\" like \"\"\"%\\\\%\"\"\", true) // triple quotes to avoid java string escaping\n+    checkEvaluation(\"\"\"%%\"\"\" like \"\"\"%%\"\"\", true)\n+    checkEvaluation(\"\"\"\\__\"\"\" like \"\"\"\\\\\\__\"\"\", true)\n+    checkEvaluation(\"\"\"\\\\\\__\"\"\" like \"\"\"%\\\\%\\%\"\"\", false)\n+    checkEvaluation(\"\"\"_\\\\\\%\"\"\" like \"\"\"%\\\\\"\"\", false)\n+\n+    // unicode\n+    // scalastyle:off nonascii\n+    checkEvaluation(\"a\\u20ACa\" like \"_\\u20AC_\", true)\n+    checkEvaluation(\"a€a\" like \"_€_\", true)\n+    checkEvaluation(\"a€a\" like \"_\\u20AC_\", true)\n+    checkEvaluation(\"a\\u20ACa\" like \"_€_\", true)\n+    // scalastyle:on nonascii\n+\n+    // invalid escaping\n+    intercept[AnalysisException] {\n+      evaluate(\"\"\"a\"\"\" like \"\"\"\\a\"\"\")\n+    }\n+    intercept[AnalysisException] {\n+      evaluate(\"\"\"a\"\"\" like \"\"\"a\\\"\"\")\n+    }"
  }],
  "prId": 15398
}]