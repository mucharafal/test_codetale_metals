[{
  "comments": [{
    "author": {
      "login": "srinathshankar"
    },
    "body": "Do you mean non-partial aggregates here ?\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T18:45:16Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }\n+\n+  test(\"single distinct group with non-partial aggregates\") {\n+    val input = testRelation\n+      .groupBy('a, 'd)(\n+        countDistinct('e, 'c).as('agg1),\n+        CollectSet('b).toAggregateExpression().as('agg2))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('b, 'c), countDistinct('d), sum('e))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups without non-distinct aggregates\") {"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "I actually mean that the test only contains distinct aggregates.\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T19:16:00Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }\n+\n+  test(\"single distinct group with non-partial aggregates\") {\n+    val input = testRelation\n+      .groupBy('a, 'd)(\n+        countDistinct('e, 'c).as('agg1),\n+        CollectSet('b).toAggregateExpression().as('agg2))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('b, 'c), countDistinct('d), sum('e))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups without non-distinct aggregates\") {"
  }],
  "prId": 15187
}, {
  "comments": [{
    "author": {
      "login": "srinathshankar"
    },
    "body": "Could you also add single distinct group with aggregates that have partial\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T19:01:11Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }",
    "line": 50
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "done\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T19:16:36Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }",
    "line": 50
  }],
  "prId": 15187
}, {
  "comments": [{
    "author": {
      "login": "srinathshankar"
    },
    "body": "Could you also add a test with partials, and one without partials here ? (part of the same test(\"\"))\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T19:01:56Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }\n+\n+  test(\"single distinct group with non-partial aggregates\") {\n+    val input = testRelation\n+      .groupBy('a, 'd)(\n+        countDistinct('e, 'c).as('agg1),\n+        CollectSet('b).toAggregateExpression().as('agg2))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('b, 'c), countDistinct('d), sum('e))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "done\n",
    "commit": "bda0ba0366a5c398dc6144219c7e4cf03d81dad8",
    "createdAt": "2016-09-22T19:16:39Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.SimpleCatalystConf\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{If, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{CollectSet, Count}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class RewriteDistinctAggregatesSuite extends PlanTest {\n+  val conf = SimpleCatalystConf(caseSensitiveAnalysis = false, groupByOrdinal = false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  val nullInt = Literal(null, IntegerType)\n+  val nullString = Literal(null, StringType)\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.string, 'd.string, 'e.int)\n+\n+  private def checkRewrite(rewrite: LogicalPlan): Unit = rewrite match {\n+    case Aggregate(_, _, Aggregate(_, _, _: Expand)) =>\n+    case _ => fail(s\"Plan is not rewritten:\\n$rewrite\")\n+  }\n+\n+  test(\"single distinct group\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('e))\n+      .analyze\n+    val rewrite = RewriteDistinctAggregates(input)\n+    comparePlans(input, rewrite)\n+  }\n+\n+  test(\"single distinct group with non-partial aggregates\") {\n+    val input = testRelation\n+      .groupBy('a, 'd)(\n+        countDistinct('e, 'c).as('agg1),\n+        CollectSet('b).toAggregateExpression().as('agg2))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))\n+  }\n+\n+  test(\"multiple distinct groups\") {\n+    val input = testRelation\n+      .groupBy('a)(countDistinct('b, 'c), countDistinct('d), sum('e))\n+      .analyze\n+    checkRewrite(RewriteDistinctAggregates(input))"
  }],
  "prId": 15187
}]