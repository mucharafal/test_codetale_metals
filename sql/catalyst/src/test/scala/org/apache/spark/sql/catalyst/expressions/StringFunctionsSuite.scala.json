[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "As @davies pointed out, this probably failed in codegen.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T02:39:31Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "can you pull in his fix?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T02:40:46Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "OK, I thought @davies will fix this. I will take look at this.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T03:20:02Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Yea but his fix won't be merged for a while because it's part of a much broader change.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T03:29:04Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "I can port some of fix from that big PR as a separate PR.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:30:10Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Let's do that. Take your big PR into smaller ones.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:32:04Z",
    "diffHunk": "@@ -215,4 +215,15 @@ class StringFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n       evaluate(\"abbbbc\" rlike regEx, create_row(\"**\"))\n     }\n   }\n+\n+  test(\"length for string\") {\n+    val regEx = 'a.string.at(0)\n+    checkEvaluation(StringLength(Literal(\"abc\")), 3, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 5, create_row(\"abdef\"))\n+    checkEvaluation(StringLength(regEx), 0, create_row(\"\"))\n+    checkEvaluation(StringLength(regEx), null, create_row(null))\n+    checkEvaluation(StringLength(Literal.create(null, StringType)), null, create_row(\"abdef\"))"
  }],
  "prId": 6724
}]