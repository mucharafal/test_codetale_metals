[{
  "comments": [{
    "author": {
      "login": "attilapiros"
    },
    "body": "Nit: I would move ')' to the previous line, based on the example used in https://github.com/databricks/scala-style-guide given for the section \"For method and class constructor invocations, use 2 space indentation for its parameters and put each in each line when the parameters don't fit in two lines.\"",
    "commit": "c0a32897b108c2a0c90e6f32e0dd5bee8509e3be",
    "createdAt": "2019-04-10T11:02:58Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+class CountIfSuite extends SparkFunSuite {\n+  val input: Attribute = AttributeReference(\"input\", BooleanType, nullable = false)()\n+  val evaluator: DeclarativeAggregateEvaluator =\n+    DeclarativeAggregateEvaluator(CountIf(input), Seq(input))\n+\n+  test(\"empty\") {\n+    val result: InternalRow = evaluator.initialize()\n+    assert(result === InternalRow(0L))\n+  }\n+\n+  test(\"update\") {\n+    // update with non-nulls\n+    val result1: InternalRow = evaluator.update(\n+      InternalRow(true),\n+      InternalRow(false),\n+      InternalRow(true)\n+    )"
  }, {
    "author": {
      "login": "cryeo"
    },
    "body": "Okay, Iâ€™ll adjust it :)",
    "commit": "c0a32897b108c2a0c90e6f32e0dd5bee8509e3be",
    "createdAt": "2019-04-10T12:48:12Z",
    "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+class CountIfSuite extends SparkFunSuite {\n+  val input: Attribute = AttributeReference(\"input\", BooleanType, nullable = false)()\n+  val evaluator: DeclarativeAggregateEvaluator =\n+    DeclarativeAggregateEvaluator(CountIf(input), Seq(input))\n+\n+  test(\"empty\") {\n+    val result: InternalRow = evaluator.initialize()\n+    assert(result === InternalRow(0L))\n+  }\n+\n+  test(\"update\") {\n+    // update with non-nulls\n+    val result1: InternalRow = evaluator.update(\n+      InternalRow(true),\n+      InternalRow(false),\n+      InternalRow(true)\n+    )"
  }],
  "prId": 24335
}]