[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`testPropagation` -> `testFilterRedunction`?",
    "commit": "0972a296d6e9d37cb0def385eae96749b127f3a2",
    "createdAt": "2019-05-08T20:36:56Z",
    "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.catalyst.analysis.EliminateSubqueryAliases\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+/**\n+ * Unit tests for constant propagation in expressions.\n+ */\n+class FilterReductionSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"AnalysisNodes\", Once,\n+        EliminateSubqueryAliases) ::\n+        Batch(\"FilterReduction\", FixedPoint(10),\n+          ConstantPropagation,\n+          FilterReduction,\n+          ConstantFolding,\n+          BooleanSimplification,\n+          SimplifyBinaryComparison,\n+          PruneFilters) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int, 'b.int, 'c.int, 'x.boolean)\n+\n+  val data = {\n+    val intElements = Seq(null, 1, 2, 3)\n+    val booleanElements = Seq(null, true, false)\n+    for {\n+      a <- intElements\n+      b <- intElements\n+      c <- intElements\n+      x <- booleanElements\n+    } yield (a, b, c, x)\n+  }\n+\n+  val testRelationWithData = LocalRelation.fromExternalRows(testRelation.output, data.map(Row(_)))\n+\n+  private def testPropagation("
  }],
  "prId": 24495
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Which test case requires this?",
    "commit": "0972a296d6e9d37cb0def385eae96749b127f3a2",
    "createdAt": "2019-05-08T20:37:37Z",
    "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.catalyst.analysis.EliminateSubqueryAliases\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+/**\n+ * Unit tests for constant propagation in expressions.\n+ */\n+class FilterReductionSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"AnalysisNodes\", Once,\n+        EliminateSubqueryAliases) ::\n+        Batch(\"FilterReduction\", FixedPoint(10),\n+          ConstantPropagation,",
    "line": 39
  }, {
    "author": {
      "login": "peter-toth"
    },
    "body": "Like `a <= 2 AND 2 <= a` where I would expect `a = 2` reduced result. `FilterReduction` can transforms it into `a <= 2 AND 2 = a`. Then `ConstantPropagation` (only the enhanced in https://github.com/apache/spark/pull/24553) can transform it into `2 <= 2 AND 2 = a` ...",
    "commit": "0972a296d6e9d37cb0def385eae96749b127f3a2",
    "createdAt": "2019-05-09T06:26:21Z",
    "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.Row\n+import org.apache.spark.sql.catalyst.analysis.EliminateSubqueryAliases\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+/**\n+ * Unit tests for constant propagation in expressions.\n+ */\n+class FilterReductionSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"AnalysisNodes\", Once,\n+        EliminateSubqueryAliases) ::\n+        Batch(\"FilterReduction\", FixedPoint(10),\n+          ConstantPropagation,",
    "line": 39
  }],
  "prId": 24495
}]