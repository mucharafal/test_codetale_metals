[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "How about using `AnalysisTest`?",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-22T12:32:44Z",
    "diffHunk": "@@ -436,10 +526,19 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n     }\n   }\n \n+  val conf = new SQLConf().copy(SQLConf.CASE_SENSITIVE -> true)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, FunctionRegistry.builtin, conf)\n+  val analyzer = {\n+    catalog.createDatabase(\n+      CatalogDatabase(\"default\", \"\", new URI(\"loc\"), Map.empty),\n+      ignoreIfExists = false)\n+    new Analyzer(catalog, conf)\n+  }\n+\n   private def unapplySelect(expr: String, relation: LocalRelation) = {\n     val parsedExpr = parseAsCatalystExpression(Seq(expr)).head\n     val select = relation.select(parsedExpr)\n-    val analyzed = select.analyze\n+    val analyzed = analyzer.execute(select)"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "ok.",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-22T13:55:20Z",
    "diffHunk": "@@ -436,10 +526,19 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n     }\n   }\n \n+  val conf = new SQLConf().copy(SQLConf.CASE_SENSITIVE -> true)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, FunctionRegistry.builtin, conf)\n+  val analyzer = {\n+    catalog.createDatabase(\n+      CatalogDatabase(\"default\", \"\", new URI(\"loc\"), Map.empty),\n+      ignoreIfExists = false)\n+    new Analyzer(catalog, conf)\n+  }\n+\n   private def unapplySelect(expr: String, relation: LocalRelation) = {\n     val parsedExpr = parseAsCatalystExpression(Seq(expr)).head\n     val select = relation.select(parsedExpr)\n-    val analyzed = select.analyze\n+    val analyzed = analyzer.execute(select)"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n   private val mapWithStructKey = StructType(Array(ignoredField,\r\n-    StructField(\"col2\", MapType(StructType(\r\n-      StructField(\"field1\", StringType) ::\r\n+    StructField(\"col2\", MapType(\r\n+      StructType(\r\n+        StructField(\"field1\", StringType) ::\r\n         StructField(\"field2\", IntegerType) :: Nil),\r\n       ArrayType(StructType(\r\n-      StructField(\"field3\", StructType(\r\n-        StructField(\"subfield1\", IntegerType) ::\r\n+        StructField(\"field3\", StructType(\r\n+          StructField(\"subfield1\", IntegerType) ::\r\n           StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:25:11Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))",
    "line": 60
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-    StructField(\"col2\", MapType(StructType(\r\n-      StructField(\"field1\", StringType) :: Nil),\r\n+    StructField(\"col2\", MapType(\r\n+      StructType(StructField(\"field1\", StringType) :: Nil),\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:31:10Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field3\", StructType(\r\n           StructField(\"subfield1\", IntegerType) ::\r\n-            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:31:51Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-    StructField(\"col2\", MapType(StructType(\r\n-      StructField(\"field2\", IntegerType) :: Nil),\r\n+    StructField(\"col2\", MapType(\r\n+      StructType(StructField(\"field2\", IntegerType) :: Nil),\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:32:11Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field3\", StructType(\r\n           StructField(\"subfield1\", IntegerType) ::\r\n-            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:32:23Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-    StructField(\"col2\", MapType(ArrayType(\r\n-      StructType(\r\n+    StructField(\"col2\", MapType(\r\n+      ArrayType(StructType(\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:33:06Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType("
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field2\", StructType(\r\n           StructField(\"subfield1\", IntegerType) ::\r\n-            StructField(\"subfield2\", LongType) :: Nil\r\n+          StructField(\"subfield2\", LongType) :: Nil\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:33:23Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field3\", StructType(\r\n           StructField(\"subfield3\", IntegerType) ::\r\n-            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\r\n+          StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:33:42Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-    StructField(\"col2\", MapType(ArrayType(\r\n-      StructType(\r\n+    StructField(\"col2\", MapType(\r\n+      ArrayType(StructType(\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:34:33Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType("
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field3\", StructType(\r\n           StructField(\"subfield3\", IntegerType) ::\r\n-            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n+          StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:35:00Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-    StructField(\"col2\", MapType(ArrayType(\r\n-      StructType(\r\n+    StructField(\"col2\", MapType(\r\n+      ArrayType(StructType(\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:35:39Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field2.subfield1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType("
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-          StructField(\"subfield1\", IntegerType) :: Nil\r\n-        )) :: Nil), containsNull = false),\r\n+          StructField(\"subfield1\", IntegerType) :: Nil)) :: Nil), containsNull = false),\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:36:01Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field2.subfield1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) :: Nil\n+        )) :: Nil), containsNull = false),"
  }],
  "prId": 24179
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n         StructField(\"field3\", StructType(\r\n           StructField(\"subfield3\", IntegerType) ::\r\n-            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n+          StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\r\n```",
    "commit": "6e5b57e8373e4b2ffec25ac1afcb1855abede09a",
    "createdAt": "2019-03-24T01:36:26Z",
    "diffHunk": "@@ -394,6 +405,91 @@ class SelectedFieldSuite extends SparkFunSuite with BeforeAndAfterAll {\n         :: Nil)))\n   }\n \n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: struct (containsNull = false)\n+  //  |    |     |-- field1: string (nullable = true)\n+  //  |    |     |-- field2: integer (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield1: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield2: integer (nullable = true)\n+  private val mapWithStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+      StructField(\"field3\", StructType(\n+        StructField(\"subfield1\", IntegerType) ::\n+          StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field1 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field1\", StringType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithStructKey, \"map_keys(col2).field2 as foo\") {\n+    StructField(\"col2\", MapType(StructType(\n+      StructField(\"field2\", IntegerType) :: Nil),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  //  |-- col1: string (nullable = false)\n+  //  |-- col2: map (nullable = true)\n+  //  |    |-- key: array (valueContainsNull = true)\n+  //  |    |     |-- element: struct (containsNull = false)\n+  //  |    |     |     |-- field1: string (nullable = true)\n+  //  |    |     |     |-- field2: struct (containsNull = false)\n+  //  |    |     |     |     |-- subfield1: integer (nullable = true)\n+  //  |    |     |     |     |-- subfield2: long (nullable = true)\n+  //  |    |-- value: array (valueContainsNull = true)\n+  //  |    |    |-- element: struct (containsNull = false)\n+  //  |    |    |    |-- field3: struct (nullable = true)\n+  //  |    |    |    |    |-- subfield3: integer (nullable = true)\n+  //  |    |    |    |    |-- subfield4: integer (nullable = true)\n+  private val mapWithArrayOfStructKey = StructType(Array(ignoredField,\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) ::\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) ::\n+            StructField(\"subfield2\", LongType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))))\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field1\", StringType) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))\n+  }\n+\n+  testSelect(mapWithArrayOfStructKey, \"map_keys(col2)[0].field2.subfield1 as foo\") {\n+    StructField(\"col2\", MapType(ArrayType(\n+      StructType(\n+        StructField(\"field2\", StructType(\n+          StructField(\"subfield1\", IntegerType) :: Nil\n+        )) :: Nil), containsNull = false),\n+      ArrayType(StructType(\n+        StructField(\"field3\", StructType(\n+          StructField(\"subfield3\", IntegerType) ::\n+            StructField(\"subfield4\", IntegerType) :: Nil)) :: Nil), containsNull = false)))"
  }],
  "prId": 24179
}]