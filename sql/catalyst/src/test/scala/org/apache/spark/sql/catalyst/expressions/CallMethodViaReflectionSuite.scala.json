[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "no need to test it?\n",
    "commit": "b574c5d8abf93fcb34e7a2f88af14fdeb7d1bc66",
    "createdAt": "2016-07-12T01:33:32Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.analysis.TypeCheckResult.TypeCheckFailure\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+/** A static class for testing purpose. */\n+object ReflectStaticClass {\n+  def method1(): String = \"m1\"\n+  def method2(v1: Int): String = \"m\" + v1\n+  def method3(v1: java.lang.Integer): String = \"m\" + v1\n+  def method4(v1: Int, v2: String): String = \"m\" + v1 + v2\n+}\n+\n+/** A non-static class for testing purpose. */\n+class ReflectDynamicClass {",
    "line": 33
  }, {
    "author": {
      "login": "petermaxlee"
    },
    "body": "This is used to make sure we report the correct error message.\n",
    "commit": "b574c5d8abf93fcb34e7a2f88af14fdeb7d1bc66",
    "createdAt": "2016-07-12T01:39:04Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.analysis.TypeCheckResult.TypeCheckFailure\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+/** A static class for testing purpose. */\n+object ReflectStaticClass {\n+  def method1(): String = \"m1\"\n+  def method2(v1: Int): String = \"m\" + v1\n+  def method3(v1: java.lang.Integer): String = \"m\" + v1\n+  def method4(v1: Int, v2: String): String = \"m\" + v1 + v2\n+}\n+\n+/** A non-static class for testing purpose. */\n+class ReflectDynamicClass {",
    "line": 33
  }],
  "prId": 14138
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: we can use `stripSuffix(\"$\")`\n",
    "commit": "b574c5d8abf93fcb34e7a2f88af14fdeb7d1bc66",
    "createdAt": "2016-07-12T06:31:42Z",
    "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.analysis.TypeCheckResult.TypeCheckFailure\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+/** A static class for testing purpose. */\n+object ReflectStaticClass {\n+  def method1(): String = \"m1\"\n+  def method2(v1: Int): String = \"m\" + v1\n+  def method3(v1: java.lang.Integer): String = \"m\" + v1\n+  def method4(v1: Int, v2: String): String = \"m\" + v1 + v2\n+}\n+\n+/** A non-static class for testing purpose. */\n+class ReflectDynamicClass {\n+  def method1(): String = \"m1\"\n+}\n+\n+/**\n+ * Test suite for [[CallMethodViaReflection]] and its companion object.\n+ */\n+class CallMethodViaReflectionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  import CallMethodViaReflection._\n+\n+  // Get rid of the $ so we are getting the companion object's name.\n+  private val staticClassName = ReflectStaticClass.getClass.getName.replace(\"$\", \"\")"
  }],
  "prId": 14138
}]