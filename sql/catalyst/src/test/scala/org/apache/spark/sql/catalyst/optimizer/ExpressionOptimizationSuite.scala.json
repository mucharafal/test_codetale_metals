[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Would you mind to do a favor to add a new line here? :)\n",
    "commit": "abbc53cc9b1e02d19c2f2200947bcb86bf33511c",
    "createdAt": "2014-10-17T12:36:35Z",
    "diffHunk": "@@ -30,7 +30,7 @@ class ExpressionOptimizationSuite extends ExpressionEvaluationSuite {\n       expected: Any,\n       inputRow: Row = EmptyRow): Unit = {\n     val plan = Project(Alias(expression, s\"Optimized($expression)\")() :: Nil, NoRelation)\n-    val optimizedPlan = Optimizer(plan)\n+    val optimizedPlan = SparkOptimizer(plan)\n     super.checkEvaluation(optimizedPlan.expressions.head, expected, inputRow)\n   }\n }"
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "Of course not. I'll add a new line.\n",
    "commit": "abbc53cc9b1e02d19c2f2200947bcb86bf33511c",
    "createdAt": "2014-10-18T00:17:34Z",
    "diffHunk": "@@ -30,7 +30,7 @@ class ExpressionOptimizationSuite extends ExpressionEvaluationSuite {\n       expected: Any,\n       inputRow: Row = EmptyRow): Unit = {\n     val plan = Project(Alias(expression, s\"Optimized($expression)\")() :: Nil, NoRelation)\n-    val optimizedPlan = Optimizer(plan)\n+    val optimizedPlan = SparkOptimizer(plan)\n     super.checkEvaluation(optimizedPlan.expressions.head, expected, inputRow)\n   }\n }"
  }],
  "prId": 2825
}]