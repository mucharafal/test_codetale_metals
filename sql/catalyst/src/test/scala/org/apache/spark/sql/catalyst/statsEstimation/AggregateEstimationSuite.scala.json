[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "The same here.",
    "commit": "cd9f4242546a3896e55d2d9663305c0bca67509c",
    "createdAt": "2017-06-23T07:12:37Z",
    "diffHunk": "@@ -100,17 +100,22 @@ class AggregateEstimationSuite extends StatsEstimationTestBase {\n       size = Some(4 * (8 + 4)),\n       attributeStats = AttributeMap(Seq(\"key12\").map(nameToColInfo)))\n \n-    val noGroupAgg = Aggregate(groupingExpressions = Nil,\n-      aggregateExpressions = Seq(Alias(Count(Literal(1)), \"cnt\")()), child)\n-    assert(noGroupAgg.stats(conf.copy(SQLConf.CBO_ENABLED -> false)) ==\n-      // overhead + count result size\n-      Statistics(sizeInBytes = 8 + 8, rowCount = Some(1)))\n-\n-    val hasGroupAgg = Aggregate(groupingExpressions = attributes,\n-      aggregateExpressions = attributes :+ Alias(Count(Literal(1)), \"cnt\")(), child)\n-    assert(hasGroupAgg.stats(conf.copy(SQLConf.CBO_ENABLED -> false)) ==\n-      // From UnaryNode.computeStats, childSize * outputRowSize / childRowSize\n-      Statistics(sizeInBytes = 48 * (8 + 4 + 8) / (8 + 4)))\n+    try {\n+      SQLConf.get.setConf(SQLConf.CBO_ENABLED, false)\n+      val noGroupAgg = Aggregate(groupingExpressions = Nil,\n+        aggregateExpressions = Seq(Alias(Count(Literal(1)), \"cnt\")()), child)\n+      assert(noGroupAgg.stats ==\n+        // overhead + count result size\n+        Statistics(sizeInBytes = 8 + 8, rowCount = Some(1)))\n+\n+      val hasGroupAgg = Aggregate(groupingExpressions = attributes,\n+        aggregateExpressions = attributes :+ Alias(Count(Literal(1)), \"cnt\")(), child)\n+      assert(hasGroupAgg.stats ==\n+        // From UnaryNode.computeStats, childSize * outputRowSize / childRowSize\n+        Statistics(sizeInBytes = 48 * (8 + 4 + 8) / (8 + 4)))\n+    } finally {\n+      SQLConf.get.unsetConf(SQLConf.CBO_ENABLED)"
  }],
  "prId": 18391
}]