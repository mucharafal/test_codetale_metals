[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "The resulting decimal could be null (out of range)\n",
    "commit": "156372f038db009c7f70d305a2770abbf68e0908",
    "createdAt": "2015-10-13T18:52:15Z",
    "diffHunk": "@@ -78,7 +78,17 @@ object LiteralGenerator {\n         Double.NaN, Double.PositiveInfinity, Double.NegativeInfinity)\n     } yield Literal.create(f, DoubleType)\n \n-  // TODO: decimal type\n+\n+  // TODO cache the generated data, and boarder the value range\n+  // Since scalacheck doesn't support the decimal yet in `Choose`.\n+  def decimalLiteralGen(precision: Int, scale: Int): Gen[Literal] = {\n+    Gen.chooseNum(Double.MinValue, Double.MaxValue,\n+      Double.NaN, Double.PositiveInfinity, Double.NegativeInfinity) map { bd =>\n+      val d = Decimal(bd)\n+      d.changePrecision(precision, scale)"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Yes, that's true, I will udpate the code by gen the random decimal according to the `precision` and `scale`.\n",
    "commit": "156372f038db009c7f70d305a2770abbf68e0908",
    "createdAt": "2015-10-14T00:26:25Z",
    "diffHunk": "@@ -78,7 +78,17 @@ object LiteralGenerator {\n         Double.NaN, Double.PositiveInfinity, Double.NegativeInfinity)\n     } yield Literal.create(f, DoubleType)\n \n-  // TODO: decimal type\n+\n+  // TODO cache the generated data, and boarder the value range\n+  // Since scalacheck doesn't support the decimal yet in `Choose`.\n+  def decimalLiteralGen(precision: Int, scale: Int): Gen[Literal] = {\n+    Gen.chooseNum(Double.MinValue, Double.MaxValue,\n+      Double.NaN, Double.PositiveInfinity, Double.NegativeInfinity) map { bd =>\n+      val d = Decimal(bd)\n+      d.changePrecision(precision, scale)"
  }],
  "prId": 9086
}]