[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we put these into a map so it is easier to read?\r\n\r\nmap from attribute to stat\r\n\r\n\r\nalso use named arguments when creating ColumnStat; otherwise it is too difficult to read what the 0 or 4 means.",
    "commit": "c95067f0469ec1ccef9140988ded27cea882edbf",
    "createdAt": "2017-01-09T09:05:37Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, AttributeMap, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+\n+\n+class AggEstimationSuite extends StatsEstimationTestBase {\n+\n+  /** Column info: names and column stats for group-by columns */\n+  val (key11, colStat11) = (attr(\"key11\"), ColumnStat(2, Some(1), Some(2), 0, 4, 4))"
  }],
  "prId": 16431
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can we put all the tables into the test cases? it is farther away from the test cases making it more difficult to read.\r\n",
    "commit": "c95067f0469ec1ccef9140988ded27cea882edbf",
    "createdAt": "2017-01-09T09:06:27Z",
    "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, AttributeMap, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+\n+\n+class AggEstimationSuite extends StatsEstimationTestBase {\n+\n+  /** Column info: names and column stats for group-by columns */\n+  val (key11, colStat11) = (attr(\"key11\"), ColumnStat(2, Some(1), Some(2), 0, 4, 4))\n+  val (key12, colStat12) = (attr(\"key12\"), ColumnStat(1, Some(10), Some(10), 0, 4, 4))\n+  val (key21, colStat21) = (attr(\"key21\"), colStat11)\n+  val (key22, colStat22) = (attr(\"key22\"), ColumnStat(4, Some(10), Some(40), 0, 4, 4))\n+  val (key31, colStat31) = (attr(\"key31\"), colStat11)\n+  val (key32, colStat32) = (attr(\"key32\"), ColumnStat(2, Some(10), Some(20), 0, 4, 4))\n+\n+  /** Tables for testing */\n+  /** Data for table1: (1, 10), (2, 10) */\n+  val table1 = StatsTestPlan("
  }],
  "prId": 16431
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "this test case is basically the same as the next one, isn't it?",
    "commit": "c95067f0469ec1ccef9140988ded27cea882edbf",
    "createdAt": "2017-01-09T19:26:09Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+\n+\n+class AggEstimationSuite extends StatsEstimationTestBase {\n+\n+  /** Columns for testing */\n+  private val columnInfo: Map[Attribute, ColumnStat] =\n+    Map(\n+      attr(\"key11\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key12\") -> ColumnStat(distinctCount = 1, min = Some(10), max = Some(10), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key21\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key22\") -> ColumnStat(distinctCount = 4, min = Some(10), max = Some(40), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key31\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key32\") -> ColumnStat(distinctCount = 2, min = Some(10), max = Some(20), nullCount = 0,\n+        avgLen = 4, maxLen = 4))\n+\n+  private val nameToAttr: Map[String, Attribute] = columnInfo.map(kv => kv._1.name -> kv._1)\n+  private val nameToColInfo: Map[String, (Attribute, ColumnStat)] =\n+    columnInfo.map(kv => kv._1.name -> kv)\n+\n+  test(\"empty group-by column\") {\n+    val colNames = Seq(\"key11\", \"key12\")\n+    // Suppose table1 has 2 records: (1, 10), (2, 10)\n+    val table1 = StatsTestPlan(\n+      outputList = colNames.map(nameToAttr),\n+      stats = Statistics(\n+        sizeInBytes = 2 * (4 + 4),\n+        rowCount = Some(2),\n+        attributeStats = AttributeMap(colNames.map(nameToColInfo))))\n+\n+    checkAggStats(\n+      child = table1,\n+      colNames = Nil,\n+      expectedRowCount = 1)\n+  }\n+\n+  test(\"there's a primary key in group-by columns\") {",
    "line": 64
  }],
  "prId": 16431
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you also add a test case for empty output?\r\n",
    "commit": "c95067f0469ec1ccef9140988ded27cea882edbf",
    "createdAt": "2017-01-09T19:26:27Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+\n+\n+class AggEstimationSuite extends StatsEstimationTestBase {\n+\n+  /** Columns for testing */\n+  private val columnInfo: Map[Attribute, ColumnStat] =\n+    Map(\n+      attr(\"key11\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key12\") -> ColumnStat(distinctCount = 1, min = Some(10), max = Some(10), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key21\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key22\") -> ColumnStat(distinctCount = 4, min = Some(10), max = Some(40), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key31\") -> ColumnStat(distinctCount = 2, min = Some(1), max = Some(2), nullCount = 0,\n+        avgLen = 4, maxLen = 4),\n+      attr(\"key32\") -> ColumnStat(distinctCount = 2, min = Some(10), max = Some(20), nullCount = 0,\n+        avgLen = 4, maxLen = 4))\n+\n+  private val nameToAttr: Map[String, Attribute] = columnInfo.map(kv => kv._1.name -> kv._1)\n+  private val nameToColInfo: Map[String, (Attribute, ColumnStat)] =\n+    columnInfo.map(kv => kv._1.name -> kv)\n+\n+  test(\"empty group-by column\") {",
    "line": 48
  }],
  "prId": 16431
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "can you also rename this AggregateEstimationSuite?",
    "commit": "c95067f0469ec1ccef9140988ded27cea882edbf",
    "createdAt": "2017-01-09T19:29:10Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap, Literal}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+\n+\n+class AggEstimationSuite extends StatsEstimationTestBase {",
    "line": 26
  }],
  "prId": 16431
}]