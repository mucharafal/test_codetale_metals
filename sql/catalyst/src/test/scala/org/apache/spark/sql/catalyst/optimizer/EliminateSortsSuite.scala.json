[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "(I guess you missed two heading spaces :)) \n",
    "commit": "0cb11361ff70d88ae09a4fd31154999fc9c3efae",
    "createdAt": "2016-04-27T00:22:44Z",
    "diffHunk": "@@ -69,4 +69,17 @@ class EliminateSortsSuite extends PlanTest {\n \n     comparePlans(optimized, correctAnswer)\n   }\n+\n+  test(\"Remove no-op alias\") {\n+    val x = testRelation\n+\n+    val query = x.select('a.as('x), Year(CurrentDate()).as('y))\n+      .orderBy(SortOrder('x, Ascending), SortOrder('y, Ascending))\n+    val optimized = Optimize.execute(analyzer.execute(query))\n+    val correctAnswer = analyzer.execute(\n+      x.select('a.as('x), Year(CurrentDate()).as('y))\n+      .orderBy(SortOrder('x, Ascending)))"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you, @HyukjinKwon .\nI will reexamine my code for indentation.\n",
    "commit": "0cb11361ff70d88ae09a4fd31154999fc9c3efae",
    "createdAt": "2016-04-27T00:37:50Z",
    "diffHunk": "@@ -69,4 +69,17 @@ class EliminateSortsSuite extends PlanTest {\n \n     comparePlans(optimized, correctAnswer)\n   }\n+\n+  test(\"Remove no-op alias\") {\n+    val x = testRelation\n+\n+    val query = x.select('a.as('x), Year(CurrentDate()).as('y))\n+      .orderBy(SortOrder('x, Ascending), SortOrder('y, Ascending))\n+    val optimized = Optimize.execute(analyzer.execute(query))\n+    val correctAnswer = analyzer.execute(\n+      x.select('a.as('x), Year(CurrentDate()).as('y))\n+      .orderBy(SortOrder('x, Ascending)))"
  }],
  "prId": 12719
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "here too\n",
    "commit": "0cb11361ff70d88ae09a4fd31154999fc9c3efae",
    "createdAt": "2016-05-12T02:14:49Z",
    "diffHunk": "@@ -69,4 +70,16 @@ class EliminateSortsSuite extends PlanTest {\n \n     comparePlans(optimized, correctAnswer)\n   }\n+\n+  test(\"Remove no-op alias\") {\n+    val x = testRelation\n+\n+    val query = x.select('a.as('x), Year(CurrentDate()).as('y), 'b)\n+      .orderBy('x.asc, 'y.asc, 'b.desc)\n+    val optimized = Optimize.execute(analyzer.execute(query))",
    "line": 20
  }],
  "prId": 12719
}]