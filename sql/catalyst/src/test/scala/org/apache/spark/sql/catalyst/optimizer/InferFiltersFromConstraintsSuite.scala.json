[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `SPARK-23405: left-semi equal-join should filter out null join keys on both sides`",
    "commit": "709ed39052a032d0dc2258b2c637ab107d4b4df7",
    "createdAt": "2018-02-28T09:21:15Z",
    "diffHunk": "@@ -192,4 +192,17 @@ class InferFiltersFromConstraintsSuite extends PlanTest {\n \n     comparePlans(Optimize.execute(original.analyze), correct.analyze)\n   }\n+\n+  test(\"SPARK-23405:single left-semi join, filter out nulls on either side on equi-join keys\") {"
  }],
  "prId": 20670
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: we can create a `val condition = Some(\"x.a\".attr === \"y.a\".attr)` to reduce duplicated code",
    "commit": "709ed39052a032d0dc2258b2c637ab107d4b4df7",
    "createdAt": "2018-02-28T09:22:51Z",
    "diffHunk": "@@ -192,4 +192,17 @@ class InferFiltersFromConstraintsSuite extends PlanTest {\n \n     comparePlans(Optimize.execute(original.analyze), correct.analyze)\n   }\n+\n+  test(\"SPARK-23405:single left-semi join, filter out nulls on either side on equi-join keys\") {\n+    val x = testRelation.subquery('x)\n+    val y = testRelation.subquery('y)\n+    val originalQuery = x.join(y, LeftSemi,\n+      condition = Some(\"x.a\".attr === \"y.a\".attr)).analyze"
  }],
  "prId": 20670
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "this doesn't need to be in a new line",
    "commit": "709ed39052a032d0dc2258b2c637ab107d4b4df7",
    "createdAt": "2018-02-28T15:14:01Z",
    "diffHunk": "@@ -192,4 +192,17 @@ class InferFiltersFromConstraintsSuite extends PlanTest {\n \n     comparePlans(Optimize.execute(original.analyze), correct.analyze)\n   }\n+\n+  test(\"SPARK-23405: left-semi equal-join should filter out null join keys on both sides\") {\n+    val x = testRelation.subquery('x)\n+    val y = testRelation.subquery('y)\n+    val condition = Some(\"x.a\".attr === \"y.a\".attr)\n+    val originalQuery = x.join(y, LeftSemi, condition).analyze\n+    val left = x.where(IsNotNull('a))\n+    val right = y.where(IsNotNull('a))\n+    val correctAnswer = left.join(right, LeftSemi, condition)\n+        .analyze"
  }],
  "prId": 20670
}]