[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Besides the unit test, can you provide an end-to-end case that can trigger this issue too?",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-12T14:19:42Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "I have a use case where I faced this problem. And I tried this patch on it. Unfortunately this contains a very complex business logic and I have not been able to reproduce it in a simple one. But if needed, I can try again.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-12T14:41:58Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Instead of copying your customer codes, can you making a fake one?",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T02:18:39Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "@mgaido91 I can reproduce the issue by following test case. You can check it:\r\n\r\n```scala\r\n  test(\"SPARK-22226: too much splitted expressions should not exceed constant pool limit\") {\r\n    withSQLConf(\r\n      (SQLConf.WHOLESTAGE_CODEGEN_ENABLED.key, \"false\")) {\r\n      val colNumber = 1000\r\n      val baseDF = spark.range(10).toDF()\r\n      val newCols = (1 to colNumber).map { colIndex =>\r\n        expr(s\"id + $colIndex\").as(s\"_$colIndex\")\r\n      }\r\n      val input = baseDF.select(newCols: _*)\r\n      val aggs = (1 to colNumber).flatMap { colIndex =>\r\n        val colName = s\"_$colIndex\"\r\n        Seq(expr(s\"stddev($colName)\"),\r\n          expr(s\"stddev_samp($colName)\"),\r\n          expr(s\"stddev_pop($colName)\"),\r\n          expr(s\"variance($colName)\"),\r\n          expr(s\"var_samp($colName)\"),\r\n          expr(s\"var_pop($colName)\"),\r\n          expr(s\"skewness($colName)\"),\r\n          expr(s\"kurtosis($colName)\"))\r\n      }\r\n      input.agg(aggs.head, aggs.tail: _*).collect()\r\n    }\r\n  }\r\n```\r\n\r\n\r\n```\r\n[info]   Cause: org.codehaus.janino.JaninoRuntimeException: failed to compile: org.codehaus.janino.JaninoRuntimeExc\r\neption: Constant pool for class org.apache.spark.sql.catalyst.expressions.GeneratedClass$SpecificMutableProjection \r\nhas grown past JVM limit of 0xFFFF\r\n[info]   at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$.org$apache$spark$sql$catalyst$expressi\r\nons$codegen$CodeGenerator$$doCompile(CodeGenerator.scala:1079)\r\n```",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T03:28:32Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "thank you very much for your help @viirya ! In my use cases it seemed to be connected to the `dropDuplicates` method and I focused on it, but thanks to your suggestion now I realize that `dropDuplicates` by itself is not enough, it needs also some functions applied to columns to generate the issue! Thank you so much. Where should I add this test case? I am adding it to `DataFrameAggregateSuite` since this is related to aggregating some functions, is it ok? Thanks.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T07:15:05Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I was adding it to `DataFrameAggregateSuite`.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T07:18:32Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "@viirya I have a good and a bad news... Thanks to your suggestion I have been able to understand and reproduce the issue. Moreover, I found also another issue which is fixed by this problem and I am adding a UT for that too: in some cases, we might have a \r\n```\r\nCode of method apply(...) grows beyond 64 KB\r\n```\r\nAnd with this PR the problem is fixed.\r\n\r\nThe bad thing is that the UT you provided still fails, but with a different error: actually it is always a Constant Pool limit exceeded exception, but it is in a NestedClass. From my analysis, this is caused by another problem, ie. that we might reference too many fields of the superclass in the NestedClasses. This might be addressed maybe trying to tune the magic number which I brought to 1000k in this PR, but I am pretty sure that it will be also addressed by the ongoing PR for SPARK-18016, since he is trying to reduce the number of variables. Thus I consider this out of scope for this PR.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T12:35:46Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "@mgaido91 Do you meant \"2: compact primitive declarations into arrays\" in SPARK-18016?",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T13:36:25Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "@mgaido91 Thanks for trying it. Yeah, those expressions like `skewness` are very complicated, so they're likely to cause the issue you encountered.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T13:53:12Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "@viirya exactly, I meant that. Thank you for your suggestion. You have been very helpful to me.",
    "commit": "4952880dcb9830616fde1c2c62f148347bbb0b55",
    "createdAt": "2017-10-13T14:03:20Z",
    "diffHunk": "@@ -201,6 +201,23 @@ class CodeGenerationSuite extends SparkFunSuite with ExpressionEvalHelper {\n     }\n   }\n \n+  test(\"SPARK-22226: group splitted expressions into one method per nested class\") {",
    "line": 4
  }],
  "prId": 19480
}]