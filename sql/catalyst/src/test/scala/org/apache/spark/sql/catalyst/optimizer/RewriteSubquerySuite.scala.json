[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "We need to modify this existing test?",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T02:45:58Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {",
    "line": 30
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Yes, `spark.sql.constraintPropagation.enabled=false` to test `ColumnPruning`.\r\n`spark.sql.constraintPropagation.enabled=true` to test `ColumnPruning`, `InferFiltersFromConstraints` and `PushDownPredicate`.",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T03:08:57Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {",
    "line": 30
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Ah, I see. Thanks.",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T03:46:52Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {",
    "line": 30
  }],
  "prId": 22778
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Need the column pruning in the test title?",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T03:48:21Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {\n+      val relation = LocalRelation('a.int, 'b.int)\n+      val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n \n-    val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n+      val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n \n-    val optimized = Optimize.execute(query.analyze)\n-    val correctAnswer = relation\n-      .select('a)\n-      .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n-      .analyze\n+      val optimized = Optimize.execute(query.analyze)\n+      val correctAnswer = relation\n+        .select('a)\n+        .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n+        .analyze\n \n-    comparePlans(optimized, correctAnswer)\n+      comparePlans(optimized, correctAnswer)\n+    }\n+  }\n+\n+  test(\"Infer filters and push down predicate after rewriting predicate subquery\") {",
    "line": 44
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "How about making the test title simple, then leaving comments about what's tested clearly here?",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T03:52:34Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {\n+      val relation = LocalRelation('a.int, 'b.int)\n+      val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n \n-    val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n+      val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n \n-    val optimized = Optimize.execute(query.analyze)\n-    val correctAnswer = relation\n-      .select('a)\n-      .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n-      .analyze\n+      val optimized = Optimize.execute(query.analyze)\n+      val correctAnswer = relation\n+        .select('a)\n+        .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n+        .analyze\n \n-    comparePlans(optimized, correctAnswer)\n+      comparePlans(optimized, correctAnswer)\n+    }\n+  }\n+\n+  test(\"Infer filters and push down predicate after rewriting predicate subquery\") {",
    "line": 44
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "How about refactor these test to:\r\n```scala\r\n  val relation = LocalRelation('a.int, 'b.int)\r\n  val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\r\n\r\n  test(\"Column pruning\") {\r\n    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {\r\n      val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\r\n\r\n      val optimized = Optimize.execute(query.analyze)\r\n      val correctAnswer = relation\r\n        .select('a)\r\n        .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\r\n        .analyze\r\n\r\n      comparePlans(optimized, correctAnswer)\r\n    }\r\n  }\r\n\r\n  test(\"Column pruning, infer filters and push down predicate\") {\r\n    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"true\") {\r\n      val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\r\n\r\n      val optimized = Optimize.execute(query.analyze)\r\n      val correctAnswer = relation\r\n        .where(IsNotNull('a)).select('a)\r\n        .join(relInSubquery.where(IsNotNull('x)).select('x), LeftSemi, Some('a === 'x))\r\n        .analyze\r\n\r\n      comparePlans(optimized, correctAnswer)\r\n    }\r\n  }\r\n```",
    "commit": "80bf621f5fc4d2806d116b3965374fa9d0947311",
    "createdAt": "2018-10-23T06:06:21Z",
    "diffHunk": "@@ -33,23 +34,44 @@ class RewriteSubquerySuite extends PlanTest {\n       Batch(\"Rewrite Subquery\", FixedPoint(1),\n         RewritePredicateSubquery,\n         ColumnPruning,\n+        InferFiltersFromConstraints,\n+        PushDownPredicate,\n         CollapseProject,\n         RemoveRedundantProject) :: Nil\n   }\n \n   test(\"Column pruning after rewriting predicate subquery\") {\n-    val relation = LocalRelation('a.int, 'b.int)\n-    val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n+    withSQLConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED.key -> \"false\") {\n+      val relation = LocalRelation('a.int, 'b.int)\n+      val relInSubquery = LocalRelation('x.int, 'y.int, 'z.int)\n \n-    val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n+      val query = relation.where('a.in(ListQuery(relInSubquery.select('x)))).select('a)\n \n-    val optimized = Optimize.execute(query.analyze)\n-    val correctAnswer = relation\n-      .select('a)\n-      .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n-      .analyze\n+      val optimized = Optimize.execute(query.analyze)\n+      val correctAnswer = relation\n+        .select('a)\n+        .join(relInSubquery.select('x), LeftSemi, Some('a === 'x))\n+        .analyze\n \n-    comparePlans(optimized, correctAnswer)\n+      comparePlans(optimized, correctAnswer)\n+    }\n+  }\n+\n+  test(\"Infer filters and push down predicate after rewriting predicate subquery\") {",
    "line": 44
  }],
  "prId": 22778
}]