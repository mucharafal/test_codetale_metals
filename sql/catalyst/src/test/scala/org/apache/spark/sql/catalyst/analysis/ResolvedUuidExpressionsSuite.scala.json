[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "NIT: use `collect`?",
    "commit": "37a7c8e37d0aed753f3e93bfcc5953f208c3277a",
    "createdAt": "2018-03-20T11:10:04Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+\n+/**\n+ * Test suite for resolving Uuid expressions.\n+ */\n+class ResolvedUuidExpressionsSuite extends AnalysisTest {\n+\n+  private lazy val a = 'a.int\n+  private lazy val r = LocalRelation(a)\n+  private lazy val uuid1 = Uuid().as('_uuid1)\n+  private lazy val uuid2 = Uuid().as('_uuid2)\n+  private lazy val uuid3 = Uuid().as('_uuid3)\n+  private lazy val uuid1Ref = uuid1.toAttribute\n+\n+  private val analyzer = getAnalyzer(caseSensitive = true)\n+\n+  private def getUuidExpressions(plan: LogicalPlan): Seq[Uuid] = {\n+    val uuids = new ArrayBuffer[Uuid]()\n+    plan.transformUp {\n+      case p =>\n+        p.transformExpressionsUp {"
  }],
  "prId": 20861
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Nit use `flatMap`?",
    "commit": "37a7c8e37d0aed753f3e93bfcc5953f208c3277a",
    "createdAt": "2018-03-20T11:10:13Z",
    "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+\n+/**\n+ * Test suite for resolving Uuid expressions.\n+ */\n+class ResolvedUuidExpressionsSuite extends AnalysisTest {\n+\n+  private lazy val a = 'a.int\n+  private lazy val r = LocalRelation(a)\n+  private lazy val uuid1 = Uuid().as('_uuid1)\n+  private lazy val uuid2 = Uuid().as('_uuid2)\n+  private lazy val uuid3 = Uuid().as('_uuid3)\n+  private lazy val uuid1Ref = uuid1.toAttribute\n+\n+  private val analyzer = getAnalyzer(caseSensitive = true)\n+\n+  private def getUuidExpressions(plan: LogicalPlan): Seq[Uuid] = {\n+    val uuids = new ArrayBuffer[Uuid]()\n+    plan.transformUp {"
  }],
  "prId": 20861
}]