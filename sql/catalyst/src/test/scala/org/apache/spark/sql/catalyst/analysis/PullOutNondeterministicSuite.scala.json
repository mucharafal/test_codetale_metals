[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "@cloud-fan any idea why this test case fail? ",
    "commit": "ac81d953608faa8792297400be03d71c816afb0d",
    "createdAt": "2016-12-22T01:35:35Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical.LocalRelation\n+\n+/**\n+ * Test suite for moving non-deterministic expressions into Project.\n+ */\n+class PullOutNondeterministicSuite extends AnalysisTest {\n+\n+  private lazy val a = 'a.int\n+  private lazy val b = 'b.int\n+  private lazy val r = LocalRelation(a, b)\n+  private lazy val rnd = Rand(10).as('_nondeterministic)\n+  private lazy val rndref = rnd.toAttribute\n+\n+  test(\"no-op on filter\") {\n+    checkAnalysis(\n+      r.where(Rand(10) > Literal(1.0)),\n+      r.where(Rand(10) > Literal(1.0))\n+    )\n+  }\n+\n+  test(\"sort\") {\n+    checkAnalysis(\n+      r.sortBy(SortOrder(Rand(10), Ascending)),\n+      r.select(a, b, rnd).sortBy(SortOrder(rndref, Ascending)).select(a, b)\n+    )\n+  }\n+\n+  test(\"aggregate\") {\n+    checkAnalysis(\n+      r.groupBy(rnd)(rnd),\n+      r.select(a, b, rnd).groupBy(rndref)(rndref)",
    "line": 53
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "failure\r\n```\r\n[info] - aggregate *** FAILED *** (22 milliseconds)\r\n[info]   == FAIL: Plans do not match ===\r\n[info]   !Aggregate [_nondeterministic#0], [_nondeterministic#0 AS _nondeterministic#0]   Aggregate [_nondeterministic#0], [_nondeterministic#0]\r\n[info]    +- Project [a#0, b#0, rand(10) AS _nondeterministic#0]                          +- Project [a#0, b#0, rand(10) AS _nondeterministic#0]\r\n[info]       +- LocalRelation <empty>, [a#0, b#0]                                            +- LocalRelation <empty>, [a#0, b#0] (PlanTest.scala:95)\r\n```",
    "commit": "ac81d953608faa8792297400be03d71c816afb0d",
    "createdAt": "2016-12-22T03:23:40Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical.LocalRelation\n+\n+/**\n+ * Test suite for moving non-deterministic expressions into Project.\n+ */\n+class PullOutNondeterministicSuite extends AnalysisTest {\n+\n+  private lazy val a = 'a.int\n+  private lazy val b = 'b.int\n+  private lazy val r = LocalRelation(a, b)\n+  private lazy val rnd = Rand(10).as('_nondeterministic)\n+  private lazy val rndref = rnd.toAttribute\n+\n+  test(\"no-op on filter\") {\n+    checkAnalysis(\n+      r.where(Rand(10) > Literal(1.0)),\n+      r.where(Rand(10) > Literal(1.0))\n+    )\n+  }\n+\n+  test(\"sort\") {\n+    checkAnalysis(\n+      r.sortBy(SortOrder(Rand(10), Ascending)),\n+      r.select(a, b, rnd).sortBy(SortOrder(rndref, Ascending)).select(a, b)\n+    )\n+  }\n+\n+  test(\"aggregate\") {\n+    checkAnalysis(\n+      r.groupBy(rnd)(rnd),\n+      r.select(a, b, rnd).groupBy(rndref)(rndref)",
    "line": 53
  }],
  "prId": 16379
}]