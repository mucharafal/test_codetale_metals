[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: please use java style, i.e. `maxDistinct('a).as('result)`",
    "commit": "5a3df30d08dad4d282f52ba2546464f7cc473cc6",
    "createdAt": "2017-06-28T01:21:59Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class EliminateDistinctSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", Once,\n+        EliminateDistinct) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int)\n+\n+  test(\"Eliminate Distinct in Max\") {\n+    val query = testRelation\n+      .select(maxDistinct('a) as('result))"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "got it, I have revised it.",
    "commit": "5a3df30d08dad4d282f52ba2546464f7cc473cc6",
    "createdAt": "2017-06-28T01:28:37Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class EliminateDistinctSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", Once,\n+        EliminateDistinct) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int)\n+\n+  test(\"Eliminate Distinct in Max\") {\n+    val query = testRelation\n+      .select(maxDistinct('a) as('result))"
  }],
  "prId": 18429
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "actually you can put them in one test:\r\n```\r\nval query = testRelation\r\n  .select(maxDistinct('a).as('max), minDistinct('a).as('min))\r\n  .analyze\r\n```",
    "commit": "5a3df30d08dad4d282f52ba2546464f7cc473cc6",
    "createdAt": "2017-06-28T01:23:04Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class EliminateDistinctSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", Once,\n+        EliminateDistinct) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int)\n+\n+  test(\"Eliminate Distinct in Max\") {\n+    val query = testRelation\n+      .select(maxDistinct('a) as('result))\n+      .analyze\n+    val answer = testRelation\n+      .select(max('a) as('result))\n+      .analyze\n+    assert(query != answer)\n+    comparePlans(Optimize.execute(query), answer)\n+  }\n+\n+  test(\"Eliminate Distinct in Min\") {",
    "line": 46
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "well,  I prefer to make it simple",
    "commit": "5a3df30d08dad4d282f52ba2546464f7cc473cc6",
    "createdAt": "2017-06-28T01:29:13Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Expand, LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class EliminateDistinctSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", Once,\n+        EliminateDistinct) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int)\n+\n+  test(\"Eliminate Distinct in Max\") {\n+    val query = testRelation\n+      .select(maxDistinct('a) as('result))\n+      .analyze\n+    val answer = testRelation\n+      .select(max('a) as('result))\n+      .analyze\n+    assert(query != answer)\n+    comparePlans(Optimize.execute(query), answer)\n+  }\n+\n+  test(\"Eliminate Distinct in Min\") {",
    "line": 46
  }],
  "prId": 18429
}]