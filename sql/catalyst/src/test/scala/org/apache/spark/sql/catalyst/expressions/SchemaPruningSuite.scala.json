[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Remove the empty line?",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T07:24:50Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)\n+    )\n+\n+    val expected = Seq(\n+      Seq.empty[StructType],\n+      Seq.empty[StructType],\n+      Seq(StructType.fromDDL(\"a int, b int\")),\n+      Seq(StructType.fromDDL(\"a int, b int, c string\")),\n+      Seq(\n+        StructType(\n+          StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+            StructField(\"b\", IntegerType) :: Nil),\n+        StructType.fromDDL(\"a int, b int\"))\n+"
  }],
  "prId": 23740
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Since `pruneDataSchema` becomes public, could you add a test coverage like the following here?\r\n```scala\r\ntest(\"prune data schema\") {\r\n  ...\r\n}\r\n```",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T08:09:24Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)\n+    )\n+\n+    val expected = Seq(\n+      Seq.empty[StructType],\n+      Seq.empty[StructType],\n+      Seq(StructType.fromDDL(\"a int, b int\")),\n+      Seq(StructType.fromDDL(\"a int, b int, c string\")),\n+      Seq(\n+        StructType(\n+          StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+            StructField(\"b\", IntegerType) :: Nil),\n+        StructType.fromDDL(\"a int, b int\"))\n+\n+    )\n+\n+    datatypes.zipWithIndex.foreach { case (dt, idx) =>\n+      val structs = SchemaPruning.collectStructType(dt, ArrayBuffer.empty[StructType])\n+      assert(structs === expected(idx))\n+    }\n+  }",
    "line": 61
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Thank you for adding the test coverage.",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-08T08:51:50Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)\n+    )\n+\n+    val expected = Seq(\n+      Seq.empty[StructType],\n+      Seq.empty[StructType],\n+      Seq(StructType.fromDDL(\"a int, b int\")),\n+      Seq(StructType.fromDDL(\"a int, b int, c string\")),\n+      Seq(\n+        StructType(\n+          StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+            StructField(\"b\", IntegerType) :: Nil),\n+        StructType.fromDDL(\"a int, b int\"))\n+\n+    )\n+\n+    datatypes.zipWithIndex.foreach { case (dt, idx) =>\n+      val structs = SchemaPruning.collectStructType(dt, ArrayBuffer.empty[StructType])\n+      assert(structs === expected(idx))\n+    }\n+  }",
    "line": 61
  }],
  "prId": 23740
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`datatypes` -> `dataTypes`.",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T08:16:49Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq("
  }],
  "prId": 23740
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`expected` -> `expectedTypes`?",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T08:18:25Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)\n+    )\n+\n+    val expected = Seq("
  }],
  "prId": 23740
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "```scala\r\n-      StructType(\r\n-        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\r\n-          StructField(\"b\", IntegerType) :: Nil)\r\n+      StructType.fromDDL(\"a struct<a:int, b:int>, b int\")\r\n```",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T08:26:07Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)"
  }],
  "prId": 23740
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.\r\n```scala\r\n       Seq(\r\n-        StructType(\r\n-          StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\r\n-            StructField(\"b\", IntegerType) :: Nil),\r\n+        StructType.fromDDL(\"a struct<a:int, b:int>, b int\"),\r\n         StructType.fromDDL(\"a int, b int\"))\r\n```",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-07T08:26:44Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import scala.collection.mutable.ArrayBuffer\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class SchemaPruningSuite extends SparkFunSuite {\n+\n+  test(\"collect struct types\") {\n+    val datatypes = Seq(\n+      IntegerType,\n+      ArrayType(IntegerType),\n+      StructType.fromDDL(\"a int, b int\"),\n+      ArrayType(StructType.fromDDL(\"a int, b int, c string\")),\n+      StructType(\n+        StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+          StructField(\"b\", IntegerType) :: Nil)\n+    )\n+\n+    val expected = Seq(\n+      Seq.empty[StructType],\n+      Seq.empty[StructType],\n+      Seq(StructType.fromDDL(\"a int, b int\")),\n+      Seq(StructType.fromDDL(\"a int, b int, c string\")),\n+      Seq(\n+        StructType(\n+          StructField(\"a\", StructType.fromDDL(\"a int, b int\")) ::\n+            StructField(\"b\", IntegerType) :: Nil),"
  }],
  "prId": 23740
}]