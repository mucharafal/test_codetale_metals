[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Yeah you have a point there. These methods are all tested indirectly in the `*ParserSuite`'s.\n",
    "commit": "e28ddd2b358d354d25b94712b8baf735a8b84019",
    "createdAt": "2016-04-06T08:16:58Z",
    "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.parser\n+\n+import org.apache.spark.SparkFunSuite\n+\n+class ParserUtilsSuite extends SparkFunSuite {\n+\n+  import ParserUtils._\n+\n+  test(\"unescapeSQLString\") {\n+    // scalastyle:off nonascii\n+\n+    // String not including escaped characters and enclosed by double quotes.\n+    assert(unescapeSQLString(\"\"\"\"abcdefg\"\"\"\") == \"abcdefg\")\n+\n+    // String enclosed by single quotes.\n+    assert(unescapeSQLString(\"\"\"'C0FFEE'\"\"\") == \"C0FFEE\")\n+\n+    // Strings including single escaped characters.\n+    assert(unescapeSQLString(\"\"\"'\\0'\"\"\") == \"\\u0000\")\n+    assert(unescapeSQLString(\"\"\"\"\\'\"\"\"\") == \"\\'\")\n+    assert(unescapeSQLString(\"\"\"'\\\"'\"\"\") == \"\\\"\")\n+    assert(unescapeSQLString(\"\"\"\"\\b\"\"\"\") == \"\\b\")\n+    assert(unescapeSQLString(\"\"\"'\\n'\"\"\") == \"\\n\")\n+    assert(unescapeSQLString(\"\"\"\"\\r\"\"\"\") == \"\\r\")\n+    assert(unescapeSQLString(\"\"\"'\\t'\"\"\") == \"\\t\")\n+    assert(unescapeSQLString(\"\"\"\"\\Z\"\"\"\") == \"\\u001A\")\n+    assert(unescapeSQLString(\"\"\"'\\\\'\"\"\") == \"\\\\\")\n+    assert(unescapeSQLString(\"\"\"\"\\%\"\"\"\") == \"\\\\%\")\n+    assert(unescapeSQLString(\"\"\"'\\_'\"\"\") == \"\\\\_\")\n+\n+    // String including '\\000' style literal characters.\n+    assert(unescapeSQLString(\"\"\"'3 + 5 = \\070'\"\"\") == \"3 + 5 = \\u0038\")\n+    assert(unescapeSQLString(\"\"\"\"\\000\"\"\"\") == \"\\u0000\")\n+\n+    // String including invalid '\\000' style literal characters.\n+    assert(unescapeSQLString(\"\"\"\"\\256\"\"\"\") == \"256\")\n+\n+    // String including a '\\u0000' style literal characters (\\u732B is a cat in Kanji).\n+    assert(unescapeSQLString(\"\"\"\"How cute \\u732B are\"\"\"\")  == \"How cute \\u732B are\")\n+\n+    // String including a surrogate pair character\n+    // (\\uD867\\uDE3D is Okhotsk atka mackerel in Kanji).\n+    assert(unescapeSQLString(\"\"\"\"\\uD867\\uDE3D is a fish\"\"\"\") == \"\\uD867\\uDE3D is a fish\")\n+\n+    // scalastyle:on nonascii\n+  }\n+\n+  // TODO: Add test cases for other methods in ParserUtils",
    "line": 64
  }],
  "prId": 12199
}]