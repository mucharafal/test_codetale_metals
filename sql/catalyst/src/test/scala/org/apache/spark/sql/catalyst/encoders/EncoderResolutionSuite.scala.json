[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Each block might be easily extracted with inner function to remove duplications. attr (element in attrs), and string representation of attr type are different and remaining is exactly same.",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-24T23:38:25Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {"
  }],
  "prId": 25242
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "super nit: its ok just check `.contains(\"Cannot up cast `a` from struct<x:bigint> to string\")`?",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-24T23:40:50Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {\n+      val attrs = Seq('a.struct('x.long))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\""
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "+1",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-25T02:58:31Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {\n+      val attrs = Seq('a.struct('x.long))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\""
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "I am OK with either way. I was following the other test cases in the suite. Let me change it to `.contains...`",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-25T06:49:56Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {\n+      val attrs = Seq('a.struct('x.long))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\""
  }],
  "prId": 25242
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "It doesn't necessarily compare the whole message. We can check if the message contains some keywords. ",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-25T02:14:59Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {\n+      val attrs = Seq('a.struct('x.long))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\"\n+           |Cannot up cast `a` from struct<x:bigint> to string.\n+           |The type path of the target object is:\n+           |- root class: \"java.lang.String\"\n+           |You can either add an explicit cast to the input data or choose a higher precision type\n+        \"\"\".stripMargin.trim + \" of the field in the target object\")\n+    }\n+\n+    {\n+      val attrs = Seq('a.array(StringType))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\"\n+           |Cannot up cast `a` from array<string> to string."
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Oh, it was the same comment as https://github.com/apache/spark/pull/25242#discussion_r307064357",
    "commit": "6c590a0ea0a83bf39825e345341fc8815ed32f3f",
    "createdAt": "2019-07-25T03:10:12Z",
    "diffHunk": "@@ -196,6 +196,43 @@ class EncoderResolutionSuite extends PlanTest {\n     encoder.resolveAndBind(attrs)\n   }\n \n+  test(\"SPARK-28497: complex type is not compatible with string encoder schema\") {\n+    val encoder = ExpressionEncoder[String]\n+\n+    {\n+      val attrs = Seq('a.struct('x.long))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\"\n+           |Cannot up cast `a` from struct<x:bigint> to string.\n+           |The type path of the target object is:\n+           |- root class: \"java.lang.String\"\n+           |You can either add an explicit cast to the input data or choose a higher precision type\n+        \"\"\".stripMargin.trim + \" of the field in the target object\")\n+    }\n+\n+    {\n+      val attrs = Seq('a.array(StringType))\n+      assert(intercept[AnalysisException](encoder.resolveAndBind(attrs)).message ==\n+        s\"\"\"\n+           |Cannot up cast `a` from array<string> to string."
  }],
  "prId": 25242
}]