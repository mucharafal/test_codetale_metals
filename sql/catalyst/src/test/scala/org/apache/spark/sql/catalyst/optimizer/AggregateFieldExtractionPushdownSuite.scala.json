[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "replace it by `Count(\"*\")`?",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-01-13T18:40:23Z",
    "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.types._\n+\n+class AggregateFieldExtractionPushdownSuite extends PlanTest {\n+  private val testRelation =\n+    LocalRelation(\n+      StructField(\"a\", StructType(\n+        StructField(\"a1\", IntegerType) :: Nil)),\n+      StructField(\"b\", IntegerType),\n+      StructField(\"c\", StructType(\n+        StructField(\"c1\", IntegerType) :: Nil)))\n+\n+  object Optimizer extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Aggregate Field Extraction Pushdown\", Once,\n+        AggregateFieldExtractionPushdown) :: Nil\n+  }\n+\n+  test(\"basic aggregate field extraction pushdown\") {\n+    val originalQuery =\n+      testRelation\n+        .select('a)\n+        .groupBy('a getField \"a1\")('a getField \"a1\" as 'a1, Count('*))"
  }],
  "prId": 16578
}]