[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Plz move this import into the head.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T01:03:23Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}"
  }, {
    "author": {
      "login": "raghavgautam"
    },
    "body": "Done.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T17:53:07Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}"
  }],
  "prId": 22414
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "remove `s`.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T01:04:35Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")\n+\n+      val thrown = intercept[IllegalArgumentException] {\n+        (windowDuration, slideDuration) match {\n+          case (wd: String, sd: String) => TimeWindow(Literal(10L), wd, sd, \"0 seconds\")\n+          case (wd: Long, sd: Long) => TimeWindow(Literal(10L), wd, sd, 0)\n+          case (wd: Int, sd: Int) => TimeWindow(Literal(10L), wd, sd, 0)\n+        }\n+\n+      }\n+      def isNonPositive(s: Any): Boolean = {\n+        val trimmed = s.toString.trim\n+        trimmed.startsWith(\"-\") || trimmed.startsWith(\"0\")\n+      }\n+      val expectedMsg =\n+        if (isNonPositive(windowDuration)) {\n+          s\"requirement failed: The window duration must be a \" +"
  }, {
    "author": {
      "login": "raghavgautam"
    },
    "body": "Done.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T17:53:26Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")\n+\n+      val thrown = intercept[IllegalArgumentException] {\n+        (windowDuration, slideDuration) match {\n+          case (wd: String, sd: String) => TimeWindow(Literal(10L), wd, sd, \"0 seconds\")\n+          case (wd: Long, sd: Long) => TimeWindow(Literal(10L), wd, sd, 0)\n+          case (wd: Int, sd: Int) => TimeWindow(Literal(10L), wd, sd, 0)\n+        }\n+\n+      }\n+      def isNonPositive(s: Any): Boolean = {\n+        val trimmed = s.toString.trim\n+        trimmed.startsWith(\"-\") || trimmed.startsWith(\"0\")\n+      }\n+      val expectedMsg =\n+        if (isNonPositive(windowDuration)) {\n+          s\"requirement failed: The window duration must be a \" +"
  }],
  "prId": 22414
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "ditto",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T01:04:43Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")\n+\n+      val thrown = intercept[IllegalArgumentException] {\n+        (windowDuration, slideDuration) match {\n+          case (wd: String, sd: String) => TimeWindow(Literal(10L), wd, sd, \"0 seconds\")\n+          case (wd: Long, sd: Long) => TimeWindow(Literal(10L), wd, sd, 0)\n+          case (wd: Int, sd: Int) => TimeWindow(Literal(10L), wd, sd, 0)\n+        }\n+\n+      }\n+      def isNonPositive(s: Any): Boolean = {\n+        val trimmed = s.toString.trim\n+        trimmed.startsWith(\"-\") || trimmed.startsWith(\"0\")\n+      }\n+      val expectedMsg =\n+        if (isNonPositive(windowDuration)) {\n+          s\"requirement failed: The window duration must be a \" +\n+            s\"positive integer, long or string literal, found: ${windowDuration}\"\n+        } else if (isNonPositive(slideDuration)) {\n+          s\"requirement failed: The slide duration must be a \" +"
  }, {
    "author": {
      "login": "raghavgautam"
    },
    "body": "Done.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-14T17:53:53Z",
    "diffHunk": "@@ -122,11 +122,57 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    import org.scalatest.prop.TableDrivenPropertyChecks.{Table, forAll => forAllRows}\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")\n+\n+      val thrown = intercept[IllegalArgumentException] {\n+        (windowDuration, slideDuration) match {\n+          case (wd: String, sd: String) => TimeWindow(Literal(10L), wd, sd, \"0 seconds\")\n+          case (wd: Long, sd: Long) => TimeWindow(Literal(10L), wd, sd, 0)\n+          case (wd: Int, sd: Int) => TimeWindow(Literal(10L), wd, sd, 0)\n+        }\n+\n+      }\n+      def isNonPositive(s: Any): Boolean = {\n+        val trimmed = s.toString.trim\n+        trimmed.startsWith(\"-\") || trimmed.startsWith(\"0\")\n+      }\n+      val expectedMsg =\n+        if (isNonPositive(windowDuration)) {\n+          s\"requirement failed: The window duration must be a \" +\n+            s\"positive integer, long or string literal, found: ${windowDuration}\"\n+        } else if (isNonPositive(slideDuration)) {\n+          s\"requirement failed: The slide duration must be a \" +"
  }],
  "prId": 22414
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "What does this log means?",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-18T02:07:15Z",
    "diffHunk": "@@ -122,6 +123,51 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")"
  }, {
    "author": {
      "login": "raghavgautam"
    },
    "body": "This will call the following function.\r\nhttps://github.com/apache/spark/blob/0bdbefe9dd1e7c95c58ea6b52d3b264794abbc0e/core/src/main/scala/org/apache/spark/internal/Logging.scala#L53",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-18T17:46:41Z",
    "diffHunk": "@@ -122,6 +123,51 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "I meant we really need this log even in tests?",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-19T00:21:25Z",
    "diffHunk": "@@ -122,6 +123,51 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")"
  }, {
    "author": {
      "login": "raghavgautam"
    },
    "body": "Deleted.",
    "commit": "89e05f261c9d9495ef04d4d3cccb49c6b9a587fb",
    "createdAt": "2018-09-25T22:51:45Z",
    "diffHunk": "@@ -122,6 +123,51 @@ class TimeWindowSuite extends SparkFunSuite with ExpressionEvalHelper with Priva\n     }\n   }\n \n+  test(\"windowDuration and slideDuration should be positive.\") {\n+    val fractions = Table(\n+      (\"windowDuration\", \"slideDuration\"), // First tuple defines column names\n+      (\"-2 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"-2 seconds\"),\n+      (\"0 seconds\", \"1 seconds\"),\n+      (\"1 seconds\", \"0 seconds\"),\n+      (\"-2 seconds\", \"-2 seconds\"),\n+      (\"-2 seconds\", \"-2 hours\"),\n+      (\"0 seconds\", \"0 seconds\"),\n+      (-2L, 2L),\n+      (2L, -2L),\n+      (-2, 2),\n+      (2, -2)\n+    )\n+    forAllRows(fractions) { (windowDuration: Any, slideDuration: Any) =>\n+      logInfo(s\"windowDuration = $windowDuration slideDuration = $slideDuration\")"
  }],
  "prId": 22414
}]