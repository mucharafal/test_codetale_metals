[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Should we also test the last day of year?\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-17T07:58:27Z",
    "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val oldDefault = TimeZone.getDefault\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>",
    "line": 38
  }, {
    "author": {
      "login": "tarekbecker"
    },
    "body": "28, 29, 30, 31, 1.1. It checks until the 1st or 2nd of the next month, doesn't it?\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-17T08:26:59Z",
    "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val oldDefault = TimeZone.getDefault\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>",
    "line": 38
  }, {
    "author": {
      "login": "davies"
    },
    "body": "I see\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-17T20:58:55Z",
    "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val oldDefault = TimeZone.getDefault\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>",
    "line": 38
  }],
  "prId": 6981
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "1 -> i\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-19T04:30:15Z",
    "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, i)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1998 to 2002).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)",
    "line": 53
  }],
  "prId": 6981
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "1 -> i\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-19T04:30:29Z",
    "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, i)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1998 to 2002).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1969 to 1970).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)",
    "line": 65
  }],
  "prId": 6981
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "1 -> i\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-19T05:50:59Z",
    "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, i)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1998 to 2002).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1969 to 1970).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (2402 to 2404).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)",
    "line": 77
  }],
  "prId": 6981
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "1 -> i\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-19T05:51:38Z",
    "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, i)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1998 to 2002).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1969 to 1970).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (2402 to 2404).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (2398 to 2402).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)",
    "line": 89
  }, {
    "author": {
      "login": "tarekbecker"
    },
    "body": "I changed this when I looked for the last bug. I'm going to create a follow PR\n",
    "commit": "f7b4c8ca3b4258fffb83db79571f8cefe16883a7",
    "createdAt": "2015-07-19T05:54:19Z",
    "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Timestamp, Date}\n+import java.text.SimpleDateFormat\n+import java.util.{TimeZone, Calendar}\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types.{StringType, TimestampType, DateType}\n+\n+class DateFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n+  val sdfDate = new SimpleDateFormat(\"yyyy-MM-dd\")\n+  val d = new Date(sdf.parse(\"2015-04-08 13:10:15\").getTime)\n+  val ts = new Timestamp(sdf.parse(\"2013-11-08 13:10:15\").getTime)\n+\n+  test(\"Day in Year\") {\n+    val sdfDay = new SimpleDateFormat(\"D\")\n+    (2002 to 2004).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, i)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1998 to 2002).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (1969 to 1970).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (2402 to 2404).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)\n+          checkEvaluation(DayInYear(Cast(Literal(new Date(c.getTimeInMillis)), DateType)),\n+            sdfDay.format(c.getTime).toInt)\n+        }\n+      }\n+    }\n+\n+    (2398 to 2402).foreach { y =>\n+      (0 to 11).foreach { m =>\n+        (0 to 5).foreach { i =>\n+          val c = Calendar.getInstance()\n+          c.set(y, m, 28, 0, 0, 0)\n+          c.add(Calendar.DATE, 1)",
    "line": 89
  }],
  "prId": 6981
}]