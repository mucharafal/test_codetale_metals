[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "`assert(separatorStr.isDefined)`? I think that style is easier and more consistent with the rest of the code. Also avoids quasi-deprecated postfix syntax",
    "commit": "17ebe0cbcd639e2ef436ed105696bac3fd159b40",
    "createdAt": "2019-10-07T18:43:05Z",
    "diffHunk": "@@ -58,4 +61,40 @@ class CSVExprUtilsSuite extends SparkFunSuite {\n     }\n     assert(exception.getMessage.contains(\"Delimiter cannot be empty string\"))\n   }\n+\n+  val testCases = Table(\n+    (\"input\", \"separatorStr\", \"expectedErrorMsg\"),\n+    // normal tab\n+    (\"\"\"\\t\"\"\", Some(\"\\t\"), None),\n+    // backslash, then tab\n+    (\"\"\"\\\\t\"\"\", Some(\"\"\"\\t\"\"\"), None),\n+    // invalid special character (dot)\n+    (\"\"\"\\.\"\"\", None, Some(\"Unsupported special character for delimiter\")),\n+    // backslash, then dot\n+    (\"\"\"\\\\.\"\"\", Some(\"\"\"\\.\"\"\"), None),\n+    // nothing special, just straight conversion\n+    (\"\"\"foo\"\"\", Some(\"foo\"), None),\n+    // tab in the middle of some other letters\n+    (\"\"\"ba\\tr\"\"\", Some(\"ba\\tr\"), None),\n+    // null character, expressed in Unicode literal syntax\n+    (\"\"\"\\u0000\"\"\", Some(\"\\u0000\"), None),\n+    // and specified directly\n+    (\"\\0\", Some(\"\\u0000\"), None)\n+  )\n+\n+  test(\"should correctly produce separator strings, or exceptions, from input\") {\n+    forAll(testCases) { (input, separatorStr, expectedErrorMsg) =>\n+      try {\n+        val separator = CSVExprUtils.toDelimiterStr(input)\n+        separatorStr.isDefined should equal(true)"
  }, {
    "author": {
      "login": "jeff303"
    },
    "body": "Done (got rid of all the `Matchers` stuff).",
    "commit": "17ebe0cbcd639e2ef436ed105696bac3fd159b40",
    "createdAt": "2019-10-07T20:29:40Z",
    "diffHunk": "@@ -58,4 +61,40 @@ class CSVExprUtilsSuite extends SparkFunSuite {\n     }\n     assert(exception.getMessage.contains(\"Delimiter cannot be empty string\"))\n   }\n+\n+  val testCases = Table(\n+    (\"input\", \"separatorStr\", \"expectedErrorMsg\"),\n+    // normal tab\n+    (\"\"\"\\t\"\"\", Some(\"\\t\"), None),\n+    // backslash, then tab\n+    (\"\"\"\\\\t\"\"\", Some(\"\"\"\\t\"\"\"), None),\n+    // invalid special character (dot)\n+    (\"\"\"\\.\"\"\", None, Some(\"Unsupported special character for delimiter\")),\n+    // backslash, then dot\n+    (\"\"\"\\\\.\"\"\", Some(\"\"\"\\.\"\"\"), None),\n+    // nothing special, just straight conversion\n+    (\"\"\"foo\"\"\", Some(\"foo\"), None),\n+    // tab in the middle of some other letters\n+    (\"\"\"ba\\tr\"\"\", Some(\"ba\\tr\"), None),\n+    // null character, expressed in Unicode literal syntax\n+    (\"\"\"\\u0000\"\"\", Some(\"\\u0000\"), None),\n+    // and specified directly\n+    (\"\\0\", Some(\"\\u0000\"), None)\n+  )\n+\n+  test(\"should correctly produce separator strings, or exceptions, from input\") {\n+    forAll(testCases) { (input, separatorStr, expectedErrorMsg) =>\n+      try {\n+        val separator = CSVExprUtils.toDelimiterStr(input)\n+        separatorStr.isDefined should equal(true)"
  }],
  "prId": 26027
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "We haven't used this scalatest construct much or at all; it's fine but neutral on this vs just writing a simple loop over cases.",
    "commit": "17ebe0cbcd639e2ef436ed105696bac3fd159b40",
    "createdAt": "2019-10-07T18:43:51Z",
    "diffHunk": "@@ -58,4 +61,40 @@ class CSVExprUtilsSuite extends SparkFunSuite {\n     }\n     assert(exception.getMessage.contains(\"Delimiter cannot be empty string\"))\n   }\n+\n+  val testCases = Table(",
    "line": 14
  }],
  "prId": 26027
}]