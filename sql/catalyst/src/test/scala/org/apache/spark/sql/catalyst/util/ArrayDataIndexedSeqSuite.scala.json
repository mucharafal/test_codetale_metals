[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "This test may need polish to test again all possible types.",
    "commit": "8b5de0f7d18af1d194305d7cd8c43ca007a5b980",
    "createdAt": "2018-04-10T09:47:45Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.catalyst.expressions.UnsafeArrayData\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class ArrayDataIndexedSeqSuite extends SparkFunSuite {\n+  def utf8(str: String): UTF8String = UTF8String.fromString(str)\n+  val stringArray = Array(\"1\", \"10\", \"100\", null)\n+\n+  private def testArrayData(arrayData: ArrayData): Unit = {\n+    assert(arrayData.numElements == stringArray.length)\n+    stringArray.zipWithIndex.map { case (e, i) =>\n+      if (e != null) {\n+        assert(arrayData.getUTF8String(i).toString().equals(e))\n+      } else {\n+        assert(arrayData.isNullAt(i))\n+      }\n+    }\n+\n+    val seq = arrayData.toSeq[UTF8String](StringType)\n+    stringArray.zipWithIndex.map { case (e, i) =>\n+      if (e != null) {\n+        assert(seq(i).toString().equals(e))\n+      } else {\n+        assert(seq(i) == null)\n+      }\n+    }\n+\n+    intercept[IndexOutOfBoundsException] {\n+      seq(-1)\n+    }.getMessage().contains(\"must be between 0 and the length of the ArrayData.\")\n+\n+    intercept[IndexOutOfBoundsException] {\n+      seq(seq.length)\n+    }.getMessage().contains(\"must be between 0 and the length of the ArrayData.\")\n+  }\n+\n+  test(\"ArrayDataIndexedSeq can work on GenericArrayData\") {\n+    val arrayData = new GenericArrayData(stringArray.map(utf8(_)))\n+    testArrayData(arrayData)\n+  }\n+\n+  test(\"ArrayDataIndexedSeq can work on UnsafeArrayData\") {\n+    val unsafeArrayData = ExpressionEncoder[Array[String]].resolveAndBind().\n+      toRow(stringArray).getArray(0)\n+    assert(unsafeArrayData.isInstanceOf[UnsafeArrayData])\n+    testArrayData(unsafeArrayData)"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "+1 for all type test case. :)",
    "commit": "8b5de0f7d18af1d194305d7cd8c43ca007a5b980",
    "createdAt": "2018-04-12T16:19:00Z",
    "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.catalyst.expressions.UnsafeArrayData\n+import org.apache.spark.sql.types.StringType\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class ArrayDataIndexedSeqSuite extends SparkFunSuite {\n+  def utf8(str: String): UTF8String = UTF8String.fromString(str)\n+  val stringArray = Array(\"1\", \"10\", \"100\", null)\n+\n+  private def testArrayData(arrayData: ArrayData): Unit = {\n+    assert(arrayData.numElements == stringArray.length)\n+    stringArray.zipWithIndex.map { case (e, i) =>\n+      if (e != null) {\n+        assert(arrayData.getUTF8String(i).toString().equals(e))\n+      } else {\n+        assert(arrayData.isNullAt(i))\n+      }\n+    }\n+\n+    val seq = arrayData.toSeq[UTF8String](StringType)\n+    stringArray.zipWithIndex.map { case (e, i) =>\n+      if (e != null) {\n+        assert(seq(i).toString().equals(e))\n+      } else {\n+        assert(seq(i) == null)\n+      }\n+    }\n+\n+    intercept[IndexOutOfBoundsException] {\n+      seq(-1)\n+    }.getMessage().contains(\"must be between 0 and the length of the ArrayData.\")\n+\n+    intercept[IndexOutOfBoundsException] {\n+      seq(seq.length)\n+    }.getMessage().contains(\"must be between 0 and the length of the ArrayData.\")\n+  }\n+\n+  test(\"ArrayDataIndexedSeq can work on GenericArrayData\") {\n+    val arrayData = new GenericArrayData(stringArray.map(utf8(_)))\n+    testArrayData(arrayData)\n+  }\n+\n+  test(\"ArrayDataIndexedSeq can work on UnsafeArrayData\") {\n+    val unsafeArrayData = ExpressionEncoder[Array[String]].resolveAndBind().\n+      toRow(stringArray).getArray(0)\n+    assert(unsafeArrayData.isInstanceOf[UnsafeArrayData])\n+    testArrayData(unsafeArrayData)"
  }],
  "prId": 20984
}]