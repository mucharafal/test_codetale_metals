[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For me, this is an improvement PR. We don't need use JIRA id.",
    "commit": "3b224f094f50a5be61d77868ed9f6ee3e0202417",
    "createdAt": "2019-07-27T19:07:29Z",
    "diffHunk": "@@ -36,17 +36,65 @@ class PullupCorrelatedPredicatesSuite extends PlanTest {\n   val testRelation2 = LocalRelation('c.int, 'd.double)\n \n   test(\"PullupCorrelatedPredicates should not produce unresolved plan\") {\n-    val correlatedSubquery =\n+    val subPlan =\n       testRelation2\n         .where('b < 'd)\n         .select('c)\n-    val outerQuery =\n+    val inSubquery =\n       testRelation\n-        .where(InSubquery(Seq('a), ListQuery(correlatedSubquery)))\n+        .where(InSubquery(Seq('a), ListQuery(subPlan)))\n         .select('a).analyze\n-    assert(outerQuery.resolved)\n+    assert(inSubquery.resolved)\n \n-    val optimized = Optimize.execute(outerQuery)\n+    val optimized = Optimize.execute(inSubquery)\n     assert(optimized.resolved)\n   }\n+\n+  test(\"SPARK-28375 PullupCorrelatedPredicates in correlated subquery idiompotency check\") {"
  }],
  "prId": 25268
}, {
  "comments": [{
    "author": {
      "login": "yeshengm"
    },
    "body": " nit: spell \"idempotence\"",
    "commit": "3b224f094f50a5be61d77868ed9f6ee3e0202417",
    "createdAt": "2019-07-29T04:40:37Z",
    "diffHunk": "@@ -38,17 +38,65 @@ class PullupCorrelatedPredicatesSuite extends PlanTest {\n   val testRelation2 = LocalRelation('c.int, 'd.double)\n \n   test(\"PullupCorrelatedPredicates should not produce unresolved plan\") {\n-    val correlatedSubquery =\n+    val subPlan =\n       testRelation2\n         .where('b < 'd)\n         .select('c)\n-    val outerQuery =\n+    val inSubquery =\n       testRelation\n-        .where(InSubquery(Seq('a), ListQuery(correlatedSubquery)))\n+        .where(InSubquery(Seq('a), ListQuery(subPlan)))\n         .select('a).analyze\n-    assert(outerQuery.resolved)\n+    assert(inSubquery.resolved)\n \n-    val optimized = Optimize.execute(outerQuery)\n+    val optimized = Optimize.execute(inSubquery)\n     assert(optimized.resolved)\n   }\n+\n+  test(\"PullupCorrelatedPredicates in correlated subquery idiompotency check\") {\n+    val subPlan =\n+      testRelation2\n+      .where('b < 'd)\n+      .select('c)\n+    val inSubquery =\n+      testRelation\n+      .where(InSubquery(Seq('a), ListQuery(subPlan)))\n+      .select('a).analyze\n+    assert(inSubquery.resolved)\n+\n+    val optimized = Optimize.execute(inSubquery)\n+    val doubleOptimized = Optimize.execute(optimized)\n+    comparePlans(optimized, doubleOptimized)\n+  }\n+\n+  test(\"PullupCorrelatedPredicates exists correlated subquery idiompotency check\") {"
  }],
  "prId": 25268
}, {
  "comments": [{
    "author": {
      "login": "yeshengm"
    },
    "body": "same here",
    "commit": "3b224f094f50a5be61d77868ed9f6ee3e0202417",
    "createdAt": "2019-07-29T04:42:36Z",
    "diffHunk": "@@ -38,17 +38,65 @@ class PullupCorrelatedPredicatesSuite extends PlanTest {\n   val testRelation2 = LocalRelation('c.int, 'd.double)\n \n   test(\"PullupCorrelatedPredicates should not produce unresolved plan\") {\n-    val correlatedSubquery =\n+    val subPlan =\n       testRelation2\n         .where('b < 'd)\n         .select('c)\n-    val outerQuery =\n+    val inSubquery =\n       testRelation\n-        .where(InSubquery(Seq('a), ListQuery(correlatedSubquery)))\n+        .where(InSubquery(Seq('a), ListQuery(subPlan)))\n         .select('a).analyze\n-    assert(outerQuery.resolved)\n+    assert(inSubquery.resolved)\n \n-    val optimized = Optimize.execute(outerQuery)\n+    val optimized = Optimize.execute(inSubquery)\n     assert(optimized.resolved)\n   }\n+\n+  test(\"PullupCorrelatedPredicates in correlated subquery idiompotency check\") {"
  }],
  "prId": 25268
}]