[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "so we can remove this test after we add idempotence policy and change the once policy in this test suite to idempotence?",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T02:55:07Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.KnownFloatingPointNormalized\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class NormalizeFloatingPointNumbersSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches = Batch(\"NormalizeFloatingPointNumbers\", Once, NormalizeFloatingNumbers) :: Nil\n+  }\n+\n+  val testRelation1 = LocalRelation('a.double)\n+  val a = testRelation1.output(0)\n+  val testRelation2 = LocalRelation('a.double)\n+  val b = testRelation2.output(0)\n+\n+  test(\"normalize floating points in window function expressions\") {\n+    val query = testRelation1.window(Seq(sum(a).as(\"sum\")), Seq(a), Seq(a.asc))\n+\n+    val optimized = Optimize.execute(query)\n+    val correctAnswer = testRelation1.window(Seq(sum(a).as(\"sum\")),\n+      Seq(KnownFloatingPointNormalized(NormalizeNaNAndZero(a))), Seq(a.asc))\n+\n+    comparePlans(optimized, correctAnswer)\n+  }\n+\n+  test(\"normalize floating points in window function expressions - idempotence\") {",
    "line": 48
  }, {
    "author": {
      "login": "yeshengm"
    },
    "body": "Yep. Do we have to add a mark here?",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T03:05:19Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.KnownFloatingPointNormalized\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class NormalizeFloatingPointNumbersSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches = Batch(\"NormalizeFloatingPointNumbers\", Once, NormalizeFloatingNumbers) :: Nil\n+  }\n+\n+  val testRelation1 = LocalRelation('a.double)\n+  val a = testRelation1.output(0)\n+  val testRelation2 = LocalRelation('a.double)\n+  val b = testRelation2.output(0)\n+\n+  test(\"normalize floating points in window function expressions\") {\n+    val query = testRelation1.window(Seq(sum(a).as(\"sum\")), Seq(a), Seq(a.asc))\n+\n+    val optimized = Optimize.execute(query)\n+    val correctAnswer = testRelation1.window(Seq(sum(a).as(\"sum\")),\n+      Seq(KnownFloatingPointNormalized(NormalizeNaNAndZero(a))), Seq(a.asc))\n+\n+    comparePlans(optimized, correctAnswer)\n+  }\n+\n+  test(\"normalize floating points in window function expressions - idempotence\") {",
    "line": 48
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "not necessary, I just want to confirm it.",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T04:55:13Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.KnownFloatingPointNormalized\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class NormalizeFloatingPointNumbersSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches = Batch(\"NormalizeFloatingPointNumbers\", Once, NormalizeFloatingNumbers) :: Nil\n+  }\n+\n+  val testRelation1 = LocalRelation('a.double)\n+  val a = testRelation1.output(0)\n+  val testRelation2 = LocalRelation('a.double)\n+  val b = testRelation2.output(0)\n+\n+  test(\"normalize floating points in window function expressions\") {\n+    val query = testRelation1.window(Seq(sum(a).as(\"sum\")), Seq(a), Seq(a.asc))\n+\n+    val optimized = Optimize.execute(query)\n+    val correctAnswer = testRelation1.window(Seq(sum(a).as(\"sum\")),\n+      Seq(KnownFloatingPointNormalized(NormalizeNaNAndZero(a))), Seq(a.asc))\n+\n+    comparePlans(optimized, correctAnswer)\n+  }\n+\n+  test(\"normalize floating points in window function expressions - idempotence\") {",
    "line": 48
  }],
  "prId": 25080
}]