[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: can we collapse it to the previous line?",
    "commit": "7776ae66781961724bbc10a10162bf21d5330d12",
    "createdAt": "2017-05-31T03:59:38Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.analysis.AnalysisTest\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class DSLHintSuite extends AnalysisTest {\n+  lazy val a = 'a.int\n+  lazy val b = 'b.string\n+  lazy val c = 'c.string\n+  lazy val r1 = LocalRelation(a, b, c)\n+\n+  test(\"various hint parameters\") {\n+    comparePlans(\n+      r1.hint(\"hint1\"),\n+      UnresolvedHint(\"hint1\", Seq(),\n+        r1\n+      )"
  }],
  "prId": 18086
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7776ae66781961724bbc10a10162bf21d5330d12",
    "createdAt": "2017-05-31T03:59:45Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.analysis.AnalysisTest\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class DSLHintSuite extends AnalysisTest {\n+  lazy val a = 'a.int\n+  lazy val b = 'b.string\n+  lazy val c = 'c.string\n+  lazy val r1 = LocalRelation(a, b, c)\n+\n+  test(\"various hint parameters\") {\n+    comparePlans(\n+      r1.hint(\"hint1\"),\n+      UnresolvedHint(\"hint1\", Seq(),\n+        r1\n+      )\n+    )\n+\n+    comparePlans(\n+      r1.hint(\"hint1\", 1, \"a\"),\n+      UnresolvedHint(\"hint1\", Seq(1, \"a\"), r1)\n+    )\n+\n+    comparePlans(\n+      r1.hint(\"hint1\", 1, $\"a\"),\n+      UnresolvedHint(\"hint1\", Seq(1, $\"a\"),\n+        r1\n+      )"
  }],
  "prId": 18086
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "7776ae66781961724bbc10a10162bf21d5330d12",
    "createdAt": "2017-05-31T04:00:13Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql\n+\n+import org.apache.spark.sql.catalyst.analysis.AnalysisTest\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class DSLHintSuite extends AnalysisTest {\n+  lazy val a = 'a.int\n+  lazy val b = 'b.string\n+  lazy val c = 'c.string\n+  lazy val r1 = LocalRelation(a, b, c)\n+\n+  test(\"various hint parameters\") {\n+    comparePlans(\n+      r1.hint(\"hint1\"),\n+      UnresolvedHint(\"hint1\", Seq(),\n+        r1\n+      )\n+    )\n+\n+    comparePlans(\n+      r1.hint(\"hint1\", 1, \"a\"),\n+      UnresolvedHint(\"hint1\", Seq(1, \"a\"), r1)\n+    )\n+\n+    comparePlans(\n+      r1.hint(\"hint1\", 1, $\"a\"),\n+      UnresolvedHint(\"hint1\", Seq(1, $\"a\"),\n+        r1\n+      )\n+    )\n+\n+    comparePlans(\n+      r1.hint(\"hint1\", Seq(1, 2, 3), Seq($\"a\", $\"b\", $\"c\")),\n+      UnresolvedHint(\"hint1\", Seq(Seq(1, 2, 3), Seq($\"a\", $\"b\", $\"c\")),\n+        r1\n+      )"
  }],
  "prId": 18086
}]