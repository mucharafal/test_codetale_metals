[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "do we need the constant folding stuff here?\n",
    "commit": "3eeb8484dc7200c9263c8afb37d8e3bff75647dc",
    "createdAt": "2014-06-11T07:12:39Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+\n+class CombiningLimitsSuite extends OptimizerTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Combine Limit\", FixedPoint(2),\n+        CombineLimits) ::\n+      Batch(\"Constant Folding\", FixedPoint(3),",
    "line": 31
  }, {
    "author": {
      "login": "sameeragarwal"
    },
    "body": "Collapsing 2 limits may result in expressions like `Limit if ((10 < 5)) 10 else 5`, so we actually need a few runs of a subset of the constant folding suite (ideally `n+1` runs for `n` limits)\n",
    "commit": "3eeb8484dc7200c9263c8afb37d8e3bff75647dc",
    "createdAt": "2014-06-11T07:19:58Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+\n+class CombiningLimitsSuite extends OptimizerTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Combine Limit\", FixedPoint(2),\n+        CombineLimits) ::\n+      Batch(\"Constant Folding\", FixedPoint(3),",
    "line": 31
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "ic makes sense\n",
    "commit": "3eeb8484dc7200c9263c8afb37d8e3bff75647dc",
    "createdAt": "2014-06-11T07:21:17Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+\n+class CombiningLimitsSuite extends OptimizerTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Combine Limit\", FixedPoint(2),\n+        CombineLimits) ::\n+      Batch(\"Constant Folding\", FixedPoint(3),",
    "line": 31
  }],
  "prId": 1048
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "You shouldn't need to `analyze` more than once. Below too.\n",
    "commit": "3eeb8484dc7200c9263c8afb37d8e3bff75647dc",
    "createdAt": "2014-06-11T07:17:44Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+\n+class CombiningLimitsSuite extends OptimizerTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Combine Limit\", FixedPoint(2),\n+        CombineLimits) ::\n+      Batch(\"Constant Folding\", FixedPoint(3),\n+        NullPropagation,\n+        ConstantFolding,\n+        BooleanSimplification) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n+\n+  test(\"limits: combines two limits\") {\n+    val originalQuery =\n+      testRelation\n+        .select('a)\n+        .limit(10).analyze\n+        .limit(5).analyze"
  }],
  "prId": 1048
}]