[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "nit: could you do `e.asc` instead?\n",
    "commit": "4baaf5574fe8dc5a7bfdeeb8635f9dc42f0fa465",
    "createdAt": "2015-12-02T18:18:41Z",
    "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Expression, Ascending, SortOrder}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+\n+class SortOptimizeSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", FixedPoint(100),\n+        ColumnPruning,\n+        ProjectCollapsing,\n+        RemoveUnnecessarySortOrderEvaluation) :: Nil\n+  }\n+\n+  private val testRelation = LocalRelation('a.int, 'b.int)\n+\n+  private def order(e: Expression) = SortOrder(e, Ascending)"
  }],
  "prId": 8066
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I know its duplication, but it would be easier to understand what is happening if this was inlined.  `eval` and `expr` look similar when scanning the query plans.\n",
    "commit": "4baaf5574fe8dc5a7bfdeeb8635f9dc42f0fa465",
    "createdAt": "2015-12-02T18:19:40Z",
    "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Expression, Ascending, SortOrder}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+\n+class SortOptimizeSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Operator Optimizations\", FixedPoint(100),\n+        ColumnPruning,\n+        ProjectCollapsing,\n+        RemoveUnnecessarySortOrderEvaluation) :: Nil\n+  }\n+\n+  private val testRelation = LocalRelation('a.int, 'b.int)\n+\n+  private def order(e: Expression) = SortOrder(e, Ascending)\n+\n+  test(\"sort on projection\") {\n+    val expr: Expression = ('a + 2) * 3"
  }],
  "prId": 8066
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Nit: to follow the other suites this would probably be `SortOptimizationSuite`\n",
    "commit": "4baaf5574fe8dc5a7bfdeeb8635f9dc42f0fa465",
    "createdAt": "2015-12-02T18:23:48Z",
    "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Expression, Ascending, SortOrder}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+\n+class SortOptimizeSuite extends PlanTest {"
  }],
  "prId": 8066
}]