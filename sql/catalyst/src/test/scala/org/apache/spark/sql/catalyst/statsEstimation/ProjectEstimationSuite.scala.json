[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "the way this test is written getRowSize is completely untested. We can almost change getRowSize to always return 0 and all the tests would pass. Can you have test cases covering it?\r\n",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T23:44:14Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, AttributeMap, AttributeReference}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+import org.apache.spark.sql.types.IntegerType\n+\n+\n+class ProjectEstimationSuite extends StatsEstimationTestBase {\n+\n+  test(\"estimate project with alias\") {\n+    val ar1 = AttributeReference(\"key1\", IntegerType)()\n+    val ar2 = AttributeReference(\"key2\", IntegerType)()\n+    val colStat1 = ColumnStat(2, Some(1), Some(2), 0, 4, 4)\n+    val colStat2 = ColumnStat(1, Some(10), Some(10), 0, 4, 4)\n+\n+    val child = StatsTestPlan(\n+      outputList = Seq(ar1, ar2),\n+      stats = Statistics(\n+        sizeInBytes = 2 * (4 + 4),\n+        rowCount = Some(2),\n+        attributeStats = AttributeMap(Seq(ar1 -> colStat1, ar2 -> colStat2))))\n+\n+    val project = Project(Seq(ar1, Alias(ar2, \"abc\")()), child)\n+    val expectedColStats = Seq(\"key1\" -> colStat1, \"abc\" -> colStat2)\n+    val expectedAttrStats = toAttributeMap(expectedColStats, project)\n+    // The number of rows won't change for project.\n+    val expectedStats = Statistics(\n+      sizeInBytes = 2 * getRowSize(project.output, expectedAttrStats),",
    "line": 46
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "I tested getRowSize for int type. But yes, we should have a separate test for this method.",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-07T01:38:47Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.statsEstimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, AttributeMap, AttributeReference}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.plans.logical.statsEstimation.EstimationUtils._\n+import org.apache.spark.sql.types.IntegerType\n+\n+\n+class ProjectEstimationSuite extends StatsEstimationTestBase {\n+\n+  test(\"estimate project with alias\") {\n+    val ar1 = AttributeReference(\"key1\", IntegerType)()\n+    val ar2 = AttributeReference(\"key2\", IntegerType)()\n+    val colStat1 = ColumnStat(2, Some(1), Some(2), 0, 4, 4)\n+    val colStat2 = ColumnStat(1, Some(10), Some(10), 0, 4, 4)\n+\n+    val child = StatsTestPlan(\n+      outputList = Seq(ar1, ar2),\n+      stats = Statistics(\n+        sizeInBytes = 2 * (4 + 4),\n+        rowCount = Some(2),\n+        attributeStats = AttributeMap(Seq(ar1 -> colStat1, ar2 -> colStat2))))\n+\n+    val project = Project(Seq(ar1, Alias(ar2, \"abc\")()), child)\n+    val expectedColStats = Seq(\"key1\" -> colStat1, \"abc\" -> colStat2)\n+    val expectedAttrStats = toAttributeMap(expectedColStats, project)\n+    // The number of rows won't change for project.\n+    val expectedStats = Statistics(\n+      sizeInBytes = 2 * getRowSize(project.output, expectedAttrStats),",
    "line": 46
  }],
  "prId": 16430
}]