[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `table(\"table\").as(\"tableAlias\")`",
    "commit": "0d429782b38cf19c0d4d6a5102102e39d872fee7",
    "createdAt": "2017-02-14T19:51:15Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.catalyst.plans.Inner\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class SubstituteHintsSuite extends AnalysisTest {\n+  import org.apache.spark.sql.catalyst.analysis.TestRelations._\n+\n+  test(\"invalid hints should be ignored\") {\n+    checkAnalysis(\n+      Hint(\"some_random_hint_that_does_not_exist\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"case-sensitive or insensitive parameters\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = true)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = true)\n+  }\n+\n+  test(\"multiple broadcast hint aliases\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\", \"table2\"), table(\"table\").join(table(\"table2\"))),\n+      Join(BroadcastHint(testRelation), BroadcastHint(testRelation2), Inner, None),\n+      caseSensitive = false)\n+  }\n+\n+  test(\"do not traverse past existing broadcast hints\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), BroadcastHint(table(\"table\").where('a > 1))),\n+      BroadcastHint(testRelation.where('a > 1)).analyze,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"should work for subqueries\") {\n+    val relation = UnresolvedRelation(TableIdentifier(\"table\"), Some(\"tableAlias\"))"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "They do different things.",
    "commit": "0d429782b38cf19c0d4d6a5102102e39d872fee7",
    "createdAt": "2017-02-14T20:02:30Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.catalyst.plans.Inner\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class SubstituteHintsSuite extends AnalysisTest {\n+  import org.apache.spark.sql.catalyst.analysis.TestRelations._\n+\n+  test(\"invalid hints should be ignored\") {\n+    checkAnalysis(\n+      Hint(\"some_random_hint_that_does_not_exist\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"case-sensitive or insensitive parameters\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = true)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = true)\n+  }\n+\n+  test(\"multiple broadcast hint aliases\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\", \"table2\"), table(\"table\").join(table(\"table2\"))),\n+      Join(BroadcastHint(testRelation), BroadcastHint(testRelation2), Inner, None),\n+      caseSensitive = false)\n+  }\n+\n+  test(\"do not traverse past existing broadcast hints\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), BroadcastHint(table(\"table\").where('a > 1))),\n+      BroadcastHint(testRelation.where('a > 1)).analyze,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"should work for subqueries\") {\n+    val relation = UnresolvedRelation(TableIdentifier(\"table\"), Some(\"tableAlias\"))"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "actually they do the same thing. there's a pattern match in as. let me change it,",
    "commit": "0d429782b38cf19c0d4d6a5102102e39d872fee7",
    "createdAt": "2017-02-14T20:38:03Z",
    "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.parser.CatalystSqlParser\n+import org.apache.spark.sql.catalyst.plans.Inner\n+import org.apache.spark.sql.catalyst.plans.logical._\n+\n+class SubstituteHintsSuite extends AnalysisTest {\n+  import org.apache.spark.sql.catalyst.analysis.TestRelations._\n+\n+  test(\"invalid hints should be ignored\") {\n+    checkAnalysis(\n+      Hint(\"some_random_hint_that_does_not_exist\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"case-sensitive or insensitive parameters\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = false)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"TaBlE\"), table(\"TaBlE\")),\n+      BroadcastHint(testRelation),\n+      caseSensitive = true)\n+\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), table(\"TaBlE\")),\n+      testRelation,\n+      caseSensitive = true)\n+  }\n+\n+  test(\"multiple broadcast hint aliases\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\", \"table2\"), table(\"table\").join(table(\"table2\"))),\n+      Join(BroadcastHint(testRelation), BroadcastHint(testRelation2), Inner, None),\n+      caseSensitive = false)\n+  }\n+\n+  test(\"do not traverse past existing broadcast hints\") {\n+    checkAnalysis(\n+      Hint(\"MAPJOIN\", Seq(\"table\"), BroadcastHint(table(\"table\").where('a > 1))),\n+      BroadcastHint(testRelation.where('a > 1)).analyze,\n+      caseSensitive = false)\n+  }\n+\n+  test(\"should work for subqueries\") {\n+    val relation = UnresolvedRelation(TableIdentifier(\"table\"), Some(\"tableAlias\"))"
  }],
  "prId": 16925
}]