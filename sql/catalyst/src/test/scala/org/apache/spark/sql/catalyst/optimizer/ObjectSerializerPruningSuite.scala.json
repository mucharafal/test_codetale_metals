[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "So, is this test case removing `name` at line 73 just for `comparePlans` at line 75?",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-21T08:41:44Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+class ObjectSerializerPruningSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches = Batch(\"Object serializer pruning\", FixedPoint(100),\n+      ObjectSerializerPruning,\n+      RemoveNoopOperators) :: Nil\n+  }\n+\n+  implicit private def productEncoder[T <: Product : TypeTag] = ExpressionEncoder[T]()\n+\n+  test(\"SPARK-26619: Prune the unused serializers from SerializeFromObject\") {\n+    val testRelation = LocalRelation('_1.int, '_2.int)\n+    val serializerObject = CatalystSerde.serialize[(Int, Int)](\n+      CatalystSerde.deserialize[(Int, Int)](testRelation))\n+    val query = serializerObject.select('_1)\n+    val optimized = Optimize.execute(query.analyze)\n+    val expected = serializerObject.copy(serializer = Seq(serializerObject.serializer.head)).analyze\n+    comparePlans(optimized, expected)\n+  }\n+\n+  test(\"Prune nested serializers\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val testRelation = LocalRelation('_1.struct(StructType.fromDDL(\"_1 int, _2 string\")), '_2.int)\n+      val serializerObject = CatalystSerde.serialize[((Int, String), Int)](\n+        CatalystSerde.deserialize[((Int, String), Int)](testRelation))\n+      val query = serializerObject.select($\"_1._1\")\n+      val optimized = Optimize.execute(query.analyze)\n+\n+      val prunedSerializer = serializerObject.serializer.head.transformDown {\n+        case CreateNamedStruct(children) =>\n+          CreateNamedStruct(children.take(2))\n+      }.transformUp {\n+        // Aligns null literal in `If` expression to make it resolvable.\n+        case i @ If(_: IsNull, Literal(null, dt), ser) if !dt.sameType(ser.dataType) =>\n+          i.copy(trueValue = Literal(null, ser.dataType))\n+      }.asInstanceOf[NamedExpression]\n+\n+      // `name` in `GetStructField` affects `comparePlans`. Maybe we can ignore\n+      // `name` in `GetStructField.equals`?",
    "line": 95
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Yes, @dongjoon-hyun.",
    "commit": "ef392723a3ed8bc53332e15fc98c34ca4ff92cfb",
    "createdAt": "2019-02-23T00:37:04Z",
    "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import scala.reflect.runtime.universe.TypeTag\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+class ObjectSerializerPruningSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches = Batch(\"Object serializer pruning\", FixedPoint(100),\n+      ObjectSerializerPruning,\n+      RemoveNoopOperators) :: Nil\n+  }\n+\n+  implicit private def productEncoder[T <: Product : TypeTag] = ExpressionEncoder[T]()\n+\n+  test(\"SPARK-26619: Prune the unused serializers from SerializeFromObject\") {\n+    val testRelation = LocalRelation('_1.int, '_2.int)\n+    val serializerObject = CatalystSerde.serialize[(Int, Int)](\n+      CatalystSerde.deserialize[(Int, Int)](testRelation))\n+    val query = serializerObject.select('_1)\n+    val optimized = Optimize.execute(query.analyze)\n+    val expected = serializerObject.copy(serializer = Seq(serializerObject.serializer.head)).analyze\n+    comparePlans(optimized, expected)\n+  }\n+\n+  test(\"Prune nested serializers\") {\n+    withSQLConf(SQLConf.SERIALIZER_NESTED_SCHEMA_PRUNING_ENABLED.key -> \"true\") {\n+      val testRelation = LocalRelation('_1.struct(StructType.fromDDL(\"_1 int, _2 string\")), '_2.int)\n+      val serializerObject = CatalystSerde.serialize[((Int, String), Int)](\n+        CatalystSerde.deserialize[((Int, String), Int)](testRelation))\n+      val query = serializerObject.select($\"_1._1\")\n+      val optimized = Optimize.execute(query.analyze)\n+\n+      val prunedSerializer = serializerObject.serializer.head.transformDown {\n+        case CreateNamedStruct(children) =>\n+          CreateNamedStruct(children.take(2))\n+      }.transformUp {\n+        // Aligns null literal in `If` expression to make it resolvable.\n+        case i @ If(_: IsNull, Literal(null, dt), ser) if !dt.sameType(ser.dataType) =>\n+          i.copy(trueValue = Literal(null, ser.dataType))\n+      }.asInstanceOf[NamedExpression]\n+\n+      // `name` in `GetStructField` affects `comparePlans`. Maybe we can ignore\n+      // `name` in `GetStructField.equals`?",
    "line": 95
  }],
  "prId": 23740
}]