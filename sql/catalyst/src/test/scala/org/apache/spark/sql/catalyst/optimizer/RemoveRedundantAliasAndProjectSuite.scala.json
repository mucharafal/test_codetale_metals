[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I agree that using `==` on attributes is error-prone, but we should update then one-by-one, to narrow down the scope and make sure the change is reasonable.\r\n\r\nFor instance, I don't think this is a valid case. If we optimize it, the final schema field names will change, which is a breaking change if this plan is an input of a parquet writer. (the result parquet files will have a different schema)",
    "commit": "0e49e91acd6a9ab18993fb9c0ea34ddc200cc902",
    "createdAt": "2018-10-15T02:39:31Z",
    "diffHunk": "@@ -124,4 +124,11 @@ class RemoveRedundantAliasAndProjectSuite extends PlanTest with PredicateHelper\n     val expected = Subquery(relation.select('a as \"a\", 'b).where('b < 10).select('a).analyze)\n     comparePlans(optimized, expected)\n   }\n+\n+  test(\"SPARK-25691: RemoveRedundantProject works also with different cases\") {\n+    val relation = LocalRelation('a.int, 'b.int)\n+    val query = relation.select('A, 'b).analyzeCaseInsensitive\n+    val optimized = Optimize.execute(query)\n+    comparePlans(optimized, relation)"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "thanks for you comment. Then let me focus for this only to the view topic, we can open other tickets for each change later.\r\n\r\n> For instance, I don't think this is a valid case.\r\n\r\nI see the concern about the possible breaking change, so I agree about not introducing this. My point is: then we are saying that Spark is never really case-insensitive, even though the case sensitive option is turned to false, isn't it? Shouldn't datasources write/read columns in a non-case-sensitive way when this flag is turned on?",
    "commit": "0e49e91acd6a9ab18993fb9c0ea34ddc200cc902",
    "createdAt": "2018-10-15T09:15:32Z",
    "diffHunk": "@@ -124,4 +124,11 @@ class RemoveRedundantAliasAndProjectSuite extends PlanTest with PredicateHelper\n     val expected = Subquery(relation.select('a as \"a\", 'b).where('b < 10).select('a).analyze)\n     comparePlans(optimized, expected)\n   }\n+\n+  test(\"SPARK-25691: RemoveRedundantProject works also with different cases\") {\n+    val relation = LocalRelation('a.int, 'b.int)\n+    val query = relation.select('A, 'b).analyzeCaseInsensitive\n+    val optimized = Optimize.execute(query)\n+    comparePlans(optimized, relation)"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Spark can be case-sensitive or not w.r.t. the config, but Spark should always be case-preserving.",
    "commit": "0e49e91acd6a9ab18993fb9c0ea34ddc200cc902",
    "createdAt": "2018-10-15T09:51:49Z",
    "diffHunk": "@@ -124,4 +124,11 @@ class RemoveRedundantAliasAndProjectSuite extends PlanTest with PredicateHelper\n     val expected = Subquery(relation.select('a as \"a\", 'b).where('b < 10).select('a).analyze)\n     comparePlans(optimized, expected)\n   }\n+\n+  test(\"SPARK-25691: RemoveRedundantProject works also with different cases\") {\n+    val relation = LocalRelation('a.int, 'b.int)\n+    val query = relation.select('A, 'b).analyzeCaseInsensitive\n+    val optimized = Optimize.execute(query)\n+    comparePlans(optimized, relation)"
  }],
  "prId": 22713
}]