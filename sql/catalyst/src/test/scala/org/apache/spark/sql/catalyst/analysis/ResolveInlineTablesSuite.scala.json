[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about `UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(AttributeReference(\"A\") + 1)))`?\n",
    "commit": "88e727260f80819c58bb3cef3ba79d9bf86990fe",
    "createdAt": "2016-08-18T05:06:32Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Literal, Rand}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.types.LongType\n+\n+/**\n+ * Unit tests for [[ResolveInlineTables]]. Note that there are also test cases defined in\n+ * end-to-end tests (in sql/core module) for verifying the correct error messages are shown\n+ * in negative cases.\n+ */\n+class ResolveInlineTablesSuite extends PlanTest with BeforeAndAfter {\n+\n+  private def lit(v: Any): Literal = Literal(v)\n+\n+  test(\"validate inputs are foldable\") {\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(lit(1)))))\n+\n+    // nondeterministic (rand) should be fine\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Rand(1)))))\n+\n+    // aggregate should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Count(lit(1))))))\n+    }\n+\n+    // unresolved attribute should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(UnresolvedAttribute(\"A\")))))"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "the `Add` will be resolved and evaluable, but not foldable.\n",
    "commit": "88e727260f80819c58bb3cef3ba79d9bf86990fe",
    "createdAt": "2016-08-18T05:06:56Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Literal, Rand}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.types.LongType\n+\n+/**\n+ * Unit tests for [[ResolveInlineTables]]. Note that there are also test cases defined in\n+ * end-to-end tests (in sql/core module) for verifying the correct error messages are shown\n+ * in negative cases.\n+ */\n+class ResolveInlineTablesSuite extends PlanTest with BeforeAndAfter {\n+\n+  private def lit(v: Any): Literal = Literal(v)\n+\n+  test(\"validate inputs are foldable\") {\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(lit(1)))))\n+\n+    // nondeterministic (rand) should be fine\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Rand(1)))))\n+\n+    // aggregate should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Count(lit(1))))))\n+    }\n+\n+    // unresolved attribute should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(UnresolvedAttribute(\"A\")))))"
  }, {
    "author": {
      "login": "petermaxlee"
    },
    "body": "But how would a user construct an AttributeReference?\n",
    "commit": "88e727260f80819c58bb3cef3ba79d9bf86990fe",
    "createdAt": "2016-08-18T05:10:15Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.scalatest.BeforeAndAfter\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Literal, Rand}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.Count\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.types.LongType\n+\n+/**\n+ * Unit tests for [[ResolveInlineTables]]. Note that there are also test cases defined in\n+ * end-to-end tests (in sql/core module) for verifying the correct error messages are shown\n+ * in negative cases.\n+ */\n+class ResolveInlineTablesSuite extends PlanTest with BeforeAndAfter {\n+\n+  private def lit(v: Any): Literal = Literal(v)\n+\n+  test(\"validate inputs are foldable\") {\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(lit(1)))))\n+\n+    // nondeterministic (rand) should be fine\n+    ResolveInlineTables.validateInputEvaluable(\n+      UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Rand(1)))))\n+\n+    // aggregate should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(Count(lit(1))))))\n+    }\n+\n+    // unresolved attribute should not work\n+    intercept[AnalysisException] {\n+      ResolveInlineTables.validateInputEvaluable(\n+        UnresolvedInlineTable(Seq(\"c1\", \"c2\"), Seq(Seq(UnresolvedAttribute(\"A\")))))"
  }],
  "prId": 14676
}]