[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: `valueIsNull`?",
    "commit": "af79644cb4687b6acb9a10548f05aef980f1882a",
    "createdAt": "2018-08-04T08:01:39Z",
    "diffHunk": "@@ -94,4 +94,53 @@ class HigherOrderFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper\n     checkEvaluation(transform(aai, array => Cast(transform(array, plusIndex), StringType)),\n       Seq(\"[1, 3, 5]\", null, \"[4, 6]\"))\n   }\n+\n+  test(\"MapFilter\") {\n+    def mapFilter(expr: Expression, f: (Expression, Expression) => Expression): Expression = {\n+      val mt = expr.dataType.asInstanceOf[MapType]\n+      MapFilter(expr, createLambda(mt.keyType, false, mt.valueType, mt.valueContainsNull, f))\n+    }\n+    val mii0 = Literal.create(Map(1 -> 0, 2 -> 10, 3 -> -1),\n+      MapType(IntegerType, IntegerType, valueContainsNull = false))\n+    val mii1 = Literal.create(Map(1 -> null, 2 -> 10, 3 -> null),\n+      MapType(IntegerType, IntegerType, valueContainsNull = true))\n+    val miin = Literal.create(null, MapType(IntegerType, IntegerType, valueContainsNull = false))\n+\n+    val kGreaterThanV: (Expression, Expression) => Expression = (k, v) => k > v\n+\n+    checkEvaluation(mapFilter(mii0, kGreaterThanV), Map(1 -> 0, 3 -> -1))\n+    checkEvaluation(mapFilter(mii1, kGreaterThanV), Map())\n+    checkEvaluation(mapFilter(miin, kGreaterThanV), null)\n+\n+    val valueNull: (Expression, Expression) => Expression = (_, v) => v.isNull"
  }],
  "prId": 21986
}]