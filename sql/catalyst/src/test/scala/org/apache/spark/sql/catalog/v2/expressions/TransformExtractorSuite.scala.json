[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`private def`?",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T02:50:33Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I'll update these to `private`.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T16:28:27Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Fixed.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T16:40:56Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {"
  }],
  "prId": 24812
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`private def`?",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T02:50:41Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {\n+    override def name: String = func\n+    override def references: Array[NamedReference] = Array(ref)\n+    override def arguments: Array[Expression] = Array(ref)\n+    override def describe: String = ref.describe\n+  }\n+\n+  /**\n+   * Creates a bucket Transform using an anonymous class.\n+   */\n+  def bucket(numBuckets: Int, ref: NamedReference): Transform = new Transform {"
  }],
  "prId": 24812
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "It seems that we have this already. Can we reuse `LogicalExpressions.literal` and remove this?\r\n```scala\r\n-    override def arguments: Array[Expression] = Array(lit(numBuckets), ref)\r\n+    override def arguments: Array[Expression] = Array(LogicalExpressions.literal(numBuckets), ref)\r\n```",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T03:13:09Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }",
    "line": 32
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Using an anonymous class is part of the test.\r\n\r\nThe extract functions are intended to correctly match any `Transform`, `NamedReference`, or `Literal` instance that is equivalent. To test that, we need to test with objects that are equivalent according to the Java interface, but that do not actually use Spark's internal case classes.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T16:28:01Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }",
    "line": 32
  }],
  "prId": 24812
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Ditto. Please reuse `LogicalExpressions.reference`.\r\n```scala\r\n-    transform(\"identity\", ref(\"a\", \"b\")) match {\r\n+    transform(\"identity\", LogicalExpressions.reference(\"a.b\")) match {\r\n```",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T03:17:11Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }",
    "line": 40
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Of course, you can omit the prefix `LogicalExpressions.` with the proper `import`.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T03:18:43Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }",
    "line": 40
  }],
  "prId": 24812
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We can also remove this `def bucket` function because this is used only once. Given the existing functions, this doesn't give much benefits.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T03:33:11Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {\n+    override def name: String = func\n+    override def references: Array[NamedReference] = Array(ref)\n+    override def arguments: Array[Expression] = Array(ref)\n+    override def describe: String = ref.describe\n+  }\n+\n+  /**\n+   * Creates a bucket Transform using an anonymous class.\n+   */\n+  def bucket(numBuckets: Int, ref: NamedReference): Transform = new Transform {\n+    override def name: String = \"bucket\"\n+    override def references: Array[NamedReference] = Array(ref)\n+    override def arguments: Array[Expression] = Array(lit(numBuckets), ref)\n+    override def describe: String = ref.describe\n+  }"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Moved into the bucket test.",
    "commit": "453bb926ba230c486085014b58eb1468ac960baa",
    "createdAt": "2019-06-06T16:41:07Z",
    "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst\n+import org.apache.spark.sql.types.DataType\n+\n+class TransformExtractorSuite extends SparkFunSuite {\n+  /**\n+   * Creates a Literal using an anonymous class.\n+   */\n+  private def lit[T](literal: T): Literal[T] = new Literal[T] {\n+    override def value: T = literal\n+    override def dataType: DataType = catalyst.expressions.Literal(literal).dataType\n+    override def describe: String = literal.toString\n+  }\n+\n+  /**\n+   * Creates a NamedReference using an anonymous class.\n+   */\n+  private def ref(names: String*): NamedReference = new NamedReference {\n+    override def fieldNames: Array[String] = names.toArray\n+    override def describe: String = names.mkString(\".\")\n+  }\n+\n+  /**\n+   * Creates a Transform using an anonymous class.\n+   */\n+  def transform(func: String, ref: NamedReference): Transform = new Transform {\n+    override def name: String = func\n+    override def references: Array[NamedReference] = Array(ref)\n+    override def arguments: Array[Expression] = Array(ref)\n+    override def describe: String = ref.describe\n+  }\n+\n+  /**\n+   * Creates a bucket Transform using an anonymous class.\n+   */\n+  def bucket(numBuckets: Int, ref: NamedReference): Transform = new Transform {\n+    override def name: String = \"bucket\"\n+    override def references: Array[NamedReference] = Array(ref)\n+    override def arguments: Array[Expression] = Array(lit(numBuckets), ref)\n+    override def describe: String = ref.describe\n+  }"
  }],
  "prId": 24812
}]