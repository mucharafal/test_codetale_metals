[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. empty line.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:30:40Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T06:22:00Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:30:46Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+\n+}\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "Scala style checks the empty line.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T06:22:35Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+\n+}\n+"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Nope. If you hit error, it's due to your editor behavior.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T16:44:01Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+\n+}\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. Let me have a try!",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-19T01:51:42Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)\n+  }\n+\n+}\n+"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Maybe, `BooleanTestSuite` is better since it's referring `BooleanTest` specifically.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:32:58Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T04:33:48Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Can we have negative cases for the above three tests? For example, here, we need to catch the exception when the input value is not `null`.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:35:34Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. I will add some.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T06:20:46Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.BooleanTest._\n+import org.apache.spark.sql.types._\n+\n+class BooleanExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  val row0 = create_row(null)\n+  val row1 = create_row(false)\n+  val row2 = create_row(true)\n+\n+  test(\"istrue and isnottrue\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), TRUE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), TRUE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), TRUE), false, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), TRUE)), true, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), TRUE), true, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), TRUE)), false, row2)\n+  }\n+\n+  test(\"isfalse and isnotfalse\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), FALSE), false, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), FALSE)), true, row0)\n+    checkEvaluation(BooleanTest(Literal.create(false, BooleanType), FALSE), true, row1)\n+    checkEvaluation(Not(BooleanTest(Literal.create(false, BooleanType), FALSE)), false, row1)\n+    checkEvaluation(BooleanTest(Literal.create(true, BooleanType), FALSE), false, row2)\n+    checkEvaluation(Not(BooleanTest(Literal.create(true, BooleanType), FALSE)), true, row2)\n+  }\n+\n+  test(\"isunknown and isnotunknown\") {\n+    checkEvaluation(BooleanTest(Literal.create(null, NullType), UNKNOWN), true, row0)\n+    checkEvaluation(Not(BooleanTest(Literal.create(null, NullType), UNKNOWN)), false, row0)"
  }],
  "prId": 25074
}]