[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "Can you include upper/lower/number/other letters in the first N letters to check the mask is working?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-14T05:29:07Z",
    "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class MaskExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  test(\"mask\") {\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"U\", \"l\", \"#\"), \"llll-UUUU-####-####\")\n+    checkEvaluation(\n+      new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\"), Literal(\"#\")),\n+      \"llll-UUUU-####-####\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\")),\n+      \"llll-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\")), \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(null, StringType)), null)\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), null, \"l\", \"#\"), \"llll-XXXX-####-####\")\n+    checkEvaluation(new Mask(\n+      Literal(\"abcd-EFGH-8765-4321\"),\n+      Literal(null, StringType),\n+      Literal(null, StringType),\n+      Literal(null, StringType)), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"Upper\")),\n+      \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"\")), \"\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"\", \"\", \"\"), \"xxxx-XXXX-nnnn-nnnn\")\n+    // scalastyle:off nonascii\n+    checkEvaluation(Mask(Literal(\"Ul9U\"), \"\\u2200\", null, null), \"\\u2200xn\\u2200\")\n+    checkEvaluation(new Mask(Literal(\"Hello World, こんにちは, 𠀋\"), Literal(\"あ\"), Literal(\"𡈽\")),\n+      \"あ𡈽𡈽𡈽𡈽 あ𡈽𡈽𡈽𡈽, こんにちは, 𠀋\")\n+    // scalastyle:on nonascii\n+    intercept[AnalysisException] {\n+      checkEvaluation(new Mask(Literal(\"\"), Literal(1)), \"\")\n+    }\n+  }\n+\n+  test(\"mask_first_n\") {\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), 6, \"U\", \"l\", \"#\"),"
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "Can you do the same thing to the following tests?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-15T06:58:03Z",
    "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class MaskExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  test(\"mask\") {\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"U\", \"l\", \"#\"), \"llll-UUUU-####-####\")\n+    checkEvaluation(\n+      new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\"), Literal(\"#\")),\n+      \"llll-UUUU-####-####\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\")),\n+      \"llll-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\")), \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(null, StringType)), null)\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), null, \"l\", \"#\"), \"llll-XXXX-####-####\")\n+    checkEvaluation(new Mask(\n+      Literal(\"abcd-EFGH-8765-4321\"),\n+      Literal(null, StringType),\n+      Literal(null, StringType),\n+      Literal(null, StringType)), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"Upper\")),\n+      \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"\")), \"\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"\", \"\", \"\"), \"xxxx-XXXX-nnnn-nnnn\")\n+    // scalastyle:off nonascii\n+    checkEvaluation(Mask(Literal(\"Ul9U\"), \"\\u2200\", null, null), \"\\u2200xn\\u2200\")\n+    checkEvaluation(new Mask(Literal(\"Hello World, こんにちは, 𠀋\"), Literal(\"あ\"), Literal(\"𡈽\")),\n+      \"あ𡈽𡈽𡈽𡈽 あ𡈽𡈽𡈽𡈽, こんにちは, 𠀋\")\n+    // scalastyle:on nonascii\n+    intercept[AnalysisException] {\n+      checkEvaluation(new Mask(Literal(\"\"), Literal(1)), \"\")\n+    }\n+  }\n+\n+  test(\"mask_first_n\") {\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), 6, \"U\", \"l\", \"#\"),"
  }],
  "prId": 21246
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "Can you include `あ` and `𠀋` in the last N letters?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-14T05:33:35Z",
    "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.types.{IntegerType, StringType}\n+\n+class MaskExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+\n+  test(\"mask\") {\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"U\", \"l\", \"#\"), \"llll-UUUU-####-####\")\n+    checkEvaluation(\n+      new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\"), Literal(\"#\")),\n+      \"llll-UUUU-####-####\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\"), Literal(\"l\")),\n+      \"llll-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\")), \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(null, StringType)), null)\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), null, \"l\", \"#\"), \"llll-XXXX-####-####\")\n+    checkEvaluation(new Mask(\n+      Literal(\"abcd-EFGH-8765-4321\"),\n+      Literal(null, StringType),\n+      Literal(null, StringType),\n+      Literal(null, StringType)), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"Upper\")),\n+      \"xxxx-UUUU-nnnn-nnnn\")\n+    checkEvaluation(new Mask(Literal(\"\")), \"\")\n+    checkEvaluation(new Mask(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"\")), \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(Mask(Literal(\"abcd-EFGH-8765-4321\"), \"\", \"\", \"\"), \"xxxx-XXXX-nnnn-nnnn\")\n+    // scalastyle:off nonascii\n+    checkEvaluation(Mask(Literal(\"Ul9U\"), \"\\u2200\", null, null), \"\\u2200xn\\u2200\")\n+    checkEvaluation(new Mask(Literal(\"Hello World, こんにちは, 𠀋\"), Literal(\"あ\"), Literal(\"𡈽\")),\n+      \"あ𡈽𡈽𡈽𡈽 あ𡈽𡈽𡈽𡈽, こんにちは, 𠀋\")\n+    // scalastyle:on nonascii\n+    intercept[AnalysisException] {\n+      checkEvaluation(new Mask(Literal(\"\"), Literal(1)), \"\")\n+    }\n+  }\n+\n+  test(\"mask_first_n\") {\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), 6, \"U\", \"l\", \"#\"),\n+      \"llll-UFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(\n+      Literal(\"abcd-EFGH-8765-4321\"), Literal(6), Literal(\"U\"), Literal(\"l\"), Literal(\"#\")),\n+      \"llll-UFGH-8765-4321\")\n+    checkEvaluation(\n+      new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(6), Literal(\"U\"), Literal(\"l\")),\n+      \"llll-UFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(6), Literal(\"U\")),\n+      \"xxxx-UFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(6)),\n+      \"xxxx-XFGH-8765-4321\")\n+    intercept[AnalysisException] {\n+      checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(\"U\")), \"\")\n+    }\n+    checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\")), \"xxxx-EFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(Literal(null, StringType)), null)\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), 4, \"U\", \"l\", null),\n+      \"llll-EFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(\n+      Literal(\"abcd-EFGH-8765-4321\"),\n+      Literal(null, IntegerType),\n+      Literal(null, StringType),\n+      Literal(null, StringType),\n+      Literal(null, StringType)), \"xxxx-EFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(6), Literal(\"Upper\")),\n+      \"xxxx-UFGH-8765-4321\")\n+    checkEvaluation(new MaskFirstN(Literal(\"\")), \"\")\n+    checkEvaluation(new MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), Literal(4), Literal(\"\")),\n+      \"xxxx-EFGH-8765-4321\")\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), 1000, \"\", \"\", \"\"),\n+      \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(MaskFirstN(Literal(\"abcd-EFGH-8765-4321\"), -1, \"\", \"\", \"\"),\n+      \"abcd-EFGH-8765-4321\")\n+    // scalastyle:off nonascii\n+    checkEvaluation(MaskFirstN(Literal(\"Ul9U\"), 2, \"\\u2200\", null, null), \"\\u2200x9U\")\n+    checkEvaluation(new MaskFirstN(Literal(\"あ, 𠀋, Hello World\"), Literal(10)),\n+      \"あ, 𠀋, Xxxxo World\")\n+    // scalastyle:on nonascii\n+  }\n+\n+  test(\"mask_last_n\") {\n+    checkEvaluation(MaskLastN(Literal(\"abcd-EFGH-8765\"), 6, \"U\", \"l\", \"#\"),\n+      \"abcd-EFGU-####\")\n+    checkEvaluation(new MaskLastN(\n+      Literal(\"abcd-EFGH-8765\"), Literal(6), Literal(\"U\"), Literal(\"l\"), Literal(\"#\")),\n+      \"abcd-EFGU-####\")\n+    checkEvaluation(\n+      new MaskLastN(Literal(\"abcd-EFGH-8765\"), Literal(6), Literal(\"U\"), Literal(\"l\")),\n+      \"abcd-EFGU-nnnn\")\n+    checkEvaluation(\n+      new MaskLastN(Literal(\"abcd-EFGH-8765\"), Literal(6), Literal(\"U\")),\n+      \"abcd-EFGU-nnnn\")\n+    checkEvaluation(\n+      new MaskLastN(Literal(\"abcd-EFGH-8765\"), Literal(6)),\n+      \"abcd-EFGX-nnnn\")\n+    intercept[AnalysisException] {\n+      checkEvaluation(new MaskLastN(Literal(\"abcd-EFGH-8765\"), Literal(\"U\")), \"\")\n+    }\n+    checkEvaluation(new MaskLastN(Literal(\"abcd-EFGH-8765-4321\")), \"abcd-EFGH-8765-nnnn\")\n+    checkEvaluation(new MaskLastN(Literal(null, StringType)), null)\n+    checkEvaluation(MaskLastN(Literal(\"abcd-EFGH-8765-4321\"), 4, \"U\", \"l\", null),\n+      \"abcd-EFGH-8765-nnnn\")\n+    checkEvaluation(new MaskLastN(\n+      Literal(\"abcd-EFGH-8765-4321\"),\n+      Literal(null, IntegerType),\n+      Literal(null, StringType),\n+      Literal(null, StringType),\n+      Literal(null, StringType)), \"abcd-EFGH-8765-nnnn\")\n+    checkEvaluation(new MaskLastN(Literal(\"abcd-EFGH-8765-4321\"), Literal(12), Literal(\"Upper\")),\n+      \"abcd-EFUU-nnnn-nnnn\")\n+    checkEvaluation(new MaskLastN(Literal(\"\")), \"\")\n+    checkEvaluation(new MaskLastN(Literal(\"abcd-EFGH-8765-4321\"), Literal(16), Literal(\"\")),\n+      \"abcx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(MaskLastN(Literal(\"abcd-EFGH-8765-4321\"), 1000, \"\", \"\", \"\"),\n+      \"xxxx-XXXX-nnnn-nnnn\")\n+    checkEvaluation(MaskLastN(Literal(\"abcd-EFGH-8765-4321\"), -1, \"\", \"\", \"\"),\n+      \"abcd-EFGH-8765-4321\")\n+    // scalastyle:off nonascii\n+    checkEvaluation(MaskLastN(Literal(\"Ul9U\"), 2, \"\\u2200\", null, null), \"Uln\\u2200\")\n+    checkEvaluation(new MaskLastN(Literal(\"あ, 𠀋, Hello World\"), Literal(10)),"
  }],
  "prId": 21246
}]