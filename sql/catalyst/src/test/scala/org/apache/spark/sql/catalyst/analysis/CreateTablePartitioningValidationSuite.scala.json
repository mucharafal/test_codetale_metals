[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Not a blocker, but we can improve the error message in the future. It's better to let users know which column/field is missing. For example, `a.b`, it's possible that column `a` exists but `a` is not a struct or it doesn't have a `b` field.",
    "commit": "99ebc001d2563ad579e5e9a0211606cec4e396be",
    "createdAt": "2019-05-14T05:40:36Z",
    "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.catalog.v2.{Identifier, TableCatalog, TestTableCatalog}\n+import org.apache.spark.sql.catalog.v2.expressions.LogicalExpressions\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.catalyst.plans.logical.{CreateTableAsSelect, LeafNode}\n+import org.apache.spark.sql.types.{DoubleType, LongType, StringType, StructType}\n+import org.apache.spark.sql.util.CaseInsensitiveStringMap\n+\n+class CreateTablePartitioningValidationSuite extends AnalysisTest {\n+  import CreateTablePartitioningValidationSuite._\n+\n+  test(\"CreateTableAsSelect: fail missing top-level column\") {\n+    val plan = CreateTableAsSelect(\n+      catalog,\n+      Identifier.of(Array(), \"table_name\"),\n+      LogicalExpressions.bucket(4, \"does_not_exist\") :: Nil,\n+      TestRelation2,\n+      Map.empty,\n+      Map.empty,\n+      ignoreIfExists = false)\n+\n+    assert(!plan.resolved)\n+    assertAnalysisError(plan, Seq(\n+      \"Invalid partitioning\",\n+      \"does_not_exist is missing or is in a map or array\"))\n+  }\n+\n+  test(\"CreateTableAsSelect: fail missing top-level column nested reference\") {\n+    val plan = CreateTableAsSelect(\n+      catalog,\n+      Identifier.of(Array(), \"table_name\"),\n+      LogicalExpressions.bucket(4, \"does_not_exist.z\") :: Nil,\n+      TestRelation2,\n+      Map.empty,\n+      Map.empty,\n+      ignoreIfExists = false)\n+\n+    assert(!plan.resolved)\n+    assertAnalysisError(plan, Seq(\n+      \"Invalid partitioning\",\n+      \"does_not_exist.z is missing or is in a map or array\"))",
    "line": 59
  }],
  "prId": 24570
}]