[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Previous `EqualTo(a, a)` introduces a conflicting attributes exception. \n",
    "commit": "61b37998dbf15613ead80bc106c029eca2051116",
    "createdAt": "2016-10-18T04:44:56Z",
    "diffHunk": "@@ -31,39 +31,46 @@ class ResolveNaturalJoinSuite extends AnalysisTest {\n   lazy val aNotNull = a.notNull\n   lazy val bNotNull = b.notNull\n   lazy val cNotNull = c.notNull\n+  lazy val aNew = newAttribute(a)\n+  lazy val bNotNullNew = newAttribute(bNotNull)\n   lazy val r1 = LocalRelation(b, a)\n   lazy val r2 = LocalRelation(c, a)\n   lazy val r3 = LocalRelation(aNotNull, bNotNull)\n   lazy val r4 = LocalRelation(cNotNull, bNotNull)\n+  lazy val r2New = LocalRelation(c, aNew)\n+  lazy val r4New = LocalRelation(cNotNull, bNotNullNew)\n+\n+  private def newAttribute(a: AttributeReference): Attribute =\n+    a.withExprId(NamedExpression.newExprId)\n \n   test(\"natural/using inner join\") {\n     val naturalPlan = r1.join(r2, NaturalJoin(Inner), None)\n     val usingPlan = r1.join(r2, UsingJoin(Inner, Seq(UnresolvedAttribute(\"a\"))), None)\n-    val expected = r1.join(r2, Inner, Some(EqualTo(a, a))).select(a, b, c)\n+    val expected = r1.join(r2New, Inner, Some(EqualTo(a, aNew))).select(a, b, c)"
  }],
  "prId": 15417
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`newAttribute` -> `deDuplicatedAttribute`\n",
    "commit": "61b37998dbf15613ead80bc106c029eca2051116",
    "createdAt": "2016-10-25T06:20:28Z",
    "diffHunk": "@@ -31,39 +31,46 @@ class ResolveNaturalJoinSuite extends AnalysisTest {\n   lazy val aNotNull = a.notNull\n   lazy val bNotNull = b.notNull\n   lazy val cNotNull = c.notNull\n+  lazy val aNew = newAttribute(a)\n+  lazy val bNotNullNew = newAttribute(bNotNull)\n   lazy val r1 = LocalRelation(b, a)\n   lazy val r2 = LocalRelation(c, a)\n   lazy val r3 = LocalRelation(aNotNull, bNotNull)\n   lazy val r4 = LocalRelation(cNotNull, bNotNull)\n+  lazy val r2New = LocalRelation(c, aNew)\n+  lazy val r4New = LocalRelation(cNotNull, bNotNullNew)\n+\n+  private def newAttribute(a: AttributeReference): Attribute ="
  }],
  "prId": 15417
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`a` -> `aDeduped`\n",
    "commit": "61b37998dbf15613ead80bc106c029eca2051116",
    "createdAt": "2016-10-25T06:21:15Z",
    "diffHunk": "@@ -31,39 +31,46 @@ class ResolveNaturalJoinSuite extends AnalysisTest {\n   lazy val aNotNull = a.notNull\n   lazy val bNotNull = b.notNull\n   lazy val cNotNull = c.notNull\n+  lazy val aNew = newAttribute(a)"
  }],
  "prId": 15417
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`r2New` -> `r2Deduped`\n",
    "commit": "61b37998dbf15613ead80bc106c029eca2051116",
    "createdAt": "2016-10-25T06:21:41Z",
    "diffHunk": "@@ -31,39 +31,46 @@ class ResolveNaturalJoinSuite extends AnalysisTest {\n   lazy val aNotNull = a.notNull\n   lazy val bNotNull = b.notNull\n   lazy val cNotNull = c.notNull\n+  lazy val aNew = newAttribute(a)\n+  lazy val bNotNullNew = newAttribute(bNotNull)\n   lazy val r1 = LocalRelation(b, a)\n   lazy val r2 = LocalRelation(c, a)\n   lazy val r3 = LocalRelation(aNotNull, bNotNull)\n   lazy val r4 = LocalRelation(cNotNull, bNotNull)\n+  lazy val r2New = LocalRelation(c, aNew)"
  }],
  "prId": 15417
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Any reason why you convert the type from `AttributeReference` to `Attribute`?\n",
    "commit": "61b37998dbf15613ead80bc106c029eca2051116",
    "createdAt": "2016-10-26T04:52:22Z",
    "diffHunk": "@@ -31,39 +31,46 @@ class ResolveNaturalJoinSuite extends AnalysisTest {\n   lazy val aNotNull = a.notNull\n   lazy val bNotNull = b.notNull\n   lazy val cNotNull = c.notNull\n+  lazy val aDeduped = deDuplicatedAttribute(a)\n+  lazy val bNotNullDeduped = deDuplicatedAttribute(bNotNull)\n   lazy val r1 = LocalRelation(b, a)\n   lazy val r2 = LocalRelation(c, a)\n   lazy val r3 = LocalRelation(aNotNull, bNotNull)\n   lazy val r4 = LocalRelation(cNotNull, bNotNull)\n+  lazy val r2Deduped = LocalRelation(c, aDeduped)\n+  lazy val r4Deduped = LocalRelation(cNotNull, bNotNullDeduped)\n+\n+  private def deDuplicatedAttribute(a: AttributeReference): Attribute ="
  }],
  "prId": 15417
}]