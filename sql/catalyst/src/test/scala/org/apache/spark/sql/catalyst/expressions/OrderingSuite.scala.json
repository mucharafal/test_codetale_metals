[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "does it cause any bugs?",
    "commit": "7462a55a4256143c39fdaacfdaf334dfc4ba8b7d",
    "createdAt": "2017-11-23T12:43:37Z",
    "diffHunk": "@@ -156,4 +156,13 @@ class OrderingSuite extends SparkFunSuite with ExpressionEvalHelper {\n       assert(genOrdering.compare(rowB1, rowB2) < 0)\n     }\n   }\n+\n+  test(\"SPARK-22591: GenerateOrdering shouldn't change ctx.INPUT_ROW\") {",
    "line": 14
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I'm working to support wholestage codegen when generating expression codes safe from 64k limit. When there is not `INPUT_ROW` in context but we wrongly set a `INPUT_ROW` value, a non-existing `InternalRow i` will be added into function parameters.\r\n",
    "commit": "7462a55a4256143c39fdaacfdaf334dfc4ba8b7d",
    "createdAt": "2017-11-23T12:56:14Z",
    "diffHunk": "@@ -156,4 +156,13 @@ class OrderingSuite extends SparkFunSuite with ExpressionEvalHelper {\n       assert(genOrdering.compare(rowB1, rowB2) < 0)\n     }\n   }\n+\n+  test(\"SPARK-22591: GenerateOrdering shouldn't change ctx.INPUT_ROW\") {",
    "line": 14
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "As we use `INPUT_ROW` a lot in codegen framework, it is risky to change its value without restoring it.",
    "commit": "7462a55a4256143c39fdaacfdaf334dfc4ba8b7d",
    "createdAt": "2017-11-23T13:19:07Z",
    "diffHunk": "@@ -156,4 +156,13 @@ class OrderingSuite extends SparkFunSuite with ExpressionEvalHelper {\n       assert(genOrdering.compare(rowB1, rowB2) < 0)\n     }\n   }\n+\n+  test(\"SPARK-22591: GenerateOrdering shouldn't change ctx.INPUT_ROW\") {",
    "line": 14
  }],
  "prId": 19800
}]