[{
  "comments": [{
    "author": {
      "login": "srinathshankar"
    },
    "body": "In other words, distinctUnionCorrectAnswer2 = unionQuery2, right ?\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-26T23:13:33Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze\n+    val optimized1 = Optimize.execute(unionQuery1)\n+    val distinctUnionCorrectAnswer1 =\n+      Distinct(Union(query1 :: query2 :: query3 :: Nil)).analyze\n+    comparePlans(distinctUnionCorrectAnswer1, optimized1)\n+\n+    val unionQuery2 = Union(Distinct(Union(query1, query2)), query3).analyze\n+    val optimized2 = Optimize.execute(unionQuery2)\n+    val distinctUnionCorrectAnswer2 ="
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "yes.\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-28T06:41:07Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze\n+    val optimized1 = Optimize.execute(unionQuery1)\n+    val distinctUnionCorrectAnswer1 =\n+      Distinct(Union(query1 :: query2 :: query3 :: Nil)).analyze\n+    comparePlans(distinctUnionCorrectAnswer1, optimized1)\n+\n+    val unionQuery2 = Union(Distinct(Union(query1, query2)), query3).analyze\n+    val optimized2 = Optimize.execute(unionQuery2)\n+    val distinctUnionCorrectAnswer2 ="
  }],
  "prId": 15238
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "```\nD - U - D - U - query1\n    |       |\n   query3  query2\n```\n\nCould you add a comment about the tree structure of your test case? It can help the reviewers understand your test cases. Thanks!\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-27T20:31:18Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "OK.\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-28T06:41:20Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze"
  }],
  "prId": 15238
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "```\nU - D - U - query1\n|       |\nquery3  query2\n```\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-27T20:32:44Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze\n+    val optimized1 = Optimize.execute(unionQuery1)\n+    val distinctUnionCorrectAnswer1 =\n+      Distinct(Union(query1 :: query2 :: query3 :: Nil)).analyze\n+    comparePlans(distinctUnionCorrectAnswer1, optimized1)\n+\n+    val unionQuery2 = Union(Distinct(Union(query1, query2)), query3).analyze"
  }],
  "prId": 15238
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "```\n        query1\n        |\nD - U - U - query2\n    |\n    D - U - query2\n        |\n        query3\n```\n",
    "commit": "701d358cb0ddc997b8a560a5c08fcf3fa20a4bd3",
    "createdAt": "2016-09-27T20:37:57Z",
    "diffHunk": "@@ -76,4 +77,32 @@ class SetOperationSuite extends PlanTest {\n         testRelation3.select('g) :: Nil).analyze\n     comparePlans(unionOptimized, unionCorrectAnswer)\n   }\n+\n+  test(\"no more unnecessary distincts in multiple unions\") {\n+    val query1 = OneRowRelation\n+      .select(Literal(1).as('a))\n+    val query2 = OneRowRelation\n+      .select(Literal(2).as('b))\n+    val query3 = OneRowRelation\n+      .select(Literal(3).as('c))\n+\n+    val unionQuery1 = Distinct(Union(Distinct(Union(query1, query2)), query3)).analyze\n+    val optimized1 = Optimize.execute(unionQuery1)\n+    val distinctUnionCorrectAnswer1 =\n+      Distinct(Union(query1 :: query2 :: query3 :: Nil)).analyze\n+    comparePlans(distinctUnionCorrectAnswer1, optimized1)\n+\n+    val unionQuery2 = Union(Distinct(Union(query1, query2)), query3).analyze\n+    val optimized2 = Optimize.execute(unionQuery2)\n+    val distinctUnionCorrectAnswer2 =\n+      Union(Distinct(Union(query1 :: query2 :: Nil)) :: query3 :: Nil).analyze\n+    comparePlans(distinctUnionCorrectAnswer2, optimized2)\n+\n+    val unionQuery3 = Distinct(Union(Union(query1, query2),\n+      Distinct(Union(query2, query3)))).analyze"
  }],
  "prId": 15238
}]