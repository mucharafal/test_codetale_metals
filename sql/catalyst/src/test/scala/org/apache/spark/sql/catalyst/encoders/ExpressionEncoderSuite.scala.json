[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Just make this `productTest((\"UDT\", new ExamplePoint(0.1, 0.2)))`.  It always better to reuse existing infrastructure when possible.\n",
    "commit": "80a3f7b56f14eeb1b7c3d84cc2544458d9de13cd",
    "createdAt": "2016-01-04T20:59:09Z",
    "diffHunk": "@@ -242,6 +242,16 @@ class ExpressionEncoderSuite extends SparkFunSuite {\n     ExpressionEncoder.tuple(intEnc, ExpressionEncoder.tuple(intEnc, longEnc))\n   }\n \n+  test(\"user type with ScalaReflection\") {\n+    val point = (new ExamplePoint(0.1, 0.2), new ExamplePoint(0.3, 0.4))\n+    val schema = ScalaReflection.schemaFor[Tuple2[ExamplePoint, ExamplePoint]]\n+      .dataType.asInstanceOf[StructType]\n+    val attributeSeq = schema.toAttributes\n+    val boundEncoder = encoderFor[Tuple2[ExamplePoint, ExamplePoint]]\n+      .resolve(attributeSeq, outers).bind(attributeSeq)\n+    assert(boundEncoder.fromRow(boundEncoder.toRow(point)) === point)\n+  }"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Thanks. I've updated it according to your comments.\n",
    "commit": "80a3f7b56f14eeb1b7c3d84cc2544458d9de13cd",
    "createdAt": "2016-01-05T02:53:55Z",
    "diffHunk": "@@ -242,6 +242,16 @@ class ExpressionEncoderSuite extends SparkFunSuite {\n     ExpressionEncoder.tuple(intEnc, ExpressionEncoder.tuple(intEnc, longEnc))\n   }\n \n+  test(\"user type with ScalaReflection\") {\n+    val point = (new ExamplePoint(0.1, 0.2), new ExamplePoint(0.3, 0.4))\n+    val schema = ScalaReflection.schemaFor[Tuple2[ExamplePoint, ExamplePoint]]\n+      .dataType.asInstanceOf[StructType]\n+    val attributeSeq = schema.toAttributes\n+    val boundEncoder = encoderFor[Tuple2[ExamplePoint, ExamplePoint]]\n+      .resolve(attributeSeq, outers).bind(attributeSeq)\n+    assert(boundEncoder.fromRow(boundEncoder.toRow(point)) === point)\n+  }"
  }],
  "prId": 10390
}]