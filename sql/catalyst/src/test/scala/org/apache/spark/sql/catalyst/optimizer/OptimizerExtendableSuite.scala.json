[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "You can follow `Optimizer` for how to indent these `Batch`es\n",
    "commit": "8d36e386948defd17839323c697e62c2d1fb878c",
    "createdAt": "2015-12-22T01:24:26Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+/**\n+  * This is a test for SPARK-7727 if the Optimizer is kept being extendable\n+  */\n+class OptimizerExtendableSuite extends SparkFunSuite {\n+\n+  /**\n+    * Dummy rule for test batches\n+    */\n+  object DummyRule extends Rule[LogicalPlan] {\n+    def apply(p: LogicalPlan): LogicalPlan = p\n+  }\n+\n+  /**\n+    * This class represents a dummy extended optimizer that takes the batches of the\n+    * Optimizer and adds custom ones.\n+    */\n+  class ExtendedOptimizer extends Optimizer {\n+\n+    // rules set to DummyRule, would not be executed anyways\n+    val myBatches: Seq[Batch] = Batch(\"once\", Once, DummyRule) ::\n+                                Batch(\"fixedPoint\", FixedPoint(100), DummyRule) :: Nil"
  }, {
    "author": {
      "login": "stephankessler"
    },
    "body": "Done!\n",
    "commit": "8d36e386948defd17839323c697e62c2d1fb878c",
    "createdAt": "2015-12-22T08:06:55Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.optimizer.Optimizer\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+/**\n+  * This is a test for SPARK-7727 if the Optimizer is kept being extendable\n+  */\n+class OptimizerExtendableSuite extends SparkFunSuite {\n+\n+  /**\n+    * Dummy rule for test batches\n+    */\n+  object DummyRule extends Rule[LogicalPlan] {\n+    def apply(p: LogicalPlan): LogicalPlan = p\n+  }\n+\n+  /**\n+    * This class represents a dummy extended optimizer that takes the batches of the\n+    * Optimizer and adds custom ones.\n+    */\n+  class ExtendedOptimizer extends Optimizer {\n+\n+    // rules set to DummyRule, would not be executed anyways\n+    val myBatches: Seq[Batch] = Batch(\"once\", Once, DummyRule) ::\n+                                Batch(\"fixedPoint\", FixedPoint(100), DummyRule) :: Nil"
  }],
  "prId": 10174
}]