[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: `AsTemporaryViewIdentifier should not match`",
    "commit": "4169a8760d6e358914071460c91f381d4ae89b0b",
    "createdAt": "2019-07-09T16:07:17Z",
    "diffHunk": "@@ -85,4 +85,111 @@ class LookupCatalogSuite extends SparkFunSuite with LookupCatalog with Inside {\n       }\n     }\n   }\n+\n+  test(\"temporary table identifier\") {\n+    Seq(\n+      (\"tbl\", TableIdentifier(\"tbl\")),\n+      (\"db.tbl\", TableIdentifier(\"tbl\", Some(\"db\"))),\n+      (\"`db.tbl`\", TableIdentifier(\"db.tbl\")),\n+      (\"parquet.`file:/tmp/db.tbl`\", TableIdentifier(\"file:/tmp/db.tbl\", Some(\"parquet\"))),\n+      (\"`org.apache.spark.sql.json`.`s3://buck/tmp/abc.json`\",\n+          TableIdentifier(\"s3://buck/tmp/abc.json\", Some(\"org.apache.spark.sql.json\")))).foreach {\n+        case (sqlIdent: String, expectedTableIdent: TableIdentifier) =>\n+          // when there is no catalog and the namespace has one part, the rule should match\n+          inside(parseMultipartIdentifier(sqlIdent)) {\n+            case AsTemporaryViewIdentifier(ident) =>\n+              ident shouldEqual expectedTableIdent\n+          }\n+    }\n+\n+    Seq(\"prod.func\", \"prod.db.tbl\", \"test.db.tbl\", \"ns1.ns2.tbl\", \"test.ns1.ns2.ns3.tbl\")\n+        .foreach { sqlIdent =>\n+          inside(parseMultipartIdentifier(sqlIdent)) {\n+            case AsTemporaryViewIdentifier(_) =>\n+              fail(\"AsTemporaryTableIdentifier should not match when \" +\n+                  \"the catalog is set or the namespace has multiple parts\")\n+            case _ =>\n+              // expected\n+          }\n+    }\n+  }\n+}\n+\n+class LookupCatalogWithDefaultSuite extends SparkFunSuite with LookupCatalog with Inside {\n+  import CatalystSqlParser._\n+\n+  private val catalogs = Seq(\"prod\", \"test\").map(x => x -> new TestCatalogPlugin(x)).toMap\n+\n+  override def defaultCatalogName: Option[String] = Some(\"prod\")\n+\n+  override def lookupCatalog(name: String): CatalogPlugin =\n+    catalogs.getOrElse(name, throw new CatalogNotFoundException(s\"$name not found\"))\n+\n+  test(\"catalog object identifier\") {\n+    Seq(\n+      (\"tbl\", catalogs.get(\"prod\"), Seq.empty, \"tbl\"),\n+      (\"db.tbl\", catalogs.get(\"prod\"), Seq(\"db\"), \"tbl\"),\n+      (\"prod.func\", catalogs.get(\"prod\"), Seq.empty, \"func\"),\n+      (\"ns1.ns2.tbl\", catalogs.get(\"prod\"), Seq(\"ns1\", \"ns2\"), \"tbl\"),\n+      (\"prod.db.tbl\", catalogs.get(\"prod\"), Seq(\"db\"), \"tbl\"),\n+      (\"test.db.tbl\", catalogs.get(\"test\"), Seq(\"db\"), \"tbl\"),\n+      (\"test.ns1.ns2.ns3.tbl\", catalogs.get(\"test\"), Seq(\"ns1\", \"ns2\", \"ns3\"), \"tbl\"),\n+      (\"`db.tbl`\", catalogs.get(\"prod\"), Seq.empty, \"db.tbl\"),\n+      (\"parquet.`file:/tmp/db.tbl`\", catalogs.get(\"prod\"), Seq(\"parquet\"), \"file:/tmp/db.tbl\"),\n+      (\"`org.apache.spark.sql.json`.`s3://buck/tmp/abc.json`\", catalogs.get(\"prod\"),\n+          Seq(\"org.apache.spark.sql.json\"), \"s3://buck/tmp/abc.json\")).foreach {\n+      case (sql, expectedCatalog, namespace, name) =>\n+        inside(parseMultipartIdentifier(sql)) {\n+          case CatalogObjectIdentifier(catalog, ident) =>\n+            catalog shouldEqual expectedCatalog\n+            ident shouldEqual Identifier.of(namespace.toArray, name)\n+        }\n+    }\n+  }\n+\n+  test(\"table identifier\") {\n+    Seq(\n+      \"tbl\",\n+      \"db.tbl\",\n+      \"`db.tbl`\",\n+      \"parquet.`file:/tmp/db.tbl`\",\n+      \"`org.apache.spark.sql.json`.`s3://buck/tmp/abc.json`\",\n+      \"prod.func\",\n+      \"prod.db.tbl\",\n+      \"ns1.ns2.tbl\").foreach { sql =>\n+      parseMultipartIdentifier(sql) match {\n+        case AsTableIdentifier(_) =>\n+          fail(s\"$sql should not be resolved as TableIdentifier\")\n+        case _ =>\n+      }\n+    }\n+  }\n+\n+  test(\"temporary table identifier\") {\n+    Seq(\n+      (\"tbl\", TableIdentifier(\"tbl\")),\n+      (\"db.tbl\", TableIdentifier(\"tbl\", Some(\"db\"))),\n+      (\"`db.tbl`\", TableIdentifier(\"db.tbl\")),\n+      (\"parquet.`file:/tmp/db.tbl`\", TableIdentifier(\"file:/tmp/db.tbl\", Some(\"parquet\"))),\n+      (\"`org.apache.spark.sql.json`.`s3://buck/tmp/abc.json`\",\n+          TableIdentifier(\"s3://buck/tmp/abc.json\", Some(\"org.apache.spark.sql.json\")))).foreach {\n+      case (sqlIdent: String, expectedTableIdent: TableIdentifier) =>\n+        // when there is no catalog and the namespace has one part, the rule should match\n+        inside(parseMultipartIdentifier(sqlIdent)) {\n+          case AsTemporaryViewIdentifier(ident) =>\n+            ident shouldEqual expectedTableIdent\n+        }\n+    }\n+\n+    Seq(\"prod.func\", \"prod.db.tbl\", \"test.db.tbl\", \"ns1.ns2.tbl\", \"test.ns1.ns2.ns3.tbl\")\n+        .foreach { sqlIdent =>\n+          inside(parseMultipartIdentifier(sqlIdent)) {\n+            case AsTemporaryViewIdentifier(_) =>\n+              fail(\"AsTemporaryTableIdentifier should not match when \" +"
  }],
  "prId": 24768
}]