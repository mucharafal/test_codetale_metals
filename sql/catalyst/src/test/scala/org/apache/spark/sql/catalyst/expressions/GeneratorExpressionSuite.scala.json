[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "We have `checkEvaluation` for this purpose, how about using that?\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T01:16:31Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oh, thank you for review, @cloud-fan , too.\nDo we have an example of `checkEvaluation` to check the generator, multiple InternalRows?\nI just thought `checkEvaluation` is just for a single row, e.g., values, arrays, maps.\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T05:48:50Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "And, how to check the zero row? At Line 39, \nhttps://github.com/apache/spark/pull/13971/files#diff-6715134a4e95980149a7600ecb71674cR41\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T05:56:48Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "`checkEvaluation` takes `Any` as expected result, so I don't think `checkEvaluation` is only used for a single row.\nHave you tried to pass a `Seq[Row]` to `checkEvaluation`? If it doesn't work, is it possible to improve `checkEvaluation` so that it can work for this case? thanks\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T14:22:58Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Sure. @cloud-fan . In fact, I try everything you told me in many ways because I trust you. :)\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T18:19:47Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "As a evidence, let me write the results of the most simplest case.\n\n``` scala\ncheckEvaluation(Explode(CreateArray(Seq.empty)), Seq.empty[Row])\ncheckEvaluation(Explode(CreateArray(Seq.empty)), Seq.empty[InternalRow])\ncheckEvaluation(Explode(CreateArray(Seq.empty)), Seq.empty)\n```\n\nAll the above returns the followings.\n\n```\nIncorrect evaluation (codegen off): explode(array()), actual: InternalRow;(), expected: []\n```\n\nHere is the body of `checkEvaluation`. The following comments are the limitation I found.\n\n``` scala\n// 1. This makes `Seq[Any]` into `GenericArrayData` generally.\nval catalystValue = CatalystTypeConverters.convertToCatalyst(expected)\ncheckEvaluationWithoutCodegen(expression, catalystValue, inputRow)\n\n// 2. Here, `val actual = plan(inputRow).get(0, expression.dataType)` is called to try casting to `expression.dataType`.\ncheckEvaluationWithGeneratedMutableProjection(expression, catalystValue, inputRow)\n\nif (GenerateUnsafeProjection.canSupport(expression.dataType)) {\n      // 3. Here, `val unsafeRow = plan(inputRow)` with one row assumption.\n      checkEvalutionWithUnsafeProjection(expression, catalystValue, inputRow)\n}\n\n// 4. Here, `checkResult` fails at `result == expected`.\ncheckEvaluationWithOptimization(expression, catalystValue, inputRow)\n```\n\nIn short, every steps of the `checkEvaluation` seem to depend on the **single row assumption** heavily. If we wan to change this. We should do in a separate issue since it's not trivial.\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T18:38:58Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "If I didn't misunderstand, it's definitely valuable issue to investigate more. If we can upgrade `checkEvaluation` later, we can unify the testcases of this PR with `checkEvaluation`.\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T18:48:32Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Let's not change it for now. We also don't want test code to become so complicated that is is no longer obvious what's going on.\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T19:01:20Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Yep. Thank you. I'll investigate it later.\n",
    "commit": "5f3a9514aab50310d388808895a067d1912bf0d8",
    "createdAt": "2016-06-30T19:09:05Z",
    "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+class GeneratorExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  private def checkTuple(actual: ExplodeBase, expected: Seq[InternalRow]): Unit = {\n+    assert(actual.eval(null).toSeq === expected)",
    "line": 26
  }],
  "prId": 13971
}]