[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Why get struct fields here?\nCan we test `checkEvaluation(new SortArray(arrayStruct), Seq(create_row(1), create_row(2)))`?\n",
    "commit": "5ae83c45eecc42df6eae59e8d62114ce0565414f",
    "createdAt": "2015-10-27T00:38:42Z",
    "diffHunk": "@@ -64,6 +65,21 @@ class CollectionFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(new SortArray(a3, Literal(false)), Seq(\"b\", \"a\", null))\n \n     checkEvaluation(Literal.create(null, ArrayType(StringType)), null)\n+    checkEvaluation(new SortArray(a4), Seq(null, null))\n+\n+    val typeAS = ArrayType(StructType(StructField(\"a\", IntegerType) :: Nil))\n+    val arrayStruct = Literal.create(Seq(create_row(2), create_row(1)), typeAS)\n+    val sorted = new SortArray(arrayStruct)\n+\n+    def getArrayStructFields(expr: Expression, fieldName: String): GetArrayStructFields = {\n+      expr.dataType match {\n+        case ArrayType(StructType(fields), containsNull) =>\n+          val field = fields.find(_.name == fieldName).get\n+          GetArrayStructFields(expr, field, fields.indexOf(field), fields.length, containsNull)\n+      }\n+    }\n+\n+    checkEvaluation(getArrayStructFields(sorted, \"a\"), Seq(1, 2))"
  }, {
    "author": {
      "login": "jliwork"
    },
    "body": "I was just trying to find a way to compare the results. Your approach is much simpler. I have updated the test case based on your comment. Thank you for your comment! \n",
    "commit": "5ae83c45eecc42df6eae59e8d62114ce0565414f",
    "createdAt": "2015-10-27T01:03:29Z",
    "diffHunk": "@@ -64,6 +65,21 @@ class CollectionFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     checkEvaluation(new SortArray(a3, Literal(false)), Seq(\"b\", \"a\", null))\n \n     checkEvaluation(Literal.create(null, ArrayType(StringType)), null)\n+    checkEvaluation(new SortArray(a4), Seq(null, null))\n+\n+    val typeAS = ArrayType(StructType(StructField(\"a\", IntegerType) :: Nil))\n+    val arrayStruct = Literal.create(Seq(create_row(2), create_row(1)), typeAS)\n+    val sorted = new SortArray(arrayStruct)\n+\n+    def getArrayStructFields(expr: Expression, fieldName: String): GetArrayStructFields = {\n+      expr.dataType match {\n+        case ArrayType(StructType(fields), containsNull) =>\n+          val field = fields.find(_.name == fieldName).get\n+          GetArrayStructFields(expr, field, fields.indexOf(field), fields.length, containsNull)\n+      }\n+    }\n+\n+    checkEvaluation(getArrayStructFields(sorted, \"a\"), Seq(1, 2))"
  }],
  "prId": 9247
}]