[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "seems the boolean and string one doesn't share same implementation?(`xpathUtil.evalBoolean` and `xpathUtil.evalString`) \n",
    "commit": "0c60d87c0dd1b7e78fd77c2f01b67a2ae8a0151e",
    "createdAt": "2016-06-30T14:43:59Z",
    "diffHunk": "@@ -27,33 +27,127 @@ import org.apache.spark.sql.types.StringType\n  */\n class XPathExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n \n-  private def testBoolean[T](xml: String, path: String, expected: T): Unit = {\n+  test(\"xpath_boolean\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Boolean): Unit = {\n+      checkEvaluation(\n+        XPathBoolean(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a><b>b</b></a>\", \"a/b\", true)\n+    testExpr(\"<a><b>b</b></a>\", \"a/c\", false)\n+    testExpr(\"<a><b>b</b></a>\", \"a/b = \\\"b\\\"\", true)\n+    testExpr(\"<a><b>b</b></a>\", \"a/b = \\\"c\\\"\", false)\n+    testExpr(\"<a><b>10</b></a>\", \"a/b < 10\", false)\n+    testExpr(\"<a><b>10</b></a>\", \"a/b = 10\", true)\n+  }\n+\n+  test(\"xpath_short\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Short): Unit = {\n+      checkEvaluation(\n+        XPathShort(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0.toShort)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.toShort)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.toShort)\n+  }\n+\n+  test(\"xpath_int\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Integer): Unit = {\n+      checkEvaluation(\n+        XPathInt(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5)\n+  }\n+\n+  test(\"xpath_long\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Long): Unit = {\n+      checkEvaluation(\n+        XPathLong(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0L)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0L)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5L)\n+  }\n+\n+  test(\"xpath_float\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Float): Unit = {\n+      checkEvaluation(\n+        XPathFloat(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", Float.NaN)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.0F)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.0F)\n+  }\n+\n+  test(\"xpath_double\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Double): Unit = {\n+      checkEvaluation(\n+        XPathDouble(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", Double.NaN)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.0)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.0)\n+  }\n+\n+  test(\"xpath_string\") {\n+    def testExpr[T](xml: String, path: String, expected: String): Unit = {\n+      checkEvaluation(\n+        XPathString(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a\", \"bbcc\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/b\", \"bb\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/c\", \"cc\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/d\", \"\")\n+    testExpr(\"<a><b>b1</b><b>b2</b></a>\", \"//b\", \"b1\")\n+    testExpr(\"<a><b>b1</b><b>b2</b></a>\", \"a/b[1]\", \"b1\")\n+    testExpr(\"<a><b>b1</b><b id='b_2'>b2</b></a>\", \"a/b[@id='b_2']\", \"b2\")\n+  }\n+\n+  test(\"null handling\") {\n+    // We only do this for one expression since they all share the same common base implementation"
  }],
  "prId": 13991
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Which Exception will we throw? What is the message we issue? When users see the message, can they understand the cause?\n",
    "commit": "0c60d87c0dd1b7e78fd77c2f01b67a2ae8a0151e",
    "createdAt": "2016-06-30T17:20:42Z",
    "diffHunk": "@@ -27,33 +27,127 @@ import org.apache.spark.sql.types.StringType\n  */\n class XPathExpressionSuite extends SparkFunSuite with ExpressionEvalHelper {\n \n-  private def testBoolean[T](xml: String, path: String, expected: T): Unit = {\n+  test(\"xpath_boolean\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Boolean): Unit = {\n+      checkEvaluation(\n+        XPathBoolean(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a><b>b</b></a>\", \"a/b\", true)\n+    testExpr(\"<a><b>b</b></a>\", \"a/c\", false)\n+    testExpr(\"<a><b>b</b></a>\", \"a/b = \\\"b\\\"\", true)\n+    testExpr(\"<a><b>b</b></a>\", \"a/b = \\\"c\\\"\", false)\n+    testExpr(\"<a><b>10</b></a>\", \"a/b < 10\", false)\n+    testExpr(\"<a><b>10</b></a>\", \"a/b = 10\", true)\n+  }\n+\n+  test(\"xpath_short\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Short): Unit = {\n+      checkEvaluation(\n+        XPathShort(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0.toShort)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.toShort)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.toShort)\n+  }\n+\n+  test(\"xpath_int\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Integer): Unit = {\n+      checkEvaluation(\n+        XPathInt(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5)\n+  }\n+\n+  test(\"xpath_long\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Long): Unit = {\n+      checkEvaluation(\n+        XPathLong(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", 0L)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0L)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5L)\n+  }\n+\n+  test(\"xpath_float\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Float): Unit = {\n+      checkEvaluation(\n+        XPathFloat(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", Float.NaN)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.0F)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.0F)\n+  }\n+\n+  test(\"xpath_double\") {\n+    def testExpr[T](xml: String, path: String, expected: java.lang.Double): Unit = {\n+      checkEvaluation(\n+        XPathDouble(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a>this is not a number</a>\", \"a\", Double.NaN)\n+    testExpr(\"<a>try a boolean</a>\", \"a = 10\", 0.0)\n+    testExpr(\"<a><b class=\\\"odd\\\">1</b><b class=\\\"even\\\">2</b><b class=\\\"odd\\\">4</b><c>8</c></a>\",\n+      \"sum(a/b[@class=\\\"odd\\\"])\",\n+      5.0)\n+  }\n+\n+  test(\"xpath_string\") {\n+    def testExpr[T](xml: String, path: String, expected: String): Unit = {\n+      checkEvaluation(\n+        XPathString(Literal.create(xml, StringType), Literal.create(path, StringType)),\n+        expected)\n+    }\n+\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a\", \"bbcc\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/b\", \"bb\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/c\", \"cc\")\n+    testExpr(\"<a><b>bb</b><c>cc</c></a>\", \"a/d\", \"\")\n+    testExpr(\"<a><b>b1</b><b>b2</b></a>\", \"//b\", \"b1\")\n+    testExpr(\"<a><b>b1</b><b>b2</b></a>\", \"a/b[1]\", \"b1\")\n+    testExpr(\"<a><b>b1</b><b id='b_2'>b2</b></a>\", \"a/b[@id='b_2']\", \"b2\")\n+  }\n+\n+  test(\"null handling\") {\n+    // We only do this for one expression since they all share the same common base implementation\n+    checkEvaluation(\n+      XPathLong(Literal.create(null, StringType), Literal.create(null, StringType)), null)\n     checkEvaluation(\n-      XPathBoolean(Literal.create(xml, StringType), Literal.create(path, StringType)),\n-      expected)\n+      XPathLong(Literal.create(\"\", StringType), Literal.create(null, StringType)), null)\n+    checkEvaluation(\n+      XPathLong(Literal.create(null, StringType), Literal.create(\"\", StringType)), null)\n   }\n \n-  test(\"xpath_boolean\") {\n-    testBoolean(\"<a><b>b</b></a>\", \"a/b\", true)\n-    testBoolean(\"<a><b>b</b></a>\", \"a/c\", false)\n-    testBoolean(\"<a><b>b</b></a>\", \"a/b = \\\"b\\\"\", true)\n-    testBoolean(\"<a><b>b</b></a>\", \"a/b = \\\"c\\\"\", false)\n-    testBoolean(\"<a><b>10</b></a>\", \"a/b < 10\", false)\n-    testBoolean(\"<a><b>10</b></a>\", \"a/b = 10\", true)\n-\n-    // null input\n-    testBoolean(null, null, null)\n-    testBoolean(null, \"a\", null)\n-    testBoolean(\"<a><b>10</b></a>\", null, null)\n-\n-    // exception handling for invalid input\n+  test(\"invalid xml handling\") {\n     intercept[Exception] {"
  }],
  "prId": 13991
}]