[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why this will fail during analysis?",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-22T11:07:21Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "The lower boundary would be higher than the upper boundary, previously it would fail, but we have removed this check, should add it.",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-24T10:32:57Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Do you think that will improve the UX?",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-24T10:50:05Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis"
  }],
  "prId": 18540
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto, why?",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-22T11:07:51Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis\n+      (\"unbounded preceding\", Unbounded, CurrentRow),\n+      (\"unbounded following\", Unbounded, CurrentRow), // Will fail during analysis"
  }, {
    "author": {
      "login": "jiangxb1987"
    },
    "body": "In fact this is problematic, we would generate the same result for both `unbounded preceding` and `unbounded following`. @hvanhovell any idea on resolving this?",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-24T10:34:15Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis\n+      (\"unbounded preceding\", Unbounded, CurrentRow),\n+      (\"unbounded following\", Unbounded, CurrentRow), // Will fail during analysis"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Well the idea was that the unboundedness was tied to the location in which it was used, so for example unbounded in the first position would mean unbounded preceding. However this is completely opposite to how we interpret literal bounds, it might be better to reintroduce special boundaries for unbounded preceding and unbounded following.",
    "commit": "38b04df792caf298da63be565d1b46a4eae93d98",
    "createdAt": "2017-07-24T10:53:00Z",
    "diffHunk": "@@ -267,16 +267,17 @@ class ExpressionParserSuite extends PlanTest {\n     // Range/Row\n     val frameTypes = Seq((\"rows\", RowFrame), (\"range\", RangeFrame))\n     val boundaries = Seq(\n-      (\"10 preceding\", ValuePreceding(10), CurrentRow),\n-      (\"3 + 1 following\", ValueFollowing(4), CurrentRow), // Will fail during analysis\n-      (\"unbounded preceding\", UnboundedPreceding, CurrentRow),\n-      (\"unbounded following\", UnboundedFollowing, CurrentRow), // Will fail during analysis\n-      (\"between unbounded preceding and current row\", UnboundedPreceding, CurrentRow),\n+      (\"10 preceding\", -Literal(10), CurrentRow),\n+      (\"2147483648 preceding\", -Literal(2147483648L), CurrentRow),\n+      (\"3 + 1 following\", Add(Literal(3), Literal(1)), CurrentRow), // Will fail during analysis\n+      (\"unbounded preceding\", Unbounded, CurrentRow),\n+      (\"unbounded following\", Unbounded, CurrentRow), // Will fail during analysis"
  }],
  "prId": 18540
}]