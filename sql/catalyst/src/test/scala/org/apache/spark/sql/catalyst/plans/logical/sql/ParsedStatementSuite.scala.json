[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Are we going to add this kind of derived classes (extending `ParsedStatement`)?",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-05T02:34:29Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+class ParsedStatementSuite extends SparkFunSuite {\n+\n+  test(\"Map[String, String] field\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement {\n+      override def output: Seq[Attribute] = Nil\n+      override def children: Seq[LogicalPlan] = Nil\n+    }\n+\n+    TestStatement(Map(\"abc\" -> \"def\")).toString\n+  }\n+\n+  test(\"Map[String, Int] field\") {\n+    case class TestStatement(p: Map[String, Int]) extends ParsedStatement {"
  }, {
    "author": {
      "login": "jzhuge"
    },
    "body": "Yes, so far we have added derived classes such as CreateTable, DropTable, DropView.  I discovered the issue while adding a new derived class InsertTable that contains a Map[String, Option(Int)] field.",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-05T03:20:06Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+class ParsedStatementSuite extends SparkFunSuite {\n+\n+  test(\"Map[String, String] field\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement {\n+      override def output: Seq[Attribute] = Nil\n+      override def children: Seq[LogicalPlan] = Nil\n+    }\n+\n+    TestStatement(Map(\"abc\" -> \"def\")).toString\n+  }\n+\n+  test(\"Map[String, Int] field\") {\n+    case class TestStatement(p: Map[String, Int]) extends ParsedStatement {"
  }],
  "prId": 24800
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "If this is a bug, we need JIRA ID here. (For me, this issue looks like improvements.)",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-05T02:35:34Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+class ParsedStatementSuite extends SparkFunSuite {\n+\n+  test(\"Map[String, String] field\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement {\n+      override def output: Seq[Attribute] = Nil\n+      override def children: Seq[LogicalPlan] = Nil\n+    }\n+\n+    TestStatement(Map(\"abc\" -> \"def\")).toString\n+  }\n+\n+  test(\"Map[String, Int] field\") {"
  }, {
    "author": {
      "login": "jzhuge"
    },
    "body": "JIRA SPARK-27947",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-05T03:20:19Z",
    "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+class ParsedStatementSuite extends SparkFunSuite {\n+\n+  test(\"Map[String, String] field\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement {\n+      override def output: Seq[Attribute] = Nil\n+      override def children: Seq[LogicalPlan] = Nil\n+    }\n+\n+    TestStatement(Map(\"abc\" -> \"def\")).toString\n+  }\n+\n+  test(\"Map[String, Int] field\") {"
  }],
  "prId": 24800
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. Shall we use the following instead and remove `import org.scalatest.Matchers._`?\r\n```scala\r\nassert(!TestStatement(Map(\"spark.my.password\" -> \"secret\")).toString.contains(\"secret\"))\r\n```",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-09T01:40:45Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.scalatest.Matchers._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {\n+\n+  test(\"Map[String, String] field in child class\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement\n+\n+    withSQLConf(SQLConf.SQL_OPTIONS_REDACTION_PATTERN.key -> \"my.password\") {\n+      TestStatement(Map(\"spark.my.password\" -> \"secret\")).toString should not contain (\"secret\")"
  }],
  "prId": 24800
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "ditto.\r\n```\r\nassert(!TestStatement(Map(12345 -> \"spark.my.password=secret\")).toString.contains(\"secret\"))\r\n```",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-09T01:43:00Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.scalatest.Matchers._\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {\n+\n+  test(\"Map[String, String] field in child class\") {\n+    case class TestStatement(p: Map[String, String]) extends ParsedStatement\n+\n+    withSQLConf(SQLConf.SQL_OPTIONS_REDACTION_PATTERN.key -> \"my.password\") {\n+      TestStatement(Map(\"spark.my.password\" -> \"secret\")).toString should not contain (\"secret\")\n+    }\n+  }\n+\n+  test(\"Map[Int, String] field in child class\") {\n+    case class TestStatement(p: Map[Int, String]) extends ParsedStatement\n+\n+    withSQLConf(SQLConf.SQL_OPTIONS_REDACTION_PATTERN.key -> \"my.password\") {\n+      TestStatement(Map(12345 -> \"spark.my.password=secret\")).toString should not contain (\"secret\")"
  }],
  "prId": 24800
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "For now, this PR seems to be enough to remove this test suite. How do you think about removing this test suite completely?",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-10T02:37:17Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {"
  }, {
    "author": {
      "login": "jzhuge"
    },
    "body": "These tests cover ParseStatement.toString, TreeNode.simpleString, and  ParseStatement.productIterator.",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-10T04:18:22Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Initially, it does. Now, this PR is focusing on improving `redactOptions` and it's already covered by `UtilsSuite`.\r\n\r\nFor example, `SaveIntoDataSourceCommand.simpleString` also use `redactOptions`, but we don't add a test coverage there. Accordingly, why do we need a test coverage for `ParseStatement`? In general, we can add a test to `SQLQuerySuite` at every SQL PR, but we don't recommend that. We don't need that, and it only hurts the coherence of the PR scope and content.\r\n\r\nSo, let's go back to the beginning. Is that test coverage needed in this PR? I'd like to remove this.",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-10T04:41:04Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {"
  }, {
    "author": {
      "login": "jzhuge"
    },
    "body": "Sounds good to me.",
    "commit": "1055a220f5eb867d596f708f67a1c9f1c0385e2e",
    "createdAt": "2019-06-10T04:56:39Z",
    "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.catalyst.plans.SQLHelper\n+import org.apache.spark.sql.internal.SQLConf\n+\n+class ParsedStatementSuite extends SparkFunSuite with SQLHelper {"
  }],
  "prId": 24800
}]