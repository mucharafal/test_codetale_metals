[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "`comparePlans(optimized, analyzed)`?",
    "commit": "432883117b8d067a821422d68fcfc3a03ca36527",
    "createdAt": "2017-05-16T11:37:16Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{RowFrame, SpecifiedWindowFrame, UnboundedFollowing, UnboundedPreceding, UnspecifiedFrame}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+\n+class TransposeWindowSuite extends PlanTest {\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"CollapseProject\", FixedPoint(100), CollapseProject, RemoveRedundantProject) ::\n+      Batch(\"FlipWindow\", Once, CollapseWindow, TransposeWindow) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.int, 'd.string)\n+\n+  val a = testRelation.output(0)\n+  val b = testRelation.output(1)\n+  val c = testRelation.output(2)\n+  val d = testRelation.output(3)\n+\n+  val partitionSpec1 = Seq(a)\n+  val partitionSpec2 = Seq(a, b)\n+  val partitionSpec3 = Seq(d)\n+\n+  val orderSpec1 = Seq(d.asc)\n+  val orderSpec2 = Seq(d.desc)\n+\n+  test(\"flip two adjacent windows with compatible partitions in multiple selects\") {\n+    val wexpr1 = windowExpr(sum('c), windowSpec(partitionSpec2, Seq.empty, UnspecifiedFrame))\n+    val wexpr2 = windowExpr(sum('c), windowSpec(partitionSpec1, Seq.empty, UnspecifiedFrame))\n+\n+    val query = testRelation\n+      .select('a, 'b, 'c, wexpr1.as('sum_a_2))\n+      .select('a, 'b, 'c, 'sum_a_2, wexpr2.as('sum_a_1))\n+\n+    val optimized = Optimize.execute(query.analyze)\n+\n+    val query2 = testRelation\n+      .select('a, 'b, 'c)\n+      .select('a, 'b, 'c, wexpr2.as('sum_a_1))\n+      .select('a, 'b, 'c, wexpr1.as('sum_a_2), 'sum_a_1)\n+      .select('a, 'b, 'c, 'sum_a_2, 'sum_a_1)\n+\n+    val correctAnswer = Optimize.execute(query2.analyze)\n+\n+    comparePlans(optimized, correctAnswer)\n+  }\n+\n+  test(\"flip two adjacent windows with compatible partitions\") {\n+    val query = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec2, orderSpec2)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, orderSpec1)\n+\n+    val analyzed = query.analyze\n+    val optimized = Optimize.execute(analyzed)\n+\n+    val correctAnswer = testRelation\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, orderSpec1)\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec2, orderSpec2)\n+      .select('a, 'b, 'c, 'd, 'sum_a_2, 'sum_a_1)\n+\n+    comparePlans(optimized, correctAnswer.analyze)\n+  }\n+\n+  test(\"don't flip two adjacent windows with incompatible partitions\") {\n+    val query = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec3, Seq.empty)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, Seq.empty)\n+\n+    val analyzed = query.analyze\n+    val optimized = Optimize.execute(analyzed)\n+\n+    val correctAnswer = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec3, Seq.empty)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, Seq.empty)\n+\n+    comparePlans(optimized, correctAnswer.analyze)"
  }, {
    "author": {
      "login": "ptkool"
    },
    "body": "Yes.",
    "commit": "432883117b8d067a821422d68fcfc3a03ca36527",
    "createdAt": "2017-05-18T13:03:44Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{RowFrame, SpecifiedWindowFrame, UnboundedFollowing, UnboundedPreceding, UnspecifiedFrame}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+\n+class TransposeWindowSuite extends PlanTest {\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"CollapseProject\", FixedPoint(100), CollapseProject, RemoveRedundantProject) ::\n+      Batch(\"FlipWindow\", Once, CollapseWindow, TransposeWindow) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.int, 'd.string)\n+\n+  val a = testRelation.output(0)\n+  val b = testRelation.output(1)\n+  val c = testRelation.output(2)\n+  val d = testRelation.output(3)\n+\n+  val partitionSpec1 = Seq(a)\n+  val partitionSpec2 = Seq(a, b)\n+  val partitionSpec3 = Seq(d)\n+\n+  val orderSpec1 = Seq(d.asc)\n+  val orderSpec2 = Seq(d.desc)\n+\n+  test(\"flip two adjacent windows with compatible partitions in multiple selects\") {\n+    val wexpr1 = windowExpr(sum('c), windowSpec(partitionSpec2, Seq.empty, UnspecifiedFrame))\n+    val wexpr2 = windowExpr(sum('c), windowSpec(partitionSpec1, Seq.empty, UnspecifiedFrame))\n+\n+    val query = testRelation\n+      .select('a, 'b, 'c, wexpr1.as('sum_a_2))\n+      .select('a, 'b, 'c, 'sum_a_2, wexpr2.as('sum_a_1))\n+\n+    val optimized = Optimize.execute(query.analyze)\n+\n+    val query2 = testRelation\n+      .select('a, 'b, 'c)\n+      .select('a, 'b, 'c, wexpr2.as('sum_a_1))\n+      .select('a, 'b, 'c, wexpr1.as('sum_a_2), 'sum_a_1)\n+      .select('a, 'b, 'c, 'sum_a_2, 'sum_a_1)\n+\n+    val correctAnswer = Optimize.execute(query2.analyze)\n+\n+    comparePlans(optimized, correctAnswer)\n+  }\n+\n+  test(\"flip two adjacent windows with compatible partitions\") {\n+    val query = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec2, orderSpec2)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, orderSpec1)\n+\n+    val analyzed = query.analyze\n+    val optimized = Optimize.execute(analyzed)\n+\n+    val correctAnswer = testRelation\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, orderSpec1)\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec2, orderSpec2)\n+      .select('a, 'b, 'c, 'd, 'sum_a_2, 'sum_a_1)\n+\n+    comparePlans(optimized, correctAnswer.analyze)\n+  }\n+\n+  test(\"don't flip two adjacent windows with incompatible partitions\") {\n+    val query = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec3, Seq.empty)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, Seq.empty)\n+\n+    val analyzed = query.analyze\n+    val optimized = Optimize.execute(analyzed)\n+\n+    val correctAnswer = testRelation\n+      .window(Seq(sum(c).as('sum_a_2)), partitionSpec3, Seq.empty)\n+      .window(Seq(sum(c).as('sum_a_1)), partitionSpec1, Seq.empty)\n+\n+    comparePlans(optimized, correctAnswer.analyze)"
  }],
  "prId": 17899
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "I am not entirely sure if we need this test.",
    "commit": "432883117b8d067a821422d68fcfc3a03ca36527",
    "createdAt": "2017-05-16T11:38:36Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{RowFrame, SpecifiedWindowFrame, UnboundedFollowing, UnboundedPreceding, UnspecifiedFrame}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+\n+class TransposeWindowSuite extends PlanTest {\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"CollapseProject\", FixedPoint(100), CollapseProject, RemoveRedundantProject) ::\n+      Batch(\"FlipWindow\", Once, CollapseWindow, TransposeWindow) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.int, 'd.string)\n+\n+  val a = testRelation.output(0)\n+  val b = testRelation.output(1)\n+  val c = testRelation.output(2)\n+  val d = testRelation.output(3)\n+\n+  val partitionSpec1 = Seq(a)\n+  val partitionSpec2 = Seq(a, b)\n+  val partitionSpec3 = Seq(d)\n+\n+  val orderSpec1 = Seq(d.asc)\n+  val orderSpec2 = Seq(d.desc)\n+\n+  test(\"flip two adjacent windows with compatible partitions in multiple selects\") {"
  }, {
    "author": {
      "login": "ptkool"
    },
    "body": "Agreed. I'll remove it.",
    "commit": "432883117b8d067a821422d68fcfc3a03ca36527",
    "createdAt": "2017-05-18T13:05:39Z",
    "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions.{RowFrame, SpecifiedWindowFrame, UnboundedFollowing, UnboundedPreceding, UnspecifiedFrame}\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+\n+class TransposeWindowSuite extends PlanTest {\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"CollapseProject\", FixedPoint(100), CollapseProject, RemoveRedundantProject) ::\n+      Batch(\"FlipWindow\", Once, CollapseWindow, TransposeWindow) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.string, 'b.string, 'c.int, 'd.string)\n+\n+  val a = testRelation.output(0)\n+  val b = testRelation.output(1)\n+  val c = testRelation.output(2)\n+  val d = testRelation.output(3)\n+\n+  val partitionSpec1 = Seq(a)\n+  val partitionSpec2 = Seq(a, b)\n+  val partitionSpec3 = Seq(d)\n+\n+  val orderSpec1 = Seq(d.asc)\n+  val orderSpec2 = Seq(d.desc)\n+\n+  test(\"flip two adjacent windows with compatible partitions in multiple selects\") {"
  }],
  "prId": 17899
}]