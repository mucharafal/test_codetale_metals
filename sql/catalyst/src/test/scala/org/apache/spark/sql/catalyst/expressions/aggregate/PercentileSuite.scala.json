[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "To we need to explicitly type this? I thoughtscala boxed automatically.",
    "commit": "88f4f47bae435f8cebe6d3e0ad31b3a77516014b",
    "createdAt": "2017-02-23T09:42:36Z",
    "diffHunk": "@@ -39,44 +38,44 @@ class PercentileSuite extends SparkFunSuite {\n     val agg = new Percentile(BoundReference(0, IntegerType, true), Literal(0.5))\n \n     // Check empty serialize and deserialize\n-    val buffer = new OpenHashMap[Number, Long]()\n+    val buffer = new OpenHashMap[AnyRef, Long]()\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n \n     // Check non-empty buffer serializa and deserialize.\n     data.foreach { key =>\n-      buffer.changeValue(key, 1L, _ + 1L)\n+      buffer.changeValue(new Integer(key), 1L, _ + 1L)",
    "line": 19
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "If this boxing does not exist, it throws an exception below;\r\n```\r\n[error] /Users/maropu/IdeaProjects/spark/spark-master/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/aggregate/Perc\r\nentileSuite.scala:46: the result type of an implicit conversion must be more specific than AnyRef\r\n```",
    "commit": "88f4f47bae435f8cebe6d3e0ad31b3a77516014b",
    "createdAt": "2017-02-23T09:57:32Z",
    "diffHunk": "@@ -39,44 +38,44 @@ class PercentileSuite extends SparkFunSuite {\n     val agg = new Percentile(BoundReference(0, IntegerType, true), Literal(0.5))\n \n     // Check empty serialize and deserialize\n-    val buffer = new OpenHashMap[Number, Long]()\n+    val buffer = new OpenHashMap[AnyRef, Long]()\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n \n     // Check non-empty buffer serializa and deserialize.\n     data.foreach { key =>\n-      buffer.changeValue(key, 1L, _ + 1L)\n+      buffer.changeValue(new Integer(key), 1L, _ + 1L)",
    "line": 19
  }],
  "prId": 17028
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Do we need to type this?",
    "commit": "88f4f47bae435f8cebe6d3e0ad31b3a77516014b",
    "createdAt": "2017-02-23T09:42:49Z",
    "diffHunk": "@@ -39,44 +38,44 @@ class PercentileSuite extends SparkFunSuite {\n     val agg = new Percentile(BoundReference(0, IntegerType, true), Literal(0.5))\n \n     // Check empty serialize and deserialize\n-    val buffer = new OpenHashMap[Number, Long]()\n+    val buffer = new OpenHashMap[AnyRef, Long]()\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n \n     // Check non-empty buffer serializa and deserialize.\n     data.foreach { key =>\n-      buffer.changeValue(key, 1L, _ + 1L)\n+      buffer.changeValue(new Integer(key), 1L, _ + 1L)\n     }\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n   }\n \n   test(\"class Percentile, high level interface, update, merge, eval...\") {\n     val count = 10000\n     val percentages = Seq(0, 0.25, 0.5, 0.75, 1)\n-    val expectedPercentiles = Seq(1, 2500.75, 5000.5, 7500.25, 10000)\n+    val expectedPercentiles = Seq[Double](1, 2500.75, 5000.5, 7500.25, 10000)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Since my Intellij makes an alert on this part, I added this. But, you're right and this is not necessary. I reverted this.",
    "commit": "88f4f47bae435f8cebe6d3e0ad31b3a77516014b",
    "createdAt": "2017-02-23T10:10:25Z",
    "diffHunk": "@@ -39,44 +38,44 @@ class PercentileSuite extends SparkFunSuite {\n     val agg = new Percentile(BoundReference(0, IntegerType, true), Literal(0.5))\n \n     // Check empty serialize and deserialize\n-    val buffer = new OpenHashMap[Number, Long]()\n+    val buffer = new OpenHashMap[AnyRef, Long]()\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n \n     // Check non-empty buffer serializa and deserialize.\n     data.foreach { key =>\n-      buffer.changeValue(key, 1L, _ + 1L)\n+      buffer.changeValue(new Integer(key), 1L, _ + 1L)\n     }\n     assert(compareEquals(agg.deserialize(agg.serialize(buffer)), buffer))\n   }\n \n   test(\"class Percentile, high level interface, update, merge, eval...\") {\n     val count = 10000\n     val percentages = Seq(0, 0.25, 0.5, 0.75, 1)\n-    val expectedPercentiles = Seq(1, 2500.75, 5000.5, 7500.25, 10000)\n+    val expectedPercentiles = Seq[Double](1, 2500.75, 5000.5, 7500.25, 10000)"
  }],
  "prId": 17028
}]