[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Where are you using the wideRow?\n",
    "commit": "a2b240808fc449c919c85ebe2eb840ca131ab8a4",
    "createdAt": "2016-11-07T19:33:20Z",
    "diffHunk": "@@ -124,6 +125,22 @@ class HashExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n         new StructType().add(\"array\", arrayOfString).add(\"map\", mapOfString))\n       .add(\"structOfUDT\", structOfUDT))\n \n+  test(\"SPARK-18207: Compute hash for a lot of expressions\") {\n+    val N = 1000\n+    val wideRow = new GenericInternalRow(",
    "line": 16
  }],
  "prId": 15745
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "I would prefer to compare with non-codegen result, i.e., murmur3HashPlan.eval(wideRow), instead of a hard-coded result.\n",
    "commit": "a2b240808fc449c919c85ebe2eb840ca131ab8a4",
    "createdAt": "2016-11-08T01:08:38Z",
    "diffHunk": "@@ -124,6 +126,24 @@ class HashExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n         new StructType().add(\"array\", arrayOfString).add(\"map\", mapOfString))\n       .add(\"structOfUDT\", structOfUDT))\n \n+  test(\"SPARK-18207: Compute hash for a lot of expressions\") {\n+    val N = 1000\n+    val wideRow = new GenericInternalRow(\n+      Seq.tabulate(N)(i => UTF8String.fromString(i.toString)).toArray[Any])\n+    val schema = StructType((1 to N).map(i => StructField(\"\", StringType)))\n+\n+    val exprs = schema.fields.zipWithIndex.map { case (f, i) =>\n+      BoundReference(i, f.dataType, true)\n+    }\n+    val murmur3HashExpr = Murmur3Hash(exprs, 42)\n+    val murmur3HashPlan = GenerateMutableProjection.generate(Seq(murmur3HashExpr))\n+    assert(murmur3HashPlan(wideRow).getInt(0) == 58499324)"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "good idea. done\n",
    "commit": "a2b240808fc449c919c85ebe2eb840ca131ab8a4",
    "createdAt": "2016-11-08T02:25:58Z",
    "diffHunk": "@@ -124,6 +126,24 @@ class HashExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n         new StructType().add(\"array\", arrayOfString).add(\"map\", mapOfString))\n       .add(\"structOfUDT\", structOfUDT))\n \n+  test(\"SPARK-18207: Compute hash for a lot of expressions\") {\n+    val N = 1000\n+    val wideRow = new GenericInternalRow(\n+      Seq.tabulate(N)(i => UTF8String.fromString(i.toString)).toArray[Any])\n+    val schema = StructType((1 to N).map(i => StructField(\"\", StringType)))\n+\n+    val exprs = schema.fields.zipWithIndex.map { case (f, i) =>\n+      BoundReference(i, f.dataType, true)\n+    }\n+    val murmur3HashExpr = Murmur3Hash(exprs, 42)\n+    val murmur3HashPlan = GenerateMutableProjection.generate(Seq(murmur3HashExpr))\n+    assert(murmur3HashPlan(wideRow).getInt(0) == 58499324)"
  }],
  "prId": 15745
}]