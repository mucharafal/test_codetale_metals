[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Can you use the existing UDT for testing this pr instead of defining the new UDT?",
    "commit": "b5f43f7f43b43d18b35376b08969b810904292ae",
    "createdAt": "2019-11-25T13:45:15Z",
    "diffHunk": "@@ -58,4 +63,22 @@ object TestUDT {\n \n     override def equals(other: Any): Boolean = other.isInstanceOf[MyDenseVectorUDT]\n   }\n+\n+  private[sql] class MyXMLGregorianCalendarUDT extends UserDefinedType[XMLGregorianCalendar] {",
    "line": 20
  }, {
    "author": {
      "login": "Fokko"
    },
    "body": "No, this isn't possible since we need to override the `jvalue` to the native DataType type. Otherwise, it will be caught by: https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/types/StructType.scala#L592",
    "commit": "b5f43f7f43b43d18b35376b08969b810904292ae",
    "createdAt": "2019-11-25T14:26:14Z",
    "diffHunk": "@@ -58,4 +63,22 @@ object TestUDT {\n \n     override def equals(other: Any): Boolean = other.isInstanceOf[MyDenseVectorUDT]\n   }\n+\n+  private[sql] class MyXMLGregorianCalendarUDT extends UserDefinedType[XMLGregorianCalendar] {",
    "line": 20
  }],
  "prId": 26644
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Why did you change this? ISTM this method is not expected to be override by users. We need `final` for `UserDefinedType.jsonValue`? cc: @dongjoon-hyun @HyukjinKwon \r\n https://github.com/apache/spark/blob/2a28c73d81dd12fa39eb52d3eb343e651123a51d/sql/catalyst/src/main/scala/org/apache/spark/sql/types/UserDefinedType.scala#L61",
    "commit": "b5f43f7f43b43d18b35376b08969b810904292ae",
    "createdAt": "2019-11-26T00:11:46Z",
    "diffHunk": "@@ -58,4 +63,22 @@ object TestUDT {\n \n     override def equals(other: Any): Boolean = other.isInstanceOf[MyDenseVectorUDT]\n   }\n+\n+  private[sql] class MyXMLGregorianCalendarUDT extends UserDefinedType[XMLGregorianCalendar] {\n+    override def sqlType: DataType = TimestampType\n+\n+    override def serialize(obj: XMLGregorianCalendar): Any =\n+      obj.toGregorianCalendar.getTimeInMillis * 1000\n+\n+    override def deserialize(datum: Any): XMLGregorianCalendar = {\n+      val calendar = new GregorianCalendar\n+      calendar.setTimeInMillis(datum.asInstanceOf[Long])\n+      DatatypeFactory.newInstance.newXMLGregorianCalendar(calendar)\n+    }\n+\n+    override def userClass: Class[XMLGregorianCalendar] = classOf[XMLGregorianCalendar]\n+\n+    // By setting this to a timestamp, we lose the information about the udt\n+    override private[sql] def jsonValue: JValue = \"timestamp\"",
    "line": 35
  }, {
    "author": {
      "login": "Fokko"
    },
    "body": "With the normal UDT `jsonValue`, we would get:\r\n```\r\n  override private[sql] def jsonValue: JValue = {\r\n    (\"type\" -> \"udt\") ~\r\n      (\"class\" -> this.getClass.getName) ~\r\n      (\"pyClass\" -> pyUDT) ~\r\n      (\"sqlType\" -> sqlType.jsonValue)\r\n```\r\nWhich will write the type as the UDT. If you try to read the column later on in another job where the UDTRegistration hasn't been done will give an error. Therefore we would like to write the XMLGregorianCalendar as a normal timestamp. However, when we append the table, we want to be able to merge the `XMLGregorianCalendar` UDT into the timestamp. Without the added rule this wouldn't be possible. Hope this helps.",
    "commit": "b5f43f7f43b43d18b35376b08969b810904292ae",
    "createdAt": "2019-11-26T11:01:34Z",
    "diffHunk": "@@ -58,4 +63,22 @@ object TestUDT {\n \n     override def equals(other: Any): Boolean = other.isInstanceOf[MyDenseVectorUDT]\n   }\n+\n+  private[sql] class MyXMLGregorianCalendarUDT extends UserDefinedType[XMLGregorianCalendar] {\n+    override def sqlType: DataType = TimestampType\n+\n+    override def serialize(obj: XMLGregorianCalendar): Any =\n+      obj.toGregorianCalendar.getTimeInMillis * 1000\n+\n+    override def deserialize(datum: Any): XMLGregorianCalendar = {\n+      val calendar = new GregorianCalendar\n+      calendar.setTimeInMillis(datum.asInstanceOf[Long])\n+      DatatypeFactory.newInstance.newXMLGregorianCalendar(calendar)\n+    }\n+\n+    override def userClass: Class[XMLGregorianCalendar] = classOf[XMLGregorianCalendar]\n+\n+    // By setting this to a timestamp, we lose the information about the udt\n+    override private[sql] def jsonValue: JValue = \"timestamp\"",
    "line": 35
  }],
  "prId": 26644
}]