[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "also add a test for nondeterministic case please\n",
    "commit": "3959d57258ed03bf6e9b845569d420c40b70e5c4",
    "createdAt": "2016-06-02T00:01:43Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class ReorderAssociativeOperatorSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"ReorderAssociativeOperator\", Once,\n+        ReorderAssociativeOperator) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n+\n+  test(\"Reorder associative operators\") {",
    "line": 37
  }],
  "prId": 12850
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "I already added non-deterministic case here.\n",
    "commit": "3959d57258ed03bf6e9b845569d420c40b70e5c4",
    "createdAt": "2016-06-02T00:05:48Z",
    "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+\n+class ReorderAssociativeOperatorSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"ReorderAssociativeOperator\", Once,\n+        ReorderAssociativeOperator) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n+\n+  test(\"Reorder associative operators\") {\n+    val originalQuery =\n+      testRelation\n+        .select(\n+          (Literal(3) + ((Literal(1) + 'a) + 2)) + 4,\n+          'b * 1 * 2 * 3 * 4,\n+          'a + 1 + 'b + 2 + 'c + 3,\n+          Rand(0) * 1 * 2 * 3 * 4)\n+"
  }],
  "prId": 12850
}]