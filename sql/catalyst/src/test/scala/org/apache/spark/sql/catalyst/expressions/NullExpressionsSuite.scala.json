[{
  "comments": [{
    "author": {
      "login": "henryr"
    },
    "body": "Revert this?",
    "commit": "d60aa21d04bbcd9dd17a687b3da9730be2daa37c",
    "createdAt": "2018-06-01T21:31:43Z",
    "diffHunk": "@@ -24,7 +24,7 @@ import org.apache.spark.sql.catalyst.expressions.objects.AssertNotNull\n import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, Project}\n import org.apache.spark.sql.types._\n \n-class NullExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n+  class NullExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {"
  }],
  "prId": 21482
}, {
  "comments": [{
    "author": {
      "login": "henryr"
    },
    "body": "check NaN as well?",
    "commit": "d60aa21d04bbcd9dd17a687b3da9730be2daa37c",
    "createdAt": "2018-06-01T21:32:24Z",
    "diffHunk": "@@ -56,6 +56,16 @@ class NullExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     assert(ex.contains(\"Null value appeared in non-nullable field\"))\n   }\n \n+  test(\"IsInf\") {\n+    checkEvaluation(IsInf(Literal(Double.PositiveInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Double.NegativeInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Float.PositiveInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Float.NegativeInfinity)), true)\n+    checkEvaluation(IsInf(Literal.create(null, DoubleType)), false)\n+    checkEvaluation(IsInf(Literal(Float.MaxValue)), false)\n+    checkEvaluation(IsInf(Literal(5.5f)), false)",
    "line": 11
  }, {
    "author": {
      "login": "NihalHarish"
    },
    "body": "Added the checks in my later commits",
    "commit": "d60aa21d04bbcd9dd17a687b3da9730be2daa37c",
    "createdAt": "2018-06-08T16:55:52Z",
    "diffHunk": "@@ -56,6 +56,16 @@ class NullExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper {\n     assert(ex.contains(\"Null value appeared in non-nullable field\"))\n   }\n \n+  test(\"IsInf\") {\n+    checkEvaluation(IsInf(Literal(Double.PositiveInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Double.NegativeInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Float.PositiveInfinity)), true)\n+    checkEvaluation(IsInf(Literal(Float.NegativeInfinity)), true)\n+    checkEvaluation(IsInf(Literal.create(null, DoubleType)), false)\n+    checkEvaluation(IsInf(Literal(Float.MaxValue)), false)\n+    checkEvaluation(IsInf(Literal(5.5f)), false)",
    "line": 11
  }],
  "prId": 21482
}]