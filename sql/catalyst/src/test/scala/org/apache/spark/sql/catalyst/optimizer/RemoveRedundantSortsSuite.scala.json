[{
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "If we don't use ordinal number, we can remove these.",
    "commit": "6c5f04cb989736ced5d7c8695a0740e512df36c6",
    "createdAt": "2018-04-10T11:45:10Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans._\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.internal.SQLConf.{CASE_SENSITIVE, ORDER_BY_ORDINAL}\n+\n+class RemoveRedundantSortsSuite extends PlanTest {\n+  override val conf = new SQLConf().copy(CASE_SENSITIVE -> true, ORDER_BY_ORDINAL -> false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)"
  }],
  "prId": 20560
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "just use `unnecessaryReordered.analyze`?",
    "commit": "6c5f04cb989736ced5d7c8695a0740e512df36c6",
    "createdAt": "2018-04-10T11:45:55Z",
    "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.analysis.{Analyzer, EmptyFunctionRegistry}\n+import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.plans._\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.internal.SQLConf.{CASE_SENSITIVE, ORDER_BY_ORDINAL}\n+\n+class RemoveRedundantSortsSuite extends PlanTest {\n+  override val conf = new SQLConf().copy(CASE_SENSITIVE -> true, ORDER_BY_ORDINAL -> false)\n+  val catalog = new SessionCatalog(new InMemoryCatalog, EmptyFunctionRegistry, conf)\n+  val analyzer = new Analyzer(catalog, conf)\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"Remove Redundant Sorts\", Once,\n+        RemoveRedundantSorts) ::\n+      Batch(\"Collapse Project\", Once,\n+        CollapseProject) :: Nil\n+  }\n+\n+  val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n+\n+  test(\"remove redundant order by\") {\n+    val orderedPlan = testRelation.select('a, 'b).orderBy('a.asc, 'b.desc_nullsFirst)\n+    val unnecessaryReordered = orderedPlan.select('a).orderBy('a.asc, 'b.desc_nullsFirst)\n+    val optimized = Optimize.execute(analyzer.execute(unnecessaryReordered))"
  }],
  "prId": 20560
}]