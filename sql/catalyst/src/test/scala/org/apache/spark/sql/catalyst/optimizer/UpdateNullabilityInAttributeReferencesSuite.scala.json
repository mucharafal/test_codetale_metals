[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "nit: Can we use `val` by using a different variable at line 47?",
    "commit": "65ee6f7afa1f3e3a68baf4e827fe3c54c5de7467",
    "createdAt": "2017-07-10T05:53:06Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+\n+class UpdateNullabilityInAttributeReferencesSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"InferAndPushDownFilters\", FixedPoint(100),\n+        InferFiltersFromConstraints) ::\n+      Batch(\"UpdateAttributeReferences\", Once,\n+        UpdateNullabilityInAttributeReferences) :: Nil\n+  }\n+\n+  test(\"update nullability when inferred constraints applied\")  {\n+    val testRelation = LocalRelation('a.int, 'b.int)\n+    try {\n+      SQLConf.get.setConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED, true)\n+      val logicalPlan = testRelation.where('a =!= 2).select('a).analyze\n+      var expectedSchema = new StructType().add(\"a\", \"INT\", nullable = true)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "@gatorsmile suggested we better do so for multiple use in assertion.",
    "commit": "65ee6f7afa1f3e3a68baf4e827fe3c54c5de7467",
    "createdAt": "2017-07-10T06:42:21Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+\n+class UpdateNullabilityInAttributeReferencesSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"InferAndPushDownFilters\", FixedPoint(100),\n+        InferFiltersFromConstraints) ::\n+      Batch(\"UpdateAttributeReferences\", Once,\n+        UpdateNullabilityInAttributeReferences) :: Nil\n+  }\n+\n+  test(\"update nullability when inferred constraints applied\")  {\n+    val testRelation = LocalRelation('a.int, 'b.int)\n+    try {\n+      SQLConf.get.setConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED, true)\n+      val logicalPlan = testRelation.where('a =!= 2).select('a).analyze\n+      var expectedSchema = new StructType().add(\"a\", \"INT\", nullable = true)"
  }],
  "prId": 18576
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: should we use `PlanTest.withSQLConf` here?",
    "commit": "65ee6f7afa1f3e3a68baf4e827fe3c54c5de7467",
    "createdAt": "2017-07-10T06:24:21Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+\n+class UpdateNullabilityInAttributeReferencesSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"InferAndPushDownFilters\", FixedPoint(100),\n+        InferFiltersFromConstraints) ::\n+      Batch(\"UpdateAttributeReferences\", Once,\n+        UpdateNullabilityInAttributeReferences) :: Nil\n+  }\n+\n+  test(\"update nullability when inferred constraints applied\")  {\n+    val testRelation = LocalRelation('a.int, 'b.int)\n+    try {\n+      SQLConf.get.setConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED, true)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "I'll update. Thanks!",
    "commit": "65ee6f7afa1f3e3a68baf4e827fe3c54c5de7467",
    "createdAt": "2017-07-10T06:34:09Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.dsl.expressions._\n+import org.apache.spark.sql.catalyst.dsl.plans._\n+import org.apache.spark.sql.catalyst.plans.PlanTest\n+import org.apache.spark.sql.catalyst.plans.logical.{LocalRelation, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.RuleExecutor\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.StructType\n+\n+\n+class UpdateNullabilityInAttributeReferencesSuite extends PlanTest {\n+\n+  object Optimize extends RuleExecutor[LogicalPlan] {\n+    val batches =\n+      Batch(\"InferAndPushDownFilters\", FixedPoint(100),\n+        InferFiltersFromConstraints) ::\n+      Batch(\"UpdateAttributeReferences\", Once,\n+        UpdateNullabilityInAttributeReferences) :: Nil\n+  }\n+\n+  test(\"update nullability when inferred constraints applied\")  {\n+    val testRelation = LocalRelation('a.int, 'b.int)\n+    try {\n+      SQLConf.get.setConf(SQLConf.CONSTRAINT_PROPAGATION_ENABLED, true)"
  }],
  "prId": 18576
}]