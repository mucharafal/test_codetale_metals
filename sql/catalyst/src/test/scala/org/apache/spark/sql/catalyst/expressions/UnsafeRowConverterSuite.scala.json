[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we can also clean this up\r\n```\r\ndef testBothCodegenAndInterpreted(name: String, f: => Unit): Unit = {\r\n  for (fallbackMode <- Seq(CodegenObjectFactoryMode.CODEGEN_ONLY, ...)) {\r\n    test(s\"$fallbackMode: $name\") {\r\n      withSQLConf ...\r\n    }    \r\n  }\r\n}\r\n```",
    "commit": "5527595b83b9cd394ba6d52e82711b777259f569",
    "createdAt": "2018-05-17T08:13:52Z",
    "diffHunk": "@@ -24,21 +24,27 @@ import org.scalatest.Matchers\n \n import org.apache.spark.SparkFunSuite\n import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.plans.PlanTestBase\n import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.sql.internal.SQLConf\n import org.apache.spark.sql.types.{IntegerType, LongType, _}\n import org.apache.spark.unsafe.array.ByteArrayMethods\n import org.apache.spark.unsafe.types.UTF8String\n \n-class UnsafeRowConverterSuite extends SparkFunSuite with Matchers {\n+class UnsafeRowConverterSuite extends SparkFunSuite with Matchers with PlanTestBase {\n \n   private def roundedSize(size: Int) = ByteArrayMethods.roundNumberOfBytesToNearestWord(size)\n \n   private def testWithFactory("
  }],
  "prId": 21106
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "5527595b83b9cd394ba6d52e82711b777259f569",
    "createdAt": "2018-05-17T10:41:50Z",
    "diffHunk": "@@ -24,25 +24,29 @@ import org.scalatest.Matchers\n \n import org.apache.spark.SparkFunSuite\n import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.plans.PlanTestBase\n import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.sql.internal.SQLConf\n import org.apache.spark.sql.types.{IntegerType, LongType, _}\n import org.apache.spark.unsafe.array.ByteArrayMethods\n import org.apache.spark.unsafe.types.UTF8String\n \n-class UnsafeRowConverterSuite extends SparkFunSuite with Matchers {\n+class UnsafeRowConverterSuite extends SparkFunSuite with Matchers with PlanTestBase {\n \n   private def roundedSize(size: Int) = ByteArrayMethods.roundNumberOfBytesToNearestWord(size)\n \n-  private def testWithFactory(\n-    name: String)(\n-    f: UnsafeProjectionCreator => Unit): Unit = {\n-    test(name) {\n-      f(UnsafeProjection)\n-      f(InterpretedUnsafeProjection)\n+  private def testBothCodegenAndInterpreted(name: String)(f: => Unit): Unit = {\n+    for (fallbackMode <- Seq(\"CODEGEN_ONLY\", \"NO_CODEGEN\")) {"
  }],
  "prId": 21106
}, {
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "nit: `s\"$name with $fallbackMode\"`",
    "commit": "5527595b83b9cd394ba6d52e82711b777259f569",
    "createdAt": "2018-05-22T08:39:13Z",
    "diffHunk": "@@ -24,25 +24,30 @@ import org.scalatest.Matchers\n \n import org.apache.spark.SparkFunSuite\n import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.plans.PlanTestBase\n import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.sql.internal.SQLConf\n import org.apache.spark.sql.types.{IntegerType, LongType, _}\n import org.apache.spark.unsafe.array.ByteArrayMethods\n import org.apache.spark.unsafe.types.UTF8String\n \n-class UnsafeRowConverterSuite extends SparkFunSuite with Matchers {\n+class UnsafeRowConverterSuite extends SparkFunSuite with Matchers with PlanTestBase {\n \n   private def roundedSize(size: Int) = ByteArrayMethods.roundNumberOfBytesToNearestWord(size)\n \n-  private def testWithFactory(\n-    name: String)(\n-    f: UnsafeProjectionCreator => Unit): Unit = {\n-    test(name) {\n-      f(UnsafeProjection)\n-      f(InterpretedUnsafeProjection)\n+  private def testBothCodegenAndInterpreted(name: String)(f: => Unit): Unit = {\n+    val modes = Seq(CodegenObjectFactoryMode.CODEGEN_ONLY, CodegenObjectFactoryMode.NO_CODEGEN)\n+    for (fallbackMode <- modes) {\n+      test(name + \" with \" + fallbackMode) {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ok.",
    "commit": "5527595b83b9cd394ba6d52e82711b777259f569",
    "createdAt": "2018-05-22T09:50:25Z",
    "diffHunk": "@@ -24,25 +24,30 @@ import org.scalatest.Matchers\n \n import org.apache.spark.SparkFunSuite\n import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.plans.PlanTestBase\n import org.apache.spark.sql.catalyst.util._\n+import org.apache.spark.sql.internal.SQLConf\n import org.apache.spark.sql.types.{IntegerType, LongType, _}\n import org.apache.spark.unsafe.array.ByteArrayMethods\n import org.apache.spark.unsafe.types.UTF8String\n \n-class UnsafeRowConverterSuite extends SparkFunSuite with Matchers {\n+class UnsafeRowConverterSuite extends SparkFunSuite with Matchers with PlanTestBase {\n \n   private def roundedSize(size: Int) = ByteArrayMethods.roundNumberOfBytesToNearestWord(size)\n \n-  private def testWithFactory(\n-    name: String)(\n-    f: UnsafeProjectionCreator => Unit): Unit = {\n-    test(name) {\n-      f(UnsafeProjection)\n-      f(InterpretedUnsafeProjection)\n+  private def testBothCodegenAndInterpreted(name: String)(f: => Unit): Unit = {\n+    val modes = Seq(CodegenObjectFactoryMode.CODEGEN_ONLY, CodegenObjectFactoryMode.NO_CODEGEN)\n+    for (fallbackMode <- modes) {\n+      test(name + \" with \" + fallbackMode) {"
  }],
  "prId": 21106
}]