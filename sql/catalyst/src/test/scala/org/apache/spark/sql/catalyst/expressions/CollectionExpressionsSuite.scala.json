[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`Seq.empty[Integer]`",
    "commit": "3f5d03b617ceff2e6f02735f73372976674855ef",
    "createdAt": "2018-04-12T05:56:15Z",
    "diffHunk": "@@ -105,4 +105,18 @@ class CollectionExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper\n     checkEvaluation(ArrayContains(a3, Literal(\"\")), null)\n     checkEvaluation(ArrayContains(a3, Literal.create(null, StringType)), null)\n   }\n+\n+  test(\"Array Unique\") {\n+    val a0 = Literal.create(Seq(2, 1, 2, 3, 4, 4, 5), ArrayType(IntegerType))\n+    val a1 = Literal.create(Seq[Integer](), ArrayType(IntegerType))"
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "@HyukjinKwon Thanks for your comments. Will fix the problems. Sorry for the late reply. ",
    "commit": "3f5d03b617ceff2e6f02735f73372976674855ef",
    "createdAt": "2018-04-25T01:43:14Z",
    "diffHunk": "@@ -105,4 +105,18 @@ class CollectionExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper\n     checkEvaluation(ArrayContains(a3, Literal(\"\")), null)\n     checkEvaluation(ArrayContains(a3, Literal.create(null, StringType)), null)\n   }\n+\n+  test(\"Array Unique\") {\n+    val a0 = Literal.create(Seq(2, 1, 2, 3, 4, 4, 5), ArrayType(IntegerType))\n+    val a1 = Literal.create(Seq[Integer](), ArrayType(IntegerType))"
  }],
  "prId": 21050
}, {
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "Could you please add test cases with complex types (e.g. `Array[Binary]` or others)? See #21361.\r\ncc @ueshin ",
    "commit": "3f5d03b617ceff2e6f02735f73372976674855ef",
    "createdAt": "2018-05-18T19:48:37Z",
    "diffHunk": "@@ -552,4 +552,26 @@ class CollectionExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper\n     checkEvaluation(ArrayRepeat(strArray, Literal(2)), Seq(Seq(\"hi\", \"hola\"), Seq(\"hi\", \"hola\")))\n     checkEvaluation(ArrayRepeat(Literal(\"hi\"), Literal(null, IntegerType)), null)\n   }\n+\n+  test(\"Array Distinct\") {\n+    val a0 = Literal.create(Seq(2, 1, 2, 3, 4, 4, 5), ArrayType(IntegerType))\n+    val a1 = Literal.create(Seq.empty[Integer], ArrayType(IntegerType))\n+    val a2 = Literal.create(Seq(\"b\", \"a\", \"a\", \"c\", \"b\"), ArrayType(StringType))\n+    val a3 = Literal.create(Seq(\"b\", null, \"a\", null, \"a\", null), ArrayType(StringType))\n+    val a4 = Literal.create(Seq(null, null, null), ArrayType(NullType))\n+    val a5 = Literal.create(Seq(true, false, false, true), ArrayType(BooleanType))\n+    val a6 = Literal.create(Seq(1.123, 0.1234, 1.121, 1.123, 1.1230, 1.121, 0.1234),\n+      ArrayType(DoubleType))\n+    val a7 = Literal.create(Seq(1.123f, 0.1234f, 1.121f, 1.123f, 1.1230f, 1.121f, 0.1234f),\n+      ArrayType(FloatType))\n+\n+    checkEvaluation(new ArrayDistinct(a0), Seq(2, 1, 3, 4, 5))\n+    checkEvaluation(new ArrayDistinct(a1), Seq.empty[Integer])\n+    checkEvaluation(new ArrayDistinct(a2), Seq(\"b\", \"a\", \"c\"))\n+    checkEvaluation(new ArrayDistinct(a3), Seq(\"b\", null, \"a\"))\n+    checkEvaluation(new ArrayDistinct(a4), Seq(null))\n+    checkEvaluation(new ArrayDistinct(a5), Seq(true, false))\n+    checkEvaluation(new ArrayDistinct(a6), Seq(1.123, 0.1234, 1.121))\n+    checkEvaluation(new ArrayDistinct(a7), Seq(1.123f, 0.1234f, 1.121f))",
    "line": 24
  }, {
    "author": {
      "login": "huaxingao"
    },
    "body": "Will do. Thanks! ",
    "commit": "3f5d03b617ceff2e6f02735f73372976674855ef",
    "createdAt": "2018-05-18T22:22:13Z",
    "diffHunk": "@@ -552,4 +552,26 @@ class CollectionExpressionsSuite extends SparkFunSuite with ExpressionEvalHelper\n     checkEvaluation(ArrayRepeat(strArray, Literal(2)), Seq(Seq(\"hi\", \"hola\"), Seq(\"hi\", \"hola\")))\n     checkEvaluation(ArrayRepeat(Literal(\"hi\"), Literal(null, IntegerType)), null)\n   }\n+\n+  test(\"Array Distinct\") {\n+    val a0 = Literal.create(Seq(2, 1, 2, 3, 4, 4, 5), ArrayType(IntegerType))\n+    val a1 = Literal.create(Seq.empty[Integer], ArrayType(IntegerType))\n+    val a2 = Literal.create(Seq(\"b\", \"a\", \"a\", \"c\", \"b\"), ArrayType(StringType))\n+    val a3 = Literal.create(Seq(\"b\", null, \"a\", null, \"a\", null), ArrayType(StringType))\n+    val a4 = Literal.create(Seq(null, null, null), ArrayType(NullType))\n+    val a5 = Literal.create(Seq(true, false, false, true), ArrayType(BooleanType))\n+    val a6 = Literal.create(Seq(1.123, 0.1234, 1.121, 1.123, 1.1230, 1.121, 0.1234),\n+      ArrayType(DoubleType))\n+    val a7 = Literal.create(Seq(1.123f, 0.1234f, 1.121f, 1.123f, 1.1230f, 1.121f, 0.1234f),\n+      ArrayType(FloatType))\n+\n+    checkEvaluation(new ArrayDistinct(a0), Seq(2, 1, 3, 4, 5))\n+    checkEvaluation(new ArrayDistinct(a1), Seq.empty[Integer])\n+    checkEvaluation(new ArrayDistinct(a2), Seq(\"b\", \"a\", \"c\"))\n+    checkEvaluation(new ArrayDistinct(a3), Seq(\"b\", null, \"a\"))\n+    checkEvaluation(new ArrayDistinct(a4), Seq(null))\n+    checkEvaluation(new ArrayDistinct(a5), Seq(true, false))\n+    checkEvaluation(new ArrayDistinct(a6), Seq(1.123, 0.1234, 1.121))\n+    checkEvaluation(new ArrayDistinct(a7), Seq(1.123f, 0.1234f, 1.121f))",
    "line": 24
  }],
  "prId": 21050
}]