[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think it's not kind of push-down test, how about we create a new test suite for `Union`?\n",
    "commit": "c18381e53c41666acc3149072a0c56a62fa556fe",
    "createdAt": "2016-01-13T18:34:58Z",
    "diffHunk": "@@ -30,42 +30,67 @@ class SetOperationPushDownSuite extends PlanTest {\n       Batch(\"Subqueries\", Once,\n         EliminateSubQueries) ::\n       Batch(\"Union Pushdown\", Once,\n+        CombineUnions,\n         SetOperationPushDown,\n         SimplifyFilters) :: Nil\n   }\n \n   val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n   val testRelation2 = LocalRelation('d.int, 'e.int, 'f.int)\n-  val testUnion = Union(testRelation, testRelation2)\n+  val testRelation3 = LocalRelation('g.int, 'h.int, 'i.int)\n+  val testUnion = Union(testRelation :: testRelation2 :: testRelation3 :: Nil)\n   val testIntersect = Intersect(testRelation, testRelation2)\n   val testExcept = Except(testRelation, testRelation2)\n \n-  test(\"union/intersect/except: filter to each side\") {\n-    val unionQuery = testUnion.where('a === 1)\n+  test(\"union: combine unions into one unions\") {",
    "line": 26
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "oh, maybe just rename this test suite to `SetOperationSuite`\n",
    "commit": "c18381e53c41666acc3149072a0c56a62fa556fe",
    "createdAt": "2016-01-13T18:36:21Z",
    "diffHunk": "@@ -30,42 +30,67 @@ class SetOperationPushDownSuite extends PlanTest {\n       Batch(\"Subqueries\", Once,\n         EliminateSubQueries) ::\n       Batch(\"Union Pushdown\", Once,\n+        CombineUnions,\n         SetOperationPushDown,\n         SimplifyFilters) :: Nil\n   }\n \n   val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n   val testRelation2 = LocalRelation('d.int, 'e.int, 'f.int)\n-  val testUnion = Union(testRelation, testRelation2)\n+  val testRelation3 = LocalRelation('g.int, 'h.int, 'i.int)\n+  val testUnion = Union(testRelation :: testRelation2 :: testRelation3 :: Nil)\n   val testIntersect = Intersect(testRelation, testRelation2)\n   val testExcept = Except(testRelation, testRelation2)\n \n-  test(\"union/intersect/except: filter to each side\") {\n-    val unionQuery = testUnion.where('a === 1)\n+  test(\"union: combine unions into one unions\") {",
    "line": 26
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "ok, sure, will rename it. \n",
    "commit": "c18381e53c41666acc3149072a0c56a62fa556fe",
    "createdAt": "2016-01-13T18:39:10Z",
    "diffHunk": "@@ -30,42 +30,67 @@ class SetOperationPushDownSuite extends PlanTest {\n       Batch(\"Subqueries\", Once,\n         EliminateSubQueries) ::\n       Batch(\"Union Pushdown\", Once,\n+        CombineUnions,\n         SetOperationPushDown,\n         SimplifyFilters) :: Nil\n   }\n \n   val testRelation = LocalRelation('a.int, 'b.int, 'c.int)\n   val testRelation2 = LocalRelation('d.int, 'e.int, 'f.int)\n-  val testUnion = Union(testRelation, testRelation2)\n+  val testRelation3 = LocalRelation('g.int, 'h.int, 'i.int)\n+  val testUnion = Union(testRelation :: testRelation2 :: testRelation3 :: Nil)\n   val testIntersect = Intersect(testRelation, testRelation2)\n   val testExcept = Except(testRelation, testRelation2)\n \n-  test(\"union/intersect/except: filter to each side\") {\n-    val unionQuery = testUnion.where('a === 1)\n+  test(\"union: combine unions into one unions\") {",
    "line": 26
  }],
  "prId": 10577
}]