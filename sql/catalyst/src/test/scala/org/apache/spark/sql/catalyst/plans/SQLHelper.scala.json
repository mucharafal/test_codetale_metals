[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we set a threshold like 3? otherwise we may hit dead loop for real failures.",
    "commit": "44aeda8aeb298f721a5732c77f96ce4530508d74",
    "createdAt": "2019-11-04T07:33:01Z",
    "diffHunk": "@@ -61,4 +66,21 @@ trait SQLHelper {\n     path.delete()\n     try f(path) finally Utils.deleteRecursively(path)\n   }\n+\n+\n+  def testSpecialDatetimeValues[T](test: ZoneId => T): Unit = {\n+    DateTimeTestUtils.outstandingTimezonesIds.foreach { timeZone =>\n+      withSQLConf(SQLConf.SESSION_LOCAL_TIMEZONE.key -> timeZone) {\n+        val zoneId = getZoneId(timeZone)\n+        // The test can fail around midnight if it gets the reference value\n+        // before midnight but tested code resolves special value after midnight.\n+        // Retry can guarantee that both values were taken on the same day.\n+        try {\n+          test(zoneId)\n+        } catch {\n+          case NonFatal(_) => test(zoneId)",
    "line": 30
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "Maybe I don't understand how such loop could happen but this is not recursive code. `test` can be invoke maximum 2 times.",
    "commit": "44aeda8aeb298f721a5732c77f96ce4530508d74",
    "createdAt": "2019-11-04T07:48:15Z",
    "diffHunk": "@@ -61,4 +66,21 @@ trait SQLHelper {\n     path.delete()\n     try f(path) finally Utils.deleteRecursively(path)\n   }\n+\n+\n+  def testSpecialDatetimeValues[T](test: ZoneId => T): Unit = {\n+    DateTimeTestUtils.outstandingTimezonesIds.foreach { timeZone =>\n+      withSQLConf(SQLConf.SESSION_LOCAL_TIMEZONE.key -> timeZone) {\n+        val zoneId = getZoneId(timeZone)\n+        // The test can fail around midnight if it gets the reference value\n+        // before midnight but tested code resolves special value after midnight.\n+        // Retry can guarantee that both values were taken on the same day.\n+        try {\n+          test(zoneId)\n+        } catch {\n+          case NonFatal(_) => test(zoneId)",
    "line": 30
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah I mis-looked. It's not recursive. LGTM",
    "commit": "44aeda8aeb298f721a5732c77f96ce4530508d74",
    "createdAt": "2019-11-04T07:52:56Z",
    "diffHunk": "@@ -61,4 +66,21 @@ trait SQLHelper {\n     path.delete()\n     try f(path) finally Utils.deleteRecursively(path)\n   }\n+\n+\n+  def testSpecialDatetimeValues[T](test: ZoneId => T): Unit = {\n+    DateTimeTestUtils.outstandingTimezonesIds.foreach { timeZone =>\n+      withSQLConf(SQLConf.SESSION_LOCAL_TIMEZONE.key -> timeZone) {\n+        val zoneId = getZoneId(timeZone)\n+        // The test can fail around midnight if it gets the reference value\n+        // before midnight but tested code resolves special value after midnight.\n+        // Retry can guarantee that both values were taken on the same day.\n+        try {\n+          test(zoneId)\n+        } catch {\n+          case NonFatal(_) => test(zoneId)",
    "line": 30
  }],
  "prId": 26380
}]