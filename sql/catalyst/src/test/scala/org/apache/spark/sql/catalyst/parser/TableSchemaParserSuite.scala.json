[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `new StructType().add...`",
    "commit": "b18ae84c1f0485d929e58d217c1881d037721881",
    "createdAt": "2017-03-06T07:34:30Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.catalyst.parser\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class TableSchemaParserSuite extends SparkFunSuite {\n+\n+  def parse(sql: String): DataType = CatalystSqlParser.parseTableSchema(sql)\n+\n+  def checkTableSchema(tableSchemaString: String, expectedDataType: DataType): Unit = {\n+    test(s\"parse ${tableSchemaString.replace(\"\\n\", \"\")}\") {\n+      assert(parse(tableSchemaString) === expectedDataType)\n+    }\n+  }\n+\n+  checkTableSchema(\"a int\", (new StructType).add(\"a\", \"int\"))"
  }],
  "prId": 17171
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "I am not sure we should check this. This is an ANTLR error message.",
    "commit": "b18ae84c1f0485d929e58d217c1881d037721881",
    "createdAt": "2017-03-06T08:49:37Z",
    "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.catalyst.parser\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class TableSchemaParserSuite extends SparkFunSuite {\n+\n+  def parse(sql: String): DataType = CatalystSqlParser.parseTableSchema(sql)\n+\n+  def checkTableSchema(tableSchemaString: String, expectedDataType: DataType): Unit = {\n+    test(s\"parse ${tableSchemaString.replace(\"\\n\", \"\")}\") {\n+      assert(parse(tableSchemaString) === expectedDataType)\n+    }\n+  }\n+\n+  checkTableSchema(\"a int\", (new StructType).add(\"a\", \"int\"))\n+  checkTableSchema(\"A int\", (new StructType).add(\"A\", \"int\"))\n+  checkTableSchema(\"a INT\", (new StructType).add(\"a\", \"int\"))\n+  checkTableSchema(\"`!@#$%.^&*()` string\", (new StructType).add(\"!@#$%.^&*()\", \"string\"))\n+  checkTableSchema(\"a int, b long\", (new StructType).add(\"a\", \"int\").add(\"b\", \"long\"))\n+  checkTableSchema(\"a STRUCT<intType: int, ts:timestamp>\",\n+    StructType(\n+      StructField(\"a\", StructType(\n+        StructField(\"intType\", IntegerType) ::\n+        StructField(\"ts\", TimestampType) :: Nil)) :: Nil))\n+\n+  checkTableSchema(\n+    \"a int comment 'test'\",\n+    (new StructType).add(\"a\", \"int\", nullable = true, \"test\"))\n+\n+  test(\"complex hive type\") {\n+    val tableSchemaString =\n+      \"\"\"\n+        |complexStructCol struct<\n+        |struct:struct<deciMal:DECimal, anotherDecimal:decimAL(5,2)>,\n+        |MAP:Map<timestamp, varchar(10)>,\n+        |arrAy:Array<double>,\n+        |anotherArray:Array<char(9)>>\n+      \"\"\".stripMargin.replace(\"\\n\", \"\")\n+\n+    val builder = new MetadataBuilder\n+    builder.putString(HIVE_TYPE_STRING,\n+      \"struct<struct:struct<deciMal:decimal(10,0),anotherDecimal:decimal(5,2)>,\" +\n+        \"MAP:map<timestamp,varchar(10)>,arrAy:array<double>,anotherArray:array<char(9)>>\")\n+\n+    val expectedDataType =\n+      StructType(\n+        StructField(\"complexStructCol\", StructType(\n+          StructField(\"struct\",\n+            StructType(\n+              StructField(\"deciMal\", DecimalType.USER_DEFAULT) ::\n+                StructField(\"anotherDecimal\", DecimalType(5, 2)) :: Nil)) ::\n+            StructField(\"MAP\", MapType(TimestampType, StringType)) ::\n+            StructField(\"arrAy\", ArrayType(DoubleType)) ::\n+            StructField(\"anotherArray\", ArrayType(StringType)) :: Nil),\n+          nullable = true,\n+          builder.build()) :: Nil)\n+\n+    assert(parse(tableSchemaString) === expectedDataType)\n+  }\n+\n+  test(\"illegal col types\") {\n+    val e = intercept[ParseException] {\n+      CatalystSqlParser.parseTableSchema(\"a INT b long\")\n+    }.getMessage\n+    assert(e.contains(\"mismatched input 'b' expecting {<EOF>, '(', ',', 'COMMENT'}\"))"
  }],
  "prId": 17171
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "seems `tableSchemaString` will never contains \\n?",
    "commit": "b18ae84c1f0485d929e58d217c1881d037721881",
    "createdAt": "2017-03-15T12:44:02Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.catalyst.parser\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class TableSchemaParserSuite extends SparkFunSuite {\n+\n+  def parse(sql: String): StructType = CatalystSqlParser.parseTableSchema(sql)\n+\n+  def checkTableSchema(tableSchemaString: String, expectedDataType: DataType): Unit = {\n+    test(s\"parse ${tableSchemaString.replace(\"\\n\", \"\")}\") {"
  }],
  "prId": 17171
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'd like to name it `assertError`",
    "commit": "b18ae84c1f0485d929e58d217c1881d037721881",
    "createdAt": "2017-03-15T12:45:04Z",
    "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.spark.sql.catalyst.parser\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.types._\n+\n+class TableSchemaParserSuite extends SparkFunSuite {\n+\n+  def parse(sql: String): StructType = CatalystSqlParser.parseTableSchema(sql)\n+\n+  def checkTableSchema(tableSchemaString: String, expectedDataType: DataType): Unit = {\n+    test(s\"parse ${tableSchemaString.replace(\"\\n\", \"\")}\") {\n+      assert(parse(tableSchemaString) === expectedDataType)\n+    }\n+  }\n+\n+  def intercept(sql: String): Unit ="
  }],
  "prId": 17171
}]