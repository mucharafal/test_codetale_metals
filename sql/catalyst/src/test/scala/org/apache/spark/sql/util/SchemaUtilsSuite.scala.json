[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Could you split it to multiple smaller test cases with the reasonable names, just like the comment you added below?",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-16T06:51:51Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication\") {"
  }],
  "prId": 17758
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "-> `var msg`. Use `msg` instead in the following cases.",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-16T21:13:41Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    val msg1 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"a INT, b INT, a INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }.getMessage\n+    assert(msg1.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+    val msg2 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"a\" :: \"b\" :: \"a\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    }.getMessage\n+    assert(msg2.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+\n+    // Check no exception thrown\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"a INT, b INT, c INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"a\" :: \"b\" :: \"c\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"Aa INT, b INT, aA INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"Aa\" :: \"b\" :: \"aA\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {\n+    val msg3 = intercept[AnalysisException] {"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-17T01:34:10Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    val msg1 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"a INT, b INT, a INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }.getMessage\n+    assert(msg1.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+    val msg2 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"a\" :: \"b\" :: \"a\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    }.getMessage\n+    assert(msg2.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+\n+    // Check no exception thrown\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"a INT, b INT, c INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"a\" :: \"b\" :: \"c\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"Aa INT, b INT, aA INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"Aa\" :: \"b\" :: \"aA\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {\n+    val msg3 = intercept[AnalysisException] {"
  }],
  "prId": 17758
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Add a case for three duplicate columns. ",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-16T21:14:31Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    val msg1 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"a INT, b INT, a INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }.getMessage\n+    assert(msg1.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+    val msg2 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"a\" :: \"b\" :: \"a\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    }.getMessage\n+    assert(msg2.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+\n+    // Check no exception thrown\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"a INT, b INT, c INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"a\" :: \"b\" :: \"c\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"Aa INT, b INT, aA INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"Aa\" :: \"b\" :: \"aA\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {\n+    val msg3 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"Aa INT, b INT, Aa INT\"), \"SchemaUtilsSuite\",\n+        caseSensitiveAnalysis = false)\n+    }.getMessage\n+    assert(msg3.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `Aa`;\"\"\"))\n+    val msg4 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"Aa\" :: \"b\" :: \"Aa\" :: Nil, \"SchemaUtilsSuite\", caseInsensitiveResolution)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-17T01:34:38Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    val msg1 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"a INT, b INT, a INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }.getMessage\n+    assert(msg1.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+    val msg2 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"a\" :: \"b\" :: \"a\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    }.getMessage\n+    assert(msg2.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+\n+    // Check no exception thrown\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"a INT, b INT, c INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"a\" :: \"b\" :: \"c\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"Aa INT, b INT, aA INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"Aa\" :: \"b\" :: \"aA\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {\n+    val msg3 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"Aa INT, b INT, Aa INT\"), \"SchemaUtilsSuite\",\n+        caseSensitiveAnalysis = false)\n+    }.getMessage\n+    assert(msg3.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `Aa`;\"\"\"))\n+    val msg4 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"Aa\" :: \"b\" :: \"Aa\" :: Nil, \"SchemaUtilsSuite\", caseInsensitiveResolution)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Fixed. Also, I added more tests here.",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-17T02:26:09Z",
    "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    val msg1 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"a INT, b INT, a INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }.getMessage\n+    assert(msg1.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+    val msg2 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"a\" :: \"b\" :: \"a\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    }.getMessage\n+    assert(msg2.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `a`;\"\"\"))\n+\n+    // Check no exception thrown\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"a INT, b INT, c INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"a\" :: \"b\" :: \"c\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+    SchemaUtils.checkSchemaColumnNameDuplication(\n+      StructType.fromDDL(\"Aa INT, b INT, aA INT\"), \"SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    SchemaUtils.checkColumnNameDuplication(\n+      \"Aa\" :: \"b\" :: \"aA\" :: Nil, \"SchemaUtilsSuite\", caseSensitiveResolution)\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {\n+    val msg3 = intercept[AnalysisException] {\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        StructType.fromDDL(\"Aa INT, b INT, Aa INT\"), \"SchemaUtilsSuite\",\n+        caseSensitiveAnalysis = false)\n+    }.getMessage\n+    assert(msg3.contains(\"\"\"Found duplicate column(s) in SchemaUtilsSuite: `Aa`;\"\"\"))\n+    val msg4 = intercept[AnalysisException] {\n+      SchemaUtils.checkColumnNameDuplication(\n+        \"Aa\" :: \"b\" :: \"Aa\" :: Nil, \"SchemaUtilsSuite\", caseInsensitiveResolution)"
  }],
  "prId": 17758
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "can we merge this 2 tests? e.g.\r\n```\r\nSeq(true, false).foreach { caseSensitive =>\r\n  test(\"Check column name duplication in ${if (caseSensitive) ... else ...}\")\r\n}\r\n```",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-26T07:18:24Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    def checkCaseSensitiveExceptionCases(schemaStr: String, duplicatedColumns: String): Unit = {\n+      val expectedErrorMsg = s\"Found duplicate column(s) in SchemaUtilsSuite: $duplicatedColumns\"\n+      val schema = StructType.fromDDL(schemaStr)\n+      var msg = intercept[AnalysisException] {\n+        SchemaUtils.checkSchemaColumnNameDuplication(\n+          schema, \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+      msg = intercept[AnalysisException] {\n+        SchemaUtils.checkColumnNameDuplication(\n+          schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveResolution)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+      msg = intercept[AnalysisException] {\n+        SchemaUtils.checkColumnNameDuplication(\n+          schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+    }\n+\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT\", \"`a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT, a INT\", \"`a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT, b INT\", \"`b`, `a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, c INT, b INT, a INT, b INT, c INT\", \"`b`, `a`, `c`\")\n+\n+    // Check no exception thrown\n+    def checkCaseSensitiveNoExceptionCases(schemaStr: String): Unit = {\n+      val schema = StructType.fromDDL(schemaStr)\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        schema, \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      SchemaUtils.checkColumnNameDuplication(\n+        schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveResolution)\n+      SchemaUtils.checkColumnNameDuplication(\n+        schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }\n+\n+    checkCaseSensitiveNoExceptionCases(\"a INT, b INT, c INT\")\n+    checkCaseSensitiveNoExceptionCases(\"Aa INT, b INT, aA INT\")\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok, I'll try",
    "commit": "5ed2c0d68be372304bc8a46046d28d5b7aadcb97",
    "createdAt": "2017-06-26T07:22:49Z",
    "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.util\n+\n+import org.apache.spark.SparkFunSuite\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.analysis._\n+import org.apache.spark.sql.types.StructType\n+\n+class SchemaUtilsSuite extends SparkFunSuite {\n+\n+  test(\"Check column name duplication in case-sensitive cases\") {\n+    def checkCaseSensitiveExceptionCases(schemaStr: String, duplicatedColumns: String): Unit = {\n+      val expectedErrorMsg = s\"Found duplicate column(s) in SchemaUtilsSuite: $duplicatedColumns\"\n+      val schema = StructType.fromDDL(schemaStr)\n+      var msg = intercept[AnalysisException] {\n+        SchemaUtils.checkSchemaColumnNameDuplication(\n+          schema, \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+      msg = intercept[AnalysisException] {\n+        SchemaUtils.checkColumnNameDuplication(\n+          schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveResolution)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+      msg = intercept[AnalysisException] {\n+        SchemaUtils.checkColumnNameDuplication(\n+          schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      }.getMessage\n+      assert(msg.contains(expectedErrorMsg))\n+    }\n+\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT\", \"`a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT, a INT\", \"`a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, b INT, a INT, b INT\", \"`b`, `a`\")\n+    checkCaseSensitiveExceptionCases(\"a INT, c INT, b INT, a INT, b INT, c INT\", \"`b`, `a`, `c`\")\n+\n+    // Check no exception thrown\n+    def checkCaseSensitiveNoExceptionCases(schemaStr: String): Unit = {\n+      val schema = StructType.fromDDL(schemaStr)\n+      SchemaUtils.checkSchemaColumnNameDuplication(\n+        schema, \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+      SchemaUtils.checkColumnNameDuplication(\n+        schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveResolution)\n+      SchemaUtils.checkColumnNameDuplication(\n+        schema.map(_.name), \"in SchemaUtilsSuite\", caseSensitiveAnalysis = true)\n+    }\n+\n+    checkCaseSensitiveNoExceptionCases(\"a INT, b INT, c INT\")\n+    checkCaseSensitiveNoExceptionCases(\"Aa INT, b INT, aA INT\")\n+  }\n+\n+  test(\"Check column name duplication in case-insensitive cases\") {"
  }],
  "prId": 17758
}]