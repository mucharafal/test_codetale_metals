[{
  "comments": [{
    "author": {
      "login": "bdrillard"
    },
    "body": "This object here exists just as an easy unit test for the `InitializeObject` problem I describe above, it doesn't necessarily need to stay as a test resource.",
    "commit": "4b07b6639ef08f0ba7560c7027c1dbdae8e2f090",
    "createdAt": "2018-01-03T20:28:43Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ *\n+ */\n+public class GenericBean {\n+  private int field1;\n+  private String field2;\n+\n+  public GenericBean() {}\n+\n+  public GenericBean(int field1, String field2) {\n+    this.field1 = field1;\n+    this.field2 = field2;\n+  }\n+\n+  public int getField1() {\n+    return field1;\n+  }\n+\n+  public void setField1(int field1) {\n+    this.field1 = field1;\n+  }\n+\n+  public String getField2() {\n+    return field2;\n+  }\n+\n+  public void setField2(String field2) {\n+    this.field2 = field2;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    GenericBean that = (GenericBean) o;\n+\n+    if (field1 != that.field1) {\n+      return false;\n+    }\n+    return field2 != null ? field2.equals(that.field2) : that.field2 == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = field1;\n+    result = 31 * result + (field2 != null ? field2.hashCode() : 0);\n+    return result;\n+  }\n+}",
    "line": 56
  }],
  "prId": 20085
}]