[{
  "comments": [{
    "author": {
      "login": "nsyca"
    },
    "body": "This is a new rewrite to convert the outer joins below LeftSemi/LeftAnti to an inner join (or left or right outer join in the case of the original full outer join). EXISTS/IN/NOT EXISTS subqueries are null-filtering predicates if the correlated predicates in the subquery are null-filtering.",
    "commit": "b923bd5b2c79a84ada834a32b756ad0da80f12c6",
    "createdAt": "2017-04-03T20:59:05Z",
    "diffHunk": "@@ -474,9 +478,42 @@ case class EliminateOuterJoin(conf: CatalystConf) extends Rule[LogicalPlan] with\n     }\n   }\n \n+  private def buildNewJoinType(upperJoin: Join, lowerJoin: Join, otherTableOutput: AttributeSet):\n+    JoinType = {\n+    val conditions = upperJoin.constraints\n+    // Find the predicates reference only on the other table.\n+    val localConditions = conditions.filter(_.references.subsetOf(otherTableOutput))\n+    // Find the predicates reference either the left table or the join predicates\n+    // between the left table and the other table.\n+    val leftConditions = conditions.filter(_.references.\n+      subsetOf(lowerJoin.left.outputSet ++ otherTableOutput)).diff(localConditions)\n+    // Find the predicates reference either the right table or the join predicates\n+    // between the right table and the other table.\n+    val rightConditions = conditions.filter(_.references.\n+      subsetOf(lowerJoin.right.outputSet ++ otherTableOutput)).diff(localConditions)\n+\n+    val leftHasNonNullPredicate = leftConditions.exists(canFilterOutNull)\n+    val rightHasNonNullPredicate = rightConditions.exists(canFilterOutNull)\n+\n+    lowerJoin.joinType match {\n+      case RightOuter if leftHasNonNullPredicate => Inner\n+      case LeftOuter if rightHasNonNullPredicate => Inner\n+      case FullOuter if leftHasNonNullPredicate && rightHasNonNullPredicate => Inner\n+      case FullOuter if leftHasNonNullPredicate => LeftOuter\n+      case FullOuter if rightHasNonNullPredicate => RightOuter\n+      case o => o\n+    }\n+  }\n+\n   def apply(plan: LogicalPlan): LogicalPlan = plan transform {\n     case f @ Filter(condition, j @ Join(_, _, RightOuter | LeftOuter | FullOuter, _)) =>\n       val newJoinType = buildNewJoinType(f, j)\n       if (j.joinType == newJoinType) f else Filter(condition, j.copy(joinType = newJoinType))\n+    case j @ Join(child @ Join(_, _, RightOuter | LeftOuter | FullOuter, _),\n+      subquery, LeftSemiOrAnti(joinType), joinCond) =>\n+      val newJoinType = buildNewJoinType(j, child, subquery.outputSet)\n+      if (newJoinType == child.joinType) j else {\n+        Join(child.copy(joinType = newJoinType), subquery, joinType, joinCond)\n+      }",
    "line": 53
  }],
  "prId": 17520
}]