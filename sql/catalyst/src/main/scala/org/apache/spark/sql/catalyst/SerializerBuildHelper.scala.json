[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Seems these helper methods don't reduce code and just add one more wrapper around calling `Invoke`. Are they needed?",
    "commit": "50c2ddce1e527b0d46d5ac1fbc2de28575d4059e",
    "createdAt": "2019-02-28T05:29:55Z",
    "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst\n+\n+import org.apache.spark.sql.catalyst.expressions.{CreateNamedStruct, Expression, IsNull, UnsafeArrayData}\n+import org.apache.spark.sql.catalyst.expressions.objects._\n+import org.apache.spark.sql.catalyst.util.{DateTimeUtils, GenericArrayData}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+object SerializerBuildHelper {\n+\n+  def createSerializerForBoolean(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"booleanValue\", BooleanType)\n+  }\n+\n+  def createSerializerForByte(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"byteValue\", ByteType)\n+  }\n+\n+  def createSerializerForShort(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"shortValue\", ShortType)\n+  }\n+\n+  def createSerializerForInteger(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"intValue\", IntegerType)\n+  }\n+\n+  def createSerializerForLong(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"longValue\", LongType)\n+  }\n+\n+  def createSerializerForFloat(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"floatValue\", FloatType)\n+  }\n+\n+  def createSerializerForDouble(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"doubleValue\", DoubleType)\n+  }",
    "line": 54
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "This is not for reducing code. This is for consistency. These methods ensure we are consistently serialize / deserialize things between ScalaReflection and JavaTypeInference if the type is same.",
    "commit": "50c2ddce1e527b0d46d5ac1fbc2de28575d4059e",
    "createdAt": "2019-02-28T06:03:27Z",
    "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst\n+\n+import org.apache.spark.sql.catalyst.expressions.{CreateNamedStruct, Expression, IsNull, UnsafeArrayData}\n+import org.apache.spark.sql.catalyst.expressions.objects._\n+import org.apache.spark.sql.catalyst.util.{DateTimeUtils, GenericArrayData}\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+object SerializerBuildHelper {\n+\n+  def createSerializerForBoolean(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"booleanValue\", BooleanType)\n+  }\n+\n+  def createSerializerForByte(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"byteValue\", ByteType)\n+  }\n+\n+  def createSerializerForShort(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"shortValue\", ShortType)\n+  }\n+\n+  def createSerializerForInteger(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"intValue\", IntegerType)\n+  }\n+\n+  def createSerializerForLong(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"longValue\", LongType)\n+  }\n+\n+  def createSerializerForFloat(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"floatValue\", FloatType)\n+  }\n+\n+  def createSerializerForDouble(inputObject: Expression): Expression = {\n+    Invoke(inputObject, \"doubleValue\", DoubleType)\n+  }",
    "line": 54
  }],
  "prId": 23908
}]