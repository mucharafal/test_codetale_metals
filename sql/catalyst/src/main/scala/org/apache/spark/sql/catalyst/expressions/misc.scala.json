[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "This is not right, should be `Seq(BinaryType)`\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T03:05:21Z",
    "diffHunk": "@@ -47,4 +48,69 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType, StringType)"
  }, {
    "author": {
      "login": "tarekbecker"
    },
    "body": "I am not sure. I already implemented the sha/sha1 (#6963). @Davies mentioned that `Seq(BinaryType, StringType)` is the way to go, because it should support `BinaryType` and `StringType`. \n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T04:11:04Z",
    "diffHunk": "@@ -47,4 +48,69 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType, StringType)"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "@tarekauel Sorry, I was wrong, didn't figure out the difference between `checkInputDataTypes` and `expectedChildTypes`  of `ExpectsInputTypes`.\n\nIn order to get better error message, we should use `checkInputDataTypes`.\n\n`expectedChildTypes` is used to widen the types we support.\n\nFor this case, we could use `Seq(BinaryType)` as `expectedChildTypes`, which means it will also support `StringType`, because `StringType` could be casted to BinaryType (which is cheap).\n\nIn `eval` and `genCode`, you can expect that child.dataType is BinaryType.\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T06:08:48Z",
    "diffHunk": "@@ -47,4 +48,69 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType, StringType)"
  }],
  "prId": 6970
}, {
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "We don't need to check the data type, we assume the input data would be `Array[Byte]`\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T03:05:59Z",
    "diffHunk": "@@ -47,4 +48,69 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType, StringType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      value match {"
  }],
  "prId": 6970
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Could you add codegen support?\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T16:16:31Z",
    "diffHunk": "@@ -47,4 +48,58 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      UTF8String.fromString(DigestUtils.shaHex(value.asInstanceOf[Array[Byte]]))\n+    }\n+  }\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c =>\n+      \"org.apache.spark.unsafe.types.UTF8String.fromString(\" +\n+        s\"org.apache.commons.codec.digest.DigestUtils.shaHex($c))\"\n+    )\n+  }\n+\n+}\n+\n+/**\n+ * A function that computes a cyclic redundancy check value and returns it as a bigint\n+ * For input of type [[BinaryType]]\n+ */\n+case class Crc32(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = LongType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      val checksum = new CRC32\n+      checksum.update(value.asInstanceOf[Array[Byte]], 0, value.asInstanceOf[Array[Byte]].length)\n+      checksum.getValue\n+    }\n+  }",
    "line": 67
  }, {
    "author": {
      "login": "qiansl127"
    },
    "body": "@davies Done!\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-26T08:38:55Z",
    "diffHunk": "@@ -47,4 +48,58 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      UTF8String.fromString(DigestUtils.shaHex(value.asInstanceOf[Array[Byte]]))\n+    }\n+  }\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c =>\n+      \"org.apache.spark.unsafe.types.UTF8String.fromString(\" +\n+        s\"org.apache.commons.codec.digest.DigestUtils.shaHex($c))\"\n+    )\n+  }\n+\n+}\n+\n+/**\n+ * A function that computes a cyclic redundancy check value and returns it as a bigint\n+ * For input of type [[BinaryType]]\n+ */\n+case class Crc32(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = LongType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      val checksum = new CRC32\n+      checksum.update(value.asInstanceOf[Array[Byte]], 0, value.asInstanceOf[Array[Byte]].length)\n+      checksum.getValue\n+    }\n+  }",
    "line": 67
  }, {
    "author": {
      "login": "sujkh85"
    },
    "body": "## NAVER - http://www.naver.com/\n\nsujkh@naver.com 님께 보내신 메일 <Re: [spark] [SPARK-8235][SPARK-8236][SQL] misc functions: sha1/sha, crc32 (#6970)> 이 다음과 같은 이유로 전송 실패했습니다.\n\n---\n\n받는 사람이 회원님의 메일을 수신차단 하였습니다. \n\n---\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-26T08:39:38Z",
    "diffHunk": "@@ -47,4 +48,58 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      UTF8String.fromString(DigestUtils.shaHex(value.asInstanceOf[Array[Byte]]))\n+    }\n+  }\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c =>\n+      \"org.apache.spark.unsafe.types.UTF8String.fromString(\" +\n+        s\"org.apache.commons.codec.digest.DigestUtils.shaHex($c))\"\n+    )\n+  }\n+\n+}\n+\n+/**\n+ * A function that computes a cyclic redundancy check value and returns it as a bigint\n+ * For input of type [[BinaryType]]\n+ */\n+case class Crc32(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = LongType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      val checksum = new CRC32\n+      checksum.update(value.asInstanceOf[Array[Byte]], 0, value.asInstanceOf[Array[Byte]].length)\n+      checksum.getValue\n+    }\n+  }",
    "line": 67
  }],
  "prId": 6970
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Sha1 may be better\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-24T16:18:17Z",
    "diffHunk": "@@ -47,4 +48,58 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha(child: Expression)"
  }],
  "prId": 6970
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "nit: We could use `long` here, since `dataType` is LongType, this could make the Java template easy to understand.\n",
    "commit": "271cb52c988da922dfdb7acf5138e68c9e78861c",
    "createdAt": "2015-06-26T15:20:22Z",
    "diffHunk": "@@ -47,4 +48,73 @@ case class Md5(child: Expression)\n       \"org.apache.spark.unsafe.types.UTF8String.fromString\" +\n         s\"(org.apache.commons.codec.digest.DigestUtils.md5Hex($c))\")\n   }\n+\n+}\n+\n+/**\n+ * A function that calculates an SHA-1 digest and returns it as a hex string\n+ * For input of type [[BinaryType]]\n+ */\n+case class Sha1(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = StringType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      UTF8String.fromString(DigestUtils.shaHex(value.asInstanceOf[Array[Byte]]))\n+    }\n+  }\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c =>\n+      \"org.apache.spark.unsafe.types.UTF8String.fromString(\" +\n+        s\"org.apache.commons.codec.digest.DigestUtils.shaHex($c))\"\n+    )\n+  }\n+\n+}\n+\n+/**\n+ * A function that computes a cyclic redundancy check value and returns it as a bigint\n+ * For input of type [[BinaryType]]\n+ */\n+case class Crc32(child: Expression)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def dataType: DataType = LongType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(BinaryType)\n+\n+  override def eval(input: InternalRow): Any = {\n+    val value = child.eval(input)\n+    if (value == null) {\n+      null\n+    } else {\n+      val checksum = new CRC32\n+      checksum.update(value.asInstanceOf[Array[Byte]], 0, value.asInstanceOf[Array[Byte]].length)\n+      checksum.getValue\n+    }\n+  }\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val value = child.gen(ctx)\n+    val CRC32 = \"java.util.zip.CRC32\"\n+    s\"\"\"\n+      ${value.code}\n+      boolean ${ev.isNull} = ${value.isNull};\n+      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};"
  }],
  "prId": 6970
}]