[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we override `toString` here, so that it's invisible to end users when running EXPLAIN?",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T04:58:10Z",
    "diffHunk": "@@ -21,15 +21,25 @@ import org.apache.spark.sql.catalyst.InternalRow\n import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode, FalseLiteral}\n import org.apache.spark.sql.types.DataType\n \n-case class KnownNotNull(child: Expression) extends UnaryExpression {\n-  override def nullable: Boolean = false\n+trait TaggingExpression extends UnaryExpression {\n+  override def nullable: Boolean = child.nullable\n   override def dataType: DataType = child.dataType\n \n   override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n-    child.genCode(ctx).copy(isNull = FalseLiteral)\n+    child.genCode(ctx)\n   }\n \n   override def eval(input: InternalRow): Any = {\n     child.eval(input)\n   }\n }\n+\n+case class KnownNotNull(child: Expression) extends TaggingExpression {\n+  override def nullable: Boolean = false\n+\n+  override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n+    child.genCode(ctx).copy(isNull = FalseLiteral)\n+  }\n+}\n+\n+case class KnownFloatingPointNormalized(child: Expression) extends TaggingExpression",
    "line": 27
  }, {
    "author": {
      "login": "yeshengm"
    },
    "body": "I think it's already handled in `Expression::toString`?",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T06:02:47Z",
    "diffHunk": "@@ -21,15 +21,25 @@ import org.apache.spark.sql.catalyst.InternalRow\n import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode, FalseLiteral}\n import org.apache.spark.sql.types.DataType\n \n-case class KnownNotNull(child: Expression) extends UnaryExpression {\n-  override def nullable: Boolean = false\n+trait TaggingExpression extends UnaryExpression {\n+  override def nullable: Boolean = child.nullable\n   override def dataType: DataType = child.dataType\n \n   override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n-    child.genCode(ctx).copy(isNull = FalseLiteral)\n+    child.genCode(ctx)\n   }\n \n   override def eval(input: InternalRow): Any = {\n     child.eval(input)\n   }\n }\n+\n+case class KnownNotNull(child: Expression) extends TaggingExpression {\n+  override def nullable: Boolean = false\n+\n+  override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n+    child.genCode(ctx).copy(isNull = FalseLiteral)\n+  }\n+}\n+\n+case class KnownFloatingPointNormalized(child: Expression) extends TaggingExpression",
    "line": 27
  }, {
    "author": {
      "login": "rednaxelafx"
    },
    "body": "@cloud-fan should it be invisible though? I'd rather leave a trace of the marker in the plan, but we could make it less verbose by making it something like adding a prefix to the child instead of the regular tostring, e.g. print\r\n`normalizing-transform(...)`\r\ninstead of \r\n`knownfloatingpointnormalized(transform(...))`\r\n\r\nWDYT?",
    "commit": "f255c8ed5f22fa10acdf12994867303596ee696e",
    "createdAt": "2019-07-09T22:29:23Z",
    "diffHunk": "@@ -21,15 +21,25 @@ import org.apache.spark.sql.catalyst.InternalRow\n import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode, FalseLiteral}\n import org.apache.spark.sql.types.DataType\n \n-case class KnownNotNull(child: Expression) extends UnaryExpression {\n-  override def nullable: Boolean = false\n+trait TaggingExpression extends UnaryExpression {\n+  override def nullable: Boolean = child.nullable\n   override def dataType: DataType = child.dataType\n \n   override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n-    child.genCode(ctx).copy(isNull = FalseLiteral)\n+    child.genCode(ctx)\n   }\n \n   override def eval(input: InternalRow): Any = {\n     child.eval(input)\n   }\n }\n+\n+case class KnownNotNull(child: Expression) extends TaggingExpression {\n+  override def nullable: Boolean = false\n+\n+  override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n+    child.genCode(ctx).copy(isNull = FalseLiteral)\n+  }\n+}\n+\n+case class KnownFloatingPointNormalized(child: Expression) extends TaggingExpression",
    "line": 27
  }],
  "prId": 25080
}]