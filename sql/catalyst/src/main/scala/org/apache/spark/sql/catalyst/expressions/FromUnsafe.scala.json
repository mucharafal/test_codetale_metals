[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "This line probably never be executed.\nhttps://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/Projection.scala#L159\n",
    "commit": "c13d1e362109d16cea2d6181f6dbf24c9097a7c3",
    "createdAt": "2015-08-07T06:08:47Z",
    "diffHunk": "@@ -52,6 +53,8 @@ case class FromUnsafe(child: Expression) extends UnaryExpression\n       }\n       new GenericArrayData(result)\n \n+    case StringType => value.asInstanceOf[UTF8String].clone()",
    "line": 12
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "For top level `UTF8String` in `UnsafeRow` field, yes, won't execute.\nBut for inner `UTF8String` inside array/map/struct, will execute, as we call this `convert` method recursively.\n",
    "commit": "c13d1e362109d16cea2d6181f6dbf24c9097a7c3",
    "createdAt": "2015-08-07T06:13:27Z",
    "diffHunk": "@@ -52,6 +53,8 @@ case class FromUnsafe(child: Expression) extends UnaryExpression\n       }\n       new GenericArrayData(result)\n \n+    case StringType => value.asInstanceOf[UTF8String].clone()",
    "line": 12
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Yes, I know, I assume we need to handle the top data type in `StringType` also, otherwise, it still will cause confusing if people call the `FromUnsafe` to get the `StringType` of data.\n\nI mean we'd better add the `StringType` support in https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/Projection.scala#L159\n",
    "commit": "c13d1e362109d16cea2d6181f6dbf24c9097a7c3",
    "createdAt": "2015-08-07T06:59:32Z",
    "diffHunk": "@@ -52,6 +53,8 @@ case class FromUnsafe(child: Expression) extends UnaryExpression\n       }\n       new GenericArrayData(result)\n \n+    case StringType => value.asInstanceOf[UTF8String].clone()",
    "line": 12
  }],
  "prId": 7990
}]