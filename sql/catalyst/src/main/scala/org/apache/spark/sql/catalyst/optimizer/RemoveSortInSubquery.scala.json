[{
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "Should the existing RemoveRedundantSorts handle this as well ? The reason i ask is, i don't see any thing subquery specific in the new rule ?",
    "commit": "4eccd2ab965919f91abeedefae574b1f9b3fbaf5",
    "createdAt": "2019-10-14T06:17:17Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{NamedExpression, PredicateHelper}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{AggregateExpression, OrderIrrelevantAggs}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+/**\n+ * [[Sort]] without [[Limit]] in subquery is useless. For example,\n+ *\n+ * {{{\n+ *   SELECT * FROM\n+ *    (SELECT f1 FROM tbl1 ORDER BY f2) temp1\n+ *   JOIN\n+ *    (SELECT f3 FROM tbl2) temp2\n+ *   ON temp1.f1 = temp2.f3\n+ * }}}\n+ *\n+ * is equal to\n+ *\n+ * {{{\n+ *  SELECT * FROM\n+ *   (SELECT f1 FROM tbl1) temp1\n+ *  JOIN\n+ *   (SELECT f3 FROM tbl2) temp2\n+ *  ON temp1.f1 = temp2.f3\"\n+ * }}}\n+ *\n+ * This rule try to remove this kind of [[Sort]] operator.\n+ */\n+object RemoveSortInSubquery extends Rule[LogicalPlan] with PredicateHelper {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "+1 for merging the 2 rules. We can call the merged rule `EliminateSorts`, as not only redundant sorts are removed.",
    "commit": "4eccd2ab965919f91abeedefae574b1f9b3fbaf5",
    "createdAt": "2019-10-14T14:48:48Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{NamedExpression, PredicateHelper}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.{AggregateExpression, OrderIrrelevantAggs}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+/**\n+ * [[Sort]] without [[Limit]] in subquery is useless. For example,\n+ *\n+ * {{{\n+ *   SELECT * FROM\n+ *    (SELECT f1 FROM tbl1 ORDER BY f2) temp1\n+ *   JOIN\n+ *    (SELECT f3 FROM tbl2) temp2\n+ *   ON temp1.f1 = temp2.f3\n+ * }}}\n+ *\n+ * is equal to\n+ *\n+ * {{{\n+ *  SELECT * FROM\n+ *   (SELECT f1 FROM tbl1) temp1\n+ *  JOIN\n+ *   (SELECT f3 FROM tbl2) temp2\n+ *  ON temp1.f1 = temp2.f3\"\n+ * }}}\n+ *\n+ * This rule try to remove this kind of [[Sort]] operator.\n+ */\n+object RemoveSortInSubquery extends Rule[LogicalPlan] with PredicateHelper {"
  }],
  "prId": 26011
}]