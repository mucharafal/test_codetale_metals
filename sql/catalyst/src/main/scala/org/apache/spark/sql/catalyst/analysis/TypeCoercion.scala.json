[{
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "nit: `.flatMap { listDataType =>` , and remove the `)` in line 457",
    "commit": "2db7cf0479e259b3de72c2bc534bf9eb4acd1273",
    "createdAt": "2017-11-04T07:23:35Z",
    "diffHunk": "@@ -451,7 +451,10 @@ object TypeCoercion {\n         }\n \n       case i @ In(a, b) if b.exists(_.dataType != a.dataType) =>\n-        findWiderCommonType(i.children.map(_.dataType)) match {\n+        findWiderCommonType(b.map(_.dataType)).flatMap(listDataType => {"
  }],
  "prId": 19635
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "What is the reason we need to call `findWiderTypeForTwo `?",
    "commit": "2db7cf0479e259b3de72c2bc534bf9eb4acd1273",
    "createdAt": "2017-11-04T23:10:56Z",
    "diffHunk": "@@ -451,7 +451,10 @@ object TypeCoercion {\n         }\n \n       case i @ In(a, b) if b.exists(_.dataType != a.dataType) =>\n-        findWiderCommonType(i.children.map(_.dataType)) match {\n+        findWiderCommonType(b.map(_.dataType)).flatMap { listDataType =>\n+          findCommonTypeForBinaryComparison(listDataType, a.dataType)\n+            .orElse(findWiderTypeForTwo(listDataType, a.dataType))",
    "line": 16
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "before this PR, we were calling always `findWiderCommonType` and this was applied to all the elements of the list and the value. Here, I am calling `findWiderTypeForTwo` if  `findCommonTypeForBinaryComparison` fails to have the same previous behavior in those cases.",
    "commit": "2db7cf0479e259b3de72c2bc534bf9eb4acd1273",
    "createdAt": "2017-11-05T09:56:23Z",
    "diffHunk": "@@ -451,7 +451,10 @@ object TypeCoercion {\n         }\n \n       case i @ In(a, b) if b.exists(_.dataType != a.dataType) =>\n-        findWiderCommonType(i.children.map(_.dataType)) match {\n+        findWiderCommonType(b.map(_.dataType)).flatMap { listDataType =>\n+          findCommonTypeForBinaryComparison(listDataType, a.dataType)\n+            .orElse(findWiderTypeForTwo(listDataType, a.dataType))",
    "line": 16
  }],
  "prId": 19635
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Why we make this change?",
    "commit": "2db7cf0479e259b3de72c2bc534bf9eb4acd1273",
    "createdAt": "2017-11-04T23:13:31Z",
    "diffHunk": "@@ -422,7 +422,7 @@ object TypeCoercion {\n \n         val commonTypes = lhs.zip(rhs).flatMap { case (l, r) =>\n           findCommonTypeForBinaryComparison(l.dataType, r.dataType)\n-            .orElse(findTightestCommonType(l.dataType, r.dataType))\n+            .orElse(findWiderTypeForTwo(l.dataType, r.dataType))",
    "line": 5
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "To be coherent with what is done when there are literals instead of a subquery.",
    "commit": "2db7cf0479e259b3de72c2bc534bf9eb4acd1273",
    "createdAt": "2017-11-05T09:57:01Z",
    "diffHunk": "@@ -422,7 +422,7 @@ object TypeCoercion {\n \n         val commonTypes = lhs.zip(rhs).flatMap { case (l, r) =>\n           findCommonTypeForBinaryComparison(l.dataType, r.dataType)\n-            .orElse(findTightestCommonType(l.dataType, r.dataType))\n+            .orElse(findWiderTypeForTwo(l.dataType, r.dataType))",
    "line": 5
  }],
  "prId": 19635
}]