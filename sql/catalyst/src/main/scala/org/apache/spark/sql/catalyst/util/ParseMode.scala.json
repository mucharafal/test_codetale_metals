[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "We can't use `Permissive.toString`. \r\n\r\n```\r\nError:(34, 33) stable identifier required, but ParseMode.Permissive.toString found.\r\n      case ParseMode.Permissive.toString => ParseMode.Permissive\r\n                                ^\r\n```",
    "commit": "1f939277eced6acd786a00a7c2e0d6a0113c1a86",
    "createdAt": "2017-03-21T14:30:47Z",
    "diffHunk": "@@ -17,25 +17,35 @@\n \n package org.apache.spark.sql.catalyst.util\n \n-object ParseModes {\n-  val PERMISSIVE_MODE = \"PERMISSIVE\"\n-  val DROP_MALFORMED_MODE = \"DROPMALFORMED\"\n-  val FAIL_FAST_MODE = \"FAILFAST\"\n+import org.apache.spark.internal.Logging\n \n-  val DEFAULT = PERMISSIVE_MODE\n+object ParseMode extends Enumeration with Logging {\n+  type ParseMode = Value\n \n-  def isValidMode(mode: String): Boolean = {\n-    mode.toUpperCase match {\n-      case PERMISSIVE_MODE | DROP_MALFORMED_MODE | FAIL_FAST_MODE => true\n-      case _ => false\n-    }\n-  }\n+  /**\n+   * This mode permissively parses the records.\n+   */\n+  val Permissive = Value(\"PERMISSIVE\")\n+\n+  /**\n+   * This mode ignores the whole corrupted records.\n+   */\n+  val DropMalformed = Value(\"DROPMALFORMED\")\n+\n+  /**\n+   * This mode throws an exception when it meets corrupted records.\n+   */\n+  val FailFast = Value(\"FAILFAST\")\n \n-  def isDropMalformedMode(mode: String): Boolean = mode.toUpperCase == DROP_MALFORMED_MODE\n-  def isFailFastMode(mode: String): Boolean = mode.toUpperCase == FAIL_FAST_MODE\n-  def isPermissiveMode(mode: String): Boolean = if (isValidMode(mode))  {\n-    mode.toUpperCase == PERMISSIVE_MODE\n-  } else {\n-    true // We default to permissive is the mode string is not valid\n+  /**\n+   * Returns `ParseMode` enum from the given string.\n+   */\n+  def fromString(mode: String): ParseMode = mode.toUpperCase match {\n+    case \"PERMISSIVE\" => ParseMode.Permissive"
  }],
  "prId": 17377
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Not sure whether we should use JAVA Enum instead. cc @cloud-fan ",
    "commit": "1f939277eced6acd786a00a7c2e0d6a0113c1a86",
    "createdAt": "2017-03-21T18:50:54Z",
    "diffHunk": "@@ -17,25 +17,35 @@\n \n package org.apache.spark.sql.catalyst.util\n \n-object ParseModes {\n-  val PERMISSIVE_MODE = \"PERMISSIVE\"\n-  val DROP_MALFORMED_MODE = \"DROPMALFORMED\"\n-  val FAIL_FAST_MODE = \"FAILFAST\"\n+import org.apache.spark.internal.Logging\n \n-  val DEFAULT = PERMISSIVE_MODE\n+object ParseMode extends Enumeration with Logging {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's not public, not a big deal",
    "commit": "1f939277eced6acd786a00a7c2e0d6a0113c1a86",
    "createdAt": "2017-03-22T11:03:07Z",
    "diffHunk": "@@ -17,25 +17,35 @@\n \n package org.apache.spark.sql.catalyst.util\n \n-object ParseModes {\n-  val PERMISSIVE_MODE = \"PERMISSIVE\"\n-  val DROP_MALFORMED_MODE = \"DROPMALFORMED\"\n-  val FAIL_FAST_MODE = \"FAILFAST\"\n+import org.apache.spark.internal.Logging\n \n-  val DEFAULT = PERMISSIVE_MODE\n+object ParseMode extends Enumeration with Logging {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "seems people usually use `sealed trait` and `case object` to implement enum in scala, see http://stackoverflow.com/questions/1898932/case-objects-vs-enumerations-in-scala",
    "commit": "1f939277eced6acd786a00a7c2e0d6a0113c1a86",
    "createdAt": "2017-03-22T11:05:10Z",
    "diffHunk": "@@ -17,25 +17,35 @@\n \n package org.apache.spark.sql.catalyst.util\n \n-object ParseModes {\n-  val PERMISSIVE_MODE = \"PERMISSIVE\"\n-  val DROP_MALFORMED_MODE = \"DROPMALFORMED\"\n-  val FAIL_FAST_MODE = \"FAILFAST\"\n+import org.apache.spark.internal.Logging\n \n-  val DEFAULT = PERMISSIVE_MODE\n+object ParseMode extends Enumeration with Logging {"
  }],
  "prId": 17377
}]