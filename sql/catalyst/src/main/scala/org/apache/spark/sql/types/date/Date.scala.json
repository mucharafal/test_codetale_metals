[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Actually we should probably put this in sql.types rather than the date package. I don't think we want to create a new package for each data type.  https://issues.apache.org/jira/browse/SPARK-5245\n\nCan you move it? Decimal was a bad example. Please do so if you want to submit a PR for moving Decimal too. \n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:25:10Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date"
  }, {
    "author": {
      "login": "adrian-wang"
    },
    "body": "That make sense, thanks! will do.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:30:26Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "is this needed at all?\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:25:57Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "the comment is wrong\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:26:08Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale."
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "should add javadoc ...\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:26:30Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "should add javadoc\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:26:37Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "Can we remove toLong, toInt, toShort, toByte? I'm not sure whether they are useful. If they are, we can always add them in the future. Once they are added, we cannot remove them easily.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:30:03Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = toJavaDate.toString()\n+\n+  def toLong: Long = {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "It is also kind of consuing that toLong returns a different thing from toInt.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T08:30:15Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = toJavaDate.toString()\n+\n+  def toLong: Long = {"
  }, {
    "author": {
      "login": "adrian-wang"
    },
    "body": "This follows the cast rules of Hive. However, we can do this in Cast.scala only.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T09:10:14Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = toJavaDate.toString()\n+\n+  def toLong: Long = {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Yea it makes more sense to do it in Cast.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T09:14:31Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = toJavaDate.toString()\n+\n+  def toLong: Long = {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "BTW is this way of doing cast (toInt vs toLong having different semantics) normal in other systems such as mysql, postgres?\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T09:15:01Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types.date\n+\n+import java.util.{Calendar, TimeZone}\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Decimal to the given Long. Will have precision 20 and scale 0.\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given Int. Will have precision 10 and scale 0.\n+   */\n+  def set(days: Long): Date = {\n+    this.daysSinceEpoch = days.toInt\n+    this\n+  }\n+\n+  /**\n+   * Set this Decimal to the given BigDecimal value, inheriting its precision and scale.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = toJavaDate.toString()\n+\n+  def toLong: Long = {"
  }],
  "prId": 3732
}]