[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Probably move the `ScriptInputOutputSchema` into `hive` package?  The `SerDe`, `RowFormat` are the concept of Hive. And the `ScriptTransformation` probably can be defined like:\n\n```\ncase class ScriptTransformation[T](\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n     child: LogicalPlan,\n     ioschema: Option[T]) extends UnaryNode\n```\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-01-26T01:24:36Z",
    "diffHunk": "@@ -25,9 +25,24 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: ScriptInputOutputSchema) extends UnaryNode\n+\n+/**\n+ * The wrapper class of input and output schema properties for transforming with script.\n+ *\n+ */\n+case class ScriptInputOutputSchema("
  }],
  "prId": 4014
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "remove this extra line.\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T01:56:41Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode\n+\n+/**\n+ * The wrapper class of input and output schema properties for transforming with script.\n+ *"
  }],
  "prId": 4014
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "I'd phrase this as `A placeholder for implementation specific input and output properties when passing data to a script.  For example, in Hive this would specify which SerDes to use`.\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T02:03:48Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode\n+\n+/**\n+ * The wrapper class of input and output schema properties for transforming with script."
  }],
  "prId": 4014
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Can this ever be `None`?\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T02:04:45Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "In Hive case, it is not. But I think it may be for other cases?\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T07:38:40Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "What other cases?  There is no need to add complexity to the API unless it\nwill be used.\n\nIn the way you have designed it now, none will result in a confusing error\nlater in execution.  Just disallow it statically by not making this an\noption.\nOn Feb 1, 2015 11:38 PM, \"Liang-Chi Hsieh\" notifications@github.com wrote:\n\n> In\n> sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/plans/logical/ScriptTransformation.scala\n> https://github.com/apache/spark/pull/4014#discussion_r23910289:\n> \n> >   */\n> >  case class ScriptTransformation(\n> >      input: Seq[Expression],\n> >      script: String,\n> >      output: Seq[Attribute],\n> > -    child: LogicalPlan) extends UnaryNode\n> > -    child: LogicalPlan,\n> > -    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode\n> \n> In Hive case, it is not. But I think it may be for other cases?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/spark/pull/4014/files#r23910289.\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T15:43:35Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "OK. Already modified in latest commit.\n",
    "commit": "ac2d1fe1093f2ad442ff1bd475cec0a38c096e38",
    "createdAt": "2015-02-02T15:47:10Z",
    "diffHunk": "@@ -25,9 +25,18 @@ import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n  * @param input the set of expression that should be passed to the script.\n  * @param script the command that should be executed.\n  * @param output the attributes that are produced by the script.\n+ * @param ioschema the input and output schema applied in the execution of the script.\n  */\n case class ScriptTransformation(\n     input: Seq[Expression],\n     script: String,\n     output: Seq[Attribute],\n-    child: LogicalPlan) extends UnaryNode\n+    child: LogicalPlan,\n+    ioschema: Option[ScriptInputOutputSchema]) extends UnaryNode"
  }],
  "prId": 4014
}]