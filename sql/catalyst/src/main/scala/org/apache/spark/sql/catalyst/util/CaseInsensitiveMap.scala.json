[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why not we just expose this original map?",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-12T02:28:05Z",
    "diffHunk": "@@ -23,16 +23,30 @@ package org.apache.spark.sql.catalyst.util\n class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]"
  }, {
    "author": {
      "login": "sureshthalamati"
    },
    "body": "Good question. For some reason I was hung up on making  only the case-sensitive key available to the caller. Changed the  code to expose the original map , it made code simpler. Thank you very much  for the suggestion.",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T07:41:43Z",
    "diffHunk": "@@ -23,16 +23,30 @@ package org.apache.spark.sql.catalyst.util\n class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]"
  }],
  "prId": 16891
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: let's name it `originalMap`, and rename `baseMap` to `keyLowercasedMap`",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T18:29:48Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]"
  }, {
    "author": {
      "login": "sureshthalamati"
    },
    "body": "done.",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-14T08:00:11Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]"
  }],
  "prId": 16891
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why `kv.copy(_2 = kv._2.asInstanceOf[String])`?",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T18:30:38Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))"
  }, {
    "author": {
      "login": "sureshthalamati"
    },
    "body": "copy is unnecessary, but I do need the cast, otherwise getting compiler error :\r\nError:(34, 47) type mismatch;\r\n found   : (String, B1)\r\n required: (String, String)\r\n    new CaseInsensitiveMap(caseSensitiveMap + kv )\r\n\r\nI  am thinking of changing it to the following :\r\nnew CaseInsensitiveMap(caseSensitiveMap + kv.asInstanceOf[(String, String)])\r\n\r\nThank you  for the feedback. \r\n                                              ^",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T18:59:39Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about\r\n```\r\nclass CaseInsensitiveMap[T](originalMap: Map[String, T]) extends Map[String, T] {\r\n  ...\r\n  override def +[B1 >: T](kv: (String, B1)): Map[String, B1] = {\r\n    new CaseInsesitveMap(originalMap + kv)\r\n  }\r\n}\r\n```",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T19:14:50Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))"
  }, {
    "author": {
      "login": "sureshthalamati"
    },
    "body": "I made this change it worked.  It does touch more files , i hope that is ok.\r\nThanks a lot for the suggestion.",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-14T08:00:20Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))"
  }],
  "prId": 16891
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `String.equalsIgnoreCase` can help here.",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-13T18:35:33Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))\n+  }\n \n   override def iterator: Iterator[(String, String)] = baseMap.iterator\n \n-  override def -(key: String): Map[String, String] = baseMap - key.toLowerCase\n+  override def -(key: String): Map[String, String] = {\n+    new CaseInsensitiveMap(caseSensitiveMap.filterKeys(k => k.toLowerCase != key.toLowerCase))"
  }, {
    "author": {
      "login": "sureshthalamati"
    },
    "body": "done.",
    "commit": "27338c9451f78d89cade769759cf6c597f959b1a",
    "createdAt": "2017-02-14T08:00:35Z",
    "diffHunk": "@@ -18,21 +18,25 @@\n package org.apache.spark.sql.catalyst.util\n \n /**\n- * Builds a map in which keys are case insensitive\n+ * Builds a map in which keys are case insensitive. Input map can be accessed for cases where\n+ * case-sensitive information is also required.\n  */\n-class CaseInsensitiveMap(map: Map[String, String]) extends Map[String, String]\n+class CaseInsensitiveMap(val caseSensitiveMap: Map[String, String]) extends Map[String, String]\n   with Serializable {\n \n-  val baseMap = map.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n+  val baseMap = caseSensitiveMap.map(kv => kv.copy(_1 = kv._1.toLowerCase))\n \n   override def get(k: String): Option[String] = baseMap.get(k.toLowerCase)\n \n   override def contains(k: String): Boolean = baseMap.contains(k.toLowerCase)\n \n-  override def + [B1 >: String](kv: (String, B1)): Map[String, B1] =\n-    baseMap + kv.copy(_1 = kv._1.toLowerCase)\n+  override def +[B1 >: String](kv: (String, B1)): Map[String, B1] = {\n+    new CaseInsensitiveMap(caseSensitiveMap + kv.copy(_2 = kv._2.asInstanceOf[String]))\n+  }\n \n   override def iterator: Iterator[(String, String)] = baseMap.iterator\n \n-  override def -(key: String): Map[String, String] = baseMap - key.toLowerCase\n+  override def -(key: String): Map[String, String] = {\n+    new CaseInsensitiveMap(caseSensitiveMap.filterKeys(k => k.toLowerCase != key.toLowerCase))"
  }],
  "prId": 16891
}]