[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "Is it okay to remain as `override lazy val updateExpressions = updateExpressionsDef` as the same as other abstract classes?",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-01T05:52:10Z",
    "diffHunk": "@@ -62,14 +52,6 @@ case class Average(child: Expression) extends DeclarativeAggregate with Implicit\n     /* count = */ Literal(0L)\n   )\n \n-  override lazy val updateExpressions = Seq(",
    "line": 30
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "done",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-02T11:00:33Z",
    "diffHunk": "@@ -62,14 +52,6 @@ case class Average(child: Expression) extends DeclarativeAggregate with Implicit\n     /* count = */ Literal(0L)\n   )\n \n-  override lazy val updateExpressions = Seq(",
    "line": 30
  }],
  "prId": 21054
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "How about declaring this as an argument of `AverageAggregate` as the same as other abstract classes?",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-01T05:57:35Z",
    "diffHunk": "@@ -23,23 +23,13 @@ import org.apache.spark.sql.catalyst.expressions._\n import org.apache.spark.sql.catalyst.util.TypeUtils\n import org.apache.spark.sql.types._\n \n-@ExpressionDescription(\n-  usage = \"_FUNC_(expr) - Returns the mean calculated from values of a group.\")\n-case class Average(child: Expression) extends DeclarativeAggregate with ImplicitCastInputTypes {\n-\n-  override def prettyName: String = \"avg\"\n-\n-  override def children: Seq[Expression] = child :: Nil\n+abstract class AverageAggregate extends DeclarativeAggregate {\n \n   override def nullable: Boolean = true\n-\n   // Return data type.\n   override def dataType: DataType = resultType\n \n-  override def inputTypes: Seq[AbstractDataType] = Seq(NumericType)\n-\n-  override def checkInputDataTypes(): TypeCheckResult =\n-    TypeUtils.checkForNumericExpr(child.dataType, \"function average\")\n+  def child: Expression"
  }],
  "prId": 21054
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "How about `AverageLike` (`CountLike` `RegrLike`, too) along with `RankLike`? (It is just a suggestion)",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-02T06:33:20Z",
    "diffHunk": "@@ -23,23 +23,13 @@ import org.apache.spark.sql.catalyst.expressions._\n import org.apache.spark.sql.catalyst.util.TypeUtils\n import org.apache.spark.sql.types._\n \n-@ExpressionDescription(\n-  usage = \"_FUNC_(expr) - Returns the mean calculated from values of a group.\")\n-case class Average(child: Expression) extends DeclarativeAggregate with ImplicitCastInputTypes {\n-\n-  override def prettyName: String = \"avg\"\n-\n-  override def children: Seq[Expression] = child :: Nil\n+abstract class AverageAggregate extends DeclarativeAggregate {"
  }],
  "prId": 21054
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "~How about `doUpdateExpressions`?~\r\nI feel it'd be better to use a meaningful name for accumulating `sum` and` count`? e.g., `sumAndCountExpr`",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-02T07:01:23Z",
    "diffHunk": "@@ -85,4 +67,28 @@ case class Average(child: Expression) extends DeclarativeAggregate with Implicit\n     case _ =>\n       Cast(sum, resultType) / Cast(count, resultType)\n   }\n+\n+  def updateExpressionsDef: Seq[Expression] = Seq("
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "`protected def`?",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-02T07:02:30Z",
    "diffHunk": "@@ -85,4 +67,28 @@ case class Average(child: Expression) extends DeclarativeAggregate with Implicit\n     case _ =>\n       Cast(sum, resultType) / Cast(count, resultType)\n   }\n+\n+  def updateExpressionsDef: Seq[Expression] = Seq("
  }],
  "prId": 21054
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "nit: indent",
    "commit": "e584adfb972a4d56acd6f222f1c5a7affc1224a6",
    "createdAt": "2018-05-02T11:09:13Z",
    "diffHunk": "@@ -85,4 +65,29 @@ case class Average(child: Expression) extends DeclarativeAggregate with Implicit\n     case _ =>\n       Cast(sum, resultType) / Cast(count, resultType)\n   }\n+\n+  protected def updateExpressionsDef: Seq[Expression] = Seq(\n+    /* sum = */\n+    Add(\n+      sum,\n+      Coalesce(Cast(child, sumDataType) :: Cast(Literal(0), sumDataType) :: Nil)),\n+    /* count = */ If(IsNull(child), count, count + 1L)\n+  )\n+\n+  override lazy val updateExpressions = updateExpressionsDef\n+}\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr) - Returns the mean calculated from values of a group.\")\n+case class Average(child: Expression)\n+    extends AverageLike(child) with ImplicitCastInputTypes {"
  }],
  "prId": 21054
}]