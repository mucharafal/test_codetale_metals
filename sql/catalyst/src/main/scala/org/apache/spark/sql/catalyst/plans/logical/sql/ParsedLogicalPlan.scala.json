[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "set this to final at the very least",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-11T23:14:45Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {\n+  override lazy val resolved = false"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Done.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-13T22:32:31Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {\n+  override lazy val resolved = false"
  }],
  "prId": 24029
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "not sure if this is useful hierarchy, but if yes we should document more clearly this should not survive analysis.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-11T23:15:45Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "might be useful to add a special check for this, rather than relying on resolved only.\r\n",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-11T23:16:20Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "+1 - @rdblue these should only be inputs to the analyzer, not outputs. Would be helpful to write specific JavaDoc on this.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T04:18:37Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "That is included above: \"Parsed logical plans are not resolved because they must be converted to concrete logical plans.\"\r\n\r\nDo you think that should be rephrased to be more clear?",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T15:32:57Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {"
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Defer to @rxin but I'm ok with merging with the current docs. We can rephrase in a follow-up if our contributors have trouble with this wording.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T16:06:38Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans.\n+ *\n+ * Parsed logical plans are located in Catalyst so that as much SQL parsing logic as possible is be\n+ * kept in a [[org.apache.spark.sql.catalyst.parser.AbstractSqlParser]].\n+ */\n+private[sql] abstract class ParsedLogicalPlan extends LogicalPlan {"
  }],
  "prId": 24029
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "is it really necessary to have this parent class just to set the `resolved` bit? I think we can just put `override lazy val resolved = false` in the new `CreateTable` and `CreateTableAsSelect` classes, with classdoc saying that these 2 classes will be replaced by what concrete plans during analysis.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-12T03:55:15Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "The value of this class is that it identifies the set of logical plans that correspond directly to what was parsed from SQL. When someone working on a plan sees `ParsedLogicalPlan` as an ancestor in Scaladoc, it signals what is explained here: that parser produces `ParsedLogicalPlan` nodes without translating what was parsed, then those plans get translated into real plans in the analyzer.\r\n\r\nWith that information, it is easy to see what changes need to be made. If the parsed plan doesn't include an option, then the parser and parsed plan needs to be updated. If it does include an option, then the analyzer and downstream plans need to be updated.\r\n\r\nAlso keep in mind that this is the first two subclasses of `ParsedLogicalPlan`. To implement v2 along-side v1, we are going to be adding more of them. So it is valuable that we don't need to remember to set `resolved` to false in every plan.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-13T21:47:17Z",
    "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * A logical plan node that contains exactly what was parsed from SQL.\n+ *\n+ * This is used to hold information parsed from SQL when there are multiple implementations of a\n+ * query or command. For example, CREATE TABLE may be implemented by different nodes for v1 and v2.\n+ * Instead of parsing directly to a v1 CreateTable that keeps metadata in CatalogTable, and then\n+ * converting that v1 metadata to the v2 equivalent, the sql [[CreateTable]] plan is produced by\n+ * the parser and converted once into both implementations.\n+ *\n+ * Parsed logical plans are not resolved because they must be converted to concrete logical plans."
  }],
  "prId": 24029
}]