[{
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "id -> is",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:27:28Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "nit: id -> is",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-26T02:14:15Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "Does other databases allow max value to appear first? i.e. `widthBucket(3.14, 4, 0, 3)`",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:42:49Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Yes, Oracle support it.",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-23T05:59:06Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "Both endpoints are included? Can you check with other databases and add a comment here?",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:44:56Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Yes,  test on Oracle:\r\n```\r\nwidth_Bucket(0, 1, 1, 1) -> 0, width_Bucket(20, 1, 1, 1) -> 2\r\n```",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-23T06:08:21Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "nit: `if (minValue > maxValue) (numBucket - preResult) + 1 else preResult`",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:45:15Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val preResult: Long = if (expr < lower) {\n+      0\n+    } else if (expr >= upper) {\n+      Math.addExact(numBucket, 1)\n+    } else {\n+      (numBucket.toDouble * (expr - lower) / (upper - lower) + 1).toLong\n+    }\n+\n+    val result = if (minValue > maxValue) (numBucket - preResult) + 1 else preResult\n+    result"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "Do we really need to use `addExact`? In Oracle's doc, `numBucket` is an integer, then we can use `numBucket + 1L` here",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:49:54Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val preResult: Long = if (expr < lower) {\n+      0\n+    } else if (expr >= upper) {\n+      Math.addExact(numBucket, 1)"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "what if upper == lower?",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-22T02:52:01Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val preResult: Long = if (expr < lower) {\n+      0\n+    } else if (expr >= upper) {\n+      Math.addExact(numBucket, 1)\n+    } else {\n+      (numBucket.toDouble * (expr - lower) / (upper - lower) + 1).toLong"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "Do we consider minValue == maxValue and numBucket > 1 valid input or not?\r\nPlease also add a test case for this.",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-26T02:31:45Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]. For example:\n+   *         widthBucket(0, 1, 1, 1) -> 0, widthBucket(20, 1, 1, 1) -> 2.\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "If `minValue == maxValue `,  then `lower==upper`,  result is `numBucket + 1L`:\r\n```\r\n    val lower: Double = Math.min(minValue, maxValue)\r\n    val upper: Double = Math.max(minValue, maxValue)\r\n\r\n    val result: Long = if (expr < lower) {\r\n      0\r\n    } else if (expr >= upper) {\r\n      numBucket + 1L\r\n    } else {\r\n      (numBucket.toDouble * (expr - lower) / (upper - lower) + 1).toLong\r\n    }\r\n\r\n    if (minValue > maxValue) (numBucket - result) + 1 else result\r\n```",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-26T05:35:50Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]. For example:\n+   *         widthBucket(0, 1, 1, 1) -> 0, widthBucket(20, 1, 1, 1) -> 2.\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "I know, but my question is: should the possible result when minValue == maxValue only be 0, 1, or 2? e.g. should `width_bucket(2, 1, 1, 100) = 101` or just throw an error due to invalid input?",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-26T06:32:17Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]. For example:\n+   *         widthBucket(0, 1, 1, 1) -> 0, widthBucket(20, 1, 1, 1) -> 2.\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "wzhfy"
    },
    "body": "Let's remove these examples in the description, they are just corner cases. My previous comment was just to make sure both ends should be included.",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-06-26T02:34:52Z",
    "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr id the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an An expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue]. For example:\n+   *         widthBucket(0, 1, 1, 1) -> 0, widthBucket(20, 1, 1, 1) -> 2."
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "This check needs to be moved to `case class WidthBucket`. We do not want to issue such an exception during the execution of the query. ",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-07-16T18:47:21Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr is the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue].\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "// an underflow bucket numbered 0",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-07-16T19:10:49Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr is the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue].\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val result: Long = if (expr < lower) {"
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Added 2 test case:\r\nhttps://github.com/apache/spark/commit/099db6d32583dce473757a9ffc715ff4c4b44265#diff-96c9a63f4a212cd144bc18cf7063b649R670",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-07-20T10:44:49Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr is the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue].\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val result: Long = if (expr < lower) {"
  }],
  "prId": 18323
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "// an overflow bucket numbered num_buckets+1",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-07-16T19:11:39Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr is the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue].\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val result: Long = if (expr < lower) {\n+      0\n+    } else if (expr >= upper) {\n+      numBucket + 1L",
    "line": 45
  }, {
    "author": {
      "login": "wangyum"
    },
    "body": "Added 2 test case:\r\nhttps://github.com/apache/spark/pull/18323/commits/099db6d32583dce473757a9ffc715ff4c4b44265#diff-96c9a63f4a212cd144bc18cf7063b649R674",
    "commit": "2e2b2ca39ffb595ec5c26bcec71afa9df8a612c6",
    "createdAt": "2017-07-20T10:44:02Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.sql.AnalysisException\n+\n+object MathUtils {\n+\n+  /**\n+   *  Returns the bucket number into which\n+   *  the value of this expression would fall after being evaluated.\n+   *\n+   * @param expr is the expression for which the histogram is being created\n+   * @param minValue is an expression that resolves\n+   *                 to the minimum end point of the acceptable range for expr\n+   * @param maxValue is an expression that resolves\n+   *                 to the maximum end point of the acceptable range for expr\n+   * @param numBucket is an expression that resolves to\n+   *                  a constant indicating the number of buckets\n+   * @return Returns an long between 0 and numBucket+1 by mapping the expr into buckets defined by\n+   *         the range [minValue, maxValue].\n+   */\n+  def widthBucket(expr: Double, minValue: Double, maxValue: Double, numBucket: Long): Long = {\n+\n+    if (numBucket <= 0) {\n+      throw new AnalysisException(s\"The num of bucket must be greater than 0, but got ${numBucket}\")\n+    }\n+\n+    val lower: Double = Math.min(minValue, maxValue)\n+    val upper: Double = Math.max(minValue, maxValue)\n+\n+    val result: Long = if (expr < lower) {\n+      0\n+    } else if (expr >= upper) {\n+      numBucket + 1L",
    "line": 45
  }],
  "prId": 18323
}]