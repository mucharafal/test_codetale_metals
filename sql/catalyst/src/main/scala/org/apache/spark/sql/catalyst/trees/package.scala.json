[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Why is this an implicit class?\n",
    "commit": "7cf2cd2fff0ad1f63a9100b0fe8c319077a4467a",
    "createdAt": "2014-08-28T18:09:56Z",
    "diffHunk": "@@ -37,4 +37,15 @@ package object trees extends Logging {\n   // Since we want tree nodes to be lightweight, we create one logger for all treenode instances.\n   protected override def logName = \"catalyst.trees\"\n \n+  /**\n+   * A [[TreeNode]] companion for reference equality for Hash based Collection.\n+   */\n+  implicit class TreeNodeRef(val obj: TreeNode[_]) {"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Just for save some code for like\n\n```\nval resultMap: Map[TreeNodeRef, Expression] = ...\n...\nresultMap.contains(e)  // e is the expression, but the implicit class will convert it into TreeNodeRef\n```\n",
    "commit": "7cf2cd2fff0ad1f63a9100b0fe8c319077a4467a",
    "createdAt": "2014-08-29T00:50:00Z",
    "diffHunk": "@@ -37,4 +37,15 @@ package object trees extends Logging {\n   // Since we want tree nodes to be lightweight, we create one logger for all treenode instances.\n   protected override def logName = \"catalyst.trees\"\n \n+  /**\n+   * A [[TreeNode]] companion for reference equality for Hash based Collection.\n+   */\n+  implicit class TreeNodeRef(val obj: TreeNode[_]) {"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Hm, I see.  I think in this case I'd prefer to be a little more verbose.  A general rule is that you should only use implicit conversions to extend functionality, but never to perform subtle type conversions.  These can lead to really confusing errors when things go wrong.  You might be safe here, but I've used implicits many times counter to this rule and I almost always end up regretting it.\n",
    "commit": "7cf2cd2fff0ad1f63a9100b0fe8c319077a4467a",
    "createdAt": "2014-08-29T00:56:40Z",
    "diffHunk": "@@ -37,4 +37,15 @@ package object trees extends Logging {\n   // Since we want tree nodes to be lightweight, we create one logger for all treenode instances.\n   protected override def logName = \"catalyst.trees\"\n \n+  /**\n+   * A [[TreeNode]] companion for reference equality for Hash based Collection.\n+   */\n+  implicit class TreeNodeRef(val obj: TreeNode[_]) {"
  }],
  "prId": 2155
}]