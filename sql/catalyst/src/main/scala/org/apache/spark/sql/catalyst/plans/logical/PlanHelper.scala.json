[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "BTW how about `SELECT max(c1) FROM tab WHERE max(c1) > 0`? Does it work?",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-03-29T21:46:47Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] Contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns true when this operator hosts illegal expressions. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0",
    "line": 36
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@cloud-fan No, this case does not work. But this should work and i have a test case for this.\r\n```\r\nSELECT max FROM (SELECT max(v1) AS max FROM tab) WHERE max > 1\r\n```",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-03-29T22:48:17Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] Contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns true when this operator hosts illegal expressions. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0",
    "line": 36
  }],
  "prId": 24209
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "super nit: Contains -> contains.\r\n\r\nDon't need to wait for another round test for this.",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-01T15:27:16Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] Contains utility methods that can be used by Analyzer and Optimizer."
  }],
  "prId": 24209
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "super nit: optimizer -> Optimizer. As consistent to above line.",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-01T15:28:08Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] Contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and optimizer."
  }],
  "prId": 24209
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "what if we return the unsupported operator here and we report the specific one which is problematic to the user, rather than printing the whole filter condition? I think this would help the user to understand which specific thing caused the issue and it would be more user friendly.",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-01T15:46:45Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and Optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns true when this operator hosts illegal expressions. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0\n+   * 2. Query rewrites inadvertently produce plans that are invalid.\n+   */\n+  def specialExpressionInUnsupportedOperator(plan: LogicalPlan): Boolean = {"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@mgaido91 The caller already knows about the problematic operator, no ? About the problematic expression, i suppose we could return the first occurence of the problematic expression and report it in the error text. ",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-01T16:11:25Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and Optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns true when this operator hosts illegal expressions. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0\n+   * 2. Query rewrites inadvertently produce plans that are invalid.\n+   */\n+  def specialExpressionInUnsupportedOperator(plan: LogicalPlan): Boolean = {"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "yes, sorry, I meant expression, not operator. Sorry for the mistake.\r\n\r\n> i suppose we could return the first occurence of the problematic expression and report it in the error text.\r\n\r\nYes, this is what I meant. I think it would be easier for the user to understand and fix the problem, especially if the filter condition is very big and hard to be read as a whole.\r\nIt would be even better if we could return the list of all the problematic expressions if possible though, in order to avoid the user to iterate fixing->trying->fixing->...",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-01T16:15:11Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and Optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns true when this operator hosts illegal expressions. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0\n+   * 2. Query rewrites inadvertently produce plans that are invalid.\n+   */\n+  def specialExpressionInUnsupportedOperator(plan: LogicalPlan): Boolean = {"
  }],
  "prId": 24209
}, {
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "nit: `specialExpressions`?",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-02T08:05:30Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Expression, Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and Optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns the list of invalid expressions that this operator hosts. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0\n+   * 2. Query rewrites inadvertently produce plans that are invalid.\n+   */\n+  def specialExpressionInUnsupportedOperator(plan: LogicalPlan): Seq[Expression] = {"
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@mgaido91 Will change.",
    "commit": "bbab4c198152ebe5a06a99372aaf1445a49f0f18",
    "createdAt": "2019-04-02T08:21:29Z",
    "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Expression, Generator, WindowExpression}\n+import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression\n+\n+/**\n+ * [[PlanHelper]] contains utility methods that can be used by Analyzer and Optimizer.\n+ * It can also be container of methods that are common across multiple rules in Analyzer\n+ * and Optimizer.\n+ */\n+object PlanHelper {\n+  /**\n+   * Check if there's any expression in this query plan operator that is\n+   * - A WindowExpression but the plan is not Window\n+   * - An AggregateExpresion but the plan is not Aggregate or Window\n+   * - A Generator but the plan is not Generate\n+   * Returns the list of invalid expressions that this operator hosts. This can happen when\n+   * 1. The input query from users contain invalid expressions.\n+   *    Example : SELECT * FROM tab WHERE max(c1) > 0\n+   * 2. Query rewrites inadvertently produce plans that are invalid.\n+   */\n+  def specialExpressionInUnsupportedOperator(plan: LogicalPlan): Seq[Expression] = {"
  }],
  "prId": 24209
}]