[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "this seems incomplete?\n",
    "commit": "e251f87a830df9f40d523f00bbe14c174c91b2ae",
    "createdAt": "2015-10-22T00:55:47Z",
    "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.encoders\n+\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+// Most of this file is codegen.\n+// scalastyle:off\n+\n+/**\n+ * A set of composite encoders that take sub encoders and map each of their objects to a\n+ * Scala tuple.  Note that currently the implementation is fairly limited and only supports going\n+ * from an internal row to a tuple.\n+ *\n+ * The input is assumed to be"
  }],
  "prId": 9190
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`Tuple` is an implementation of `Product`, isn't it?\n",
    "commit": "e251f87a830df9f40d523f00bbe14c174c91b2ae",
    "createdAt": "2015-10-26T04:59:56Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.encoders\n+\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+// Most of this file is codegen.\n+// scalastyle:off\n+\n+/**\n+ * A set of composite encoders that take sub encoders and map each of their objects to a\n+ * Scala tuple.  Note that currently the implementation is fairly limited and only supports going\n+ * from an internal row to a tuple.\n+ */\n+object TupleEncoder {",
    "line": 35
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Thats true, but the though was that we wanted some way to compose any encoder (i.e. one for Java POJOs) in a way that returns a tuple.  However, I'm in the process of rewriting all of this to do it using expression composition instead of imperative code.\n",
    "commit": "e251f87a830df9f40d523f00bbe14c174c91b2ae",
    "createdAt": "2015-10-26T09:02:27Z",
    "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.encoders\n+\n+\n+import scala.reflect.ClassTag\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.types.{StructField, StructType}\n+\n+// Most of this file is codegen.\n+// scalastyle:off\n+\n+/**\n+ * A set of composite encoders that take sub encoders and map each of their objects to a\n+ * Scala tuple.  Note that currently the implementation is fairly limited and only supports going\n+ * from an internal row to a tuple.\n+ */\n+object TupleEncoder {",
    "line": 35
  }],
  "prId": 9190
}]