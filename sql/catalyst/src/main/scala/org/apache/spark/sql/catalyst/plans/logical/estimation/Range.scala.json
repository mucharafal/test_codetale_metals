[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "null values or 0 rows?",
    "commit": "a48a4fd7dbc1e926cbe0836017dda86ca7486002",
    "createdAt": "2017-01-06T06:45:15Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import java.math.{BigDecimal => JDecimal}\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.types.{BooleanType, DateType, TimestampType, _}\n+\n+\n+/** Value range of a column. */\n+trait Range\n+\n+/** For simplicity we use decimal to unify operations of numeric ranges. */\n+case class NumericRange(min: JDecimal, max: JDecimal) extends Range\n+\n+/**\n+ * This version of Spark does not have min/max for binary/string types, we define their default\n+ * behaviors by this class.\n+ */\n+class DefaultRange extends Range\n+\n+/** This is for columns with only null values. */"
  }],
  "prId": 16395
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "two methods?",
    "commit": "a48a4fd7dbc1e926cbe0836017dda86ca7486002",
    "createdAt": "2017-01-06T06:45:49Z",
    "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import java.math.{BigDecimal => JDecimal}\n+import java.sql.{Date, Timestamp}\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.types.{BooleanType, DateType, TimestampType, _}\n+\n+\n+/** Value range of a column. */\n+trait Range\n+\n+/** For simplicity we use decimal to unify operations of numeric ranges. */\n+case class NumericRange(min: JDecimal, max: JDecimal) extends Range\n+\n+/**\n+ * This version of Spark does not have min/max for binary/string types, we define their default\n+ * behaviors by this class.\n+ */\n+class DefaultRange extends Range\n+\n+/** This is for columns with only null values. */\n+class NullRange extends Range\n+\n+object Range {\n+  def apply(min: Option[Any], max: Option[Any], dataType: DataType): Range = dataType match {\n+    case StringType | BinaryType => new DefaultRange()\n+    case _ if min.isEmpty || max.isEmpty => new NullRange()\n+    case _ => toNumericRange(min.get, max.get, dataType)\n+  }\n+\n+  /**\n+   * For simplicity we use decimal to unify operations of numeric types, the two methods below"
  }],
  "prId": 16395
}]