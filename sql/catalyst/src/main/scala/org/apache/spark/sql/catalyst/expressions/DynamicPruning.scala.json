[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "`when set to true` -> `when set to false`? `onlyInBroadcast` sounds like we should only do this for broadcast.",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-08-28T06:18:16Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param buildQuery the build side of the join.\n+ * @param buildKeys the join keys corresponding to the build side of the join\n+ * @param onlyInBroadcast when set to true it indicates that the pruning filter is likely to be"
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "we could probably just call it \"hasBenefitOverSubqueryDuplicate\" and flip the flag.",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-08-28T13:54:10Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param buildQuery the build side of the join.\n+ * @param buildKeys the join keys corresponding to the build side of the join\n+ * @param onlyInBroadcast when set to true it indicates that the pruning filter is likely to be"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "either works for me",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-08-28T13:57:33Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param buildQuery the build side of the join.\n+ * @param buildKeys the join keys corresponding to the build side of the join\n+ * @param onlyInBroadcast when set to true it indicates that the pruning filter is likely to be"
  }],
  "prId": 25600
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "what does `child` mean here?",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-08-28T06:18:36Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param buildQuery the build side of the join.",
    "line": 32
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "Means the plan which we try adding a filter on here. I'll update the code comment.",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-08-29T20:04:02Z",
    "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param buildQuery the build side of the join.",
    "line": 32
  }],
  "prId": 25600
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think it's the filtering key of the stream side?",
    "commit": "b00225078c6471b5b01f8a920ab28a2361b8e48b",
    "createdAt": "2019-09-04T07:54:55Z",
    "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+trait DynamicPruning extends Predicate\n+\n+/**\n+ * The DynamicPruningSubquery expression is only used in join operations to prune one side of the\n+ * join with a filter from the other side of the join. It is inserted in cases where partition\n+ * pruning can be applied.\n+ *\n+ * @param child the underlying plan to be filtered on."
  }],
  "prId": 25600
}]