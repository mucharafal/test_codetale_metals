[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "If there are nested expressions which are timezone aware, I think we still need to attach time zone to them?",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-17T03:12:00Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))\n           }\n-          castedExpr.transform {\n-            case e: TimeZoneAwareExpression if e.timeZoneId.isEmpty =>\n-              e.withTimeZone(conf.sessionLocalTimeZone)\n-          }.eval()\n+          castedExpr.eval()",
    "line": 28
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "I guess now that `TimeZoneAwareExpression` is resolved if it has `timeZoneId`, so we don't need to transform children.",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-17T03:43:20Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))\n           }\n-          castedExpr.transform {\n-            case e: TimeZoneAwareExpression if e.timeZoneId.isEmpty =>\n-              e.withTimeZone(conf.sessionLocalTimeZone)\n-          }.eval()\n+          castedExpr.eval()",
    "line": 28
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "oh, right. I saw the changes to `TimeZoneAwareExpression`. :-)",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-17T03:53:41Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))\n           }\n-          castedExpr.transform {\n-            case e: TimeZoneAwareExpression if e.timeZoneId.isEmpty =>\n-              e.withTimeZone(conf.sessionLocalTimeZone)\n-          }.eval()\n+          castedExpr.eval()",
    "line": 28
  }],
  "prId": 17641
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "`ResolveInlineTables` can be `CastSupport` and we should use `cast` of it here?",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-19T02:41:24Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Done",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-20T09:33:56Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))"
  }],
  "prId": 17641
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "also make `ResolveInlineTables` mix-in `CastSupport`?",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-19T02:48:29Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))"
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Done",
    "commit": "d7bc1e8c1bedf8c39d7304606895afe2186eb327",
    "createdAt": "2017-04-20T09:34:01Z",
    "diffHunk": "@@ -99,12 +99,9 @@ case class ResolveInlineTables(conf: SQLConf) extends Rule[LogicalPlan] {\n           val castedExpr = if (e.dataType.sameType(targetType)) {\n             e\n           } else {\n-            Cast(e, targetType)\n+            Cast(e, targetType, Some(conf.sessionLocalTimeZone))"
  }],
  "prId": 17641
}]