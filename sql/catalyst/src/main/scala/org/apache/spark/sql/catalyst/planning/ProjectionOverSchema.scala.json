[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit:\r\n\r\n```scala\r\ngetProjection(child).map { projection => GetMapValue(projection, key) }\r\n```",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-20T03:43:28Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {\n+  private val fieldNames = schema.fieldNames.toSet\n+\n+  def unapply(expr: Expression): Option[Expression] = getProjection(expr)\n+\n+  private def getProjection(expr: Expression): Option[Expression] =\n+    expr match {\n+      case a @ AttributeReference(name, _, _, _) if (fieldNames.contains(name)) =>\n+        Some(a.copy(dataType = schema(name).dataType)(a.exprId, a.qualifier))\n+      case GetArrayItem(child, arrayItemOrdinal) =>\n+        getProjection(child).map {\n+          case projection =>\n+            GetArrayItem(projection, arrayItemOrdinal)\n+        }\n+      case GetArrayStructFields(child, StructField(name, _, _, _), _, numFields, containsNull) =>\n+        getProjection(child).map(p => (p, p.dataType)).map {\n+          case (projection, ArrayType(projSchema @ StructType(_), _)) =>\n+            GetArrayStructFields(projection,\n+              projSchema(name), projSchema.fieldIndex(name), projSchema.size, containsNull)\n+        }\n+      case GetMapValue(child, key) =>\n+        getProjection(child).map {\n+          case projection =>"
  }],
  "prId": 21320
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit:\r\n\r\n```\r\ngetProjection(child).map { projection => GetArrayItem(projection, arrayItemOrdinal) }\r\n```",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-20T03:43:56Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {\n+  private val fieldNames = schema.fieldNames.toSet\n+\n+  def unapply(expr: Expression): Option[Expression] = getProjection(expr)\n+\n+  private def getProjection(expr: Expression): Option[Expression] =\n+    expr match {\n+      case a @ AttributeReference(name, _, _, _) if (fieldNames.contains(name)) =>\n+        Some(a.copy(dataType = schema(name).dataType)(a.exprId, a.qualifier))\n+      case GetArrayItem(child, arrayItemOrdinal) =>\n+        getProjection(child).map {\n+          case projection =>\n+            GetArrayItem(projection, arrayItemOrdinal)"
  }],
  "prId": 21320
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "I would avoid such pattern `StructField(name, _, _, _), _,` to be honest when they look excessive (per https://github.com/databricks/scala-style-guide#pattern-matching)",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-20T03:46:58Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {\n+  private val fieldNames = schema.fieldNames.toSet\n+\n+  def unapply(expr: Expression): Option[Expression] = getProjection(expr)\n+\n+  private def getProjection(expr: Expression): Option[Expression] =\n+    expr match {\n+      case a @ AttributeReference(name, _, _, _) if (fieldNames.contains(name)) =>\n+        Some(a.copy(dataType = schema(name).dataType)(a.exprId, a.qualifier))\n+      case GetArrayItem(child, arrayItemOrdinal) =>\n+        getProjection(child).map {\n+          case projection =>\n+            GetArrayItem(projection, arrayItemOrdinal)\n+        }\n+      case GetArrayStructFields(child, StructField(name, _, _, _), _, numFields, containsNull) =>"
  }],
  "prId": 21320
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "This still looks weird that we place this under `catalyst` since we currently only use it under `execution`.",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-20T03:51:35Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {"
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "Okay. So...",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-25T08:22:42Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {"
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "can we move it to `execution`?",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-25T10:48:45Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {"
  }, {
    "author": {
      "login": "ajacques"
    },
    "body": "We can move this to `sql.execution` if we move all three classes: `ProjectionOverSchema`, `GetStructFieldObject`, and `SelectedField`. Is there a difference in the catalyst.planning vs the execution packages?",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-26T04:38:23Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that projects an expression over a given schema. Data types,\n+ * field indexes and field counts of complex type extractors and attributes\n+ * are adjusted to fit the schema. All other expressions are left as-is. This\n+ * class is motivated by columnar nested schema pruning.\n+ */\n+case class ProjectionOverSchema(schema: StructType) {"
  }],
  "prId": 21320
}]