[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i find the _1 and _2s here impossible to read. Can we add an explicit type to `val partitionKeys` ?\n",
    "commit": "63f7f2ee65a93de7f87f99b9fc46a71deefa5ea5",
    "createdAt": "2016-11-08T21:57:12Z",
    "diffHunk": "@@ -178,18 +178,13 @@ class AstBuilder extends SqlBaseBaseVisitor[AnyRef] with Logging {\n         \"partitions with value: \" + dynamicPartitionKeys.keys.mkString(\"[\", \",\", \"]\"), ctx)\n     }\n     val overwrite = ctx.OVERWRITE != null\n-    val overwritePartition =\n-      if (overwrite && partitionKeys.nonEmpty && dynamicPartitionKeys.isEmpty) {\n-        Some(partitionKeys.map(t => (t._1, t._2.get)))\n-      } else {\n-        None\n-      }\n+    val staticPartitionKeys = partitionKeys.filter(_._2.nonEmpty).map(t => (t._1, t._2.get))"
  }, {
    "author": {
      "login": "ericl"
    },
    "body": "Done\n",
    "commit": "63f7f2ee65a93de7f87f99b9fc46a71deefa5ea5",
    "createdAt": "2016-11-09T00:03:05Z",
    "diffHunk": "@@ -178,18 +178,13 @@ class AstBuilder extends SqlBaseBaseVisitor[AnyRef] with Logging {\n         \"partitions with value: \" + dynamicPartitionKeys.keys.mkString(\"[\", \",\", \"]\"), ctx)\n     }\n     val overwrite = ctx.OVERWRITE != null\n-    val overwritePartition =\n-      if (overwrite && partitionKeys.nonEmpty && dynamicPartitionKeys.isEmpty) {\n-        Some(partitionKeys.map(t => (t._1, t._2.get)))\n-      } else {\n-        None\n-      }\n+    val staticPartitionKeys = partitionKeys.filter(_._2.nonEmpty).map(t => (t._1, t._2.get))"
  }],
  "prId": 15814
}]