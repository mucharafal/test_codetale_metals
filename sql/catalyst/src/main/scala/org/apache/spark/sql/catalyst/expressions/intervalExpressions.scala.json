[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: it's clearer to pass in `justifyFuncName: String`\r\n```\r\nextends IntervalJustifyLike(child, justifyHours, \"justifyHours\")\r\n```",
    "commit": "b926f324d9764b7c092a30974da5bab8475dde4c",
    "createdAt": "2019-11-12T07:35:47Z",
    "diffHunk": "@@ -257,3 +257,69 @@ case class MakeInterval(\n \n   override def prettyName: String = \"make_interval\"\n }\n+\n+abstract class IntervalJustifyLike(\n+    child: Expression,\n+    justify: CalendarInterval => CalendarInterval,\n+    justifyType: String) extends UnaryExpression with ExpectsInputTypes {"
  }],
  "prId": 26465
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "nit: `case NonFatal(_) =>`",
    "commit": "b926f324d9764b7c092a30974da5bab8475dde4c",
    "createdAt": "2019-11-13T00:09:47Z",
    "diffHunk": "@@ -257,3 +257,69 @@ case class MakeInterval(\n \n   override def prettyName: String = \"make_interval\"\n }\n+\n+abstract class IntervalJustifyLike(\n+    child: Expression,\n+    justify: CalendarInterval => CalendarInterval,\n+    justifyFuncName: String) extends UnaryExpression with ExpectsInputTypes {\n+  override def inputTypes: Seq[AbstractDataType] = Seq(CalendarIntervalType)\n+\n+  override def dataType: DataType = CalendarIntervalType\n+\n+  override def nullSafeEval(input: Any): Any = {\n+    try {\n+      justify(input.asInstanceOf[CalendarInterval])\n+    } catch {\n+      case _: ArithmeticException => null"
  }],
  "prId": 26465
}]