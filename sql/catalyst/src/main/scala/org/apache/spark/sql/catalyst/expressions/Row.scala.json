[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Do we need this class?  Arrays don't need to be `Row`s inside of the execution engine, they only need to be of type `Seq`, and even that requirements should probably be removed.  Instead of NativeRow can we just call `toSeq` on the Array?\n",
    "commit": "30708c864b656f04d046a1d3be4e9751960a1cb7",
    "createdAt": "2014-04-24T00:56:07Z",
    "diffHunk": "@@ -206,6 +206,67 @@ class GenericMutableRow(size: Int) extends GenericRow(size) with MutableRow {\n   override def copy() = new GenericRow(values.clone())\n }\n \n+// TODO: this is an awful lot of code duplication. If values would be covariant we could reuse\n+// much of GenericRow\n+class NativeRow[T](protected[catalyst] val values: Array[T]) extends Row {"
  }, {
    "author": {
      "login": "AndreSchumacher"
    },
    "body": "@marmbrus  Good question. I think I added that because GetField wants to get a Row when it calls `eval` on its children. I will have another look at that.\n",
    "commit": "30708c864b656f04d046a1d3be4e9751960a1cb7",
    "createdAt": "2014-04-25T07:47:54Z",
    "diffHunk": "@@ -206,6 +206,67 @@ class GenericMutableRow(size: Int) extends GenericRow(size) with MutableRow {\n   override def copy() = new GenericRow(values.clone())\n }\n \n+// TODO: this is an awful lot of code duplication. If values would be covariant we could reuse\n+// much of GenericRow\n+class NativeRow[T](protected[catalyst] val values: Array[T]) extends Row {"
  }],
  "prId": 360
}]