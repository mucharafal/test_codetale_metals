[{
  "comments": [{
    "author": {
      "login": "tarekbecker"
    },
    "body": "`!(dt.isInstanceOf[UserDefinedType[_]])`\n",
    "commit": "e534b87a125d264123216025d16d61da327f837d",
    "createdAt": "2015-07-02T04:37:20Z",
    "diffHunk": "@@ -43,3 +47,96 @@ object TypeCheckResult {\n     def isSuccess: Boolean = false\n   }\n }\n+\n+/**\n+ * Describe what data type of the child expression can be accepted by a expression.\n+ */\n+abstract class AcceptType {\n+  def accept(dt: DataType): Boolean\n+}\n+\n+/**\n+ * Accept all of the data types for the child expression.\n+ */\n+case object AcceptAllType extends AcceptType {\n+  def accept(dt: DataType): Boolean = true\n+  override def toString(): String = {\n+    \"AcceptAllType\"\n+  }\n+}\n+\n+/**\n+ * Accept all of the data types, except the [[UserDefinedType]] for the child expression.\n+ */\n+case object AcceptAllTypeExceptUserDefinedType extends AcceptType {\n+  def accept(dt: DataType): Boolean = if (dt.isInstanceOf[UserDefinedType[_]]) false else true"
  }],
  "prId": 7034
}, {
  "comments": [{
    "author": {
      "login": "tarekbecker"
    },
    "body": "`def accept(dt: DataType): Boolean = (dt.isInstanceOf[IntegralType] || dt == NullType)`\n",
    "commit": "e534b87a125d264123216025d16d61da327f837d",
    "createdAt": "2015-07-02T04:37:42Z",
    "diffHunk": "@@ -43,3 +47,96 @@ object TypeCheckResult {\n     def isSuccess: Boolean = false\n   }\n }\n+\n+/**\n+ * Describe what data type of the child expression can be accepted by a expression.\n+ */\n+abstract class AcceptType {\n+  def accept(dt: DataType): Boolean\n+}\n+\n+/**\n+ * Accept all of the data types for the child expression.\n+ */\n+case object AcceptAllType extends AcceptType {\n+  def accept(dt: DataType): Boolean = true\n+  override def toString(): String = {\n+    \"AcceptAllType\"\n+  }\n+}\n+\n+/**\n+ * Accept all of the data types, except the [[UserDefinedType]] for the child expression.\n+ */\n+case object AcceptAllTypeExceptUserDefinedType extends AcceptType {\n+  def accept(dt: DataType): Boolean = if (dt.isInstanceOf[UserDefinedType[_]]) false else true\n+\n+  override def toString(): String = {\n+    \"AcceptAllTypeExceptUserDefinedType\"\n+  }\n+}\n+\n+/**\n+ * Accept all of the [[IntegralType]] data types, as well as the [[NullType]]\n+ * for the child expression.\n+ */\n+case object AcceptIntegralType extends AcceptType {\n+  def accept(dt: DataType): Boolean =\n+    if (dt.isInstanceOf[IntegralType] || dt == NullType) true else false"
  }],
  "prId": 7034
}]