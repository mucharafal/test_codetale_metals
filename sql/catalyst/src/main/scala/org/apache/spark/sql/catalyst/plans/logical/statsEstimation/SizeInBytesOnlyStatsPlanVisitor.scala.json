[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "cc @juliuszsompolski @cloud-fan ",
    "commit": "f72084e9edfbdaf6334b13c54f1534eca5e88806",
    "createdAt": "2018-04-30T16:50:39Z",
    "diffHunk": "@@ -33,8 +33,8 @@ object SizeInBytesOnlyStatsPlanVisitor extends LogicalPlanVisitor[Statistics] {\n   private def visitUnaryNode(p: UnaryNode): Statistics = {\n     // There should be some overhead in Row object, the size should not be zero when there is\n     // no columns, this help to prevent divide-by-zero error.\n-    val childRowSize = p.child.output.map(_.dataType.defaultSize).sum + 8\n-    val outputRowSize = p.output.map(_.dataType.defaultSize).sum + 8\n+    val childRowSize = EstimationUtils.getSizePerRow(p.child.output)\n+    val outputRowSize = EstimationUtils.getSizePerRow(p.output)",
    "line": 7
  }],
  "prId": 21189
}]