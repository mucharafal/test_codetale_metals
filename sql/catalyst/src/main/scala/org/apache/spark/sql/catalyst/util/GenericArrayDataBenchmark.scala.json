[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "This is different from `MiscBenchmark`. It is a class that extends BenchmarkBase. You probably have to move it to sql/core though.\n",
    "commit": "7697e5f49c8d05806b26ad360f2d789fd8c707c7",
    "createdAt": "2016-06-22T05:27:39Z",
    "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[GenericArrayData]] for Dense and Sparse with primitive type\n+ */\n+object GenericArrayDataBenchmark {"
  }],
  "prId": 13758
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "`for (n <- until items)` is expensive and it will probably dominate the costs of the benchmark. Please use a while loop.\n",
    "commit": "7697e5f49c8d05806b26ad360f2d789fd8c707c7",
    "createdAt": "2016-06-22T05:29:56Z",
    "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[GenericArrayData]] for Dense and Sparse with primitive type\n+ */\n+object GenericArrayDataBenchmark {\n+/*\n+  def allocateGenericIntArray(iters: Int): Unit = {\n+    val count = 1024 * 1024 * 10\n+    var array: GenericArrayData = null\n+\n+    val primitiveIntArray = new Array[Int](count)\n+    val denseIntArray = { i: Int =>\n+      for (n <- 0L until iters) {"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "I will do this\n",
    "commit": "7697e5f49c8d05806b26ad360f2d789fd8c707c7",
    "createdAt": "2016-06-22T07:20:45Z",
    "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[GenericArrayData]] for Dense and Sparse with primitive type\n+ */\n+object GenericArrayDataBenchmark {\n+/*\n+  def allocateGenericIntArray(iters: Int): Unit = {\n+    val count = 1024 * 1024 * 10\n+    var array: GenericArrayData = null\n+\n+    val primitiveIntArray = new Array[Int](count)\n+    val denseIntArray = { i: Int =>\n+      for (n <- 0L until iters) {"
  }],
  "prId": 13758
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "I am quite curious to see the results here. I cannot really imagine these being different.\n",
    "commit": "7697e5f49c8d05806b26ad360f2d789fd8c707c7",
    "createdAt": "2016-06-22T05:31:16Z",
    "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[GenericArrayData]] for Dense and Sparse with primitive type\n+ */\n+object GenericArrayDataBenchmark {\n+/*\n+  def allocateGenericIntArray(iters: Int): Unit = {"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "Thank for your suggestions. Now, this benchmark works well in my cloud instance. I saw pretty good results (2x~ performance improvement) for all of three types (allocation, primitive array, and get elements). Later, I will commit the latest version.\n",
    "commit": "7697e5f49c8d05806b26ad360f2d789fd8c707c7",
    "createdAt": "2016-06-22T08:43:21Z",
    "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.spark.util.Benchmark\n+\n+/**\n+ * Benchmark [[GenericArrayData]] for Dense and Sparse with primitive type\n+ */\n+object GenericArrayDataBenchmark {\n+/*\n+  def allocateGenericIntArray(iters: Int): Unit = {"
  }],
  "prId": 13758
}]