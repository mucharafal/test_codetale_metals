[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "make it clear here that create table has no data operation. purely metadata.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-11T23:22:38Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL."
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Done.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-13T22:32:38Z",
    "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL."
  }],
  "prId": 24029
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Just so I understand correctly, `DDLResolution` returns an instance of `org.apache.spark.sql.execution.datasources.CreateTable`, which is still a subtype of `LogicalPlan`. It's a little confusing at least to me to have two `LogicalPlan` types be named the same thing, but they represent different steps of the query planning, and are in different packages.\r\n\r\nWhat if we called this variant of `CreateTable`, say, making this `ParsedCreateTable` or perhaps `CreateTableStatement`?\r\n\r\nAlso, when we start partitioning between V1 sources and V2 sources in the Analyzer, are we going to return the same type of `LogicalPlan` back - a `org.apache.spark.sql.execution.datasources.CreateTable` regardless of it's loading V1 or V2? Or should we instead be naming `org.apache.spark.sql.execution.datasources.CreateTableV1`, anticipating the Analyzer to return instances of `CreateTableV2` plans down the road?",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T04:38:55Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL.\n+ *\n+ * This is a metadata-only command and is not used to write data to the created table.\n+ */\n+case class CreateTable("
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I'm like using packages to differentiate between the plans. The rules use `sql.CreateTable` and I think that is clear.\r\n\r\nI'd also like to avoid renaming the v1 classes to include `V1` in their names. That's going to create a lot of conflicts when working with branches and it's hard enough to maintain PRs already given the amount of needless renaming, whitespace changes, and import changes happening.\r\n\r\nSimilarly, I want to avoid adding `V2` to class names because we eventually want to remove the old packages and support. Then we would be left with a lot of v2 class names, or we would have to refactor to rename. Using packages as qualifiers is well supported in Scala, so I like to use that for this.\r\n\r\nBut, that point is more about managing v1 and v2 plans, not the parsed plans. If there's consensus around renaming to `ParsedCreateTable` and `ParsedCreateTableAsSelect`, we can do that. Or, I can rename the `sql` package to `parsed`.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T15:40:54Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL.\n+ *\n+ * This is a metadata-only command and is not used to write data to the created table.\n+ */\n+case class CreateTable("
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "In the future then when we do split between `v1` and `v2`, perhaps we can clarify by qualifying just the package? Though I guess that goes against Spark convention, but something like this:\r\n\r\n```\r\nimport org.apache.spark...v1\r\nimport org.apache.spark...v2\r\n\r\n...\r\n\r\nreturn v1.CreateTable(...)\r\n...\r\nreturn v2.CreateTable(...)\r\n```\r\nOtherwise we could alias the imports:\r\n\r\n```\r\nimport org.apache.spark....v1.{CreateTable => CreateTableV1}\r\nimport org.apache.spark....v2.{CreateTable => CreateTableV2}\r\n```\r\n\r\nWhatever the case then I think disambiguating by package is fine.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T16:00:23Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL.\n+ *\n+ * This is a metadata-only command and is not used to write data to the created table.\n+ */\n+case class CreateTable("
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Sounds good to me! I'll leave this as is for now.\r\n\r\nWe can also bring this up in the sync to see if there are other opinions.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T16:06:37Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL.\n+ *\n+ * This is a metadata-only command and is not used to write data to the created table.\n+ */\n+case class CreateTable("
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "> I'm like using packages to differentiate between the plans.\r\n\r\nThis reminds me that we add `Exec` postfix to all physical plans, because we think it's not ideal to differentiate plans only by package name. When you search a class by name with an IDE, it will take you more time to pick a class with different package names.\r\n\r\n`CreateTableStatemet` sounds good to me.",
    "commit": "6c9b9dc05b815ce9130d5fad7452cda513f57648",
    "createdAt": "2019-03-21T19:42:11Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.catalog.BucketSpec\n+import org.apache.spark.sql.catalyst.expressions.Attribute\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.types.StructType\n+\n+/**\n+ * A CREATE TABLE command, as parsed from SQL.\n+ *\n+ * This is a metadata-only command and is not used to write data to the created table.\n+ */\n+case class CreateTable("
  }],
  "prId": 24029
}]