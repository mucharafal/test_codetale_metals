[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "indentation: we need two more spaces.",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-29T22:08:03Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)\n+        if udf.deterministic && children.forall(_.isInstanceOf[Literal]) => {"
  }, {
    "author": {
      "login": "skambha"
    },
    "body": "There are places that I see 2 spaces in the code and also 4 spaces for the case guards.  \r\nfwiw,  I did go ahead and added 4 now.  ",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-30T23:10:26Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)\n+        if udf.deterministic && children.forall(_.isInstanceOf[Literal]) => {"
  }],
  "prId": 24593
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "We can omit `{}` in `case` statement.",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-29T22:09:48Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)\n+        if udf.deterministic && children.forall(_.isInstanceOf[Literal]) => {\n+        val res = udf.eval(null)\n+        Literal(res, dataType)\n+      }"
  }, {
    "author": {
      "login": "skambha"
    },
    "body": "done",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-30T23:13:21Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)\n+        if udf.deterministic && children.forall(_.isInstanceOf[Literal]) => {\n+        val res = udf.eval(null)\n+        Literal(res, dataType)\n+      }"
  }],
  "prId": 24593
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "`udfDeterministic` seems to be matched here in order to put in the next line instead of `udf.deterministic`. Or, we can ignore this as `_` here.",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-29T22:18:36Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)"
  }, {
    "author": {
      "login": "skambha"
    },
    "body": "done",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-30T23:13:35Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {\n+  def apply(plan: LogicalPlan): LogicalPlan =\n+    if (!SQLConf.get.deterministicLiteralUdfFoldEnabled) {\n+      plan\n+    } else plan transformAllExpressions {\n+      case udf @ ScalaUDF(_, dataType, children, _, _, _, _, udfDeterministic)"
  }],
  "prId": 24593
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Optimizer name seems to be unclear. `DeterministicLiteralUDF`? `FoldDeterministicLiteralUDF` or `DeterministicLiteralUDFFolding` might be better.",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-29T22:20:56Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {"
  }, {
    "author": {
      "login": "skambha"
    },
    "body": "Used DeterministicLiteralUDFFolding and renamed files...  Thank you. ",
    "commit": "93241b30eeb071d575142b26db36c40cad5b93b6",
    "createdAt": "2019-05-30T23:14:36Z",
    "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Literal, ScalaUDF}\n+import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.rules._\n+import org.apache.spark.sql.internal.SQLConf\n+\n+/**\n+ * If the UDF is deterministic and if the children are all literal, we can replace the udf\n+ * with the output of the udf serialized\n+ */\n+object DeterministicLiteralUDF extends Rule[LogicalPlan] {"
  }],
  "prId": 24593
}]