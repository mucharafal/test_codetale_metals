[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "@davies can you review this part?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T06:57:11Z",
    "diffHunk": "@@ -230,12 +230,24 @@ abstract class UnaryExpression extends Expression with trees.UnaryNode[Expressio\n     val eval = child.gen(ctx)\n     // reuse the previous isNull\n     ev.isNull = eval.isNull\n-    eval.code + s\"\"\"\n-      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};\n-      if (!${ev.isNull}) {\n-        ${ev.primitive} = ${f(eval.primitive)};\n-      }\n-    \"\"\"\n+    child match {\n+      case Literal(null, _) =>"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "ping @davies \n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:19:34Z",
    "diffHunk": "@@ -230,12 +230,24 @@ abstract class UnaryExpression extends Expression with trees.UnaryNode[Expressio\n     val eval = child.gen(ctx)\n     // reuse the previous isNull\n     ev.isNull = eval.isNull\n-    eval.code + s\"\"\"\n-      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};\n-      if (!${ev.isNull}) {\n-        ${ev.primitive} = ${f(eval.primitive)};\n-      }\n-    \"\"\"\n+    child match {\n+      case Literal(null, _) =>"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "I'd like to fix this in Literal.genCode, or you have do fix it in many places, for example, BinaryExpression also should fix it.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:28:46Z",
    "diffHunk": "@@ -230,12 +230,24 @@ abstract class UnaryExpression extends Expression with trees.UnaryNode[Expressio\n     val eval = child.gen(ctx)\n     // reuse the previous isNull\n     ev.isNull = eval.isNull\n-    eval.code + s\"\"\"\n-      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};\n-      if (!${ev.isNull}) {\n-        ${ev.primitive} = ${f(eval.primitive)};\n-      }\n-    \"\"\"\n+    child match {\n+      case Literal(null, _) =>"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Without this change, it will throws exception\n\n```\nCode generation of strlen(null) failed:\n[info]   \n[info]         int primitive1 = -1;\n[info]         if (!true) {\n[info]           primitive1 = (null).length();\n[info]         }\n```\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:35:09Z",
    "diffHunk": "@@ -230,12 +230,24 @@ abstract class UnaryExpression extends Expression with trees.UnaryNode[Expressio\n     val eval = child.gen(ctx)\n     // reuse the previous isNull\n     ev.isNull = eval.isNull\n-    eval.code + s\"\"\"\n-      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};\n-      if (!${ev.isNull}) {\n-        ${ev.primitive} = ${f(eval.primitive)};\n-      }\n-    \"\"\"\n+    child match {\n+      case Literal(null, _) =>"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Ok, I will leave this for you @davies, and disable the null test temporally in the unit test.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-11T00:41:04Z",
    "diffHunk": "@@ -230,12 +230,24 @@ abstract class UnaryExpression extends Expression with trees.UnaryNode[Expressio\n     val eval = child.gen(ctx)\n     // reuse the previous isNull\n     ev.isNull = eval.isNull\n-    eval.code + s\"\"\"\n-      ${ctx.javaType(dataType)} ${ev.primitive} = ${ctx.defaultValue(dataType)};\n-      if (!${ev.isNull}) {\n-        ${ev.primitive} = ${f(eval.primitive)};\n-      }\n-    \"\"\"\n+    child match {\n+      case Literal(null, _) =>"
  }],
  "prId": 6724
}]