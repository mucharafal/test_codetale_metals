[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Can we share some code by making a new base abstract class (e.g., `PostgreCastBase`?) for the dialect casts? https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/postgreSQL/PostgreCastToBoolean.scala",
    "commit": "08c71f1eaf0e6f867b964832ccc360a50cf6fc53",
    "createdAt": "2019-11-14T05:54:54Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.expressions.postgreSQL\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{CastBase, Expression, TimeZoneAwareExpression}\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, JavaCode}\n+import org.apache.spark.sql.catalyst.expressions.codegen.Block._\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils.epochDaysToMicros\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+case class PostgreCastToTimestamp(child: Expression, timeZoneId: Option[String])\n+  extends CastBase{"
  }],
  "prId": 26472
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "Can you re-check the formats before running the tests?",
    "commit": "08c71f1eaf0e6f867b964832ccc360a50cf6fc53",
    "createdAt": "2019-11-14T05:55:22Z",
    "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.expressions.postgreSQL\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{CastBase, Expression, TimeZoneAwareExpression}\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, JavaCode}\n+import org.apache.spark.sql.catalyst.expressions.codegen.Block._\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils.epochDaysToMicros\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+case class PostgreCastToTimestamp(child: Expression, timeZoneId: Option[String])\n+  extends CastBase{\n+  override def dataType: DataType = TimestampType\n+\n+  override protected def ansiEnabled: Boolean = SQLConf.get.ansiEnabled\n+\n+  override def nullable: Boolean = true\n+\n+  /** Returns a copy of this expression with the specified timeZoneId. */\n+  override def withTimeZone(timeZoneId: String): TimeZoneAwareExpression =\n+    copy(timeZoneId = Option(timeZoneId))\n+\n+  override def castToTimestamp(from: DataType): Any => Any = from match {\n+    case StringType =>\n+      buildCast[UTF8String](_, utfs => DateTimeUtils.stringToTimestamp(utfs, zoneId).orNull)\n+    case DateType =>\n+      buildCast[Int](_, d => epochDaysToMicros(d, zoneId))\n+    case _ =>\n+      throw new AnalysisException(\n+        s\"Cannot cast type $from to Timestamp.\")\n+  }\n+\n+  private[this] def castToTimestampCode(\n+                                         from: DataType,\n+                                         ctx: CodegenContext): CastFunction = from match {"
  }],
  "prId": 26472
}]