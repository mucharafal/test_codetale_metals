[{
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "nit: `,[` -> `, [`.\r\n\r\nshall we add `examples` and `since` too?",
    "commit": "0e3d1de37bfc73cf1cc5aa33b2f5d80aa154a06b",
    "createdAt": "2018-06-25T01:42:59Z",
    "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import scala.util.Try\n+\n+import com.fasterxml.jackson.core.JsonFactory\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{AttributeReference, Expression, ExpressionDescription, JsonExprUtils}\n+import org.apache.spark.sql.catalyst.json.{CreateJacksonParser, JsonInferSchema, JSONOptions}\n+import org.apache.spark.sql.catalyst.json.JsonInferSchema.compatibleRootType\n+import org.apache.spark.sql.catalyst.util.DropMalformedMode\n+import org.apache.spark.sql.types.{DataType, StringType, StructType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+@ExpressionDescription(\n+  usage = \"\"\"_FUNC_(expr,[options]) - Infers schema for JSON `expr` by using JSON `options`.\"\"\")"
  }],
  "prId": 21626
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "There's inline table expression: `SELECT _FUNC_(json) FROM VALUES ('{\"a\":1}'), ('{\"a\": 3}') json_table(json)` FYI.",
    "commit": "0e3d1de37bfc73cf1cc5aa33b2f5d80aa154a06b",
    "createdAt": "2018-06-26T13:43:05Z",
    "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import scala.util.Try\n+\n+import com.fasterxml.jackson.core.JsonFactory\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{AttributeReference, Expression, ExpressionDescription, JsonExprUtils}\n+import org.apache.spark.sql.catalyst.json.{CreateJacksonParser, JsonInferSchema, JSONOptions}\n+import org.apache.spark.sql.catalyst.json.JsonInferSchema.compatibleRootType\n+import org.apache.spark.sql.catalyst.util.DropMalformedMode\n+import org.apache.spark.sql.types.{DataType, StringType, StructType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+@ExpressionDescription(\n+  usage = \"\"\"_FUNC_(expr, [options]) - Infers schema for JSON `expr` by using JSON `options`.\"\"\",\n+  examples = \"\"\"\n+    Examples:\n+      > CREATE TEMPORARY VIEW json_table(json) AS SELECT * FROM VALUES ('{\"a\":1}'), ('{\"a\": 3}');\n+      > SELECT _FUNC_(json) FROM json_table;",
    "line": 37
  }],
  "prId": 21626
}, {
  "comments": [{
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "wait do we take options too? - seems no tests. Let's have one test passing options.",
    "commit": "0e3d1de37bfc73cf1cc5aa33b2f5d80aa154a06b",
    "createdAt": "2018-06-26T13:53:44Z",
    "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import scala.util.Try\n+\n+import com.fasterxml.jackson.core.JsonFactory\n+\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.{AttributeReference, Expression, ExpressionDescription, JsonExprUtils}\n+import org.apache.spark.sql.catalyst.json.{CreateJacksonParser, JsonInferSchema, JSONOptions}\n+import org.apache.spark.sql.catalyst.json.JsonInferSchema.compatibleRootType\n+import org.apache.spark.sql.catalyst.util.DropMalformedMode\n+import org.apache.spark.sql.types.{DataType, StringType, StructType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+@ExpressionDescription(\n+  usage = \"\"\"_FUNC_(expr, [options]) - Infers schema for JSON `expr` by using JSON `options`.\"\"\",\n+  examples = \"\"\"\n+    Examples:\n+      > CREATE TEMPORARY VIEW json_table(json) AS SELECT * FROM VALUES ('{\"a\":1}'), ('{\"a\": 3}');\n+      > SELECT _FUNC_(json) FROM json_table;\n+       struct<a:bigint>\n+  \"\"\",\n+  since = \"2.4.0\")\n+case class InferSchema(\n+  child: Expression,\n+  inputFormat: String,\n+  options: Map[String, String],\n+  override val mutableAggBufferOffset: Int,\n+  override val inputAggBufferOffset: Int) extends ImperativeAggregate {\n+\n+  require(inputFormat.toLowerCase == \"json\", \"Only JSON format is supported\")\n+\n+  def this(child: Expression) = {\n+    this(\n+      child = child,\n+      inputFormat = \"json\",\n+      options = Map.empty[String, String],\n+      mutableAggBufferOffset = 0,\n+      inputAggBufferOffset = 0)\n+  }\n+\n+  def this(child: Expression, options: Expression) = {",
    "line": 59
  }],
  "prId": 21626
}]