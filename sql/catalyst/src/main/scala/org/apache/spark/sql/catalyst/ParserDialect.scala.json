[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "+1 on naming it ParserInterface/Parser\n",
    "commit": "09c47f05e6da9937c5168eda49a9f5078564d2a9",
    "createdAt": "2016-01-18T08:55:02Z",
    "diffHunk": "@@ -17,16 +17,12 @@\n \n package org.apache.spark.sql.catalyst\n \n-import org.apache.spark.annotation.DeveloperApi\n import org.apache.spark.sql.catalyst.expressions.Expression\n import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n \n /**\n- * Root class of SQL Parser Dialect, and we don't guarantee the binary\n- * compatibility for the future release, let's keep it as the internal\n- * interface for advanced user.\n+ * Interface for a parser.\n  */\n-@DeveloperApi\n trait ParserDialect {",
    "line": 15
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "OK I will do that in a separate pull request.\n",
    "commit": "09c47f05e6da9937c5168eda49a9f5078564d2a9",
    "createdAt": "2016-01-18T19:10:00Z",
    "diffHunk": "@@ -17,16 +17,12 @@\n \n package org.apache.spark.sql.catalyst\n \n-import org.apache.spark.annotation.DeveloperApi\n import org.apache.spark.sql.catalyst.expressions.Expression\n import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n \n /**\n- * Root class of SQL Parser Dialect, and we don't guarantee the binary\n- * compatibility for the future release, let's keep it as the internal\n- * interface for advanced user.\n+ * Interface for a parser.\n  */\n-@DeveloperApi\n trait ParserDialect {",
    "line": 15
  }],
  "prId": 10801
}]