[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "is this check necessary?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T20:55:44Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override  def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = {\n+    if (!resolved) {"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "maybe StringLength?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T20:56:10Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "remove an extra space\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T20:57:12Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override  def nullable: Boolean = child.nullable"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "remove the extra pair of parentheses \n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T20:57:34Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override  def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = {\n+    if (!resolved) {\n+      throw new UnresolvedException(this, s\"Cannot resolve since $children are not resolved\")\n+    }\n+    IntegerType\n+  }\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(StringType)\n+\n+  override def eval(input: Row): Any = {\n+    val string = child.eval(input)\n+\n+    if ((string == null)) {"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "no `()` in Java\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T23:45:05Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override  def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = {\n+    if (!resolved) {\n+      throw new UnresolvedException(this, s\"Cannot resolve since $children are not resolved\")\n+    }\n+    IntegerType\n+  }\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(StringType)\n+\n+  override def eval(input: Row): Any = {\n+    val string = child.eval(input)\n+\n+    if ((string == null)) {\n+      null\n+    } else {\n+      string.asInstanceOf[UTF8String].length\n+    }\n+  }\n+\n+  override def toString: String = s\"LENGTH($child)\"\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c => s\"($c).length()\")"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "oh, it has. never mind.\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-09T23:46:01Z",
    "diffHunk": "@@ -294,3 +294,40 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class Length(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override  def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = {\n+    if (!resolved) {\n+      throw new UnresolvedException(this, s\"Cannot resolve since $children are not resolved\")\n+    }\n+    IntegerType\n+  }\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(StringType)\n+\n+  override def eval(input: Row): Any = {\n+    val string = child.eval(input)\n+\n+    if ((string == null)) {\n+      null\n+    } else {\n+      string.asInstanceOf[UTF8String].length\n+    }\n+  }\n+\n+  override def toString: String = s\"LENGTH($child)\"\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    defineCodeGen(ctx, ev, c => s\"($c).length()\")"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "maybe we can make them denser, i.e. remove the blank lines between the trivial functions?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T06:58:55Z",
    "diffHunk": "@@ -294,3 +294,35 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class StringLength(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "actually can we push the definition of foldable & nullable into UnaryExpression?\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T07:03:18Z",
    "diffHunk": "@@ -294,3 +294,35 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class StringLength(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable"
  }],
  "prId": 6724
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "remove this blank line\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T07:03:37Z",
    "diffHunk": "@@ -294,3 +294,35 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class StringLength(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = IntegerType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(StringType)\n+\n+  override def eval(input: Row): Any = {\n+    val string = child.eval(input)\n+"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "and condense the following into one line?\n\n```\nif (string.eq(null)) null else string.asInstanceOf[UTF8String].length\n```\n",
    "commit": "aaa3c3150746ff8d824e20000cb5bb28a0696a3f",
    "createdAt": "2015-06-10T07:04:03Z",
    "diffHunk": "@@ -294,3 +294,35 @@ object Substring {\n     apply(str, pos, Literal(Integer.MAX_VALUE))\n   }\n }\n+\n+/**\n+ * A function that return the length of the given string expression.\n+ */\n+case class StringLength(child: Expression) extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def foldable: Boolean = child.foldable\n+\n+  override def nullable: Boolean = child.nullable\n+\n+  override def dataType: DataType = IntegerType\n+\n+  override def expectedChildTypes: Seq[DataType] = Seq(StringType)\n+\n+  override def eval(input: Row): Any = {\n+    val string = child.eval(input)\n+"
  }],
  "prId": 6724
}]