[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "class name should starts with upper case",
    "commit": "75aeda757b10b8601cb386a53a87d888fc6556e1",
    "createdAt": "2019-09-24T15:21:43Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.expressions.postgreSQL.PostgreCastStringToBoolean\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.{BooleanType, StringType}\n+\n+object PostgreSQLDialect {\n+  def postgreSQLDialectRules(conf: SQLConf): List[Rule[LogicalPlan]] =\n+    if (conf.usePostgreSQLDialect) {\n+      postgreCastStringToBoolean(conf) ::\n+        Nil\n+    } else {\n+      Nil\n+    }\n+\n+  case class postgreCastStringToBoolean(conf: SQLConf) extends Rule[LogicalPlan] with Logging {"
  }],
  "prId": 25697
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "super nit: according to my experience, it's easier to extend using this style\r\n```\r\nSeq(\r\n  rule1,\r\n  rule2,\r\n  ...\r\n)\r\n```",
    "commit": "75aeda757b10b8601cb386a53a87d888fc6556e1",
    "createdAt": "2019-09-24T15:23:02Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.expressions.postgreSQL.PostgreCastStringToBoolean\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.{BooleanType, StringType}\n+\n+object PostgreSQLDialect {\n+  def postgreSQLDialectRules(conf: SQLConf): List[Rule[LogicalPlan]] =\n+    if (conf.usePostgreSQLDialect) {\n+      postgreCastStringToBoolean(conf) ::"
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "Let's keep the style consistent with the other rule batches.",
    "commit": "75aeda757b10b8601cb386a53a87d888fc6556e1",
    "createdAt": "2019-09-25T03:48:28Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.expressions.postgreSQL.PostgreCastStringToBoolean\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.{BooleanType, StringType}\n+\n+object PostgreSQLDialect {\n+  def postgreSQLDialectRules(conf: SQLConf): List[Rule[LogicalPlan]] =\n+    if (conf.usePostgreSQLDialect) {\n+      postgreCastStringToBoolean(conf) ::"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Optimizer uses `::` to combine batches, not rules.",
    "commit": "75aeda757b10b8601cb386a53a87d888fc6556e1",
    "createdAt": "2019-09-25T15:08:52Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.internal.Logging\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.expressions.postgreSQL.PostgreCastStringToBoolean\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.{BooleanType, StringType}\n+\n+object PostgreSQLDialect {\n+  def postgreSQLDialectRules(conf: SQLConf): List[Rule[LogicalPlan]] =\n+    if (conf.usePostgreSQLDialect) {\n+      postgreCastStringToBoolean(conf) ::"
  }],
  "prId": 25697
}]