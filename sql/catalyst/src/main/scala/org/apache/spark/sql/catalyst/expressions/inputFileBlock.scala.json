[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "the `Blocks.code` is defined as `override def code: String = blocks.map(_.toString).mkString(\"\\n\")`, is it OK here?\r\n\r\nmaybe we can do\r\n```\r\nval typeDef = s\"final ${CodeGenerator.javaType(dataType)}\"\r\nev.code(code = code\"$typeDef ${ev.value} = $className.getInputFilePath();\", ...)\r\n```",
    "commit": "00cc564d0c6d6af2c443153f55705ec491fdfa1d",
    "createdAt": "2018-05-18T09:04:34Z",
    "diffHunk": "@@ -42,8 +43,8 @@ case class InputFileName() extends LeafExpression with Nondeterministic {\n \n   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n     val className = InputFileBlockHolder.getClass.getName.stripSuffix(\"$\")\n-    ev.copy(code = s\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +\n-      s\"$className.getInputFilePath();\", isNull = FalseLiteral)\n+    ev.copy(code = code\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +\n+      code\"$className.getInputFilePath();\", isNull = FalseLiteral)"
  }],
  "prId": 21193
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "00cc564d0c6d6af2c443153f55705ec491fdfa1d",
    "createdAt": "2018-05-18T09:05:21Z",
    "diffHunk": "@@ -65,8 +66,8 @@ case class InputFileBlockStart() extends LeafExpression with Nondeterministic {\n \n   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n     val className = InputFileBlockHolder.getClass.getName.stripSuffix(\"$\")\n-    ev.copy(code = s\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +\n-      s\"$className.getStartOffset();\", isNull = FalseLiteral)\n+    ev.copy(code = code\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +"
  }],
  "prId": 21193
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "00cc564d0c6d6af2c443153f55705ec491fdfa1d",
    "createdAt": "2018-05-18T09:05:26Z",
    "diffHunk": "@@ -88,7 +89,7 @@ case class InputFileBlockLength() extends LeafExpression with Nondeterministic {\n \n   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n     val className = InputFileBlockHolder.getClass.getName.stripSuffix(\"$\")\n-    ev.copy(code = s\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +\n-      s\"$className.getLength();\", isNull = FalseLiteral)\n+    ev.copy(code = code\"final ${CodeGenerator.javaType(dataType)} ${ev.value} = \" +"
  }],
  "prId": 21193
}]