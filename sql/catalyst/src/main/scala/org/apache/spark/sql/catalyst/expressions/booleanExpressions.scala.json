[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "How about moving this into `predicates.scala`?",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T05:47:05Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "This test class referencing the `nullExpressions.scala`, but moving this into `predicates.scala` is OK too.\r\nWhat do you think?",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T06:59:04Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "+1 for @maropu 's comment. Let's move this to `predicates.scala`.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:41:47Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. I will move this to `predicates.scala`",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T09:39:41Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "As another design choice, how about handling`IS UNKNOWN` just as `IS NULL`, then changing `booleanValue: String` into `booleanValue: Boolean`?",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T05:58:22Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "There exists some different between the two syntax.\r\nhttps://www.postgresql.org/docs/9.1/functions-comparison.html\r\nhave a lot description:\r\n`Notice that IS UNKNOWN and IS NOT UNKNOWN are effectively the same as IS NULL and IS NOT NULL, respectively, except that the input expression must be of Boolean type.`",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T07:06:08Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "Yea, I know the difference. So, I meant we cannot handle the difference in the `IsNull` side? (Just a question and I'm not sure the this is the best approach...)",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T08:17:29Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. thanks for your reminder. I handle the difference in `checkBooleanTestArgs`.\r\n```\r\ndef checkBooleanTestArgs(e: Expression): Unit = e.dataType match {\r\n    case BooleanType | NullType =>\r\n    case other => throw new ParseException(\"argument of boolean test must be boolean or null, \" +\r\n\t        s\"not type $other\", ctx)\r\n}\r\n```\r\n",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T08:32:29Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "@dongjoon-hyun coud you advise us on this?",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-11T08:47:05Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "@maropu @dongjoon-hyun Please take a look at this PR. Thanks.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-16T01:46:04Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Oops. Sorry, @maropu and @beliefer . I'll try to review this PR tomorrow.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-16T04:53:19Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "+1 for @maropu 's direction. Let's reuse the existing one.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:28:44Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. I will change it.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T04:17:33Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Please add `since`, too.\r\n```\r\nsince = \"3.0.0\")\r\n```",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:37:12Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T04:27:18Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Shall we avoid to use `booleanValue: String`? Also, we don't need to have enum-like strings `val TRUE = \"TRUE\"` and so on. The following will be better in `Scala` world.\r\n```scala\r\nobject BooleanTest {\r\n  def calculate(input: Any, booleanValue: Option[Boolean]): Boolean = {\r\n    booleanValue match {\r\n      case Some(true) => input == true\r\n      case Some(false) => input == false\r\n      case None => input == null\r\n      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\r\n        \"FALSE and UNKNOWN.\")\r\n    }\r\n  }\r\n}\r\n```",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T02:48:38Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "@dongjoon-hyun Thanks for your example. I get it.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T04:25:05Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}"
  }],
  "prId": 25074
}, {
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "nit. Empty line.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-17T16:50:21Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)\n+  extends UnaryExpression with Predicate {\n+\n+  override def nullable: Boolean = false\n+\n+  override def eval(input: InternalRow): Any = {\n+    BooleanTest.calculate(child.eval(input), booleanValue)\n+  }\n+\n+  override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n+    defineCodeGen(ctx, ev, input =>\n+      s\"\"\"\n+        org.apache.spark.sql.catalyst.expressions.BooleanTest.calculate($input, \"$booleanValue\")\n+      \"\"\"\n+    )\n+  }\n+\n+  override def sql: String = s\"(${child.sql} IS $booleanValue)\"\n+}\n+"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "Scala style check need file end with an empty line.",
    "commit": "ae126e7aee616d30916d8223d07e5f37384b21f4",
    "createdAt": "2019-07-18T02:56:14Z",
    "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}\n+import org.apache.spark.sql.types.BooleanType\n+\n+/**\n+ * String to indicate which boolean test selected.\n+ */\n+object BooleanTest {\n+  val TRUE = \"TRUE\"\n+  val FALSE = \"FALSE\"\n+  val UNKNOWN = \"UNKNOWN\"\n+\n+  def calculate(input: Any, booleanValue: String): Boolean = {\n+    booleanValue match {\n+      case TRUE => input == true\n+      case FALSE => input == false\n+      case UNKNOWN => input == null\n+      case _ => throw new AnalysisException(\"Boolean test value must be one of TRUE, \" +\n+        \"FALSE and UNKNOWN.\")\n+    }\n+  }\n+}\n+\n+/**\n+ * Test the value of an expression is true, false, or unknown.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, booleanValue) - Returns true if `expr` equals booleanValue, \" +\n+    \"or false otherwise.\",\n+  arguments = \"\"\"\n+    Arguments:\n+      * expr - a boolean expression\n+      * booleanValue - a boolean value represented by a string. booleanValue must be one\n+          of TRUE, FALSE and UNKNOWN.\n+  \"\"\",\n+  examples = \"\"\"\n+    Examples:\n+    > SELECT _FUNC_(1 > 2, true);\n+       false\n+    > SELECT _FUNC_(2 > 1, true);\n+       true\n+  \"\"\")\n+case class BooleanTest(child: Expression, booleanValue: String)\n+  extends UnaryExpression with Predicate {\n+\n+  override def nullable: Boolean = false\n+\n+  override def eval(input: InternalRow): Any = {\n+    BooleanTest.calculate(child.eval(input), booleanValue)\n+  }\n+\n+  override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {\n+    defineCodeGen(ctx, ev, input =>\n+      s\"\"\"\n+        org.apache.spark.sql.catalyst.expressions.BooleanTest.calculate($input, \"$booleanValue\")\n+      \"\"\"\n+    )\n+  }\n+\n+  override def sql: String = s\"(${child.sql} IS $booleanValue)\"\n+}\n+"
  }],
  "prId": 25074
}]