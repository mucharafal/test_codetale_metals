[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I think we should always check the size. Such a big map is very likely to cause problems.",
    "commit": "38f3bfa237570a3204c355774bb323973f962d67",
    "createdAt": "2018-12-04T12:58:03Z",
    "diffHunk": "@@ -47,13 +48,17 @@ class ArrayBasedMapBuilder(keyType: DataType, valueType: DataType) extends Seria\n   private lazy val keyGetter = InternalRow.getAccessor(keyType)\n   private lazy val valueGetter = InternalRow.getAccessor(valueType)\n \n-  def put(key: Any, value: Any): Unit = {\n+  def put(key: Any, value: Any, withSizeCheck: Boolean = false): Unit = {\n     if (key == null) {\n       throw new RuntimeException(\"Cannot use null as map key.\")\n     }\n \n     val index = keyToIndex.getOrDefault(key, -1)\n     if (index == -1) {\n+      if (withSizeCheck && size >= ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH) {"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "this flag is just for perf reasons, we can skip the check in some conditions and I didn't want to introduce perf overhead if not needed. If we remove the flag we would do the comparison for each item, also when it is not needed.",
    "commit": "38f3bfa237570a3204c355774bb323973f962d67",
    "createdAt": "2018-12-04T14:44:34Z",
    "diffHunk": "@@ -47,13 +48,17 @@ class ArrayBasedMapBuilder(keyType: DataType, valueType: DataType) extends Seria\n   private lazy val keyGetter = InternalRow.getAccessor(keyType)\n   private lazy val valueGetter = InternalRow.getAccessor(valueType)\n \n-  def put(key: Any, value: Any): Unit = {\n+  def put(key: Any, value: Any, withSizeCheck: Boolean = false): Unit = {\n     if (key == null) {\n       throw new RuntimeException(\"Cannot use null as map key.\")\n     }\n \n     val index = keyToIndex.getOrDefault(key, -1)\n     if (index == -1) {\n+      if (withSizeCheck && size >= ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH) {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "hmmm, I'd like to avoid premature optimization. Actually how much perf this can save? This code block is already doing some heavy work.",
    "commit": "38f3bfa237570a3204c355774bb323973f962d67",
    "createdAt": "2018-12-04T15:01:58Z",
    "diffHunk": "@@ -47,13 +48,17 @@ class ArrayBasedMapBuilder(keyType: DataType, valueType: DataType) extends Seria\n   private lazy val keyGetter = InternalRow.getAccessor(keyType)\n   private lazy val valueGetter = InternalRow.getAccessor(valueType)\n \n-  def put(key: Any, value: Any): Unit = {\n+  def put(key: Any, value: Any, withSizeCheck: Boolean = false): Unit = {\n     if (key == null) {\n       throw new RuntimeException(\"Cannot use null as map key.\")\n     }\n \n     val index = keyToIndex.getOrDefault(key, -1)\n     if (index == -1) {\n+      if (withSizeCheck && size >= ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH) {"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "ok, let me remove it then, thanks.",
    "commit": "38f3bfa237570a3204c355774bb323973f962d67",
    "createdAt": "2018-12-04T15:07:40Z",
    "diffHunk": "@@ -47,13 +48,17 @@ class ArrayBasedMapBuilder(keyType: DataType, valueType: DataType) extends Seria\n   private lazy val keyGetter = InternalRow.getAccessor(keyType)\n   private lazy val valueGetter = InternalRow.getAccessor(valueType)\n \n-  def put(key: Any, value: Any): Unit = {\n+  def put(key: Any, value: Any, withSizeCheck: Boolean = false): Unit = {\n     if (key == null) {\n       throw new RuntimeException(\"Cannot use null as map key.\")\n     }\n \n     val index = keyToIndex.getOrDefault(key, -1)\n     if (index == -1) {\n+      if (withSizeCheck && size >= ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH) {"
  }],
  "prId": 23217
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `concat` -> `build`",
    "commit": "38f3bfa237570a3204c355774bb323973f962d67",
    "createdAt": "2018-12-04T12:58:25Z",
    "diffHunk": "@@ -47,13 +48,17 @@ class ArrayBasedMapBuilder(keyType: DataType, valueType: DataType) extends Seria\n   private lazy val keyGetter = InternalRow.getAccessor(keyType)\n   private lazy val valueGetter = InternalRow.getAccessor(valueType)\n \n-  def put(key: Any, value: Any): Unit = {\n+  def put(key: Any, value: Any, withSizeCheck: Boolean = false): Unit = {\n     if (key == null) {\n       throw new RuntimeException(\"Cannot use null as map key.\")\n     }\n \n     val index = keyToIndex.getOrDefault(key, -1)\n     if (index == -1) {\n+      if (withSizeCheck && size >= ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH) {\n+        throw new RuntimeException(s\"Unsuccessful attempt to concat maps with $size elements \" +"
  }],
  "prId": 23217
}]