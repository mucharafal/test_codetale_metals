[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Why was this moved?\r\n\r\nIt is difficult to see whether anything changed in this class. If the move was not required, please move it back.",
    "commit": "3e2949131a8a7579149a7dd4153650461f5b5da2",
    "createdAt": "2019-06-05T17:46:06Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, NamedExpression, UpCast}\n+import org.apache.spark.sql.catalyst.plans.logical.{AppendData, LogicalPlan, OverwriteByExpression, OverwritePartitionsDynamic, Project}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * Resolves columns of an output table from the data in a logical plan. This rule will:\n+ *\n+ * - Reorder columns when the write is by name\n+ * - Insert safe casts when data types do not match\n+ * - Insert aliases when column names do not match\n+ * - Detect plans that are not compatible with the output table and throw AnalysisException\n+ */\n+object ResolveOutputRelation extends Rule[LogicalPlan] {",
    "line": 37
  }, {
    "author": {
      "login": "gengliangwang"
    },
    "body": "> move it outside of the Analyzer class, so that we can call its methods.\r\n\r\nAs per @cloud-fan commented in https://github.com/apache/spark/pull/24721/files#r287800626\r\n",
    "commit": "3e2949131a8a7579149a7dd4153650461f5b5da2",
    "createdAt": "2019-06-06T02:26:57Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, NamedExpression, UpCast}\n+import org.apache.spark.sql.catalyst.plans.logical.{AppendData, LogicalPlan, OverwriteByExpression, OverwritePartitionsDynamic, Project}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * Resolves columns of an output table from the data in a logical plan. This rule will:\n+ *\n+ * - Reorder columns when the write is by name\n+ * - Insert safe casts when data types do not match\n+ * - Insert aliases when column names do not match\n+ * - Detect plans that are not compatible with the output table and throw AnalysisException\n+ */\n+object ResolveOutputRelation extends Rule[LogicalPlan] {",
    "line": 37
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Were there any modifications other than moving this?\r\n\r\nI think that the right way to expose those functions is to move them to a utility class, not to expose this rule itself.",
    "commit": "3e2949131a8a7579149a7dd4153650461f5b5da2",
    "createdAt": "2019-06-06T18:10:39Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, NamedExpression, UpCast}\n+import org.apache.spark.sql.catalyst.plans.logical.{AppendData, LogicalPlan, OverwriteByExpression, OverwritePartitionsDynamic, Project}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * Resolves columns of an output table from the data in a logical plan. This rule will:\n+ *\n+ * - Reorder columns when the write is by name\n+ * - Insert safe casts when data types do not match\n+ * - Insert aliases when column names do not match\n+ * - Detect plans that are not compatible with the output table and throw AnalysisException\n+ */\n+object ResolveOutputRelation extends Rule[LogicalPlan] {",
    "line": 37
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'm OK with moving them to a utility class, but it's better to put analyzer/optimizer rules in its own file, instead of in the `Analyzer` object (can be done in another PR if we decide to create the util class in this PR) ",
    "commit": "3e2949131a8a7579149a7dd4153650461f5b5da2",
    "createdAt": "2019-06-09T02:12:17Z",
    "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import scala.collection.mutable\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, NamedExpression, UpCast}\n+import org.apache.spark.sql.catalyst.plans.logical.{AppendData, LogicalPlan, OverwriteByExpression, OverwritePartitionsDynamic, Project}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+import org.apache.spark.sql.internal.SQLConf\n+import org.apache.spark.sql.types.DataType\n+\n+/**\n+ * Resolves columns of an output table from the data in a logical plan. This rule will:\n+ *\n+ * - Reorder columns when the write is by name\n+ * - Insert safe casts when data types do not match\n+ * - Insert aliases when column names do not match\n+ * - Detect plans that are not compatible with the output table and throw AnalysisException\n+ */\n+object ResolveOutputRelation extends Rule[LogicalPlan] {",
    "line": 37
  }],
  "prId": 24806
}]