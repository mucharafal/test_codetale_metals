[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "I'm a bit confused. Normally Spark SQL uses microsecond precision for TimestampType. When it converts it to LongType, it uses second precision. Here we're using milliseconds. Wouldn't that be super confusing to reason about?\n",
    "commit": "87d8618234a86d666a711a97080e2b014214b84a",
    "createdAt": "2016-11-01T16:01:38Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n+import org.apache.spark.sql.types.MetadataBuilder\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+object EventTimeWatermark {\n+  /** The [[org.apache.spark.sql.types.Metadata]] key used to hold the eventTime watermark delay. */\n+  val delayKey = \"spark.watermarkDelay\"\n+}\n+\n+/**\n+ * Used to mark a user specified column as holding the event time for a row.\n+ */\n+case class EventTimeWatermark(\n+    eventTime: Attribute,\n+    delay: CalendarInterval,\n+    child: LogicalPlan) extends LogicalPlan {\n+\n+  // Update the metadata on the eventTime column to include the desired delay.\n+  override val output: Seq[Attribute] = child.output.map { a =>\n+    if (a semanticEquals eventTime) {\n+      val updatedMetadata = new MetadataBuilder()\n+        .withMetadata(a.metadata)\n+        .putLong(EventTimeWatermark.delayKey, delay.milliseconds)",
    "line": 42
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "I switched it to using `CalendarInterval` to make it clearer what units were being used where.  I chose milliseconds because it seemed like the right granularity.  Microseconds are too short for the global coordination required and seconds lack granularity.  It should be easy to change, and I'm open to that if there's consensus this is too confusing though.\n",
    "commit": "87d8618234a86d666a711a97080e2b014214b84a",
    "createdAt": "2016-11-01T18:48:17Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n+import org.apache.spark.sql.types.MetadataBuilder\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+object EventTimeWatermark {\n+  /** The [[org.apache.spark.sql.types.Metadata]] key used to hold the eventTime watermark delay. */\n+  val delayKey = \"spark.watermarkDelay\"\n+}\n+\n+/**\n+ * Used to mark a user specified column as holding the event time for a row.\n+ */\n+case class EventTimeWatermark(\n+    eventTime: Attribute,\n+    delay: CalendarInterval,\n+    child: LogicalPlan) extends LogicalPlan {\n+\n+  // Update the metadata on the eventTime column to include the desired delay.\n+  override val output: Seq[Attribute] = child.output.map { a =>\n+    if (a semanticEquals eventTime) {\n+      val updatedMetadata = new MetadataBuilder()\n+        .withMetadata(a.metadata)\n+        .putLong(EventTimeWatermark.delayKey, delay.milliseconds)",
    "line": 42
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Updating the key to include `Ms`\n",
    "commit": "87d8618234a86d666a711a97080e2b014214b84a",
    "createdAt": "2016-11-02T00:27:58Z",
    "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, Expression}\n+import org.apache.spark.sql.types.MetadataBuilder\n+import org.apache.spark.unsafe.types.CalendarInterval\n+\n+object EventTimeWatermark {\n+  /** The [[org.apache.spark.sql.types.Metadata]] key used to hold the eventTime watermark delay. */\n+  val delayKey = \"spark.watermarkDelay\"\n+}\n+\n+/**\n+ * Used to mark a user specified column as holding the event time for a row.\n+ */\n+case class EventTimeWatermark(\n+    eventTime: Attribute,\n+    delay: CalendarInterval,\n+    child: LogicalPlan) extends LogicalPlan {\n+\n+  // Update the metadata on the eventTime column to include the desired delay.\n+  override val output: Seq[Attribute] = child.output.map { a =>\n+    if (a semanticEquals eventTime) {\n+      val updatedMetadata = new MetadataBuilder()\n+        .withMetadata(a.metadata)\n+        .putLong(EventTimeWatermark.delayKey, delay.milliseconds)",
    "line": 42
  }],
  "prId": 15702
}]