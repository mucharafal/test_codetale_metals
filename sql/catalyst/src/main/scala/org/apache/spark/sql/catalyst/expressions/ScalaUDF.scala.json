[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "We probably need to override the `foldable` as well. Something like:\n\n``` scala\noverride def foldable: Boolean = deterministic && children.forall(_.foldable)\n```\n\nOr change it in `Expression` directly?\n",
    "commit": "d2ee5eee7c569b551779a2d73a98c84fd335a4ac",
    "createdAt": "2015-11-02T08:01:18Z",
    "diffHunk": "@@ -30,13 +30,16 @@ case class ScalaUDF(\n     function: AnyRef,\n     dataType: DataType,\n     children: Seq[Expression],\n-    inputTypes: Seq[DataType] = Nil)\n+    inputTypes: Seq[DataType] = Nil,\n+    isDeterministic: Boolean = true)\n   extends Expression with ImplicitCastInputTypes with CodegenFallback {\n \n   override def nullable: Boolean = true\n \n   override def toString: String = s\"UDF(${children.mkString(\",\")})\"\n \n+  override def deterministic: Boolean = isDeterministic && children.forall(_.deterministic)"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "+1.\nI think we can't fold any nondeterministic expressions, we should make it a common behaviour of `Expression`\n",
    "commit": "d2ee5eee7c569b551779a2d73a98c84fd335a4ac",
    "createdAt": "2015-11-02T10:43:21Z",
    "diffHunk": "@@ -30,13 +30,16 @@ case class ScalaUDF(\n     function: AnyRef,\n     dataType: DataType,\n     children: Seq[Expression],\n-    inputTypes: Seq[DataType] = Nil)\n+    inputTypes: Seq[DataType] = Nil,\n+    isDeterministic: Boolean = true)\n   extends Expression with ImplicitCastInputTypes with CodegenFallback {\n \n   override def nullable: Boolean = true\n \n   override def toString: String = s\"UDF(${children.mkString(\",\")})\"\n \n+  override def deterministic: Boolean = isDeterministic && children.forall(_.deterministic)"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "This does seem reasonable.\n",
    "commit": "d2ee5eee7c569b551779a2d73a98c84fd335a4ac",
    "createdAt": "2015-11-02T16:55:46Z",
    "diffHunk": "@@ -30,13 +30,16 @@ case class ScalaUDF(\n     function: AnyRef,\n     dataType: DataType,\n     children: Seq[Expression],\n-    inputTypes: Seq[DataType] = Nil)\n+    inputTypes: Seq[DataType] = Nil,\n+    isDeterministic: Boolean = true)\n   extends Expression with ImplicitCastInputTypes with CodegenFallback {\n \n   override def nullable: Boolean = true\n \n   override def toString: String = s\"UDF(${children.mkString(\",\")})\"\n \n+  override def deterministic: Boolean = isDeterministic && children.forall(_.deterministic)"
  }],
  "prId": 9393
}, {
  "comments": [{
    "author": {
      "login": "yhuai"
    },
    "body": "I override `foldable` at here. We can later take a look at how we override `foldable` in other places and see if we need to make any change.\n",
    "commit": "d2ee5eee7c569b551779a2d73a98c84fd335a4ac",
    "createdAt": "2015-11-02T20:03:30Z",
    "diffHunk": "@@ -30,13 +30,18 @@ case class ScalaUDF(\n     function: AnyRef,\n     dataType: DataType,\n     children: Seq[Expression],\n-    inputTypes: Seq[DataType] = Nil)\n+    inputTypes: Seq[DataType] = Nil,\n+    isDeterministic: Boolean = true)\n   extends Expression with ImplicitCastInputTypes with CodegenFallback {\n \n   override def nullable: Boolean = true\n \n   override def toString: String = s\"UDF(${children.mkString(\",\")})\"\n \n+  override def foldable: Boolean = deterministic && children.forall(_.foldable)",
    "line": 13
  }],
  "prId": 9393
}]