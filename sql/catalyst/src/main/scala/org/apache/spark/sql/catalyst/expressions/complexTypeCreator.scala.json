[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "@hvanhovell  Although this is merged, I have a question about this `NamePlaceholder`.\n\nIs it necessary? Actually it has no function and will be replaced with the field name later in analysis.\n\nThe resolution of `CreateNamedStruct` is depended on the field expressions, actually. So if we directly use the field name, seems it is no harm too?\n",
    "commit": "c0263d7cc136d7c00455fb74748755ffc5eda8ce",
    "createdAt": "2016-11-03T08:45:54Z",
    "diffHunk": "@@ -172,110 +174,80 @@ case class CreateMap(children: Seq[Expression]) extends Expression {\n }\n \n /**\n- * Returns a Row containing the evaluation of all children expressions.\n+ * An expression representing a not yet available attribute name. This expression is unevaluable\n+ * and as its name suggests it is a temporary place holder until we're able to determine the\n+ * actual attribute name.\n  */\n-@ExpressionDescription(\n-  usage = \"_FUNC_(col1, col2, col3, ...) - Creates a struct with the given field values.\")\n-case class CreateStruct(children: Seq[Expression]) extends Expression {\n-\n-  override def foldable: Boolean = children.forall(_.foldable)\n-\n-  override lazy val dataType: StructType = {\n-    val fields = children.zipWithIndex.map { case (child, idx) =>\n-      child match {\n-        case ne: NamedExpression =>\n-          StructField(ne.name, ne.dataType, ne.nullable, ne.metadata)\n-        case _ =>\n-          StructField(s\"col${idx + 1}\", child.dataType, child.nullable, Metadata.empty)\n-      }\n-    }\n-    StructType(fields)\n-  }\n-\n+case object NamePlaceholder extends LeafExpression with Unevaluable {",
    "line": 40
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "oh. I got it. nvm. Some unresolved named expressions cannot be accessed of `name` property.\n",
    "commit": "c0263d7cc136d7c00455fb74748755ffc5eda8ce",
    "createdAt": "2016-11-03T08:49:07Z",
    "diffHunk": "@@ -172,110 +174,80 @@ case class CreateMap(children: Seq[Expression]) extends Expression {\n }\n \n /**\n- * Returns a Row containing the evaluation of all children expressions.\n+ * An expression representing a not yet available attribute name. This expression is unevaluable\n+ * and as its name suggests it is a temporary place holder until we're able to determine the\n+ * actual attribute name.\n  */\n-@ExpressionDescription(\n-  usage = \"_FUNC_(col1, col2, col3, ...) - Creates a struct with the given field values.\")\n-case class CreateStruct(children: Seq[Expression]) extends Expression {\n-\n-  override def foldable: Boolean = children.forall(_.foldable)\n-\n-  override lazy val dataType: StructType = {\n-    val fields = children.zipWithIndex.map { case (child, idx) =>\n-      child match {\n-        case ne: NamedExpression =>\n-          StructField(ne.name, ne.dataType, ne.nullable, ne.metadata)\n-        case _ =>\n-          StructField(s\"col${idx + 1}\", child.dataType, child.nullable, Metadata.empty)\n-      }\n-    }\n-    StructType(fields)\n-  }\n-\n+case object NamePlaceholder extends LeafExpression with Unevaluable {",
    "line": 40
  }, {
    "author": {
      "login": "hvanhovell"
    },
    "body": "Yeah, I was thinking the same thing at first and I tried a few things. However this was the most straightforward way of getting it to work.\n",
    "commit": "c0263d7cc136d7c00455fb74748755ffc5eda8ce",
    "createdAt": "2016-11-03T11:17:31Z",
    "diffHunk": "@@ -172,110 +174,80 @@ case class CreateMap(children: Seq[Expression]) extends Expression {\n }\n \n /**\n- * Returns a Row containing the evaluation of all children expressions.\n+ * An expression representing a not yet available attribute name. This expression is unevaluable\n+ * and as its name suggests it is a temporary place holder until we're able to determine the\n+ * actual attribute name.\n  */\n-@ExpressionDescription(\n-  usage = \"_FUNC_(col1, col2, col3, ...) - Creates a struct with the given field values.\")\n-case class CreateStruct(children: Seq[Expression]) extends Expression {\n-\n-  override def foldable: Boolean = children.forall(_.foldable)\n-\n-  override lazy val dataType: StructType = {\n-    val fields = children.zipWithIndex.map { case (child, idx) =>\n-      child match {\n-        case ne: NamedExpression =>\n-          StructField(ne.name, ne.dataType, ne.nullable, ne.metadata)\n-        case _ =>\n-          StructField(s\"col${idx + 1}\", child.dataType, child.nullable, Metadata.empty)\n-      }\n-    }\n-    StructType(fields)\n-  }\n-\n+case object NamePlaceholder extends LeafExpression with Unevaluable {",
    "line": 40
  }],
  "prId": 15718
}]