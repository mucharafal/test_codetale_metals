[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "the overhead of `lazy val` might be bigger than always computing the value. Can we add `lazy val` when we have benchmarks to prove it's necessary?",
    "commit": "cdb24aee62b7a1d8d0a6bdba1291782fbc4ee987",
    "createdAt": "2019-03-24T22:40:23Z",
    "diffHunk": "@@ -58,20 +58,19 @@ object ReplaceExpressions extends Rule[LogicalPlan] {\n  */\n object ComputeCurrentTime extends Rule[LogicalPlan] {\n   def apply(plan: LogicalPlan): LogicalPlan = {\n-    val currentDates = mutable.Map.empty[String, Literal]\n-    val timeExpr = CurrentTimestamp()\n-    val timestamp = timeExpr.eval(EmptyRow).asInstanceOf[Long]\n-    val currentTime = Literal.create(timestamp, timeExpr.dataType)\n+    lazy val currentDate = {"
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "If you have some concerns about performance, I could remove `lazy` or use the approach with `currentDates.getOrElseUpdate`.",
    "commit": "cdb24aee62b7a1d8d0a6bdba1291782fbc4ee987",
    "createdAt": "2019-03-24T22:42:19Z",
    "diffHunk": "@@ -58,20 +58,19 @@ object ReplaceExpressions extends Rule[LogicalPlan] {\n  */\n object ComputeCurrentTime extends Rule[LogicalPlan] {\n   def apply(plan: LogicalPlan): LogicalPlan = {\n-    val currentDates = mutable.Map.empty[String, Literal]\n-    val timeExpr = CurrentTimestamp()\n-    val timestamp = timeExpr.eval(EmptyRow).asInstanceOf[Long]\n-    val currentTime = Literal.create(timestamp, timeExpr.dataType)\n+    lazy val currentDate = {"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'd expect to see\r\n```\r\n...\r\nval currentDate = ...\r\n...\r\nval currentTime = ...\r\nplan transformAllExpressions {\r\n  case CurrentDate() => currentDate\r\n  case CurrentTimestamp() => currentTime\r\n}\r\n```",
    "commit": "cdb24aee62b7a1d8d0a6bdba1291782fbc4ee987",
    "createdAt": "2019-03-26T15:23:44Z",
    "diffHunk": "@@ -58,20 +58,19 @@ object ReplaceExpressions extends Rule[LogicalPlan] {\n  */\n object ComputeCurrentTime extends Rule[LogicalPlan] {\n   def apply(plan: LogicalPlan): LogicalPlan = {\n-    val currentDates = mutable.Map.empty[String, Literal]\n-    val timeExpr = CurrentTimestamp()\n-    val timestamp = timeExpr.eval(EmptyRow).asInstanceOf[Long]\n-    val currentTime = Literal.create(timestamp, timeExpr.dataType)\n+    lazy val currentDate = {"
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "I removed lazy",
    "commit": "cdb24aee62b7a1d8d0a6bdba1291782fbc4ee987",
    "createdAt": "2019-03-28T19:35:32Z",
    "diffHunk": "@@ -58,20 +58,19 @@ object ReplaceExpressions extends Rule[LogicalPlan] {\n  */\n object ComputeCurrentTime extends Rule[LogicalPlan] {\n   def apply(plan: LogicalPlan): LogicalPlan = {\n-    val currentDates = mutable.Map.empty[String, Literal]\n-    val timeExpr = CurrentTimestamp()\n-    val timestamp = timeExpr.eval(EmptyRow).asInstanceOf[Long]\n-    val currentTime = Literal.create(timestamp, timeExpr.dataType)\n+    lazy val currentDate = {"
  }],
  "prId": 24185
}]