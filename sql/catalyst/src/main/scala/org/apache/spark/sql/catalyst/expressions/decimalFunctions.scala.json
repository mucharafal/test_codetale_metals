[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "Why clone here?\n",
    "commit": "5d2e2eba25377cbd6376a356c382f310f535f2a2",
    "createdAt": "2015-12-10T10:08:59Z",
    "diffHunk": "@@ -66,10 +66,44 @@ case class MakeDecimal(child: Expression, precision: Int, scale: Int) extends Un\n  * An expression used to wrap the children when promote the precision of DecimalType to avoid\n  * promote multiple times.\n  */\n-case class ChangeDecimalPrecision(child: Expression) extends UnaryExpression {\n+case class PromotePrecision(child: Expression) extends UnaryExpression {\n   override def dataType: DataType = child.dataType\n   override def eval(input: InternalRow): Any = child.eval(input)\n   override def gen(ctx: CodeGenContext): GeneratedExpressionCode = child.gen(ctx)\n   override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = \"\"\n-  override def prettyName: String = \"change_decimal_precision\"\n+  override def prettyName: String = \"promote_precision\"\n+}\n+\n+/**\n+ * Rounds the decimal to given scale and check whether the decimal can fit in provided precision\n+ * or not, returns null if not.\n+ */\n+case class CheckOverflow(child: Expression, dataType: DecimalType) extends UnaryExpression {\n+\n+  override def nullable: Boolean = true\n+\n+  override def nullSafeEval(input: Any): Any = {\n+    val d = input.asInstanceOf[Decimal].clone()",
    "line": 23
  }],
  "prId": 8287
}]