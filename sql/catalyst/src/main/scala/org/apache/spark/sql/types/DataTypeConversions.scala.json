[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Make `ISO8601GMT` this as thread local? or leave a TODO for future improvement.\n",
    "commit": "603919fabdb77ab3a584440b79174678f637c197",
    "createdAt": "2015-01-07T14:56:05Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.text.SimpleDateFormat\n+\n+import org.apache.spark.sql.catalyst.ScalaReflection\n+import org.apache.spark.sql.types.decimal.Decimal\n+\n+\n+protected[sql] object DataTypeConversions {\n+\n+  def stringToTime(s: String): java.util.Date = {\n+    if (!s.contains('T')) {\n+      // JDBC escape string\n+      if (s.contains(' ')) {\n+        java.sql.Timestamp.valueOf(s)\n+      } else {\n+        java.sql.Date.valueOf(s)\n+      }\n+    } else if (s.endsWith(\"Z\")) {\n+      // this is zero timezone of ISO8601\n+      stringToTime(s.substring(0, s.length - 1) + \"GMT-00:00\")\n+    } else if (s.indexOf(\"GMT\") == -1) {\n+      // timezone with ISO8601\n+      val inset = \"+00.00\".length\n+      val s0 = s.substring(0, s.length - inset)\n+      val s1 = s.substring(s.length - inset, s.length)\n+      if (s0.substring(s0.lastIndexOf(':')).contains('.')) {\n+        stringToTime(s0 + \"GMT\" + s1)\n+      } else {\n+        stringToTime(s0 + \".0GMT\" + s1)\n+      }\n+    } else {\n+      // ISO8601 with GMT insert\n+      val ISO8601GMT: SimpleDateFormat = new SimpleDateFormat( \"yyyy-MM-dd'T'HH:mm:ss.SSSz\" )",
    "line": 51
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "What do you mean? I don't think I changed this. Simply copied it from a file that was deleted.\n",
    "commit": "603919fabdb77ab3a584440b79174678f637c197",
    "createdAt": "2015-01-07T18:48:00Z",
    "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.text.SimpleDateFormat\n+\n+import org.apache.spark.sql.catalyst.ScalaReflection\n+import org.apache.spark.sql.types.decimal.Decimal\n+\n+\n+protected[sql] object DataTypeConversions {\n+\n+  def stringToTime(s: String): java.util.Date = {\n+    if (!s.contains('T')) {\n+      // JDBC escape string\n+      if (s.contains(' ')) {\n+        java.sql.Timestamp.valueOf(s)\n+      } else {\n+        java.sql.Date.valueOf(s)\n+      }\n+    } else if (s.endsWith(\"Z\")) {\n+      // this is zero timezone of ISO8601\n+      stringToTime(s.substring(0, s.length - 1) + \"GMT-00:00\")\n+    } else if (s.indexOf(\"GMT\") == -1) {\n+      // timezone with ISO8601\n+      val inset = \"+00.00\".length\n+      val s0 = s.substring(0, s.length - inset)\n+      val s1 = s.substring(s.length - inset, s.length)\n+      if (s0.substring(s0.lastIndexOf(':')).contains('.')) {\n+        stringToTime(s0 + \"GMT\" + s1)\n+      } else {\n+        stringToTime(s0 + \".0GMT\" + s1)\n+      }\n+    } else {\n+      // ISO8601 with GMT insert\n+      val ISO8601GMT: SimpleDateFormat = new SimpleDateFormat( \"yyyy-MM-dd'T'HH:mm:ss.SSSz\" )",
    "line": 51
  }],
  "prId": 3925
}]