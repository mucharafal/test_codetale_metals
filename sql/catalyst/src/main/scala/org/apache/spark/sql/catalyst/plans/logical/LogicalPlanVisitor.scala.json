[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Since `LogicalPlan` already covers all the other cases, it is fine to cover the limited operators in the current stage.",
    "commit": "9c32d2507d3f4f269e17e841a4a4e4920b35a5e9",
    "createdAt": "2017-07-01T03:11:20Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+/**\n+ * A visitor pattern for traversing a [[LogicalPlan]] tree and compute some properties.\n+ */\n+trait LogicalPlanVisitor[T] {\n+\n+  def visit(p: LogicalPlan): T = p match {\n+    case p: Aggregate => visitAggregate(p)\n+    case p: Distinct => visitDistinct(p)\n+    case p: Except => visitExcept(p)\n+    case p: Expand => visitExpand(p)\n+    case p: Filter => visitFilter(p)\n+    case p: Generate => visitGenerate(p)\n+    case p: GlobalLimit => visitGlobalLimit(p)\n+    case p: Intersect => visitIntersect(p)\n+    case p: Join => visitJoin(p)\n+    case p: LocalLimit => visitLocalLimit(p)\n+    case p: Pivot => visitPivot(p)\n+    case p: Project => visitProject(p)\n+    case p: Range => visitRange(p)\n+    case p: Repartition => visitRepartition(p)\n+    case p: RepartitionByExpression => visitRepartitionByExpr(p)\n+    case p: Sample => visitSample(p)\n+    case p: ScriptTransformation => visitScriptTransform(p)\n+    case p: Union => visitUnion(p)\n+    case p: ResolvedHint => visitHint(p)\n+    case p: LogicalPlan => default(p)",
    "line": 45
  }],
  "prId": 18479
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "It sounds like they are sorted by the name of logical operators. We can adjust the order later.",
    "commit": "9c32d2507d3f4f269e17e841a4a4e4920b35a5e9",
    "createdAt": "2017-07-01T03:12:44Z",
    "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical\n+\n+/**\n+ * A visitor pattern for traversing a [[LogicalPlan]] tree and compute some properties.\n+ */\n+trait LogicalPlanVisitor[T] {\n+\n+  def visit(p: LogicalPlan): T = p match {\n+    case p: Aggregate => visitAggregate(p)\n+    case p: Distinct => visitDistinct(p)\n+    case p: Except => visitExcept(p)\n+    case p: Expand => visitExpand(p)\n+    case p: Filter => visitFilter(p)\n+    case p: Generate => visitGenerate(p)\n+    case p: GlobalLimit => visitGlobalLimit(p)\n+    case p: Intersect => visitIntersect(p)\n+    case p: Join => visitJoin(p)\n+    case p: LocalLimit => visitLocalLimit(p)\n+    case p: Pivot => visitPivot(p)\n+    case p: Project => visitProject(p)\n+    case p: Range => visitRange(p)\n+    case p: Repartition => visitRepartition(p)\n+    case p: RepartitionByExpression => visitRepartitionByExpr(p)\n+    case p: Sample => visitSample(p)\n+    case p: ScriptTransformation => visitScriptTransform(p)\n+    case p: Union => visitUnion(p)\n+    case p: ResolvedHint => visitHint(p)",
    "line": 44
  }],
  "prId": 18479
}]