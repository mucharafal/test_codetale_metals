[{
  "comments": [{
    "author": {
      "login": "jiangxb1987"
    },
    "body": "Perhaps we should use `toAttribute` instead of `references` for `NamedExpression`? Otherwise the `AttributeSet.contains` method may return false result. IMO we should seprate the purpose of cacheing expressions as attributes from cacheing expression.refercences.\n",
    "commit": "654b92613ba1fb3e3bcc480efc0f06a3138d1edf",
    "createdAt": "2016-10-17T03:32:02Z",
    "diffHunk": "@@ -17,19 +17,26 @@\n \n package org.apache.spark.sql.catalyst.expressions\n \n+import org.apache.spark.sql.catalyst.analysis.Star\n+\n protected class AttributeEquals(val a: Attribute) {\n   override def hashCode() = a.exprId.hashCode()\n-  override def equals(other: Any) = other match {\n-    case otherReference: AttributeEquals => a.exprId == otherReference.a.exprId\n-    case otherAttribute => false\n+  override def equals(other: Any) = (a, other.asInstanceOf[AttributeEquals].a) match {\n+    case (a1: AttributeReference, a2: AttributeReference) => a1.exprId == a2.exprId\n+    case (a1, a2) => a1 == a2\n   }\n }\n \n object AttributeSet {\n-  /** Constructs a new [[AttributeSet]] given a sequence of [[Attribute Attributes]]. */\n-  def apply(baseSet: Seq[Attribute]) = {\n-    new AttributeSet(baseSet.map(new AttributeEquals(_)).toSet)\n-  }\n+  def apply(a: Attribute) =\n+    new AttributeSet(Set(new AttributeEquals(a)))\n+\n+  /** Constructs a new [[AttributeSet]] given a sequence of [[Expression Expressions]]. */\n+  def apply(baseSet: Seq[Expression]) =\n+    new AttributeSet(\n+      baseSet\n+        .flatMap(_.references)",
    "line": 29
  }],
  "prId": 2657
}]