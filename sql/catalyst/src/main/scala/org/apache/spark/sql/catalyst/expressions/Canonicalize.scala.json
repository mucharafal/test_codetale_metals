[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Can we remove these `assert`s? It seems to be verified with your test cases now.",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-27T20:04:35Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n-    case Not(GreaterThan(l, r)) => LessThanOrEqual(l, r)\n-    case Not(LessThan(l, r)) if l.hashCode() > r.hashCode() => LessThan(r, l)\n-    case Not(LessThan(l, r)) => GreaterThanOrEqual(l, r)\n-    case Not(GreaterThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n-    case Not(GreaterThanOrEqual(l, r)) => LessThan(l, r)\n-    case Not(LessThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n-    case Not(LessThanOrEqual(l, r)) => GreaterThan(l, r)\n+    case Not(GreaterThan(l, r)) =>\n+      assert(l.hashCode() <= r.hashCode())"
  }, {
    "author": {
      "login": "lw-lin"
    },
    "body": "thanks! maybe an alternative way is to add comments saying it's guaranteed that `l.hashcode <= r.hashcode`, otherwise people might wonder why there is no `case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode()` at their first glance.",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-28T03:23:42Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n-    case Not(GreaterThan(l, r)) => LessThanOrEqual(l, r)\n-    case Not(LessThan(l, r)) if l.hashCode() > r.hashCode() => LessThan(r, l)\n-    case Not(LessThan(l, r)) => GreaterThanOrEqual(l, r)\n-    case Not(GreaterThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n-    case Not(GreaterThanOrEqual(l, r)) => LessThan(l, r)\n-    case Not(LessThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n-    case Not(LessThanOrEqual(l, r)) => GreaterThan(l, r)\n+    case Not(GreaterThan(l, r)) =>\n+      assert(l.hashCode() <= r.hashCode())"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "It should be fine to get rid of `assert`, as long as we add the code comments and the needed test cases.",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T06:22:19Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n-    case Not(GreaterThan(l, r)) => LessThanOrEqual(l, r)\n-    case Not(LessThan(l, r)) if l.hashCode() > r.hashCode() => LessThan(r, l)\n-    case Not(LessThan(l, r)) => GreaterThanOrEqual(l, r)\n-    case Not(GreaterThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n-    case Not(GreaterThanOrEqual(l, r)) => LessThan(l, r)\n-    case Not(LessThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n-    case Not(LessThanOrEqual(l, r)) => GreaterThan(l, r)\n+    case Not(GreaterThan(l, r)) =>\n+      assert(l.hashCode() <= r.hashCode())"
  }],
  "prId": 16719
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "This is a dead code, because our canonicalization order is bottom up, right?",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T06:21:01Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)",
    "line": 13
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "uh. Just saw the above comment from @dongjoon-hyun . Thanks!",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T06:38:53Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)",
    "line": 13
  }],
  "prId": 16719
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "I think we can remove `assert`, because the test cases already cover the scenario. You can add a comment to explain. ",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T07:58:11Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n-    case Not(GreaterThan(l, r)) => LessThanOrEqual(l, r)\n-    case Not(LessThan(l, r)) if l.hashCode() > r.hashCode() => LessThan(r, l)\n-    case Not(LessThan(l, r)) => GreaterThanOrEqual(l, r)\n-    case Not(GreaterThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n-    case Not(GreaterThanOrEqual(l, r)) => LessThan(l, r)\n-    case Not(LessThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n-    case Not(LessThanOrEqual(l, r)) => GreaterThan(l, r)\n+    case Not(GreaterThan(l, r)) =>\n+      assert(l.hashCode() <= r.hashCode())"
  }, {
    "author": {
      "login": "lw-lin"
    },
    "body": "sure!",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T08:00:56Z",
    "diffHunk": "@@ -78,14 +78,18 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n-    case Not(GreaterThan(l, r)) => LessThanOrEqual(l, r)\n-    case Not(LessThan(l, r)) if l.hashCode() > r.hashCode() => LessThan(r, l)\n-    case Not(LessThan(l, r)) => GreaterThanOrEqual(l, r)\n-    case Not(GreaterThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n-    case Not(GreaterThanOrEqual(l, r)) => LessThan(l, r)\n-    case Not(LessThanOrEqual(l, r)) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n-    case Not(LessThanOrEqual(l, r)) => GreaterThan(l, r)\n+    case Not(GreaterThan(l, r)) =>\n+      assert(l.hashCode() <= r.hashCode())"
  }],
  "prId": 16719
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "To the other reviewers, this PR added test cases in `ExpressionSetSuite.scala` to ensure it. Thus, it is safe to clean the codes.",
    "commit": "c5fc394a2ba1bfcaafa9d19bd92c449639a5d576",
    "createdAt": "2017-01-29T20:57:31Z",
    "diffHunk": "@@ -78,13 +78,11 @@ object Canonicalize extends {\n     case GreaterThanOrEqual(l, r) if l.hashCode() > r.hashCode() => LessThanOrEqual(r, l)\n     case LessThanOrEqual(l, r) if l.hashCode() > r.hashCode() => GreaterThanOrEqual(r, l)\n \n-    case Not(GreaterThan(l, r)) if l.hashCode() > r.hashCode() => GreaterThan(r, l)\n+    // Note in the following `NOT` cases, `l.hashCode() <= r.hashCode()` holds. The reason is that\n+    // canonicalization is conducted bottom-up -- see [[Expression.canonicalized]].",
    "line": 15
  }],
  "prId": 16719
}]