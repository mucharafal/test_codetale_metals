[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "I was thinking just having a new function for checking types, and don't rely on \"resolved\", since they are really doing different things (one for whether some child-expression is unresolved, the other for type mismatch)\n",
    "commit": "a52e35ba7ee090daa39f7d172499a52d74edf7e8",
    "createdAt": "2015-05-25T20:12:03Z",
    "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.sql.catalyst.analysis.UnresolvedException\n+import org.apache.spark.sql.types._\n+\n+trait NumericHolder {\n+  self: Expression =>\n+\n+  protected def baseType: DataType = dataType\n+\n+  lazy val numeric = baseType match {\n+    case n: NumericType => n.numeric.asInstanceOf[Numeric[Any]]\n+    case NullType => UnresolvedNumeric\n+  }\n+}\n+\n+trait OrderingHolder {\n+  self: Expression =>\n+\n+  protected def baseType: DataType = dataType\n+\n+  lazy val ordering = baseType match {\n+    case a: AtomicType => a.ordering.asInstanceOf[Ordering[Any]]\n+    case NullType => UnresolvedOrdering\n+  }\n+}\n+\n+trait TypeEqualConstraint {\n+  self: Expression =>\n+\n+  protected def typeChecker: DataType => Boolean = _ => true\n+\n+  def left: Expression\n+  def right: Expression\n+\n+  final override lazy val resolved =",
    "line": 53
  }],
  "prId": 6152
}]