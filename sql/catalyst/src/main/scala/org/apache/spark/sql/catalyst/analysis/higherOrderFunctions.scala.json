[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's better if we can throw exception if FILTER is specified in an improper place.",
    "commit": "43b15aed468b19efb32c33d43061d7f562e42339",
    "createdAt": "2019-11-08T13:32:03Z",
    "diffHunk": "@@ -33,7 +33,7 @@ import org.apache.spark.sql.types.DataType\n case class ResolveHigherOrderFunctions(catalog: SessionCatalog) extends Rule[LogicalPlan] {\n \n   override def apply(plan: LogicalPlan): LogicalPlan = plan.resolveExpressions {\n-    case u @ UnresolvedFunction(fn, children, false)\n+    case u @ UnresolvedFunction(fn, children, false, _)"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "@cloud-fan Thanks for your remind. I have throw exception in `Analyzer`",
    "commit": "43b15aed468b19efb32c33d43061d7f562e42339",
    "createdAt": "2019-11-11T04:56:06Z",
    "diffHunk": "@@ -33,7 +33,7 @@ import org.apache.spark.sql.types.DataType\n case class ResolveHigherOrderFunctions(catalog: SessionCatalog) extends Rule[LogicalPlan] {\n \n   override def apply(plan: LogicalPlan): LogicalPlan = plan.resolveExpressions {\n-    case u @ UnresolvedFunction(fn, children, false)\n+    case u @ UnresolvedFunction(fn, children, false, _)"
  }],
  "prId": 26420
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "we should also fail if a high order function specifies the filter",
    "commit": "43b15aed468b19efb32c33d43061d7f562e42339",
    "createdAt": "2019-11-19T14:19:41Z",
    "diffHunk": "@@ -33,7 +33,7 @@ import org.apache.spark.sql.types.DataType\n case class ResolveHigherOrderFunctions(catalog: SessionCatalog) extends Rule[LogicalPlan] {\n \n   override def apply(plan: LogicalPlan): LogicalPlan = plan.resolveExpressions {\n-    case u @ UnresolvedFunction(fn, children, false)\n+    case u @ UnresolvedFunction(fn, children, false, _)\n         if hasLambdaAndResolvedArguments(children) =>\n       withPosition(u) {\n         catalog.lookupFunction(fn, children) match {"
  }, {
    "author": {
      "login": "beliefer"
    },
    "body": "OK. I will add it.",
    "commit": "43b15aed468b19efb32c33d43061d7f562e42339",
    "createdAt": "2019-11-20T02:16:38Z",
    "diffHunk": "@@ -33,7 +33,7 @@ import org.apache.spark.sql.types.DataType\n case class ResolveHigherOrderFunctions(catalog: SessionCatalog) extends Rule[LogicalPlan] {\n \n   override def apply(plan: LogicalPlan): LogicalPlan = plan.resolveExpressions {\n-    case u @ UnresolvedFunction(fn, children, false)\n+    case u @ UnresolvedFunction(fn, children, false, _)\n         if hasLambdaAndResolvedArguments(children) =>\n       withPosition(u) {\n         catalog.lookupFunction(fn, children) match {"
  }],
  "prId": 26420
}]