[{
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "Attributes shouldn't be reused between plans. These should be moved into `ShowTables` so that the attribute ID is assigned each time it is instantiated.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-07-31T23:06:39Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())\n+\n+  def attributes(): Seq[AttributeReference] = Seq("
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "This is `def` so new attribute ID will be created whenever `attributes` is invoked. Am I missing something?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-01T18:16:26Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())\n+\n+  def attributes(): Seq[AttributeReference] = Seq("
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "No, you're right. I missed that it was a def.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-01T19:53:41Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())\n+\n+  def attributes(): Seq[AttributeReference] = Seq("
  }],
  "prId": 25247
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "I don't think this is used any longer, and it would use the wrong attributes if it were used. Can you remove it?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-02T18:18:53Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())"
  }, {
    "author": {
      "login": "imback82"
    },
    "body": "Removed. Question: `fromAttributes` just takes `name`, `dataType`,`nullable`, and `metaData` from attributes, so how can this use wrong attributes?",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T00:02:05Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I think you're right that it would create an identical struct type each time, so it isn't a problem that it uses a different set of attributes. But I think it is still a good practice not to do this, assuming that will always be the case.",
    "commit": "6f2fa4e7b8572a6b9dd243f1253e4962af27d40a",
    "createdAt": "2019-08-04T21:28:44Z",
    "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans\n+\n+import org.apache.spark.sql.catalyst.expressions.AttributeReference\n+import org.apache.spark.sql.types.{BooleanType, StringType, StructType}\n+\n+private[sql] object ShowTablesSchema {\n+  val schema = StructType.fromAttributes(attributes())"
  }],
  "prId": 25247
}]