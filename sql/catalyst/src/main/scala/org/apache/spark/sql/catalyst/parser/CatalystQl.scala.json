[{
  "comments": [{
    "author": {
      "login": "nongli"
    },
    "body": "why do you reverse it?\n",
    "commit": "e1349beaf0934a7a47f87ce2490afe804477ac11",
    "createdAt": "2016-03-04T23:19:12Z",
    "diffHunk": "@@ -661,6 +664,36 @@ https://cwiki.apache.org/confluence/display/Hive/Enhanced+Aggregation%2C+Cube%2C\n   val INTEGRAL = \"[+-]?\\\\d+\".r\n   val DECIMAL = \"[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\".r\n \n+  /**\n+   * Flattens the left deep tree with the specified pattern into a list.\n+   */\n+  private def flattenLeftDeepTree(node: ASTNode, pattern: Regex): Seq[ASTNode] = {\n+    val collected = ArrayBuffer[ASTNode]()\n+    var rest = node\n+    while (rest match {\n+      case Token(pattern(), l :: r :: Nil) =>\n+        collected += r\n+        rest = l\n+        true\n+      case _ => false\n+    }) {}\n+    collected += rest\n+    collected.reverse"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "We want to keep the same order as SQL string,\n\n`A OR B OR C` will become  (OR (OR A B) C), collected will be (C, B, A), we should return (A, B, C)\n",
    "commit": "e1349beaf0934a7a47f87ce2490afe804477ac11",
    "createdAt": "2016-03-04T23:31:08Z",
    "diffHunk": "@@ -661,6 +664,36 @@ https://cwiki.apache.org/confluence/display/Hive/Enhanced+Aggregation%2C+Cube%2C\n   val INTEGRAL = \"[+-]?\\\\d+\".r\n   val DECIMAL = \"[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\".r\n \n+  /**\n+   * Flattens the left deep tree with the specified pattern into a list.\n+   */\n+  private def flattenLeftDeepTree(node: ASTNode, pattern: Regex): Seq[ASTNode] = {\n+    val collected = ArrayBuffer[ASTNode]()\n+    var rest = node\n+    while (rest match {\n+      case Token(pattern(), l :: r :: Nil) =>\n+        collected += r\n+        rest = l\n+        true\n+      case _ => false\n+    }) {}\n+    collected += rest\n+    collected.reverse"
  }],
  "prId": 11501
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "`{}`?\n",
    "commit": "e1349beaf0934a7a47f87ce2490afe804477ac11",
    "createdAt": "2016-03-07T18:24:57Z",
    "diffHunk": "@@ -661,6 +664,36 @@ https://cwiki.apache.org/confluence/display/Hive/Enhanced+Aggregation%2C+Cube%2C\n   val INTEGRAL = \"[+-]?\\\\d+\".r\n   val DECIMAL = \"[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\".r\n \n+  /**\n+   * Flattens the left deep tree with the specified pattern into a list.\n+   */\n+  private def flattenLeftDeepTree(node: ASTNode, pattern: Regex): Seq[ASTNode] = {\n+    val collected = ArrayBuffer[ASTNode]()\n+    var rest = node\n+    while (rest match {\n+      case Token(pattern(), l :: r :: Nil) =>\n+        collected += r\n+        rest = l\n+        true\n+      case _ => false\n+    }) {}"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Yeah, we already do the dirty work in the condition, to avoid another match-case in the body of while.\n",
    "commit": "e1349beaf0934a7a47f87ce2490afe804477ac11",
    "createdAt": "2016-03-07T19:12:21Z",
    "diffHunk": "@@ -661,6 +664,36 @@ https://cwiki.apache.org/confluence/display/Hive/Enhanced+Aggregation%2C+Cube%2C\n   val INTEGRAL = \"[+-]?\\\\d+\".r\n   val DECIMAL = \"[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\".r\n \n+  /**\n+   * Flattens the left deep tree with the specified pattern into a list.\n+   */\n+  private def flattenLeftDeepTree(node: ASTNode, pattern: Regex): Seq[ASTNode] = {\n+    val collected = ArrayBuffer[ASTNode]()\n+    var rest = node\n+    while (rest match {\n+      case Token(pattern(), l :: r :: Nil) =>\n+        collected += r\n+        rest = l\n+        true\n+      case _ => false\n+    }) {}"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "maybe add an explicit  \"// do nothing\" comment would help\n",
    "commit": "e1349beaf0934a7a47f87ce2490afe804477ac11",
    "createdAt": "2016-03-07T20:06:38Z",
    "diffHunk": "@@ -661,6 +664,36 @@ https://cwiki.apache.org/confluence/display/Hive/Enhanced+Aggregation%2C+Cube%2C\n   val INTEGRAL = \"[+-]?\\\\d+\".r\n   val DECIMAL = \"[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\".r\n \n+  /**\n+   * Flattens the left deep tree with the specified pattern into a list.\n+   */\n+  private def flattenLeftDeepTree(node: ASTNode, pattern: Regex): Seq[ASTNode] = {\n+    val collected = ArrayBuffer[ASTNode]()\n+    var rest = node\n+    while (rest match {\n+      case Token(pattern(), l :: r :: Nil) =>\n+        collected += r\n+        rest = l\n+        true\n+      case _ => false\n+    }) {}"
  }],
  "prId": 11501
}]