[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `requireFunctionNotExists` is more consistent in this file\n",
    "commit": "e7fb6b2e38f07c72500917564a463c6af35befb9",
    "createdAt": "2016-05-07T07:39:32Z",
    "diffHunk": "@@ -59,17 +59,48 @@ class InMemoryCatalog extends ExternalCatalog {\n     }\n   }\n \n+  private def requireFunctionNotFound(db: String, funcName: String): Unit = {"
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Sure, let me change it. Thanks!\n",
    "commit": "e7fb6b2e38f07c72500917564a463c6af35befb9",
    "createdAt": "2016-05-07T14:25:36Z",
    "diffHunk": "@@ -59,17 +59,48 @@ class InMemoryCatalog extends ExternalCatalog {\n     }\n   }\n \n+  private def requireFunctionNotFound(db: String, funcName: String): Unit = {"
  }],
  "prId": 12960
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `requirePartitionsExists` as it handles a seq of partitions.\n",
    "commit": "e7fb6b2e38f07c72500917564a463c6af35befb9",
    "createdAt": "2016-05-07T07:40:39Z",
    "diffHunk": "@@ -59,17 +59,48 @@ class InMemoryCatalog extends ExternalCatalog {\n     }\n   }\n \n+  private def requireFunctionNotFound(db: String, funcName: String): Unit = {\n+    if (functionExists(db, funcName)) {\n+      throw new AnalysisException(\n+        s\"Function already exists: '$funcName' exists in database '$db'\")\n+    }\n+  }\n+\n   private def requireTableExists(db: String, table: String): Unit = {\n     if (!tableExists(db, table)) {\n       throw new AnalysisException(\n         s\"Table or view not found: '$table' does not exist in database '$db'\")\n     }\n   }\n \n-  private def requirePartitionExists(db: String, table: String, spec: TablePartitionSpec): Unit = {\n-    if (!partitionExists(db, table, spec)) {\n+  private def requireTableNotFound(db: String, table: String): Unit = {\n+    if (tableExists(db, table)) {\n       throw new AnalysisException(\n-        s\"Partition not found: database '$db' table '$table' does not contain: '$spec'\")\n+        s\"Table or view exists: '$table' exists in database '$db'\")\n+    }\n+  }\n+\n+  private def requirePartitionExists("
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Change it now. Thanks!\n",
    "commit": "e7fb6b2e38f07c72500917564a463c6af35befb9",
    "createdAt": "2016-05-07T14:25:49Z",
    "diffHunk": "@@ -59,17 +59,48 @@ class InMemoryCatalog extends ExternalCatalog {\n     }\n   }\n \n+  private def requireFunctionNotFound(db: String, funcName: String): Unit = {\n+    if (functionExists(db, funcName)) {\n+      throw new AnalysisException(\n+        s\"Function already exists: '$funcName' exists in database '$db'\")\n+    }\n+  }\n+\n   private def requireTableExists(db: String, table: String): Unit = {\n     if (!tableExists(db, table)) {\n       throw new AnalysisException(\n         s\"Table or view not found: '$table' does not exist in database '$db'\")\n     }\n   }\n \n-  private def requirePartitionExists(db: String, table: String, spec: TablePartitionSpec): Unit = {\n-    if (!partitionExists(db, table, spec)) {\n+  private def requireTableNotFound(db: String, table: String): Unit = {\n+    if (tableExists(db, table)) {\n       throw new AnalysisException(\n-        s\"Partition not found: database '$db' table '$table' does not contain: '$spec'\")\n+        s\"Table or view exists: '$table' exists in database '$db'\")\n+    }\n+  }\n+\n+  private def requirePartitionExists("
  }],
  "prId": 12960
}, {
  "comments": [{
    "author": {
      "login": "andrewor14"
    },
    "body": "style: `specs.foreach`\n",
    "commit": "e7fb6b2e38f07c72500917564a463c6af35befb9",
    "createdAt": "2016-05-09T17:24:04Z",
    "diffHunk": "@@ -59,17 +59,48 @@ class InMemoryCatalog extends ExternalCatalog {\n     }\n   }\n \n+  private def requireFunctionNotExists(db: String, funcName: String): Unit = {\n+    if (functionExists(db, funcName)) {\n+      throw new AnalysisException(\n+        s\"Function already exists: '$funcName' exists in database '$db'\")\n+    }\n+  }\n+\n   private def requireTableExists(db: String, table: String): Unit = {\n     if (!tableExists(db, table)) {\n       throw new AnalysisException(\n         s\"Table or view not found: '$table' does not exist in database '$db'\")\n     }\n   }\n \n-  private def requirePartitionExists(db: String, table: String, spec: TablePartitionSpec): Unit = {\n-    if (!partitionExists(db, table, spec)) {\n+  private def requireTableNotExists(db: String, table: String): Unit = {\n+    if (tableExists(db, table)) {\n       throw new AnalysisException(\n-        s\"Partition not found: database '$db' table '$table' does not contain: '$spec'\")\n+        s\"Table or view exists: '$table' exists in database '$db'\")\n+    }\n+  }\n+\n+  private def requirePartitionsExist(\n+      db: String,\n+      table: String,\n+      specs: Seq[TablePartitionSpec]): Unit = {\n+    specs foreach { s =>",
    "line": 32
  }],
  "prId": 12960
}]