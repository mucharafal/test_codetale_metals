[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "so rather than estimating like this, can we get the data size of the child node, and use that to estimate the data size of the parent?\r\n\r\nfor fixed length types, we know the size; for variable length types, we assume the size is evenly distributed.\r\n\r\ne.g. if the total length is 1000, and we have rowcount 10, and we have 3 fields: a int, b long, c string\r\n\r\nthen we assume the avg length per row is 100, and the avg length of c would be 100 - 4 - 8 = 88?\r\n",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T05:35:11Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{ColumnStat, LogicalPlan}\n+import org.apache.spark.sql.types.StringType\n+\n+\n+object EstimationUtils {\n+\n+  /** Check if each plan has rowCount in its statistics. */\n+  def rowCountsExist(plans: LogicalPlan*): Boolean =\n+    plans.forall(_.statistics.rowCount.isDefined)\n+\n+  /** Get column stats for output attributes. */\n+  def getOutputMap(inputMap: AttributeMap[ColumnStat], output: Seq[Attribute])\n+    : AttributeMap[ColumnStat] = {\n+    AttributeMap(output.flatMap(a => inputMap.get(a).map(a -> _)))\n+  }\n+\n+  def getRowSize(attributes: Seq[Attribute], attrStats: AttributeMap[ColumnStat]): Long = {\n+    // We assign a generic overhead for a Row object, the actual overhead is different for different\n+    // Row format.\n+    8 + attributes.map { attr =>"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "we can update to use this algorithm in a separate pr. we can merge this pr if we fix the issue with test.\r\n",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T05:35:44Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{ColumnStat, LogicalPlan}\n+import org.apache.spark.sql.types.StringType\n+\n+\n+object EstimationUtils {\n+\n+  /** Check if each plan has rowCount in its statistics. */\n+  def rowCountsExist(plans: LogicalPlan*): Boolean =\n+    plans.forall(_.statistics.rowCount.isDefined)\n+\n+  /** Get column stats for output attributes. */\n+  def getOutputMap(inputMap: AttributeMap[ColumnStat], output: Seq[Attribute])\n+    : AttributeMap[ColumnStat] = {\n+    AttributeMap(output.flatMap(a => inputMap.get(a).map(a -> _)))\n+  }\n+\n+  def getRowSize(attributes: Seq[Attribute], attrStats: AttributeMap[ColumnStat]): Long = {\n+    // We assign a generic overhead for a Row object, the actual overhead is different for different\n+    // Row format.\n+    8 + attributes.map { attr =>"
  }],
  "prId": 16430
}]