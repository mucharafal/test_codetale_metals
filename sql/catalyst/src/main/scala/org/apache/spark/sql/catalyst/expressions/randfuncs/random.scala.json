[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "i think it's ok to not have this package. I only suggested it for math because there were so many of them.\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T20:55:36Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "There can be so many of these as well in the future :)\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T20:59:29Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "how many realistically will we add?\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T21:01:15Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "Well, if we make `RDG` generic, and users can plug in their own distributions, then we won't need to add any. MLlib has 6 generators, but I can think of 3-4 more on top of that.\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T21:06:41Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs"
  }],
  "prId": 5819
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "don't need private[sql] since everything in catalyst is private.\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T20:56:46Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.{DoubleType, DataType}\n+import org.apache.spark.util.random.XORShiftRandom\n+\n+/**\n+ * A Random distribution generating expression.\n+ * TODO: This can be made generic to generate any type of random distribution, or any type of  \n+ * StructType.\n+ *\n+ * Since this expression is stateful, it cannot be a case object.\n+ */\n+private[sql] abstract class RDG(seed: Long) extends LeafExpression with Serializable { \n+  self: Product =>\n+\n+  /**\n+   * Record ID within each partition. By being transient, the Random Number Generator is\n+   * reset every time we serialize and deserialize it.\n+   */\n+  @transient private[this] lazy val rng = new XORShiftRandom(seed + TaskContext.get().partitionId())\n+\n+  override type EvaluatedType = Double\n+\n+  override def nullable: Boolean = false\n+\n+  override def dataType: DataType = DoubleType\n+\n+  def generateNumber(random: XORShiftRandom): Double\n+\n+  override def eval(input: Row): Double = {\n+    generateNumber(rng)\n+  }\n+}\n+\n+/** Generate a random column with i.i.d. uniformly distributed values in [0, 1). */\n+private[sql] case class Rand(seed: Long) extends RDG(seed) {"
  }],
  "prId": 5819
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "just let the child class implement eval\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T20:57:09Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.{DoubleType, DataType}\n+import org.apache.spark.util.random.XORShiftRandom\n+\n+/**\n+ * A Random distribution generating expression.\n+ * TODO: This can be made generic to generate any type of random distribution, or any type of  \n+ * StructType.\n+ *\n+ * Since this expression is stateful, it cannot be a case object.\n+ */\n+private[sql] abstract class RDG(seed: Long) extends LeafExpression with Serializable { \n+  self: Product =>\n+\n+  /**\n+   * Record ID within each partition. By being transient, the Random Number Generator is\n+   * reset every time we serialize and deserialize it.\n+   */\n+  @transient private[this] lazy val rng = new XORShiftRandom(seed + TaskContext.get().partitionId())\n+\n+  override type EvaluatedType = Double\n+\n+  override def nullable: Boolean = false\n+\n+  override def dataType: DataType = DoubleType\n+\n+  def generateNumber(random: XORShiftRandom): Double\n+\n+  override def eval(input: Row): Double = {\n+    generateNumber(rng)"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "How will I pass `rng` to the child? Have the child generate that as well?\n",
    "commit": "50d69d4e17d7c2a7579cfc1cfe69447ecd76e641",
    "createdAt": "2015-04-30T21:03:45Z",
    "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.randfuncs\n+\n+import org.apache.spark.TaskContext\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types.{DoubleType, DataType}\n+import org.apache.spark.util.random.XORShiftRandom\n+\n+/**\n+ * A Random distribution generating expression.\n+ * TODO: This can be made generic to generate any type of random distribution, or any type of  \n+ * StructType.\n+ *\n+ * Since this expression is stateful, it cannot be a case object.\n+ */\n+private[sql] abstract class RDG(seed: Long) extends LeafExpression with Serializable { \n+  self: Product =>\n+\n+  /**\n+   * Record ID within each partition. By being transient, the Random Number Generator is\n+   * reset every time we serialize and deserialize it.\n+   */\n+  @transient private[this] lazy val rng = new XORShiftRandom(seed + TaskContext.get().partitionId())\n+\n+  override type EvaluatedType = Double\n+\n+  override def nullable: Boolean = false\n+\n+  override def dataType: DataType = DoubleType\n+\n+  def generateNumber(random: XORShiftRandom): Double\n+\n+  override def eval(input: Row): Double = {\n+    generateNumber(rng)"
  }],
  "prId": 5819
}]