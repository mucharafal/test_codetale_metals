[{
  "comments": [{
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@maryannxue If we don't do this transformation, we still require the traversal to remove `ResolvedHint` ?",
    "commit": "88ac6551693373301a61910b2387c70f7f8fd8a4",
    "createdAt": "2019-05-24T00:31:02Z",
    "diffHunk": "@@ -29,7 +29,7 @@ object EliminateResolvedHint extends Rule[LogicalPlan] {\n   // is using transformUp rather than resolveOperators.\n   def apply(plan: LogicalPlan): LogicalPlan = {\n     val pulledUp = plan transformUp {\n-      case j: Join =>\n+      case j: Join if j.hint == JoinHint.NONE =>",
    "line": 5
  }, {
    "author": {
      "login": "maryannxue"
    },
    "body": "I think the \"best\" way to fix it is to merge the new hints into the existing `JoinHint`, but the question is which one should take precedence, the new one or the existing one?\r\nSo far, if things all work right, we should never come to a point where there is a non-empty new hint and a non-empty existing hint, that is, the hint has either been pulled into the join node or it hasn't been processed it. In either case, this fix is sufficient.\r\nThe removal of the `ResolvedHint` is taken care of by the following lines and should not happen at all if the rule has been applied once.",
    "commit": "88ac6551693373301a61910b2387c70f7f8fd8a4",
    "createdAt": "2019-05-24T18:19:51Z",
    "diffHunk": "@@ -29,7 +29,7 @@ object EliminateResolvedHint extends Rule[LogicalPlan] {\n   // is using transformUp rather than resolveOperators.\n   def apply(plan: LogicalPlan): LogicalPlan = {\n     val pulledUp = plan transformUp {\n-      case j: Join =>\n+      case j: Join if j.hint == JoinHint.NONE =>",
    "line": 5
  }, {
    "author": {
      "login": "dilipbiswal"
    },
    "body": "@maryannxue Thanks for explanation.",
    "commit": "88ac6551693373301a61910b2387c70f7f8fd8a4",
    "createdAt": "2019-05-25T01:15:16Z",
    "diffHunk": "@@ -29,7 +29,7 @@ object EliminateResolvedHint extends Rule[LogicalPlan] {\n   // is using transformUp rather than resolveOperators.\n   def apply(plan: LogicalPlan): LogicalPlan = {\n     val pulledUp = plan transformUp {\n-      case j: Join =>\n+      case j: Join if j.hint == JoinHint.NONE =>",
    "line": 5
  }],
  "prId": 24692
}]