[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "it should take a `Array[Int]`, to save the array creation.",
    "commit": "4135690f2cf1eea375a1a4f1697c0ffdb7436627",
    "createdAt": "2018-07-26T14:41:04Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.commons.math3.random.MersenneTwister\n+\n+/**\n+ * This class is used to generate a random indices of given length.\n+ *\n+ * This implementation uses the \"inside-out\" version of Fisher-Yates algorithm.\n+ * Reference:\n+ *   https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_%22inside-out%22_algorithm\n+ */\n+case class RandomIndicesGenerator(randomSeed: Long) {\n+  private val random = new MersenneTwister(randomSeed)\n+\n+  def getNextIndices(length: Int): Array[Int] = {",
    "line": 32
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "We need to create an array to store the shuffled indices anyway. If we want to pass an array to be shuffled, we need to create the array and fill it with 0 until n before we call this. But with this implementation, we don't need to fill the numbers prior to shuffle thanks to the \"inside-out\" version of Fisher-Yates algorithm. WDYT?",
    "commit": "4135690f2cf1eea375a1a4f1697c0ffdb7436627",
    "createdAt": "2018-07-26T17:13:35Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.util\n+\n+import org.apache.commons.math3.random.MersenneTwister\n+\n+/**\n+ * This class is used to generate a random indices of given length.\n+ *\n+ * This implementation uses the \"inside-out\" version of Fisher-Yates algorithm.\n+ * Reference:\n+ *   https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_%22inside-out%22_algorithm\n+ */\n+case class RandomIndicesGenerator(randomSeed: Long) {\n+  private val random = new MersenneTwister(randomSeed)\n+\n+  def getNextIndices(length: Int): Array[Int] = {",
    "line": 32
  }],
  "prId": 21802
}]