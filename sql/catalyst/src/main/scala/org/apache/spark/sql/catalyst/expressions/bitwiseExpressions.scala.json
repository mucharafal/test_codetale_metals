[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Nit: We could also use `Integer.reverse` and a mask here. It saves some code and a branch.\n",
    "commit": "9c7a06f0902df28e243f2f0d6160f2356f416ca9",
    "createdAt": "2016-02-02T22:04:45Z",
    "diffHunk": "@@ -124,3 +124,47 @@ case class BitwiseNot(child: Expression) extends UnaryExpression with ExpectsInp\n \n   protected override def nullSafeEval(input: Any): Any = not(input)\n }\n+\n+/**\n+  * A function that reverse the lowest N bits of a integer.\n+  *\n+  * Note: this is only used for grouping_id()\n+  */\n+case class BitwiseReverse(child: Expression, width: Int)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(IntegerType)\n+\n+  override def dataType: DataType = IntegerType\n+\n+  override def toString: String = s\"^$child\"\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    nullSafeCodeGen(ctx, ev, c => {\n+      val v = ctx.freshName(\"v\")\n+      val i = ctx.freshName(\"i\")\n+      s\"\"\"\n+         | int $v = $c;\n+         | ${ev.value} = 0;\n+         | for (int $i = 0; $i < $width; $i ++) {\n+         |   ${ev.value} <<= 1;\n+         |   ${ev.value} |= $v & 1;\n+         |   $v >>>= 1;\n+         | }\n+       \"\"\".stripMargin\n+    })\n+  }\n+\n+  protected override def nullSafeEval(input: Any): Any = {\n+    var v = input.asInstanceOf[Int]"
  }, {
    "author": {
      "login": "davies"
    },
    "body": "Great, will do.\n",
    "commit": "9c7a06f0902df28e243f2f0d6160f2356f416ca9",
    "createdAt": "2016-02-02T22:10:20Z",
    "diffHunk": "@@ -124,3 +124,47 @@ case class BitwiseNot(child: Expression) extends UnaryExpression with ExpectsInp\n \n   protected override def nullSafeEval(input: Any): Any = not(input)\n }\n+\n+/**\n+  * A function that reverse the lowest N bits of a integer.\n+  *\n+  * Note: this is only used for grouping_id()\n+  */\n+case class BitwiseReverse(child: Expression, width: Int)\n+  extends UnaryExpression with ExpectsInputTypes {\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(IntegerType)\n+\n+  override def dataType: DataType = IntegerType\n+\n+  override def toString: String = s\"^$child\"\n+\n+  override def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    nullSafeCodeGen(ctx, ev, c => {\n+      val v = ctx.freshName(\"v\")\n+      val i = ctx.freshName(\"i\")\n+      s\"\"\"\n+         | int $v = $c;\n+         | ${ev.value} = 0;\n+         | for (int $i = 0; $i < $width; $i ++) {\n+         |   ${ev.value} <<= 1;\n+         |   ${ev.value} |= $v & 1;\n+         |   $v >>>= 1;\n+         | }\n+       \"\"\".stripMargin\n+    })\n+  }\n+\n+  protected override def nullSafeEval(input: Any): Any = {\n+    var v = input.asInstanceOf[Int]"
  }],
  "prId": 10677
}]