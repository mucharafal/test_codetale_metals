[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's fragile to use member variable to keep stats, as they will be lost after copy.",
    "commit": "4f75ba4db1455dcc35da88b86a46188ce568f37c",
    "createdAt": "2019-07-11T06:48:44Z",
    "diffHunk": "@@ -18,33 +18,38 @@\n package org.apache.spark.sql.catalyst.plans.logical.statsEstimation\n \n import org.apache.spark.sql.catalyst.plans.logical._\n+import org.apache.spark.sql.catalyst.trees.TreeNodeTag\n \n /**\n  * A trait to add statistics propagation to [[LogicalPlan]].\n  */\n trait LogicalPlanStats { self: LogicalPlan =>\n+  import LogicalPlanStats.STATS_CACHE_TAG\n \n   /**\n    * Returns the estimated statistics for the current logical plan node. Under the hood, this\n    * method caches the return value, which is computed based on the configuration passed in the\n    * first time. If the configuration changes, the cache can be invalidated by calling\n    * [[invalidateStatsCache()]].\n    */\n-  def stats: Statistics = statsCache.getOrElse {\n+  def stats: Statistics = statsOpt.getOrElse {\n     if (conf.cboEnabled) {\n-      statsCache = Option(BasicStatsPlanVisitor.visit(self))\n+      setTagValue(STATS_CACHE_TAG, BasicStatsPlanVisitor.visit(self))\n     } else {\n-      statsCache = Option(SizeInBytesOnlyStatsPlanVisitor.visit(self))\n+      setTagValue(STATS_CACHE_TAG, SizeInBytesOnlyStatsPlanVisitor.visit(self))\n     }\n-    statsCache.get\n+    statsOpt.get\n   }\n \n-  /** A cache for the estimated statistics, such that it will only be computed once. */\n-  protected var statsCache: Option[Statistics] = None"
  }],
  "prId": 25111
}]