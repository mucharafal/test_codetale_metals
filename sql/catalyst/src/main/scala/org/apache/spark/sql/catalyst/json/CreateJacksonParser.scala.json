[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Seems fine but I'm wondering why it used channels in the first place. Was it for performance?",
    "commit": "56e8d32b267dcb7ffaef10e602d817ff90c7b6f4",
    "createdAt": "2019-04-06T23:13:54Z",
    "diffHunk": "@@ -55,19 +52,13 @@ private[sql] object CreateJacksonParser extends Serializable {\n   //    automatically by analyzing first bytes of the input stream.\n   // 3. Reader based parser. This is the slowest parser used here but it allows to create\n   //    a reader with specific encoding.\n-  // The method creates a reader for an array with given encoding and sets size of internal\n-  // decoding buffer according to size of input array.\n-  private def getStreamDecoder(enc: String, in: Array[Byte], length: Int): StreamDecoder = {\n+  private def getReader(enc: String, in: Array[Byte], length: Int): Reader = {\n     val bais = new ByteArrayInputStream(in, 0, length)\n-    val byteChannel = Channels.newChannel(bais)\n-    val decodingBufferSize = Math.min(length, 8192)\n-    val decoder = Charset.forName(enc).newDecoder()\n-\n-    StreamDecoder.forDecoder(byteChannel, decoder, decodingBufferSize)\n+    new InputStreamReader(bais, enc)",
    "line": 29
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "I took the code from internals of Jackson parser, and kept it as is to be sure that the behavior is the same. `InputStreamReader` uses similar code but without creating a channel. So, I think we could use the standard API of `InputStreamReader`.",
    "commit": "56e8d32b267dcb7ffaef10e602d817ff90c7b6f4",
    "createdAt": "2019-04-07T06:12:45Z",
    "diffHunk": "@@ -55,19 +52,13 @@ private[sql] object CreateJacksonParser extends Serializable {\n   //    automatically by analyzing first bytes of the input stream.\n   // 3. Reader based parser. This is the slowest parser used here but it allows to create\n   //    a reader with specific encoding.\n-  // The method creates a reader for an array with given encoding and sets size of internal\n-  // decoding buffer according to size of input array.\n-  private def getStreamDecoder(enc: String, in: Array[Byte], length: Int): StreamDecoder = {\n+  private def getReader(enc: String, in: Array[Byte], length: Int): Reader = {\n     val bais = new ByteArrayInputStream(in, 0, length)\n-    val byteChannel = Channels.newChannel(bais)\n-    val decodingBufferSize = Math.min(length, 8192)\n-    val decoder = Charset.forName(enc).newDecoder()\n-\n-    StreamDecoder.forDecoder(byteChannel, decoder, decodingBufferSize)\n+    new InputStreamReader(bais, enc)",
    "line": 29
  }],
  "prId": 24309
}]