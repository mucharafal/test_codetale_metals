[{
  "comments": [{
    "author": {
      "login": "brkyvz"
    },
    "body": "nit: Unless someone is explicitly checking for these properties before creating this class, it would be better to turn these into `require` instead of `assert` as assertions can be turned off.",
    "commit": "7f193ca074b7fd0dea9f7b28b4e1776819e6d512",
    "createdAt": "2019-07-12T16:29:17Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * An INSERT TABLE statement, as parsed from SQL.\n+ *\n+ * @param table                the logical plan representing the table.\n+ * @param query                the logical plan representing data to write to.\n+ * @param overwrite            overwrite existing table or partitions.\n+ * @param partition            a map from the partition key to the partition value (optional).\n+ *                             If the value is missing, dynamic partition insert will be performed.\n+ *                             As an example, `INSERT INTO tbl PARTITION (a=1, b=2) AS` would have\n+ *                             Map('a' -> Some('1'), 'b' -> Some('2')),\n+ *                             and `INSERT INTO tbl PARTITION (a=1, b) AS ...`\n+ *                             would have Map('a' -> Some('1'), 'b' -> None).\n+ * @param ifPartitionNotExists If true, only write if the partition does not exist.\n+ *                             Only valid for static partitions.\n+ */\n+case class InsertTableStatement(\n+    table: LogicalPlan,\n+    query: LogicalPlan,\n+    overwrite: Boolean,\n+    partition: Map[String, Option[String]],\n+    ifPartitionNotExists: Boolean) extends ParsedStatement {\n+\n+  // IF NOT EXISTS is only valid in INSERT OVERWRITE\n+  assert(overwrite || !ifPartitionNotExists)"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Fixed. I like the `require` can also expose these comments if it fails.",
    "commit": "7f193ca074b7fd0dea9f7b28b4e1776819e6d512",
    "createdAt": "2019-07-12T22:33:05Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.sql\n+\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+\n+/**\n+ * An INSERT TABLE statement, as parsed from SQL.\n+ *\n+ * @param table                the logical plan representing the table.\n+ * @param query                the logical plan representing data to write to.\n+ * @param overwrite            overwrite existing table or partitions.\n+ * @param partition            a map from the partition key to the partition value (optional).\n+ *                             If the value is missing, dynamic partition insert will be performed.\n+ *                             As an example, `INSERT INTO tbl PARTITION (a=1, b=2) AS` would have\n+ *                             Map('a' -> Some('1'), 'b' -> Some('2')),\n+ *                             and `INSERT INTO tbl PARTITION (a=1, b) AS ...`\n+ *                             would have Map('a' -> Some('1'), 'b' -> None).\n+ * @param ifPartitionNotExists If true, only write if the partition does not exist.\n+ *                             Only valid for static partitions.\n+ */\n+case class InsertTableStatement(\n+    table: LogicalPlan,\n+    query: LogicalPlan,\n+    overwrite: Boolean,\n+    partition: Map[String, Option[String]],\n+    ifPartitionNotExists: Boolean) extends ParsedStatement {\n+\n+  // IF NOT EXISTS is only valid in INSERT OVERWRITE\n+  assert(overwrite || !ifPartitionNotExists)"
  }],
  "prId": 24832
}]