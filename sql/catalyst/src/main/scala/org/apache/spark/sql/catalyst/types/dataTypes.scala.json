[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "What are the semantics of `PrimitiveType`? Specifically, I'm surprised that `StringType` and `DecimalType` are considered `PrimitiveTypes`.  Also I wonder if we can unify this with `NativeType` somehow.  I'm not really sure, but I'd like to avoid too much explosion here.\n",
    "commit": "30708c864b656f04d046a1d3be4e9751960a1cb7",
    "createdAt": "2014-04-24T01:04:04Z",
    "diffHunk": "@@ -29,25 +31,36 @@ abstract class DataType {\n     case e: Expression if e.dataType == this => true\n     case _ => false\n   }\n+\n+  def isPrimitive(): Boolean = false\n }\n \n case object NullType extends DataType\n \n+trait PrimitiveType extends DataType {",
    "line": 84
  }, {
    "author": {
      "login": "AndreSchumacher"
    },
    "body": "@marmbrus `PrimitiveType` is maybe a misnomer. It's the same term that Parquet uses. Basically a `PrimitiveType` is a type that is not contained inside another type (so non-nested). You can argue that a String is a Char array and therefore not primitive but in terms of constructing nested rows it means that a primitive type is a leaf inside the tree that produces a record.\n\nIt would help to somehow distinguish between nested and non-nested types. `NativeType` comes close but for example there is `BinaryType` which is primitive but not native.\n",
    "commit": "30708c864b656f04d046a1d3be4e9751960a1cb7",
    "createdAt": "2014-04-25T08:00:17Z",
    "diffHunk": "@@ -29,25 +31,36 @@ abstract class DataType {\n     case e: Expression if e.dataType == this => true\n     case _ => false\n   }\n+\n+  def isPrimitive(): Boolean = false\n }\n \n case object NullType extends DataType\n \n+trait PrimitiveType extends DataType {",
    "line": 84
  }],
  "prId": 360
}, {
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "No `()`.\n",
    "commit": "30708c864b656f04d046a1d3be4e9751960a1cb7",
    "createdAt": "2014-06-04T06:55:47Z",
    "diffHunk": "@@ -29,25 +31,36 @@ abstract class DataType {\n     case e: Expression if e.dataType == this => true\n     case _ => false\n   }\n+\n+  def isPrimitive(): Boolean = false"
  }],
  "prId": 360
}]