[{
  "comments": [{
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Will that cause NPE for `!get(i).equals(row.get(i))`\n",
    "commit": "ef27343c2fbe4c6dc24c58aa125b94c6a71b8763",
    "createdAt": "2015-06-11T05:28:55Z",
    "diffHunk": "@@ -154,6 +154,27 @@ public int fieldIndex(String name) {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * A generic version of Row.equals(Row), which is used for tests.\n+   */\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other instanceof Row) {\n+      Row row = (Row) other;\n+      int n = size();\n+      if (n != row.size()) {\n+        return false;\n+      }\n+      for (int i = 0; i < n; i ++) {\n+        if (isNullAt(i) != row.isNullAt(i) || !isNullAt(i) && !get(i).equals(row.get(i))) {"
  }, {
    "author": {
      "login": "chenghao-intel"
    },
    "body": "Sorry, ignore the above comment. But it's better to add a bracket for `!isNullAt(i) && !get(i).equals(row.get(i))`\n",
    "commit": "ef27343c2fbe4c6dc24c58aa125b94c6a71b8763",
    "createdAt": "2015-06-11T05:30:04Z",
    "diffHunk": "@@ -154,6 +154,27 @@ public int fieldIndex(String name) {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * A generic version of Row.equals(Row), which is used for tests.\n+   */\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other instanceof Row) {\n+      Row row = (Row) other;\n+      int n = size();\n+      if (n != row.size()) {\n+        return false;\n+      }\n+      for (int i = 0; i < n; i ++) {\n+        if (isNullAt(i) != row.isNullAt(i) || !isNullAt(i) && !get(i).equals(row.get(i))) {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "+1 on adding parentheses.\n",
    "commit": "ef27343c2fbe4c6dc24c58aa125b94c6a71b8763",
    "createdAt": "2015-06-11T07:53:46Z",
    "diffHunk": "@@ -154,6 +154,27 @@ public int fieldIndex(String name) {\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * A generic version of Row.equals(Row), which is used for tests.\n+   */\n+  @Override\n+  public boolean equals(Object other) {\n+    if (other instanceof Row) {\n+      Row row = (Row) other;\n+      int n = size();\n+      if (n != row.size()) {\n+        return false;\n+      }\n+      for (int i = 0; i < n; i ++) {\n+        if (isNullAt(i) != row.isNullAt(i) || !isNullAt(i) && !get(i).equals(row.get(i))) {"
  }],
  "prId": 6755
}]