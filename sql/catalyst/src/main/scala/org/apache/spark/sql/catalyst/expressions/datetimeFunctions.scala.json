[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add a prettyName last_day\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T07:53:00Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {",
    "line": 8
  }, {
    "author": {
      "login": "adrian-wang"
    },
    "body": "done\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-27T09:58:25Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {",
    "line": 8
  }],
  "prId": 6986
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "nullSafeCodeGen\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T07:53:32Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {",
    "line": 24
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "`defineCodeGen` is a shortcut for `nullSafeCodeGen` which is used for one line codegen.\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-27T02:03:12Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {",
    "line": 24
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "oh ok - it is a little bit confusing with the naming.\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-27T02:08:12Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {",
    "line": 24
  }],
  "prId": 6986
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "move this into a function in DateTimeUtils and call that?\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T07:59:17Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {\n+      s\"$dtu.getLastDayOfMonth($sd)\"\n+    })\n+  }\n+}\n+\n+/**\n+ * Returns the first date which is later than start_date and named as day_of_week.\n+ */\n+case class NextDay(left: Expression, right: Expression)\n+  extends BinaryExpression with ImplicitCastInputTypes {\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType, StringType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(start: Any, dayOfWeek: Any): Any = {\n+    val dow = DateTimeUtils.getDayOfWeekFromString(dayOfWeek.asInstanceOf[UTF8String])\n+    if (dow == -1) {\n+      null\n+    } else {\n+      val sd = start.asInstanceOf[Int]\n+      sd + 1 + ((dow - sd % 7) % 7 + 7) % 7"
  }],
  "prId": 6986
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "it'd be great to avoid computing $dow if right is a literal.\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T08:02:38Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {\n+      s\"$dtu.getLastDayOfMonth($sd)\"\n+    })\n+  }\n+}\n+\n+/**\n+ * Returns the first date which is later than start_date and named as day_of_week.\n+ */\n+case class NextDay(left: Expression, right: Expression)\n+  extends BinaryExpression with ImplicitCastInputTypes {\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType, StringType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(start: Any, dayOfWeek: Any): Any = {\n+    val dow = DateTimeUtils.getDayOfWeekFromString(dayOfWeek.asInstanceOf[UTF8String])\n+    if (dow == -1) {\n+      null\n+    } else {\n+      val sd = start.asInstanceOf[Int]\n+      sd + 1 + ((dow - sd % 7) % 7 + 7) % 7\n+    }\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    nullSafeCodeGen(ctx, ev, (sd, dowS) => {\n+      val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+      val dow = ctx.freshName(\"dow\")\n+      s\"\"\"\n+        int $dow = $dtu.getDayOfWeekFromString($dowS);"
  }],
  "prId": 6986
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we need to give an example here; otherwise it is impossible to understand the function\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T08:02:57Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {\n+      s\"$dtu.getLastDayOfMonth($sd)\"\n+    })\n+  }\n+}\n+\n+/**\n+ * Returns the first date which is later than start_date and named as day_of_week."
  }],
  "prId": 6986
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "don't use left/right here. just define more clear names and then point def left / right to those.\n",
    "commit": "ef7e3da03f54bbde35406bac6ce9dcdd94f5ea75",
    "createdAt": "2015-07-26T08:03:16Z",
    "diffHunk": "@@ -258,3 +258,62 @@ case class DateFormatClass(left: Expression, right: Expression) extends BinaryEx\n     })\n   }\n }\n+\n+/**\n+ * Returns the last day of the month which the date belongs to.\n+ */\n+case class LastDay(startDate: Expression) extends UnaryExpression with ImplicitCastInputTypes {\n+  override def child: Expression = startDate\n+\n+  override def inputTypes: Seq[AbstractDataType] = Seq(DateType)\n+\n+  override def dataType: DataType = DateType\n+\n+  override def nullSafeEval(date: Any): Any = {\n+    val days = date.asInstanceOf[Int]\n+    DateTimeUtils.getLastDayOfMonth(days)\n+  }\n+\n+  override protected def genCode(ctx: CodeGenContext, ev: GeneratedExpressionCode): String = {\n+    val dtu = DateTimeUtils.getClass.getName.stripSuffix(\"$\")\n+    defineCodeGen(ctx, ev, (sd) => {\n+      s\"$dtu.getLastDayOfMonth($sd)\"\n+    })\n+  }\n+}\n+\n+/**\n+ * Returns the first date which is later than start_date and named as day_of_week.\n+ */\n+case class NextDay(left: Expression, right: Expression)"
  }],
  "prId": 6986
}]