[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we also optimize when the xml string is literal but the path string is not?\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T04:36:35Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant."
  }, {
    "author": {
      "login": "petermaxlee"
    },
    "body": "I think a literal path is a very common case, but a literal xml is fairly unlikely.\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T04:39:40Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant."
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: we should say it more explicitly:\n`If the path is a constant, cache the path string so that we don't need to convert path from UTF8String to String for every row`\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T11:27:28Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant."
  }],
  "prId": 13964
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "how about\n\n```\n@transient lazy val pathLiteral: String = path match {\n  case Literal(str: UTF8String) => str.toString\n  case _ => null\n}\n```\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T05:10:46Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant.\n+  @transient private var lastPathUtf8: UTF8String = null"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "then it's more obvious that we are trying to optimize when the path is literal.\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T05:11:16Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant.\n+  @transient private var lastPathUtf8: UTF8String = null"
  }, {
    "author": {
      "login": "petermaxlee"
    },
    "body": "Great idea. Done!\n",
    "commit": "989ecb052b1f4f8f5c7c9bfcade7f4301d6b8695",
    "createdAt": "2016-06-29T05:26:07Z",
    "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.xml\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback\n+import org.apache.spark.sql.types.{AbstractDataType, BooleanType, DataType, StringType}\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+\n+@ExpressionDescription(\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n+  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+case class XPathBoolean(xml: Expression, path: Expression)\n+  extends BinaryExpression with ExpectsInputTypes with CodegenFallback {\n+\n+  @transient private lazy val xpathUtil = new UDFXPathUtil\n+\n+  // We use these to avoid converting the path from UTF8String to String if it is a constant.\n+  @transient private var lastPathUtf8: UTF8String = null"
  }],
  "prId": 13964
}]