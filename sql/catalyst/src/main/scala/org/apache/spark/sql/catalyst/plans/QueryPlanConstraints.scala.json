[{
  "comments": [{
    "author": {
      "login": "sameeragarwal"
    },
    "body": "should we also bound their size as you suggested?",
    "commit": "cec78b5cf1ced8322c8cd8e599a3197c50ed49c0",
    "createdAt": "2017-06-14T21:43:32Z",
    "diffHunk": "@@ -27,18 +27,20 @@ trait QueryPlanConstraints[PlanType <: QueryPlan[PlanType]] { self: QueryPlan[Pl\n    * example, if this set contains the expression `a = 2` then that expression is guaranteed to\n    * evaluate to `true` for all rows produced.\n    */\n-  lazy val constraints: ExpressionSet = ExpressionSet(getRelevantConstraints(validConstraints))\n-\n-  /**\n-   * Returns [[constraints]] depending on the config of enabling constraint propagation. If the\n-   * flag is disabled, simply returning an empty constraints.\n-   */\n-  def getConstraints(constraintPropagationEnabled: Boolean): ExpressionSet =\n-    if (constraintPropagationEnabled) {\n-      constraints\n+  lazy val constraints: ExpressionSet = {\n+    if (conf.constraintPropagationEnabled) {\n+      ExpressionSet(\n+        validConstraints\n+          .union(inferAdditionalConstraints(validConstraints))\n+          .union(constructIsNotNullConstraints(validConstraints))\n+          .filter { c =>\n+            c.references.nonEmpty && c.references.subsetOf(outputSet) && c.deterministic\n+          }",
    "line": 21
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "That belongs in a separate patch.",
    "commit": "cec78b5cf1ced8322c8cd8e599a3197c50ed49c0",
    "createdAt": "2017-06-14T21:44:58Z",
    "diffHunk": "@@ -27,18 +27,20 @@ trait QueryPlanConstraints[PlanType <: QueryPlan[PlanType]] { self: QueryPlan[Pl\n    * example, if this set contains the expression `a = 2` then that expression is guaranteed to\n    * evaluate to `true` for all rows produced.\n    */\n-  lazy val constraints: ExpressionSet = ExpressionSet(getRelevantConstraints(validConstraints))\n-\n-  /**\n-   * Returns [[constraints]] depending on the config of enabling constraint propagation. If the\n-   * flag is disabled, simply returning an empty constraints.\n-   */\n-  def getConstraints(constraintPropagationEnabled: Boolean): ExpressionSet =\n-    if (constraintPropagationEnabled) {\n-      constraints\n+  lazy val constraints: ExpressionSet = {\n+    if (conf.constraintPropagationEnabled) {\n+      ExpressionSet(\n+        validConstraints\n+          .union(inferAdditionalConstraints(validConstraints))\n+          .union(constructIsNotNullConstraints(validConstraints))\n+          .filter { c =>\n+            c.references.nonEmpty && c.references.subsetOf(outputSet) && c.deterministic\n+          }",
    "line": 21
  }],
  "prId": 18299
}]