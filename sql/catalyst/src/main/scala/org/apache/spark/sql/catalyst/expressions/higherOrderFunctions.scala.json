[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "I am wondering if we should use the buffer builder with a size hint here? Or, alternatively manage the array ourself.",
    "commit": "f6aaa902b687c1bddf233c65c3739ec4ac407774",
    "createdAt": "2018-08-03T08:45:04Z",
    "diffHunk": "@@ -210,3 +219,54 @@ case class ArrayTransform(\n \n   override def prettyName: String = \"transform\"\n }\n+\n+/**\n+ * Filters the input array using the given lambda function.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, func) - Filters the input array using the given predicate.\",\n+  examples = \"\"\"\n+    Examples:\n+      > SELECT _FUNC_(array(1, 2, 3), x -> x % 2 == 1);\n+       array(1, 3)\n+  \"\"\",\n+  since = \"2.4.0\")\n+case class ArrayFilter(\n+    input: Expression,\n+    function: Expression)\n+  extends ArrayBasedHigherOrderFunction with CodegenFallback {\n+\n+  override def nullable: Boolean = input.nullable\n+\n+  override def dataType: DataType = input.dataType\n+\n+  override def expectingFunctionType: AbstractDataType = BooleanType\n+\n+  override def bind(f: (Expression, Seq[(DataType, Boolean)]) => LambdaFunction): ArrayFilter = {\n+    val elem = ArrayBasedHigherOrderFunction.elementArgumentType(input.dataType)\n+    copy(function = f(function, elem :: Nil))\n+  }\n+\n+  @transient lazy val LambdaFunction(_, Seq(elementVar: NamedLambdaVariable), _) = function\n+\n+  override def eval(input: InternalRow): Any = {\n+    val arr = this.input.eval(input).asInstanceOf[ArrayData]\n+    if (arr == null) {\n+      null\n+    } else {\n+      val f = functionForEval\n+      val buffer = new mutable.ArrayBuffer[Any]"
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "Sounds good. I'll use the original length as a size hint.",
    "commit": "f6aaa902b687c1bddf233c65c3739ec4ac407774",
    "createdAt": "2018-08-03T09:07:24Z",
    "diffHunk": "@@ -210,3 +219,54 @@ case class ArrayTransform(\n \n   override def prettyName: String = \"transform\"\n }\n+\n+/**\n+ * Filters the input array using the given lambda function.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, func) - Filters the input array using the given predicate.\",\n+  examples = \"\"\"\n+    Examples:\n+      > SELECT _FUNC_(array(1, 2, 3), x -> x % 2 == 1);\n+       array(1, 3)\n+  \"\"\",\n+  since = \"2.4.0\")\n+case class ArrayFilter(\n+    input: Expression,\n+    function: Expression)\n+  extends ArrayBasedHigherOrderFunction with CodegenFallback {\n+\n+  override def nullable: Boolean = input.nullable\n+\n+  override def dataType: DataType = input.dataType\n+\n+  override def expectingFunctionType: AbstractDataType = BooleanType\n+\n+  override def bind(f: (Expression, Seq[(DataType, Boolean)]) => LambdaFunction): ArrayFilter = {\n+    val elem = ArrayBasedHigherOrderFunction.elementArgumentType(input.dataType)\n+    copy(function = f(function, elem :: Nil))\n+  }\n+\n+  @transient lazy val LambdaFunction(_, Seq(elementVar: NamedLambdaVariable), _) = function\n+\n+  override def eval(input: InternalRow): Any = {\n+    val arr = this.input.eval(input).asInstanceOf[ArrayData]\n+    if (arr == null) {\n+      null\n+    } else {\n+      val f = functionForEval\n+      val buffer = new mutable.ArrayBuffer[Any]"
  }],
  "prId": 21965
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Is filter too generic? wdyt?",
    "commit": "f6aaa902b687c1bddf233c65c3739ec4ac407774",
    "createdAt": "2018-08-03T08:46:20Z",
    "diffHunk": "@@ -210,3 +219,54 @@ case class ArrayTransform(\n \n   override def prettyName: String = \"transform\"\n }\n+\n+/**\n+ * Filters the input array using the given lambda function.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, func) - Filters the input array using the given predicate.\",\n+  examples = \"\"\"\n+    Examples:\n+      > SELECT _FUNC_(array(1, 2, 3), x -> x % 2 == 1);\n+       array(1, 3)\n+  \"\"\",\n+  since = \"2.4.0\")\n+case class ArrayFilter(\n+    input: Expression,\n+    function: Expression)\n+  extends ArrayBasedHigherOrderFunction with CodegenFallback {\n+\n+  override def nullable: Boolean = input.nullable\n+\n+  override def dataType: DataType = input.dataType\n+\n+  override def expectingFunctionType: AbstractDataType = BooleanType\n+\n+  override def bind(f: (Expression, Seq[(DataType, Boolean)]) => LambdaFunction): ArrayFilter = {\n+    val elem = ArrayBasedHigherOrderFunction.elementArgumentType(input.dataType)\n+    copy(function = f(function, elem :: Nil))\n+  }\n+\n+  @transient lazy val LambdaFunction(_, Seq(elementVar: NamedLambdaVariable), _) = function\n+\n+  override def eval(input: InternalRow): Any = {\n+    val arr = this.input.eval(input).asInstanceOf[ArrayData]\n+    if (arr == null) {\n+      null\n+    } else {\n+      val f = functionForEval\n+      val buffer = new mutable.ArrayBuffer[Any]\n+      var i = 0\n+      while (i < arr.numElements) {\n+        elementVar.value.set(arr.get(i, elementVar.dataType))\n+        if (f.eval(input).asInstanceOf[Boolean]) {\n+          buffer += elementVar.value.get\n+        }\n+        i += 1\n+      }\n+      new GenericArrayData(buffer)\n+    }\n+  }\n+\n+  override def prettyName: String = \"filter\"",
    "line": 102
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "Yeah, it might be. How about `array_filter`?",
    "commit": "f6aaa902b687c1bddf233c65c3739ec4ac407774",
    "createdAt": "2018-08-03T09:07:32Z",
    "diffHunk": "@@ -210,3 +219,54 @@ case class ArrayTransform(\n \n   override def prettyName: String = \"transform\"\n }\n+\n+/**\n+ * Filters the input array using the given lambda function.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(expr, func) - Filters the input array using the given predicate.\",\n+  examples = \"\"\"\n+    Examples:\n+      > SELECT _FUNC_(array(1, 2, 3), x -> x % 2 == 1);\n+       array(1, 3)\n+  \"\"\",\n+  since = \"2.4.0\")\n+case class ArrayFilter(\n+    input: Expression,\n+    function: Expression)\n+  extends ArrayBasedHigherOrderFunction with CodegenFallback {\n+\n+  override def nullable: Boolean = input.nullable\n+\n+  override def dataType: DataType = input.dataType\n+\n+  override def expectingFunctionType: AbstractDataType = BooleanType\n+\n+  override def bind(f: (Expression, Seq[(DataType, Boolean)]) => LambdaFunction): ArrayFilter = {\n+    val elem = ArrayBasedHigherOrderFunction.elementArgumentType(input.dataType)\n+    copy(function = f(function, elem :: Nil))\n+  }\n+\n+  @transient lazy val LambdaFunction(_, Seq(elementVar: NamedLambdaVariable), _) = function\n+\n+  override def eval(input: InternalRow): Any = {\n+    val arr = this.input.eval(input).asInstanceOf[ArrayData]\n+    if (arr == null) {\n+      null\n+    } else {\n+      val f = functionForEval\n+      val buffer = new mutable.ArrayBuffer[Any]\n+      var i = 0\n+      while (i < arr.numElements) {\n+        elementVar.value.set(arr.get(i, elementVar.dataType))\n+        if (f.eval(input).asInstanceOf[Boolean]) {\n+          buffer += elementVar.value.get\n+        }\n+        i += 1\n+      }\n+      new GenericArrayData(buffer)\n+    }\n+  }\n+\n+  override def prettyName: String = \"filter\"",
    "line": 102
  }],
  "prId": 21965
}]