[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Is the NumericType still needed?\n",
    "commit": "16826e6d5cb9636b6a72125fcccfc4273227c45b",
    "createdAt": "2015-11-10T19:20:46Z",
    "diffHunk": "@@ -48,29 +50,26 @@ abstract class StddevAgg(child: Expression) extends DeclarativeAggregate {\n \n   override def dataType: DataType = resultType\n \n-  // Expected input data type.\n-  // TODO: Right now, we replace old aggregate functions (based on AggregateExpression1) to the\n-  // new version at planning time (after analysis phase). For now, NullType is added at here\n-  // to make it resolved when we have cases like `select stddev(null)`.\n-  // We can use our analyzer to cast NullType to the default data type of the NumericType once\n-  // we remove the old aggregate functions. Then, we will not need NullType at here.\n-  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType, NullType))\n+  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType))",
    "line": 22
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "You meant `TypeCollection`? We can remove the `TypeCollection` since we only have a single abstract data type.\n",
    "commit": "16826e6d5cb9636b6a72125fcccfc4273227c45b",
    "createdAt": "2015-11-10T19:24:53Z",
    "diffHunk": "@@ -48,29 +50,26 @@ abstract class StddevAgg(child: Expression) extends DeclarativeAggregate {\n \n   override def dataType: DataType = resultType\n \n-  // Expected input data type.\n-  // TODO: Right now, we replace old aggregate functions (based on AggregateExpression1) to the\n-  // new version at planning time (after analysis phase). For now, NullType is added at here\n-  // to make it resolved when we have cases like `select stddev(null)`.\n-  // We can use our analyzer to cast NullType to the default data type of the NumericType once\n-  // we remove the old aggregate functions. Then, we will not need NullType at here.\n-  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType, NullType))\n+  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType))",
    "line": 22
  }, {
    "author": {
      "login": "yhuai"
    },
    "body": "Done\n",
    "commit": "16826e6d5cb9636b6a72125fcccfc4273227c45b",
    "createdAt": "2015-11-10T21:06:22Z",
    "diffHunk": "@@ -48,29 +50,26 @@ abstract class StddevAgg(child: Expression) extends DeclarativeAggregate {\n \n   override def dataType: DataType = resultType\n \n-  // Expected input data type.\n-  // TODO: Right now, we replace old aggregate functions (based on AggregateExpression1) to the\n-  // new version at planning time (after analysis phase). For now, NullType is added at here\n-  // to make it resolved when we have cases like `select stddev(null)`.\n-  // We can use our analyzer to cast NullType to the default data type of the NumericType once\n-  // we remove the old aggregate functions. Then, we will not need NullType at here.\n-  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType, NullType))\n+  override def inputTypes: Seq[AbstractDataType] = Seq(TypeCollection(NumericType))",
    "line": 22
  }],
  "prId": 9556
}]