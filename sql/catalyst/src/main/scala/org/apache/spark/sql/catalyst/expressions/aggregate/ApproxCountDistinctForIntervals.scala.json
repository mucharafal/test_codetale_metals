[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "IIRC `ByteBuffer` is pretty slow for writing, shall we use unsafe writing?",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-19T15:43:50Z",
    "diffHunk": "@@ -239,4 +221,23 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val buffer = ByteBuffer.wrap(new Array(obj.length * Longs.BYTES))"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "Changed to unsafe writing, could you take another look?",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-21T08:34:09Z",
    "diffHunk": "@@ -239,4 +221,23 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val buffer = ByteBuffer.wrap(new Array(obj.length * Longs.BYTES))"
  }],
  "prId": 19506
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "you can just pass `InternalRow(buffer)` here, to save a lot of code changes. If performance matters here, you can create a `LongArrayInternalRow` to avoid boxing.",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-19T15:46:17Z",
    "diffHunk": "@@ -153,13 +129,14 @@ case class ApproxCountDistinctForIntervals(\n       // endpoints are sorted into ascending order already\n       if (endpoints.head > doubleValue || endpoints.last < doubleValue) {\n         // ignore if the value is out of the whole range\n-        return\n+        return buffer\n       }\n \n       val hllppIndex = findHllppIndex(doubleValue)\n-      val offset = mutableAggBufferOffset + hllppIndex * numWordsPerHllpp\n-      hllppArray(hllppIndex).update(buffer, offset, value, child.dataType)\n+      val offset = hllppIndex * numWordsPerHllpp\n+      hllppArray(hllppIndex).update(LongArrayInput(buffer), offset, value, child.dataType)"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "InternalRow(buffer) will copy the buffer.\r\nCreating a LongArrayInternalRow is a good idea, thanks!",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-20T08:15:52Z",
    "diffHunk": "@@ -153,13 +129,14 @@ case class ApproxCountDistinctForIntervals(\n       // endpoints are sorted into ascending order already\n       if (endpoints.head > doubleValue || endpoints.last < doubleValue) {\n         // ignore if the value is out of the whole range\n-        return\n+        return buffer\n       }\n \n       val hllppIndex = findHllppIndex(doubleValue)\n-      val offset = mutableAggBufferOffset + hllppIndex * numWordsPerHllpp\n-      hllppArray(hllppIndex).update(buffer, offset, value, child.dataType)\n+      val offset = hllppIndex * numWordsPerHllpp\n+      hllppArray(hllppIndex).update(LongArrayInput(buffer), offset, value, child.dataType)"
  }],
  "prId": 19506
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "use while loop here for better performance in Scala, as this is a performance sensitive code path.",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-22T07:38:27Z",
    "diffHunk": "@@ -239,4 +219,26 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val byteArray = new Array[Byte](obj.length * 8)\n+    obj.indices.foreach { i =>"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "Fixed. Thanks for the reminder!",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-23T00:58:19Z",
    "diffHunk": "@@ -239,4 +219,26 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val byteArray = new Array[Byte](obj.length * 8)\n+    obj.indices.foreach { i =>"
  }],
  "prId": 19506
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "ditto",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-22T07:39:11Z",
    "diffHunk": "@@ -239,4 +219,26 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val byteArray = new Array[Byte](obj.length * 8)\n+    obj.indices.foreach { i =>\n+      Platform.putLong(byteArray, Platform.BYTE_ARRAY_OFFSET + i * 8, obj(i))\n+    }\n+    byteArray\n+  }\n+\n+  override def deserialize(bytes: Array[Byte]): Array[Long] = {\n+    val length = bytes.length / 8\n+    val longArray = new Array[Long](length)\n+    (0 until length).foreach { i =>"
  }],
  "prId": 19506
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "add `assert(bytes.length % 8 == 0)`",
    "commit": "1e95a2f6b7c934893b05fb396916568e8a73d523",
    "createdAt": "2017-10-22T07:39:41Z",
    "diffHunk": "@@ -239,4 +219,26 @@ case class ApproxCountDistinctForIntervals(\n   override def dataType: DataType = ArrayType(LongType)\n \n   override def prettyName: String = \"approx_count_distinct_for_intervals\"\n+\n+  override def serialize(obj: Array[Long]): Array[Byte] = {\n+    val byteArray = new Array[Byte](obj.length * 8)\n+    obj.indices.foreach { i =>\n+      Platform.putLong(byteArray, Platform.BYTE_ARRAY_OFFSET + i * 8, obj(i))\n+    }\n+    byteArray\n+  }\n+\n+  override def deserialize(bytes: Array[Byte]): Array[Long] = {\n+    val length = bytes.length / 8"
  }],
  "prId": 19506
}]