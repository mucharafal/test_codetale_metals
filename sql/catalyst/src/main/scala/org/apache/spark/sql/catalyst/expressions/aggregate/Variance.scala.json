[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "cc @sethah\n\nnext time please use more consistent naming. If the SQL function is named var_pop, don't use variance_pop here.\n",
    "commit": "368f1dd0a60baa88ee474454aa3c94b57f2b40fc",
    "createdAt": "2015-11-04T18:46:57Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+\n+case class VarianceSamp(child: Expression,\n+    mutableAggBufferOffset: Int = 0,\n+    inputAggBufferOffset: Int = 0)\n+  extends CentralMomentAgg(child) {\n+\n+  override def withNewMutableAggBufferOffset(newMutableAggBufferOffset: Int): ImperativeAggregate =\n+    copy(mutableAggBufferOffset = newMutableAggBufferOffset)\n+\n+  override def withNewInputAggBufferOffset(newInputAggBufferOffset: Int): ImperativeAggregate =\n+    copy(inputAggBufferOffset = newInputAggBufferOffset)\n+\n+  override def prettyName: String = \"var_samp\"\n+\n+  override protected val momentOrder = 2\n+\n+  override def getStatistic(n: Double, mean: Double, moments: Array[Double]): Double = {\n+    require(moments.length == momentOrder + 1,\n+      s\"$prettyName requires ${momentOrder + 1} central moment, received: ${moments.length}\")\n+\n+    if (n == 0.0 || n == 1.0) Double.NaN else moments(2) / (n - 1.0)\n+  }\n+}\n+\n+case class VariancePop(child: Expression,\n+    mutableAggBufferOffset: Int = 0,\n+    inputAggBufferOffset: Int = 0)\n+  extends CentralMomentAgg(child) {\n+\n+  override def withNewMutableAggBufferOffset(newMutableAggBufferOffset: Int): ImperativeAggregate =\n+    copy(mutableAggBufferOffset = newMutableAggBufferOffset)\n+\n+  override def withNewInputAggBufferOffset(newInputAggBufferOffset: Int): ImperativeAggregate =\n+    copy(inputAggBufferOffset = newInputAggBufferOffset)\n+\n+  override def prettyName: String = \"var_pop\"",
    "line": 56
  }, {
    "author": {
      "login": "sethah"
    },
    "body": "Duly noted. Thanks for the feedback!\n",
    "commit": "368f1dd0a60baa88ee474454aa3c94b57f2b40fc",
    "createdAt": "2015-11-04T23:45:49Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.aggregate\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+\n+case class VarianceSamp(child: Expression,\n+    mutableAggBufferOffset: Int = 0,\n+    inputAggBufferOffset: Int = 0)\n+  extends CentralMomentAgg(child) {\n+\n+  override def withNewMutableAggBufferOffset(newMutableAggBufferOffset: Int): ImperativeAggregate =\n+    copy(mutableAggBufferOffset = newMutableAggBufferOffset)\n+\n+  override def withNewInputAggBufferOffset(newInputAggBufferOffset: Int): ImperativeAggregate =\n+    copy(inputAggBufferOffset = newInputAggBufferOffset)\n+\n+  override def prettyName: String = \"var_samp\"\n+\n+  override protected val momentOrder = 2\n+\n+  override def getStatistic(n: Double, mean: Double, moments: Array[Double]): Double = {\n+    require(moments.length == momentOrder + 1,\n+      s\"$prettyName requires ${momentOrder + 1} central moment, received: ${moments.length}\")\n+\n+    if (n == 0.0 || n == 1.0) Double.NaN else moments(2) / (n - 1.0)\n+  }\n+}\n+\n+case class VariancePop(child: Expression,\n+    mutableAggBufferOffset: Int = 0,\n+    inputAggBufferOffset: Int = 0)\n+  extends CentralMomentAgg(child) {\n+\n+  override def withNewMutableAggBufferOffset(newMutableAggBufferOffset: Int): ImperativeAggregate =\n+    copy(mutableAggBufferOffset = newMutableAggBufferOffset)\n+\n+  override def withNewInputAggBufferOffset(newInputAggBufferOffset: Int): ImperativeAggregate =\n+    copy(inputAggBufferOffset = newInputAggBufferOffset)\n+\n+  override def prettyName: String = \"var_pop\"",
    "line": 56
  }],
  "prId": 9471
}]