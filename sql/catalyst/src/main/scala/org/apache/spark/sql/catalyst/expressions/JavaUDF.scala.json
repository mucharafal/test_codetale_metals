[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Doesn't this looks as same as current `ScalaUDF`? The main difference is?",
    "commit": "0b9ae9f5b673bf906d1541b773ac6d8ea9105f92",
    "createdAt": "2018-03-31T14:31:23Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, CodeGenerator, ExprCode}\n+import org.apache.spark.sql.types.DataType\n+\n+/*\n+ Discussion: the ctor arg `function` need to support both scala and java.\n+  so I think the style `(Any, Any, ...) => Any` is easier to use\n+  Java function can be passed in using the value `javaFunction.call(_:Any, ...)`\n+ */\n+private[sql] case class JavaUDF (",
    "line": 30
  }, {
    "author": {
      "login": "WeichenXu123"
    },
    "body": "yes, almost the same for now, but the PR will change later after more discussion. (including interface and implementation), no worry!",
    "commit": "0b9ae9f5b673bf906d1541b773ac6d8ea9105f92",
    "createdAt": "2018-04-01T02:19:37Z",
    "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import org.apache.spark.SparkException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, CodeGenerator, ExprCode}\n+import org.apache.spark.sql.types.DataType\n+\n+/*\n+ Discussion: the ctor arg `function` need to support both scala and java.\n+  so I think the style `(Any, Any, ...) => Any` is easier to use\n+  Java function can be passed in using the value `javaFunction.call(_:Any, ...)`\n+ */\n+private[sql] case class JavaUDF (",
    "line": 30
  }],
  "prId": 20934
}]