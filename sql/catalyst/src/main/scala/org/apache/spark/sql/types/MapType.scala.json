[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "I prefer not to make this mutable if we can. That can be a source of some pretty weird errors if we move from an unordered to an ordered map. Why do you need this?",
    "commit": "f8dd1a6008acc82b15fb63607c1ccd84e5487039",
    "createdAt": "2018-10-13T11:13:24Z",
    "diffHunk": "@@ -73,6 +74,90 @@ case class MapType(\n   override private[spark] def existsRecursively(f: (DataType) => Boolean): Boolean = {\n     f(this) || keyType.existsRecursively(f) || valueType.existsRecursively(f)\n   }\n+\n+  private[this] class OrderedWrapper {\n+    var isOrdered: Boolean = false",
    "line": 14
  }, {
    "author": {
      "login": "jinxing64"
    },
    "body": "Thanks for quick reply :)\r\n\r\nActually I'm not pretty sure about this.\r\nIf we do it like below\r\n```\r\ncase class MapType(\r\n  keyType: DataType,\r\n  valueType: DataType,\r\n  valueContainsNull: Boolean,\r\n  ordered: Boolean)\r\n```\r\nThe `ordered` will be spread to lots places in the code (especially in the `...match ... case ...` ) and users can will also  see it. But I think `ordered` is a pretty internal parameter/characteristic and only used when sorting map. So I try to make it private and lazy created.",
    "commit": "f8dd1a6008acc82b15fb63607c1ccd84e5487039",
    "createdAt": "2018-10-13T14:41:44Z",
    "diffHunk": "@@ -73,6 +74,90 @@ case class MapType(\n   override private[spark] def existsRecursively(f: (DataType) => Boolean): Boolean = {\n     f(this) || keyType.existsRecursively(f) || valueType.existsRecursively(f)\n   }\n+\n+  private[this] class OrderedWrapper {\n+    var isOrdered: Boolean = false",
    "line": 14
  }],
  "prId": 22712
}]