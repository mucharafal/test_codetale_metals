[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "documentation -> document?\nxpath -> XPath\n(Here and in a few other places)\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-17T13:40:07Z",
    "diffHunk": "@@ -121,8 +176,19 @@ case class XPathFloat(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a double value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage =\n+    \"\"\"\n+      _FUNC_(xml, xpath) - Returns a short value that matches the xpath expression.\n+\n+        Arguments:\n+          xml - string type that represents XML documentation.\n+          path - string type literal that represents xpath expression."
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "\"within the nodes of xml\" ? to make it clear 'xml' is the argument and not some general set of XML nodes\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-22T10:01:56Z",
    "diffHunk": "@@ -150,8 +220,18 @@ case class XPathString(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within xml nodes that match the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()');\\n['b1','b2','b3']\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within xml nodes that match the XPath expression\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "What is the differences between `a string expression` and `a string literal`?\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-23T14:54:12Z",
    "diffHunk": "@@ -150,8 +206,16 @@ case class XPathString(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within xml nodes that match the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()');\\n['b1','b2','b3']\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document.\n+      path - a string literal that represents XPath expression."
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "expression takes both value and column whereas literal takes value only in general. (It throws an exception when a column is given instead).\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-23T20:58:36Z",
    "diffHunk": "@@ -150,8 +206,16 @@ case class XPathString(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within xml nodes that match the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()');\\n['b1','b2','b3']\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document.\n+      path - a string literal that represents XPath expression."
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`XPath` -> `xpath`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T02:24:21Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "Actually, this is not accurate. See what Hive said:\n`Returns an integer numeric value, or the value zero if no match is found, or a match is found but the value is non-numeric.`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T02:25:06Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "`XPath` -> `xpath` please see https://github.com/apache/spark/pull/15513#discussion_r83644370\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T04:59:07Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "This one returns `long`. So, it is accurate but maybe not sufficient.\n\n``` scala\nscala> spark.sql(\"SELECT xpath_long('<a><b>1</b><b>2</b></a>', 'a')\").printSchema()\nroot\n |-- xpath_long(<a><b>1</b><b>2</b></a>, a): long (nullable = true)\n```\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T05:03:17Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "yes, the name of the standard is \"XPath\" not \"xpath\"\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T09:53:24Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }, {
    "author": {
      "login": "gatorsmile"
    },
    "body": "I thought this is trying to refer to the argument name `xpath`. \n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T06:15:51Z",
    "diffHunk": "@@ -95,8 +119,16 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the XPath expression.\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`XPath expression` -> `a XPath expression`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T02:25:51Z",
    "diffHunk": "@@ -108,8 +140,16 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document.\n+      xpath - a string literal that represents XPath expression."
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Nit: \"an XPath expression\"\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T09:53:13Z",
    "diffHunk": "@@ -108,8 +140,16 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document.\n+      xpath - a string literal that represents XPath expression."
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`XML document` -> `a XML document`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T02:28:34Z",
    "diffHunk": "@@ -108,8 +140,16 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document."
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Likewise \"an XML document\"\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-25T09:53:35Z",
    "diffHunk": "@@ -108,8 +140,16 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document."
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`the XPath expression xpath`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T07:05:09Z",
    "diffHunk": "@@ -150,8 +206,16 @@ case class XPathString(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within xml nodes that match the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>','a/b/text()');\\n['b1','b2','b3']\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression.\",",
    "line": 160
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`path` -> `xpath`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T07:05:36Z",
    "diffHunk": "@@ -135,8 +183,16 @@ case class XPathDouble(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns the text contents of the first xml node that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b</b><c>cc</c></a>','a/c');\\ncc\")\n+  usage = \"_FUNC_(xml, xpath) - Returns the text contents of the first xml node that matches the XPath expression.\",\n+  extended = \"\"\"\n+    Arguments:\n+      xml - a string expression that represents XML document.\n+      path - a string literal that represents XPath expression."
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`the an` -> `the`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T17:58:08Z",
    "diffHunk": "@@ -135,8 +193,16 @@ case class XPathDouble(xml: Expression, path: Expression) extends XPathExtract {\n \n // scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns the text contents of the first xml node that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>b</b><c>cc</c></a>','a/c');\\ncc\")\n+  usage = \"_FUNC_(xml, xpath) - Returns the text contents of the first xml node that matches the an XPath expression.\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "This is wrong, right? In Hive, the document is like:\n\n`Returns true if the XPath expression evaluates to true, or if a matching node is found.`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:03:27Z",
    "diffHunk": "@@ -56,8 +56,16 @@ abstract class XPathExtract extends BinaryExpression with ExpectsInputTypes with\n }\n \n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean xpath expression.\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b></a>','a/b');\\ntrue\")\n+  usage = \"_FUNC_(xml, xpath) - Evaluates a boolean an XPath expression.\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`a long value` is confusing. We should use `a long integer value`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:05:17Z",
    "diffHunk": "@@ -94,9 +122,19 @@ case class XPathInt(xml: Expression, path: Expression) extends XPathExtract {\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a long value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a long value, or the value zero if no match is found, or a match is found but the value is non-numeric.\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`the value` -> `or the value`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:07:42Z",
    "diffHunk": "@@ -107,9 +145,19 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.\",",
    "line": 99
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Could you double check this please? it is.. `Returns a float value, the value zero if ..., or NaN if ...` not `Returns a long value, or the value zero if ...`.\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-27T01:55:51Z",
    "diffHunk": "@@ -107,9 +145,19 @@ case class XPathLong(xml: Expression, path: Expression) extends XPathExtract {\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a float value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.\",",
    "line": 99
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`the value` -> `or the value`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:08:03Z",
    "diffHunk": "@@ -120,9 +168,19 @@ case class XPathFloat(xml: Expression, path: Expression) extends XPathExtract {\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a double value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.\",",
    "line": 121
  }, {
    "author": {
      "login": "HyukjinKwon"
    },
    "body": "Same one with https://github.com/apache/spark/pull/15513#discussion_r85184742\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-27T01:56:05Z",
    "diffHunk": "@@ -120,9 +168,19 @@ case class XPathFloat(xml: Expression, path: Expression) extends XPathExtract {\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a double value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3.0\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.\",",
    "line": 121
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`a short value` -> `a short integer value`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:08:34Z",
    "diffHunk": "@@ -68,11 +76,21 @@ case class XPathBoolean(xml: Expression, path: Expression) extends XPathExtract\n   }\n }\n \n+// scalastyle:off line.size.limit\n @ExpressionDescription(\n-  usage = \"_FUNC_(xml, xpath) - Returns a short value that matches the xpath expression\",\n-  extended = \"> SELECT _FUNC_('<a><b>1</b><b>2</b></a>','sum(a/b)');\\n3\")\n+  usage = \"_FUNC_(xml, xpath) - Returns a short value, or the value zero if no match is found, or a match is found but the value is non-numeric.\","
  }],
  "prId": 15513
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "`an XPath expressions` -> `XPath expressions`\n",
    "commit": "2b437fe169080b53215f280c8987ff1d8e779df8",
    "createdAt": "2016-10-26T18:09:17Z",
    "diffHunk": "@@ -34,7 +34,7 @@ abstract class XPathExtract extends BinaryExpression with ExpectsInputTypes with\n   override def left: Expression = xml\n   override def right: Expression = path\n \n-  /** XPath expressions are always nullable, e.g. if the xml string is empty. */\n+  /** an XPath expressions are always nullable, e.g. if the xml string is empty. */"
  }],
  "prId": 15513
}]