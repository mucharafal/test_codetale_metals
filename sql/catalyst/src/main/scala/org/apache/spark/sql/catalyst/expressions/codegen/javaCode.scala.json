[{
  "comments": [{
    "author": {
      "login": "mgaido91"
    },
    "body": "am I wrong or we are not updating the `exprValues` here?",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-05-24T08:07:53Z",
    "diffHunk": "@@ -149,6 +152,34 @@ trait Block extends JavaCode {\n \n   // Concatenates this block with other block.\n   def + (other: Block): Block\n+\n+  /**\n+   * Apply a map function to each java expression codes present in this java code, and return a new\n+   * java code based on the mapped java expression codes.\n+   */\n+  def transformExprValues(f: PartialFunction[ExprValue, ExprValue]): this.type = {",
    "line": 30
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "`transformExprValues` will create a new instance `Block` because a block is immutable. So once there are change, new block should take new `exprValues`.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-05-24T08:21:28Z",
    "diffHunk": "@@ -149,6 +152,34 @@ trait Block extends JavaCode {\n \n   // Concatenates this block with other block.\n   def + (other: Block): Block\n+\n+  /**\n+   * Apply a map function to each java expression codes present in this java code, and return a new\n+   * java code based on the mapped java expression codes.\n+   */\n+  def transformExprValues(f: PartialFunction[ExprValue, ExprValue]): this.type = {",
    "line": 30
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "I see, can we add some tests for this?",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-05-24T08:24:41Z",
    "diffHunk": "@@ -149,6 +152,34 @@ trait Block extends JavaCode {\n \n   // Concatenates this block with other block.\n   def + (other: Block): Block\n+\n+  /**\n+   * Apply a map function to each java expression codes present in this java code, and return a new\n+   * java code based on the mapped java expression codes.\n+   */\n+  def transformExprValues(f: PartialFunction[ExprValue, ExprValue]): this.type = {",
    "line": 30
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ok. Will add them in next commit. Thanks.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-05-24T08:27:28Z",
    "diffHunk": "@@ -149,6 +152,34 @@ trait Block extends JavaCode {\n \n   // Concatenates this block with other block.\n   def + (other: Block): Block\n+\n+  /**\n+   * Apply a map function to each java expression codes present in this java code, and return a new\n+   * java code based on the mapped java expression codes.\n+   */\n+  def transformExprValues(f: PartialFunction[ExprValue, ExprValue]): this.type = {",
    "line": 30
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Added test for it.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-05-29T10:16:55Z",
    "diffHunk": "@@ -149,6 +152,34 @@ trait Block extends JavaCode {\n \n   // Concatenates this block with other block.\n   def + (other: Block): Block\n+\n+  /**\n+   * Apply a map function to each java expression codes present in this java code, and return a new\n+   * java code based on the mapped java expression codes.\n+   */\n+  def transformExprValues(f: PartialFunction[ExprValue, ExprValue]): this.type = {",
    "line": 30
  }],
  "prId": 21405
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we only make `Block` extends `TreeNode`?",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T03:58:31Z",
    "diffHunk": "@@ -22,14 +22,17 @@ import java.lang.{Boolean => JBool}\n import scala.collection.mutable.ArrayBuffer\n import scala.language.{existentials, implicitConversions}\n \n+import org.apache.spark.sql.catalyst.trees.TreeNode\n import org.apache.spark.sql.types.{BooleanType, DataType}\n \n /**\n  * Trait representing an opaque fragments of java code.\n  */\n-trait JavaCode {\n+trait JavaCode extends TreeNode[JavaCode] {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Ok. Currently `ExprValue` doesn't have to be `TreeNode`.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T05:28:50Z",
    "diffHunk": "@@ -22,14 +22,17 @@ import java.lang.{Boolean => JBool}\n import scala.collection.mutable.ArrayBuffer\n import scala.language.{existentials, implicitConversions}\n \n+import org.apache.spark.sql.catalyst.trees.TreeNode\n import org.apache.spark.sql.types.{BooleanType, DataType}\n \n /**\n  * Trait representing an opaque fragments of java code.\n  */\n-trait JavaCode {\n+trait JavaCode extends TreeNode[JavaCode] {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Will update in next commit.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T05:29:05Z",
    "diffHunk": "@@ -22,14 +22,17 @@ import java.lang.{Boolean => JBool}\n import scala.collection.mutable.ArrayBuffer\n import scala.language.{existentials, implicitConversions}\n \n+import org.apache.spark.sql.catalyst.trees.TreeNode\n import org.apache.spark.sql.types.{BooleanType, DataType}\n \n /**\n  * Trait representing an opaque fragments of java code.\n  */\n-trait JavaCode {\n+trait JavaCode extends TreeNode[JavaCode] {"
  }],
  "prId": 21405
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we still need this change?",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T06:32:07Z",
    "diffHunk": "@@ -291,5 +328,8 @@ class LiteralValue(val value: String, val javaType: Class[_]) extends ExprValue\n   override def hashCode(): Int = value.hashCode() * 31 + javaType.hashCode()\n }\n \n+case class LiteralExpr(override val value: String, override val javaType: Class[_])"
  }],
  "prId": 21405
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "do we still need it?",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T06:33:20Z",
    "diffHunk": "@@ -118,10 +119,10 @@ object JavaCode {\n /**\n  * A trait representing a block of java code.\n  */\n-trait Block extends JavaCode {\n+trait Block extends TreeNode[Block] with JavaCode {\n   import Block._\n \n-  // The expressions to be evaluated inside this block.\n+  // All expressions to be evaluated inside this block and underlying blocks.\n   def exprValues: Set[ExprValue]"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "We can remove it, as discussed in other PR previously.",
    "commit": "c9dee44c6b4e9fdd41b2460fbd331f8f0e9235f4",
    "createdAt": "2018-07-05T06:59:35Z",
    "diffHunk": "@@ -118,10 +119,10 @@ object JavaCode {\n /**\n  * A trait representing a block of java code.\n  */\n-trait Block extends JavaCode {\n+trait Block extends TreeNode[Block] with JavaCode {\n   import Block._\n \n-  // The expressions to be evaluated inside this block.\n+  // All expressions to be evaluated inside this block and underlying blocks.\n   def exprValues: Set[ExprValue]"
  }],
  "prId": 21405
}]