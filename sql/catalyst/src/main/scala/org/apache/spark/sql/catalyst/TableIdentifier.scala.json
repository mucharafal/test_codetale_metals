[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "$db may already have `.` in it\n",
    "commit": "230970c596ccf1673a2b8e186f29471bd5a0e045",
    "createdAt": "2015-10-12T17:39:08Z",
    "diffHunk": "@@ -20,14 +20,20 @@ package org.apache.spark.sql.catalyst\n /**\n  * Identifies a `table` in `database`.  If `database` is not defined, the current database is used.\n  */\n-private[sql] case class TableIdentifier(table: String, database: Option[String] = None) {\n-  def withDatabase(database: String): TableIdentifier = this.copy(database = Some(database))\n+private[sql] case class TableIdentifier(table: String, database: Option[String]) {\n+  override def toString: String = {\n+    if (table.contains('.') || database.exists(_.contains('.'))) {\n+      quotedString\n+    } else {\n+      unquotedString\n+    }\n+  }\n \n-  def toSeq: Seq[String] = database.toSeq :+ table\n+  def quotedString: String = database.map(db => s\"`$db`.`$table`\").getOrElse(s\"`$table`\")"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is the same behaviour of the original implementation  `def quotedString: String = toSeq.map(\"`\" + _ + \"``\").mkString(\".\")`.\n",
    "commit": "230970c596ccf1673a2b8e186f29471bd5a0e045",
    "createdAt": "2015-10-12T22:24:11Z",
    "diffHunk": "@@ -20,14 +20,20 @@ package org.apache.spark.sql.catalyst\n /**\n  * Identifies a `table` in `database`.  If `database` is not defined, the current database is used.\n  */\n-private[sql] case class TableIdentifier(table: String, database: Option[String] = None) {\n-  def withDatabase(database: String): TableIdentifier = this.copy(database = Some(database))\n+private[sql] case class TableIdentifier(table: String, database: Option[String]) {\n+  override def toString: String = {\n+    if (table.contains('.') || database.exists(_.contains('.'))) {\n+      quotedString\n+    } else {\n+      unquotedString\n+    }\n+  }\n \n-  def toSeq: Seq[String] = database.toSeq :+ table\n+  def quotedString: String = database.map(db => s\"`$db`.`$table`\").getOrElse(s\"`$table`\")"
  }],
  "prId": 8453
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Why use this instead of default value?\n",
    "commit": "230970c596ccf1673a2b8e186f29471bd5a0e045",
    "createdAt": "2015-10-12T17:40:18Z",
    "diffHunk": "@@ -20,14 +20,20 @@ package org.apache.spark.sql.catalyst\n /**\n  * Identifies a `table` in `database`.  If `database` is not defined, the current database is used.\n  */\n-private[sql] case class TableIdentifier(table: String, database: Option[String] = None) {\n-  def withDatabase(database: String): TableIdentifier = this.copy(database = Some(database))\n+private[sql] case class TableIdentifier(table: String, database: Option[String]) {\n+  override def toString: String = {\n+    if (table.contains('.') || database.exists(_.contains('.'))) {\n+      quotedString\n+    } else {\n+      unquotedString\n+    }\n+  }\n \n-  def toSeq: Seq[String] = database.toSeq :+ table\n+  def quotedString: String = database.map(db => s\"`$db`.`$table`\").getOrElse(s\"`$table`\")\n \n-  override def toString: String = quotedString\n-\n-  def quotedString: String = toSeq.map(\"`\" + _ + \"`\").mkString(\".\")\n+  def unquotedString: String = database.map(db => s\"$db.$table\").getOrElse(table)\n+}\n \n-  def unquotedString: String = toSeq.mkString(\".\")\n+private[sql] object TableIdentifier {\n+  def apply(tableName: String): TableIdentifier = TableIdentifier(tableName, None)"
  }],
  "prId": 8453
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "`.` is not the only character that need to be quoted, see http://stackoverflow.com/questions/4200351/what-characters-are-valid-in-an-sql-server-database-name\n",
    "commit": "230970c596ccf1673a2b8e186f29471bd5a0e045",
    "createdAt": "2015-10-13T17:49:53Z",
    "diffHunk": "@@ -20,14 +20,20 @@ package org.apache.spark.sql.catalyst\n /**\n  * Identifies a `table` in `database`.  If `database` is not defined, the current database is used.\n  */\n-private[sql] case class TableIdentifier(table: String, database: Option[String] = None) {\n-  def withDatabase(database: String): TableIdentifier = this.copy(database = Some(database))\n+private[sql] case class TableIdentifier(table: String, database: Option[String]) {\n+  override def toString: String = {\n+    if (table.contains('.') || database.exists(_.contains('.'))) {"
  }],
  "prId": 8453
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "There are some other character that need quote.\n",
    "commit": "230970c596ccf1673a2b8e186f29471bd5a0e045",
    "createdAt": "2015-10-13T21:24:27Z",
    "diffHunk": "@@ -20,14 +20,22 @@ package org.apache.spark.sql.catalyst\n /**\n  * Identifies a `table` in `database`.  If `database` is not defined, the current database is used.\n  */\n-private[sql] case class TableIdentifier(table: String, database: Option[String] = None) {\n-  def withDatabase(database: String): TableIdentifier = this.copy(database = Some(database))\n+private[sql] case class TableIdentifier(table: String, database: Option[String]) {\n+  def this(table: String) = this(table, None)\n \n-  def toSeq: Seq[String] = database.toSeq :+ table\n+  override def toString: String = {\n+    if (table.contains('.') || database.exists(_.contains('.'))) {"
  }],
  "prId": 8453
}]