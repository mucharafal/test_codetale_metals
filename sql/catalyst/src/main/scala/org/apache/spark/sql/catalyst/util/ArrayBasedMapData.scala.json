[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "add some documentation?\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-20T23:14:13Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],"
  }, {
    "author": {
      "login": "tejasapatil"
    },
    "body": "done\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-22T04:20:24Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],"
  }],
  "prId": 15573
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "I'd write this using a while loop since you care about performance. It is pretty weird to have an `i += 1` in the body of foreach.\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-20T23:15:16Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],\n+            keyUnwrapper: (Any) => Any,\n+            valueUnwrapper: (Any) => Any): ArrayBasedMapData = {\n+    val keys: Array[Any] = new Array[Any](map.size())\n+    val values: Array[Any] = new Array[Any](map.size())\n+\n+    var i: Int = 0\n+    map.asScala.foreach("
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "BTW a more scala native way is\n\n``` scala\nmap.asScala.foreach { case (k, v) =>\n  keys(i) = keyUnwrapper(k)\n  values(i) = valueUnwrapper(v)\n  i += 1\n}\n```\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-20T23:15:52Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],\n+            keyUnwrapper: (Any) => Any,\n+            valueUnwrapper: (Any) => Any): ArrayBasedMapData = {\n+    val keys: Array[Any] = new Array[Any](map.size())\n+    val values: Array[Any] = new Array[Any](map.size())\n+\n+    var i: Int = 0\n+    map.asScala.foreach("
  }, {
    "author": {
      "login": "tejasapatil"
    },
    "body": "done\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-22T04:20:21Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],\n+            keyUnwrapper: (Any) => Any,\n+            valueUnwrapper: (Any) => Any): ArrayBasedMapData = {\n+    val keys: Array[Any] = new Array[Any](map.size())\n+    val values: Array[Any] = new Array[Any](map.size())\n+\n+    var i: Int = 0\n+    map.asScala.foreach("
  }],
  "prId": 15573
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Nit: indent issues:\n\n``` Scala\ndef apply(\n    map: JMap[_, _],\n    keyUnwrapper: Any => Any,\n    valueUnwrapper: Any => Any): ArrayBasedMapData = {\n...  \n}\n```\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-20T23:26:16Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],\n+            keyUnwrapper: (Any) => Any,\n+            valueUnwrapper: (Any) => Any): ArrayBasedMapData = {"
  }, {
    "author": {
      "login": "tejasapatil"
    },
    "body": "fixed\n",
    "commit": "b263278573adc00fcc3f9fc72604b573936a5516",
    "createdAt": "2016-10-22T04:20:33Z",
    "diffHunk": "@@ -35,6 +39,23 @@ object ArrayBasedMapData {\n     ArrayBasedMapData(array.map(_._1), array.map(_._2))\n   }\n \n+  def apply(map: JMap[_, _],\n+            keyUnwrapper: (Any) => Any,\n+            valueUnwrapper: (Any) => Any): ArrayBasedMapData = {"
  }],
  "prId": 15573
}]