[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "``` scala\nplan transformAllExpressions {\n\n}\n```\n\nthen you get rid of one level of nesting\n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-28T02:06:37Z",
    "diffHunk": "@@ -643,4 +644,29 @@ trait HiveTypeCoercion {\n     }\n   }\n \n+  /**\n+   * Casts types according to the expected input types for Expressions that have the trait\n+   * `ExpectsInputTypes`.\n+   */\n+  object ExpectedInputConversion extends Rule[LogicalPlan] {\n+\n+    def apply(plan: LogicalPlan): LogicalPlan = plan transform {"
  }],
  "prId": 5616
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "if u need to update the PR again, maybe collapse this into a single line, i.e.\n\n``` scala\nif (actual == expected) child else Cast(child, expected)\n```\n\nif you don't need to update it then don't do it just for this\n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-28T04:07:29Z",
    "diffHunk": "@@ -643,4 +644,26 @@ trait HiveTypeCoercion {\n     }\n   }\n \n+  /**\n+   * Casts types according to the expected input types for Expressions that have the trait\n+   * `ExpectsInputTypes`.\n+   */\n+  object ExpectedInputConversion extends Rule[LogicalPlan] {\n+\n+    def apply(plan: LogicalPlan): LogicalPlan = plan transformAllExpressions {\n+      // Skip nodes who's children have not been resolved yet.\n+      case e if !e.childrenResolved => e\n+\n+      case e: ExpectsInputTypes if e.children.map(_.dataType) != e.expectedChildTypes =>\n+        val newC = (e.children, e.children.map(_.dataType), e.expectedChildTypes).zipped.map {\n+          case (child, actual, expected) =>\n+            if (actual == expected) {"
  }, {
    "author": {
      "login": "brkyvz"
    },
    "body": "Java tests failed, because I removed the test data out of `TestData`. Got this in as well :)\n",
    "commit": "fb271536a68cf3f7ff267953098ce305512c65d0",
    "createdAt": "2015-04-28T04:20:50Z",
    "diffHunk": "@@ -643,4 +644,26 @@ trait HiveTypeCoercion {\n     }\n   }\n \n+  /**\n+   * Casts types according to the expected input types for Expressions that have the trait\n+   * `ExpectsInputTypes`.\n+   */\n+  object ExpectedInputConversion extends Rule[LogicalPlan] {\n+\n+    def apply(plan: LogicalPlan): LogicalPlan = plan transformAllExpressions {\n+      // Skip nodes who's children have not been resolved yet.\n+      case e if !e.childrenResolved => e\n+\n+      case e: ExpectsInputTypes if e.children.map(_.dataType) != e.expectedChildTypes =>\n+        val newC = (e.children, e.children.map(_.dataType), e.expectedChildTypes).zipped.map {\n+          case (child, actual, expected) =>\n+            if (actual == expected) {"
  }],
  "prId": 5616
}]