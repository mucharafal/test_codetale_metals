[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "This applies generally. But for the non-nested column pruning cases, this seems a burden and making the query plan complicated.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-09-18T04:39:18Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {"
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "I'm not sure I know what you mean. This test https://github.com/apache/spark/blob/38cec5f05066f75d868b64d360b04edb18dcebeb/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/JoinFieldExtractionPushdownSuite.scala#L53-L61 checks that `JoinFieldExtractionPushdown` does not modify a join not involving nested fields.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-09-21T20:58:08Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Oh, I just meant we may skip most of the rule if it can't be applied. Please see my comment below.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T05:39:52Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {"
  }],
  "prId": 16578
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "`asInstanceOf[Seq[NamedExpression]]`?",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T03:36:55Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {\n+  override def apply(plan: LogicalPlan): LogicalPlan =\n+    plan transformDown {\n+      case op @ PhysicalOperation(projects, Seq(),\n+          join @ Join(left, right, joinType, Some(joinCondition))) =>\n+        val fieldExtractors = (projects :+ joinCondition).flatMap(getFieldExtractors).distinct\n+\n+        if (fieldExtractors.nonEmpty) {\n+          val (aliases, substituteAttributes) = constructAliasesAndSubstitutions(fieldExtractors)\n+\n+          // Construct the new projections and join condition by substituting each GetStructField\n+          // expression with a reference to its alias\n+          val newProjects =\n+            projects.map(substituteAttributes).collect { case named: NamedExpression => named }"
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "Please see my reply to the same question for `AggregateFieldExtractionPushdown`.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-03T06:52:08Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {\n+  override def apply(plan: LogicalPlan): LogicalPlan =\n+    plan transformDown {\n+      case op @ PhysicalOperation(projects, Seq(),\n+          join @ Join(left, right, joinType, Some(joinCondition))) =>\n+        val fieldExtractors = (projects :+ joinCondition).flatMap(getFieldExtractors).distinct\n+\n+        if (fieldExtractors.nonEmpty) {\n+          val (aliases, substituteAttributes) = constructAliasesAndSubstitutions(fieldExtractors)\n+\n+          // Construct the new projections and join condition by substituting each GetStructField\n+          // expression with a reference to its alias\n+          val newProjects =\n+            projects.map(substituteAttributes).collect { case named: NamedExpression => named }"
  }],
  "prId": 16578
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "We can return original plan if `aliases` is empty.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T03:42:38Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join\n+ * and its join condition. The original [[expressions.GetStructField]] expressions are replaced\n+ * with references to the pushed down aliases.\n+ */\n+object JoinFieldExtractionPushdown extends FieldExtractionPushdown {\n+  override def apply(plan: LogicalPlan): LogicalPlan =\n+    plan transformDown {\n+      case op @ PhysicalOperation(projects, Seq(),\n+          join @ Join(left, right, joinType, Some(joinCondition))) =>\n+        val fieldExtractors = (projects :+ joinCondition).flatMap(getFieldExtractors).distinct\n+\n+        if (fieldExtractors.nonEmpty) {\n+          val (aliases, substituteAttributes) = constructAliasesAndSubstitutions(fieldExtractors)",
    "line": 38
  }],
  "prId": 16578
}, {
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Please describe this is specialized for pushing down pruned nested column.",
    "commit": "dd4f2d8829335b9d9e71fead6d0d056d48a9d7e6",
    "createdAt": "2017-11-02T05:36:32Z",
    "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.optimizer\n+\n+import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeSet, NamedExpression}\n+import org.apache.spark.sql.catalyst.planning.PhysicalOperation\n+import org.apache.spark.sql.catalyst.plans.logical.{Join, LogicalPlan, Project}\n+\n+/**\n+ * Pushes down aliases to [[expressions.GetStructField]] expressions in a projection over a join",
    "line": 25
  }],
  "prId": 16578
}]