[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "lower case argument\n",
    "commit": "c654a0e4f308d53e82ab78e6679eabd43649d9db",
    "createdAt": "2015-07-09T01:27:10Z",
    "diffHunk": "@@ -37,7 +37,16 @@ trait ExpectsInputTypes { self: Expression =>\n   def inputTypes: Seq[AbstractDataType]\n \n   override def checkInputDataTypes(): TypeCheckResult = {\n-    // TODO: implement proper type checking.\n-    TypeCheckResult.TypeCheckSuccess\n+    val mismatches = children.zip(inputTypes).zipWithIndex.collect {\n+      case ((child, expected), idx) if !expected.acceptsType(child.dataType) =>\n+        s\"Argument ${idx + 1} is expected to be of type ${expected.simpleString}, \" +",
    "line": 8
  }],
  "prId": 7303
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "quote child.prettyString\n",
    "commit": "c654a0e4f308d53e82ab78e6679eabd43649d9db",
    "createdAt": "2015-07-09T01:27:16Z",
    "diffHunk": "@@ -37,7 +37,16 @@ trait ExpectsInputTypes { self: Expression =>\n   def inputTypes: Seq[AbstractDataType]\n \n   override def checkInputDataTypes(): TypeCheckResult = {\n-    // TODO: implement proper type checking.\n-    TypeCheckResult.TypeCheckSuccess\n+    val mismatches = children.zip(inputTypes).zipWithIndex.collect {\n+      case ((child, expected), idx) if !expected.acceptsType(child.dataType) =>\n+        s\"Argument ${idx + 1} is expected to be of type ${expected.simpleString}, \" +\n+        s\"however, ${child.prettyString} is of type ${child.dataType.simpleString}.\"",
    "line": 9
  }],
  "prId": 7303
}]