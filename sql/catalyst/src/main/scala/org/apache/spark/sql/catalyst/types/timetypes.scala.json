[{
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please replace all `/* *` to `/**`, 'cause the former is not recognized by Scaladoc.\n",
    "commit": "31f0d7ec2c6062fdf3db49d3b516c46c6ca2250f",
    "createdAt": "2014-11-10T08:10:37Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Date, Timestamp}\n+import scala.language.implicitConversions\n+\n+/* *"
  }],
  "prId": 3158
}, {
  "comments": [{
    "author": {
      "login": "liancheng"
    },
    "body": "Please use proper Scaladoc format for example code:\n\n```\n{{{\n  // example code\n}}}\n```\n",
    "commit": "31f0d7ec2c6062fdf3db49d3b516c46c6ca2250f",
    "createdAt": "2014-11-10T08:11:29Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Date, Timestamp}\n+import scala.language.implicitConversions\n+\n+/* *\n+ * Subclass of java.sql.Date which provides the usual comparison\n+ * operators (as required for catalyst expressions) and which can\n+ * be constructed from a string.\n+ *\n+ * scala> val d1 = Date(\"2014-02-01\")\n+ * d1: Date = 2014-02-01\n+ *\n+ * scala> val d2 = Date(\"2014-02-02\")\n+ * d2: Date = 2014-02-02\n+ *\n+ * scala> d1 < d2\n+ * res1: Boolean = true\n+ */\n+\n+class RichDate(milliseconds: Long) extends Date(milliseconds) {\n+  def < (that: Date): Boolean = this.before(that)\n+  def > (that: Date): Boolean  = this.after(that)\n+  def <= (that: Date): Boolean = (this.before(that) || this.equals(that))\n+  def >= (that: Date): Boolean = (this.after(that) || this.equals(that))\n+  def === (that: Date): Boolean = this.equals(that)\n+}\n+\n+object RichDate {\n+  def apply(init: String) = new RichDate(Date.valueOf(init).getTime)\n+\n+  def unapply(richdate: RichDate): Option[Date] = Some(new Date(richdate.getTime)) \n+}\n+\n+/* *\n+ * Analogous subclass of java.sql.Timestamp.\n+ *\n+ * scala> val ts1 = Timestamp(\"2014-03-04 12:34:56.12\")\n+ * ts1: Timestamp = 2014-03-04 12:34:56.12\n+ *\n+ * scala> val ts2 = Timestamp(\"2014-03-04 12:34:56.13\")\n+ * ts2: Timestamp = 2014-03-04 12:34:56.13\n+ *\n+ * scala> ts1 < ts2\n+ * res13: Boolean = true"
  }, {
    "author": {
      "login": "culler"
    },
    "body": "Thanks @liancheng.  I am sorry I did not notice I had done that.\n",
    "commit": "31f0d7ec2c6062fdf3db49d3b516c46c6ca2250f",
    "createdAt": "2014-11-10T13:48:19Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.sql.{Date, Timestamp}\n+import scala.language.implicitConversions\n+\n+/* *\n+ * Subclass of java.sql.Date which provides the usual comparison\n+ * operators (as required for catalyst expressions) and which can\n+ * be constructed from a string.\n+ *\n+ * scala> val d1 = Date(\"2014-02-01\")\n+ * d1: Date = 2014-02-01\n+ *\n+ * scala> val d2 = Date(\"2014-02-02\")\n+ * d2: Date = 2014-02-02\n+ *\n+ * scala> d1 < d2\n+ * res1: Boolean = true\n+ */\n+\n+class RichDate(milliseconds: Long) extends Date(milliseconds) {\n+  def < (that: Date): Boolean = this.before(that)\n+  def > (that: Date): Boolean  = this.after(that)\n+  def <= (that: Date): Boolean = (this.before(that) || this.equals(that))\n+  def >= (that: Date): Boolean = (this.after(that) || this.equals(that))\n+  def === (that: Date): Boolean = this.equals(that)\n+}\n+\n+object RichDate {\n+  def apply(init: String) = new RichDate(Date.valueOf(init).getTime)\n+\n+  def unapply(richdate: RichDate): Option[Date] = Some(new Date(richdate.getTime)) \n+}\n+\n+/* *\n+ * Analogous subclass of java.sql.Timestamp.\n+ *\n+ * scala> val ts1 = Timestamp(\"2014-03-04 12:34:56.12\")\n+ * ts1: Timestamp = 2014-03-04 12:34:56.12\n+ *\n+ * scala> val ts2 = Timestamp(\"2014-03-04 12:34:56.13\")\n+ * ts2: Timestamp = 2014-03-04 12:34:56.13\n+ *\n+ * scala> ts1 < ts2\n+ * res13: Boolean = true"
  }],
  "prId": 3158
}]