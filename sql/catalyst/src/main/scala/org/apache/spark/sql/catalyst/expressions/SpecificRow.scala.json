[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "You don't want the first `.asInstanceOf`here as it can cause errors.\n\n``` scala\nscala> new SpecificMutableRow(IntegerType :: Nil).getAs[Int](0)\njava.lang.ClassCastException: org.apache.spark.sql.catalyst.expressions.MutableInt cannot be cast to org.apache.spark.sql.catalyst.expressions.MutableAny\n```\n\nSince all `MutableValue` classes have a `.value` method I think you can just leave it out.\n",
    "commit": "c6594b2757967e1645452fd21167b47ca339fca6",
    "createdAt": "2014-10-01T22:00:18Z",
    "diffHunk": "@@ -306,4 +306,8 @@ final class SpecificMutableRow(val values: Array[MutableValue]) extends MutableR\n   override def getByte(i: Int): Byte = {\n     values(i).asInstanceOf[MutableByte].value\n   }\n+\n+  override def getAs[T](i: Int): T = {\n+    values(i).asInstanceOf[MutableAny].value.asInstanceOf[T]"
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "Also, looks like this file has always been named wrong.  Would you mind fixing that (to `SpecificMutableRow.scala`) while you are at it?\n",
    "commit": "c6594b2757967e1645452fd21167b47ca339fca6",
    "createdAt": "2014-10-01T22:01:21Z",
    "diffHunk": "@@ -306,4 +306,8 @@ final class SpecificMutableRow(val values: Array[MutableValue]) extends MutableR\n   override def getByte(i: Int): Byte = {\n     values(i).asInstanceOf[MutableByte].value\n   }\n+\n+  override def getAs[T](i: Int): T = {\n+    values(i).asInstanceOf[MutableAny].value.asInstanceOf[T]"
  }],
  "prId": 2529
}]