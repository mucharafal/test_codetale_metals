[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `Expression` -> `ExtractValue`?",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-02T14:29:31Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that builds a [[org.apache.spark.sql.types.StructField]] from a Catalyst\n+ * complex type extractor. For example, consider a relation with the following schema:\n+ *\n+ *   {{{\n+ *   root\n+ *    |-- name: struct (nullable = true)\n+ *    |    |-- first: string (nullable = true)\n+ *    |    |-- last: string (nullable = true)\n+ *    }}}\n+ *\n+ * Further, suppose we take the select expression `name.first`. This will parse into an\n+ * `Alias(child, \"first\")`. Ignoring the alias, `child` matches the following pattern:\n+ *\n+ *   {{{\n+ *   GetStructFieldObject(\n+ *     AttributeReference(\"name\", StructType(_), _, _),\n+ *     StructField(\"first\", StringType, _, _))\n+ *   }}}\n+ *\n+ * [[SelectedField]] converts that expression into\n+ *\n+ *   {{{\n+ *   StructField(\"name\", StructType(Array(StructField(\"first\", StringType))))\n+ *   }}}\n+ *\n+ * by mapping each complex type extractor to a [[org.apache.spark.sql.types.StructField]] with the\n+ * same name as its child (or \"parent\" going right to left in the select expression) and a data\n+ * type appropriate to the complex type extractor. In our example, the name of the child expression\n+ * is \"name\" and its data type is a [[org.apache.spark.sql.types.StructType]] with a single string\n+ * field named \"first\".\n+ *\n+ * @param expr the top-level complex type extractor\n+ */\n+object SelectedField {\n+  def unapply(expr: Expression): Option[StructField] = {"
  }, {
    "author": {
      "login": "mallman"
    },
    "body": "The code does not compile with that change.",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-11T22:50:09Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that builds a [[org.apache.spark.sql.types.StructField]] from a Catalyst\n+ * complex type extractor. For example, consider a relation with the following schema:\n+ *\n+ *   {{{\n+ *   root\n+ *    |-- name: struct (nullable = true)\n+ *    |    |-- first: string (nullable = true)\n+ *    |    |-- last: string (nullable = true)\n+ *    }}}\n+ *\n+ * Further, suppose we take the select expression `name.first`. This will parse into an\n+ * `Alias(child, \"first\")`. Ignoring the alias, `child` matches the following pattern:\n+ *\n+ *   {{{\n+ *   GetStructFieldObject(\n+ *     AttributeReference(\"name\", StructType(_), _, _),\n+ *     StructField(\"first\", StringType, _, _))\n+ *   }}}\n+ *\n+ * [[SelectedField]] converts that expression into\n+ *\n+ *   {{{\n+ *   StructField(\"name\", StructType(Array(StructField(\"first\", StringType))))\n+ *   }}}\n+ *\n+ * by mapping each complex type extractor to a [[org.apache.spark.sql.types.StructField]] with the\n+ * same name as its child (or \"parent\" going right to left in the select expression) and a data\n+ * type appropriate to the complex type extractor. In our example, the name of the child expression\n+ * is \"name\" and its data type is a [[org.apache.spark.sql.types.StructType]] with a single string\n+ * field named \"first\".\n+ *\n+ * @param expr the top-level complex type extractor\n+ */\n+object SelectedField {\n+  def unapply(expr: Expression): Option[StructField] = {"
  }, {
    "author": {
      "login": "ajacques"
    },
    "body": "```\r\nError:(61, 12) constructor cannot be instantiated to expected type;\r\n found   : org.apache.spark.sql.catalyst.expressions.Alias\r\n required: org.apache.spark.sql.catalyst.expressions.ExtractValue\r\n      case Alias(child, _) => child\r\n```\r\n\r\nAlias takes: `Alias(child: Expression, name: String)`",
    "commit": "e6baf681e06e229d740af120491d1bf0f426af99",
    "createdAt": "2018-07-26T04:39:39Z",
    "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.planning\n+\n+import org.apache.spark.sql.catalyst.expressions._\n+import org.apache.spark.sql.types._\n+\n+/**\n+ * A Scala extractor that builds a [[org.apache.spark.sql.types.StructField]] from a Catalyst\n+ * complex type extractor. For example, consider a relation with the following schema:\n+ *\n+ *   {{{\n+ *   root\n+ *    |-- name: struct (nullable = true)\n+ *    |    |-- first: string (nullable = true)\n+ *    |    |-- last: string (nullable = true)\n+ *    }}}\n+ *\n+ * Further, suppose we take the select expression `name.first`. This will parse into an\n+ * `Alias(child, \"first\")`. Ignoring the alias, `child` matches the following pattern:\n+ *\n+ *   {{{\n+ *   GetStructFieldObject(\n+ *     AttributeReference(\"name\", StructType(_), _, _),\n+ *     StructField(\"first\", StringType, _, _))\n+ *   }}}\n+ *\n+ * [[SelectedField]] converts that expression into\n+ *\n+ *   {{{\n+ *   StructField(\"name\", StructType(Array(StructField(\"first\", StringType))))\n+ *   }}}\n+ *\n+ * by mapping each complex type extractor to a [[org.apache.spark.sql.types.StructField]] with the\n+ * same name as its child (or \"parent\" going right to left in the select expression) and a data\n+ * type appropriate to the complex type extractor. In our example, the name of the child expression\n+ * is \"name\" and its data type is a [[org.apache.spark.sql.types.StructType]] with a single string\n+ * field named \"first\".\n+ *\n+ * @param expr the top-level complex type extractor\n+ */\n+object SelectedField {\n+  def unapply(expr: Expression): Option[StructField] = {"
  }],
  "prId": 21320
}]