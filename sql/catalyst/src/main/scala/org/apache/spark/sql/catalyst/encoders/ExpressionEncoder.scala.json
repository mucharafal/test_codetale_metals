[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "who will call this method with `topLevel=false`?",
    "commit": "65a16ec6bcf93763e26605aea7cec8860df158d9",
    "createdAt": "2018-06-26T02:43:41Z",
    "diffHunk": "@@ -43,12 +43,17 @@ import org.apache.spark.util.Utils\n  *    to the name `value`.\n  */\n object ExpressionEncoder {\n-  def apply[T : TypeTag](): ExpressionEncoder[T] = {\n+  def apply[T : TypeTag](): ExpressionEncoder[T] = apply(topLevel = true)\n+\n+  /**\n+   * @param topLevel whether the encoders to construct are for top-level row.\n+   */\n+  def apply[T : TypeTag](topLevel: Boolean): ExpressionEncoder[T] = {"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "Please see my comment https://github.com/apache/spark/pull/21611/files#r197348976. It is used to create encoder `Encoder[Option[(Boolean, Int)]]`.\r\n",
    "commit": "65a16ec6bcf93763e26605aea7cec8860df158d9",
    "createdAt": "2018-06-26T06:17:54Z",
    "diffHunk": "@@ -43,12 +43,17 @@ import org.apache.spark.util.Utils\n  *    to the name `value`.\n  */\n object ExpressionEncoder {\n-  def apply[T : TypeTag](): ExpressionEncoder[T] = {\n+  def apply[T : TypeTag](): ExpressionEncoder[T] = apply(topLevel = true)\n+\n+  /**\n+   * @param topLevel whether the encoders to construct are for top-level row.\n+   */\n+  def apply[T : TypeTag](topLevel: Boolean): ExpressionEncoder[T] = {"
  }],
  "prId": 21611
}]