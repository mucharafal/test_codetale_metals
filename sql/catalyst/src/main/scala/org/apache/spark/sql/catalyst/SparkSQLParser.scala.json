[{
  "comments": [{
    "author": {
      "login": "marmbrus"
    },
    "body": "Why is this better?  Because its lazy?  Given that these are all materialized eventually the possible benefit seems dubious given the drop in readability.  (Please correct me if I'm wrong).\n",
    "commit": "358e235dca3eaee6551a9183f0cf7a1235c79f92",
    "createdAt": "2014-11-07T20:02:07Z",
    "diffHunk": "@@ -97,10 +97,10 @@ class SqlLexical(val keywords: Seq[String]) extends StdLexical {\n \n   /** Generate all variations of upper and lower case of a given string */\n   def allCaseVersions(s: String, prefix: String = \"\"): Stream[String] = {\n-    if (s == \"\") {\n+    if (s.isEmpty) {\n       Stream(prefix)\n     } else {\n-      allCaseVersions(s.tail, prefix + s.head.toLower) ++\n+      allCaseVersions(s.tail, prefix + s.head.toLower) #:::",
    "line": 9
  }, {
    "author": {
      "login": "zsxwing"
    },
    "body": "> Given that these are all materialized eventually\n\nDidn't realize it. However, then why not use List? Since laziness is not necessary, using Stream is confusing.\n",
    "commit": "358e235dca3eaee6551a9183f0cf7a1235c79f92",
    "createdAt": "2014-11-08T04:15:13Z",
    "diffHunk": "@@ -97,10 +97,10 @@ class SqlLexical(val keywords: Seq[String]) extends StdLexical {\n \n   /** Generate all variations of upper and lower case of a given string */\n   def allCaseVersions(s: String, prefix: String = \"\"): Stream[String] = {\n-    if (s == \"\") {\n+    if (s.isEmpty) {\n       Stream(prefix)\n     } else {\n-      allCaseVersions(s.tail, prefix + s.head.toLower) ++\n+      allCaseVersions(s.tail, prefix + s.head.toLower) #:::",
    "line": 9
  }, {
    "author": {
      "login": "marmbrus"
    },
    "body": "That is a good point, I don't know why it is a Stream but I guess this change is okay.\n",
    "commit": "358e235dca3eaee6551a9183f0cf7a1235c79f92",
    "createdAt": "2014-12-02T00:39:30Z",
    "diffHunk": "@@ -97,10 +97,10 @@ class SqlLexical(val keywords: Seq[String]) extends StdLexical {\n \n   /** Generate all variations of upper and lower case of a given string */\n   def allCaseVersions(s: String, prefix: String = \"\"): Stream[String] = {\n-    if (s == \"\") {\n+    if (s.isEmpty) {\n       Stream(prefix)\n     } else {\n-      allCaseVersions(s.tail, prefix + s.head.toLower) ++\n+      allCaseVersions(s.tail, prefix + s.head.toLower) #:::",
    "line": 9
  }],
  "prId": 3132
}]