[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "We have `CodegenContext.genEqual` to generate codes for equality check. You can see how `EqualTo` expression uses it.\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-14T02:53:04Z",
    "diffHunk": "@@ -128,6 +128,58 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    dataType match {"
  }, {
    "author": {
      "login": "bomeng"
    },
    "body": "Thanks, @viirya ! That simplifies the logic!\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-14T03:30:17Z",
    "diffHunk": "@@ -128,6 +128,58 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    dataType match {"
  }],
  "prId": 12373
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "isn't this just coalesce?\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-15T00:30:50Z",
    "diffHunk": "@@ -128,6 +128,143 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+      ${leftGen.code}\n+      ${rightGen.code}\n+      boolean ${ev.isNull} = false;\n+      ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+      if (${ctx.genEqual(dataType, leftGen.value, rightGen.value)}) {\n+        ${ev.isNull} = true;\n+      } else {\n+        ${ev.value} = ${leftGen.value};\n+      }\n+    \"\"\"\n+  }\n+}\n+\n+/**\n+ * An Expression accepts two parameters and returns the second parameter if the value\n+ * in the first parameter is null; if the first parameter is any value other than null,\n+ * it is returned unchanged.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")\n+case class Nvl(left: Expression, right: Expression) extends BinaryExpression {"
  }, {
    "author": {
      "login": "bomeng"
    },
    "body": "I will say, yes, kind of. Here is what I found: [difference](http://stackoverflow.com/questions/950084/oracle-differences-between-nvl-and-coalesce)\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-15T16:51:47Z",
    "diffHunk": "@@ -128,6 +128,143 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+      ${leftGen.code}\n+      ${rightGen.code}\n+      boolean ${ev.isNull} = false;\n+      ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+      if (${ctx.genEqual(dataType, leftGen.value, rightGen.value)}) {\n+        ${ev.isNull} = true;\n+      } else {\n+        ${ev.value} = ${leftGen.value};\n+      }\n+    \"\"\"\n+  }\n+}\n+\n+/**\n+ * An Expression accepts two parameters and returns the second parameter if the value\n+ * in the first parameter is null; if the first parameter is any value other than null,\n+ * it is returned unchanged.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")\n+case class Nvl(left: Expression, right: Expression) extends BinaryExpression {"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "we should document the difference if there are any\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-15T18:50:46Z",
    "diffHunk": "@@ -128,6 +128,143 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+      ${leftGen.code}\n+      ${rightGen.code}\n+      boolean ${ev.isNull} = false;\n+      ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+      if (${ctx.genEqual(dataType, leftGen.value, rightGen.value)}) {\n+        ${ev.isNull} = true;\n+      } else {\n+        ${ev.value} = ${leftGen.value};\n+      }\n+    \"\"\"\n+  }\n+}\n+\n+/**\n+ * An Expression accepts two parameters and returns the second parameter if the value\n+ * in the first parameter is null; if the first parameter is any value other than null,\n+ * it is returned unchanged.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")\n+case class Nvl(left: Expression, right: Expression) extends BinaryExpression {"
  }, {
    "author": {
      "login": "bomeng"
    },
    "body": "Did not notice this. I will do it shortly.\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-15T19:26:27Z",
    "diffHunk": "@@ -128,6 +128,143 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+      ${leftGen.code}\n+      ${rightGen.code}\n+      boolean ${ev.isNull} = false;\n+      ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+      if (${ctx.genEqual(dataType, leftGen.value, rightGen.value)}) {\n+        ${ev.isNull} = true;\n+      } else {\n+        ${ev.value} = ${leftGen.value};\n+      }\n+    \"\"\"\n+  }\n+}\n+\n+/**\n+ * An Expression accepts two parameters and returns the second parameter if the value\n+ * in the first parameter is null; if the first parameter is any value other than null,\n+ * it is returned unchanged.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")\n+case class Nvl(left: Expression, right: Expression) extends BinaryExpression {"
  }],
  "prId": 12373
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "the example is wrong\n",
    "commit": "4e21e1a06b4293367f7ea6fa4f224f6fcfef0957",
    "createdAt": "2016-04-15T00:31:33Z",
    "diffHunk": "@@ -128,6 +128,143 @@ case class IsNaN(child: Expression) extends UnaryExpression\n }\n \n /**\n+ * An Expression accepts two parameters and returns null if both parameters are equal.\n+ * If they are not equal, the first parameter value is returned.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns null if a equals to b, or a otherwise.\")\n+case class NullIf(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = true\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft.equals(valueRight)) {\n+      null\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+      ${leftGen.code}\n+      ${rightGen.code}\n+      boolean ${ev.isNull} = false;\n+      ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+      if (${ctx.genEqual(dataType, leftGen.value, rightGen.value)}) {\n+        ${ev.isNull} = true;\n+      } else {\n+        ${ev.value} = ${leftGen.value};\n+      }\n+    \"\"\"\n+  }\n+}\n+\n+/**\n+ * An Expression accepts two parameters and returns the second parameter if the value\n+ * in the first parameter is null; if the first parameter is any value other than null,\n+ * it is returned unchanged.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")\n+case class Nvl(left: Expression, right: Expression) extends BinaryExpression {\n+  override def nullable: Boolean = false\n+  override def dataType: DataType = left.dataType\n+\n+  override def eval(input: InternalRow): Any = {\n+    val valueLeft = left.eval(input)\n+    val valueRight = right.eval(input)\n+    if (valueLeft == null) {\n+      valueRight\n+    } else {\n+      valueLeft\n+    }\n+  }\n+\n+  override def genCode(ctx: CodegenContext, ev: ExprCode): String = {\n+    val leftGen = left.gen(ctx)\n+    val rightGen = right.gen(ctx)\n+    s\"\"\"\n+       ${leftGen.code}\n+       ${rightGen.code}\n+       boolean ${ev.isNull} = false;\n+       ${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};\n+     \"\"\" +\n+    {\n+      if (ctx.isPrimitiveType(dataType)) {\n+        s\"\"\"\n+          ${ev.value} = ${leftGen.value};\n+        \"\"\"\n+      } else {\n+        s\"\"\"\n+          if (${leftGen.value} == null) {\n+            ${ev.value} = ${rightGen.value};\n+          } else {\n+            ${ev.value} = ${leftGen.value};\n+          }\n+        \"\"\"\n+      }\n+    }\n+  }\n+}\n+\n+/**\n+ * An Expression accepts three parameters and returns the second parameter if the first parameter\n+ * value is not null; if the first parameter is null, it returns the third parameter.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_(a,b) - Returns b if a is null, or a otherwise.\")"
  }],
  "prId": 12373
}]