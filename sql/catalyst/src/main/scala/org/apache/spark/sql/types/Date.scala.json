[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "rename this\n\ntoMillisSinceEpoch ?\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T18:01:27Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.util.{Calendar, TimeZone}\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Date to the given Int (days since 1970-01-01).\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Date to the given type.Date value.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  /**\n+   * Get the Int value of days since 1970-01-01.\n+   */\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  /**\n+   * get the corresponding java.sql.Date value of this Date object.\n+   */\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = Cast.threadLocalDateFormat.get.format(toJavaDate)\n+\n+  def toLong: Long = {"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "again, please remove toInt, toShort, toByte. \n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T18:01:48Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.util.{Calendar, TimeZone}\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Date to the given Int (days since 1970-01-01).\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Date to the given type.Date value.\n+   */\n+  def set(date: Date): Date = {\n+    this.daysSinceEpoch = date.daysSinceEpoch\n+    this\n+  }\n+\n+  /**\n+   * Get the Int value of days since 1970-01-01.\n+   */\n+  def toDays: Int = {\n+    this.daysSinceEpoch\n+  }\n+\n+  /**\n+   * get the corresponding java.sql.Date value of this Date object.\n+   */\n+  def toJavaDate: java.sql.Date = {\n+    new java.sql.Date(toLong)\n+  }\n+\n+  override def toString: String = Cast.threadLocalDateFormat.get.format(toJavaDate)\n+\n+  def toLong: Long = {\n+    val millisUtc = daysSinceEpoch.toLong * Date.MILLIS_PER_DAY\n+    millisUtc - Date.LOCAL_TIMEZONE.get().getOffset(millisUtc)\n+  }\n+\n+  def toInt: Int = toLong.toInt"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "we should put more information here, including why we can't just use java.sql.Date and java.util.Date.\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T18:02:55Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.util.{Calendar, TimeZone}\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {"
  }],
  "prId": 3732
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "why is this needed?\n",
    "commit": "0ed0fdc13ec043e16058128011428445a62c7581",
    "createdAt": "2015-01-14T18:03:18Z",
    "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import java.util.{Calendar, TimeZone}\n+\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+\n+/**\n+ * A mutable implementation of java.sql.Date that holds an Int for days since epoch, like Hive.\n+ */\n+final class Date extends Ordered[Date] with Serializable {\n+  private var daysSinceEpoch: Int = 0\n+\n+  /**\n+   * Set this Date to the given Int (days since 1970-01-01).\n+   */\n+  def set(days: Int): Date = {\n+    this.daysSinceEpoch = days\n+    this\n+  }\n+\n+  /**\n+   * Set this Date to the given type.Date value.\n+   */\n+  def set(date: Date): Date = {"
  }],
  "prId": 3732
}]