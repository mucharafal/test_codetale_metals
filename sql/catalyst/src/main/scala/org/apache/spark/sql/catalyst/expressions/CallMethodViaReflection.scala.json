[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "The above should be in `CallMethodViaReflection` or `CodeGenerator`?",
    "commit": "7b30c30a68107880cda108e6a0ed923c27ac6d56",
    "createdAt": "2018-03-08T23:40:01Z",
    "diffHunk": "@@ -127,6 +128,52 @@ object CallMethodViaReflection {\n     StringType -> Seq(classOf[String])\n   )\n \n+  val typeJavaMapping = Map[DataType, Class[_]](\n+    BooleanType -> classOf[Boolean],\n+    ByteType -> classOf[Byte],\n+    ShortType -> classOf[Short],\n+    IntegerType -> classOf[Int],\n+    LongType -> classOf[Long],\n+    FloatType -> classOf[Float],\n+    DoubleType -> classOf[Double],\n+    StringType -> classOf[UTF8String],\n+    DateType -> classOf[DateType.InternalType],\n+    TimestampType -> classOf[TimestampType.InternalType],\n+    BinaryType -> classOf[BinaryType.InternalType],\n+    CalendarIntervalType -> classOf[CalendarInterval]\n+  )\n+\n+  val typeBoxedJavaMapping = Map[DataType, Class[_]](\n+    BooleanType -> classOf[java.lang.Boolean],\n+    ByteType -> classOf[java.lang.Byte],\n+    ShortType -> classOf[java.lang.Short],\n+    IntegerType -> classOf[java.lang.Integer],\n+    LongType -> classOf[java.lang.Long],\n+    FloatType -> classOf[java.lang.Float],\n+    DoubleType -> classOf[java.lang.Double],\n+    DateType -> classOf[java.lang.Integer],\n+    TimestampType -> classOf[java.lang.Long]\n+  )\n+\n+  def dataTypeJavaClass(dt: DataType): Class[_] = {\n+    dt match {\n+      case _: DecimalType => classOf[Decimal]\n+      case _: StructType => classOf[InternalRow]\n+      case _: ArrayType => classOf[ArrayData]\n+      case _: MapType => classOf[MapData]\n+      case ObjectType(cls) => cls\n+      case _ => typeJavaMapping.getOrElse(dt, classOf[java.lang.Object])\n+    }\n+  }"
  }],
  "prId": 20753
}]