[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "This still a WIP. It shows users what went wrong.\n\nI want to move this into a separate exception.\n",
    "commit": "6f1c535162397f01acf0405bdc80b8c4c141fc64",
    "createdAt": "2016-03-07T10:37:50Z",
    "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.spark.sql.catalyst.parser.ng\n+\n+import org.antlr.v4.runtime._\n+import org.antlr.v4.runtime.atn.PredictionMode\n+import org.antlr.v4.runtime.misc.ParseCancellationException\n+\n+import org.apache.spark.Logging\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.TableIdentifier\n+import org.apache.spark.sql.catalyst.expressions.Expression\n+import org.apache.spark.sql.catalyst.parser.ParserInterface\n+import org.apache.spark.sql.catalyst.parser.ng.SqlBaseParser._\n+import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan\n+import org.apache.spark.util.Utils\n+\n+/**\n+ * Base SQL parsing infrastructure.\n+ */\n+abstract class AbstractSqlParser extends ParserInterface with Logging {\n+\n+  /** Creates Expression for a given SQL string. */\n+  override def parseExpression(sqlText: String): Expression = parse(sqlText) { parser =>\n+    astBuilder.visitSingleExpression(parser.singleExpression())\n+  }\n+\n+  /** Creates TableIdentifier for a given SQL string. */\n+  override def parseTableIdentifier(sqlText: String): TableIdentifier = parse(sqlText) { parser =>\n+    astBuilder.visitSingleTableIdentifier(parser.singleTableIdentifier())\n+  }\n+\n+  /** Creates LogicalPlan for a given SQL string. */\n+  override def parsePlan(sqlText: String): LogicalPlan = parse(sqlText) { parser =>\n+    astBuilder.visitSingleStatement(parser.singleStatement()) match {\n+      case plan: LogicalPlan => plan\n+      case _ => nativeCommand(sqlText)\n+    }\n+  }\n+\n+  /** Get the builder (visitor) which converts a ParseTree into a AST. */\n+  protected def astBuilder: AstBuilder\n+\n+  /** Create a native command, or fail when this is not supported. */\n+  protected def nativeCommand(sqlText: String): LogicalPlan = {\n+    throw new AnalysisException(s\"Unsupported SQL statement:\\n$sqlText\")\n+  }\n+\n+  protected def parse[T](command: String)(toResult: SqlBaseParser => T): T = {\n+    logInfo(s\"Parsing command: $command\")\n+\n+    val lexer = new SqlBaseLexer(new ANTLRNoCaseStringStream(command))\n+    lexer.removeErrorListeners()\n+    lexer.addErrorListener(ParseErrorListener)\n+\n+    val tokenStream = new CommonTokenStream(lexer)\n+    val parser = new SqlBaseParser(tokenStream)\n+    parser.addParseListener(PostProcessor)\n+    parser.removeErrorListeners()\n+    parser.addErrorListener(ParseErrorListener)\n+\n+    try {\n+      try {\n+        // first, try parsing with potentially faster SLL mode\n+        parser.getInterpreter.setPredictionMode(PredictionMode.SLL)\n+        toResult(parser)\n+      }\n+      catch {\n+        case e: ParseCancellationException =>\n+          // if we fail, parse with LL mode\n+          tokenStream.reset() // rewind input stream\n+          parser.reset()\n+\n+          // Try Again.\n+          parser.getInterpreter.setPredictionMode(PredictionMode.LL)\n+          toResult(parser)\n+      }\n+    }\n+    catch {\n+      case e: AnalysisException =>\n+        (e.line, e.startPosition) match {\n+          case (Some(line), Some(position)) =>"
  }],
  "prId": 11557
}]