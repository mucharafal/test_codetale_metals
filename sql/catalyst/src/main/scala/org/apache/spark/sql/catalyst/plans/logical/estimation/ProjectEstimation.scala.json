[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "```\r\ncase a: Alias if inputAttrStats.contains(a.child) =>\r\n  ...\r\n```",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T05:37:13Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{Project, Statistics}\n+\n+object ProjectEstimation {\n+  import EstimationUtils._\n+\n+  def estimate(project: Project): Option[Statistics] = {\n+    if (rowCountsExist(project.child)) {\n+      val childStats = project.child.statistics\n+      val inputAttrStats = childStats.attributeStats\n+      // Match alias with its child's column stat\n+      val aliasStats = project.expressions.collect {\n+        case alias@Alias(attr: Attribute, _) if inputAttrStats.contains(attr) =>"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "also is it possible that we are seeing other NamedExpression like AttriuteReference here?\r\n",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T05:37:31Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{Project, Statistics}\n+\n+object ProjectEstimation {\n+  import EstimationUtils._\n+\n+  def estimate(project: Project): Option[Statistics] = {\n+    if (rowCountsExist(project.child)) {\n+      val childStats = project.child.statistics\n+      val inputAttrStats = childStats.attributeStats\n+      // Match alias with its child's column stat\n+      val aliasStats = project.expressions.collect {\n+        case alias@Alias(attr: Attribute, _) if inputAttrStats.contains(attr) =>"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "We don't need to deal with AttributeReference here, we can get it directly from child.",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T06:52:59Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{Project, Statistics}\n+\n+object ProjectEstimation {\n+  import EstimationUtils._\n+\n+  def estimate(project: Project): Option[Statistics] = {\n+    if (rowCountsExist(project.child)) {\n+      val childStats = project.child.statistics\n+      val inputAttrStats = childStats.attributeStats\n+      // Match alias with its child's column stat\n+      val aliasStats = project.expressions.collect {\n+        case alias@Alias(attr: Attribute, _) if inputAttrStats.contains(attr) =>"
  }, {
    "author": {
      "login": "wzhfy"
    },
    "body": "I extract `attr: Attribute` because inputAttrStats is a AttributeMap and only accepts Attribute",
    "commit": "a5ca31c06522d453ecde83470360fe4d826bc424",
    "createdAt": "2017-01-06T07:29:22Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.plans.logical.estimation\n+\n+import org.apache.spark.sql.catalyst.expressions.{Alias, Attribute, AttributeMap}\n+import org.apache.spark.sql.catalyst.plans.logical.{Project, Statistics}\n+\n+object ProjectEstimation {\n+  import EstimationUtils._\n+\n+  def estimate(project: Project): Option[Statistics] = {\n+    if (rowCountsExist(project.child)) {\n+      val childStats = project.child.statistics\n+      val inputAttrStats = childStats.attributeStats\n+      // Match alias with its child's column stat\n+      val aliasStats = project.expressions.collect {\n+        case alias@Alias(attr: Attribute, _) if inputAttrStats.contains(attr) =>"
  }],
  "prId": 16430
}]