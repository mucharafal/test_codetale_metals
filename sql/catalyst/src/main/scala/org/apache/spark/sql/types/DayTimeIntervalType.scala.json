[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "let's create an abstract data type for IntervalType.\n",
    "commit": "632062d6893ecc1206920381cd5de1799c6295ea",
    "createdAt": "2015-07-06T05:07:54Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import scala.math.Ordering\n+import scala.reflect.runtime.universe.typeTag\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.catalyst.ScalaReflectionLock\n+\n+@DeveloperApi\n+class DayTimeIntervalType private() extends AtomicType {"
  }],
  "prId": 7226
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "maybe remove this comment. not very useful to have it here.\n",
    "commit": "632062d6893ecc1206920381cd5de1799c6295ea",
    "createdAt": "2015-07-06T06:15:03Z",
    "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.types\n+\n+import scala.math.Ordering\n+import scala.reflect.runtime.universe.typeTag\n+\n+import org.apache.spark.annotation.DeveloperApi\n+import org.apache.spark.sql.catalyst.ScalaReflectionLock\n+\n+@DeveloperApi\n+class DayTimeIntervalType private() extends AtomicType {\n+  // The companion object and this class is separated so the companion object also subclasses\n+  // this type. Otherwise, the companion object would be of type \"THIS_TYPE$\" in byte code.\n+  // Defined with a private constructor so the companion object is the only possible instantiation.\n+  private[sql] type InternalType = Long\n+\n+  @transient private[sql] lazy val tag = ScalaReflectionLock.synchronized { typeTag[InternalType] }\n+\n+  private[sql] val ordering = implicitly[Ordering[InternalType]]\n+\n+  /**\n+   * The default size of a value of the DayTimeIntervalType is 8 bytes."
  }],
  "prId": 7226
}]