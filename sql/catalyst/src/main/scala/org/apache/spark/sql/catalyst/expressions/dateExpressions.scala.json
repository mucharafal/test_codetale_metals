[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Normally, we will not do such a file split. It will make us [especially for new contributors] very hard to track the change history. For example, this function, we can get the change history in IntelliJ\r\n![image](https://user-images.githubusercontent.com/11567269/66261985-63f5c680-e78c-11e9-874f-771ccc132d9a.png)\r\n\r\n",
    "commit": "cd713e733b582591dd9805bcc7d372231b3283d5",
    "createdAt": "2019-10-05T23:23:10Z",
    "diffHunk": "@@ -0,0 +1,905 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions\n+\n+import java.time.{LocalDate, ZoneId}\n+import java.time.temporal.IsoFields\n+import java.util.{Locale, TimeZone}\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.expressions.codegen._\n+import org.apache.spark.sql.catalyst.expressions.codegen.Block._\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils._\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+/**\n+ * Common base class for time zone aware expressions.\n+ */\n+trait TimeZoneAwareExpression extends Expression {\n+  /** The expression is only resolved when the time zone has been set. */\n+  override lazy val resolved: Boolean =\n+    childrenResolved && checkInputDataTypes().isSuccess && timeZoneId.isDefined\n+\n+  /** the timezone ID to be used to evaluate value. */\n+  def timeZoneId: Option[String]\n+\n+  /** Returns a copy of this expression with the specified timeZoneId. */\n+  def withTimeZone(timeZoneId: String): TimeZoneAwareExpression\n+\n+  @transient lazy val timeZone: TimeZone = DateTimeUtils.getTimeZone(timeZoneId.get)\n+  @transient lazy val zoneId: ZoneId = DateTimeUtils.getZoneId(timeZoneId.get)\n+}\n+\n+/**\n+ * Returns the current date at the start of query evaluation.\n+ * All calls of current_date within the same query return the same value.\n+ *\n+ * There is no code generation since this expression should get constant folded by the optimizer.\n+ */\n+@ExpressionDescription(\n+  usage = \"_FUNC_() - Returns the current date at the start of query evaluation.\",\n+  since = \"1.5.0\")\n+case class CurrentDate(timeZoneId: Option[String] = None)",
    "line": 60
  }],
  "prId": 26031
}]