[{
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Do we need to keep both versions? Can we just let the functions in `org.apache.spark.sql.execution.datasources.csv` call the func here?",
    "commit": "205e4a474b459d47015d39f696aa444c3894703d",
    "createdAt": "2018-10-11T23:00:15Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.csv\n+\n+object CSVUtils {\n+  /**\n+   * Filter ignorable rows for CSV iterator (lines empty and starting with `comment`).\n+   * This is currently being used in CSV reading path and CSV schema inference.\n+   */\n+  def filterCommentAndEmpty(iter: Iterator[String], options: CSVOptions): Iterator[String] = {\n+    iter.filter { line =>\n+      line.trim.nonEmpty && !line.startsWith(options.comment.toString)\n+    }\n+  }\n+\n+  /**\n+   * Helper method that converts string representation of a character to actual character.\n+   * It handles some Java escaped strings and throws exception if given string is longer than one\n+   * character.\n+   */\n+  @throws[IllegalArgumentException]\n+  def toChar(str: String): Char = {"
  }, {
    "author": {
      "login": "MaxGekk"
    },
    "body": "There shouldn't be duplicates there. I moved all functions used in `sql/catalyst` out of `sql/core`. ",
    "commit": "205e4a474b459d47015d39f696aa444c3894703d",
    "createdAt": "2018-10-12T16:29:23Z",
    "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.csv\n+\n+object CSVUtils {\n+  /**\n+   * Filter ignorable rows for CSV iterator (lines empty and starting with `comment`).\n+   * This is currently being used in CSV reading path and CSV schema inference.\n+   */\n+  def filterCommentAndEmpty(iter: Iterator[String], options: CSVOptions): Iterator[String] = {\n+    iter.filter { line =>\n+      line.trim.nonEmpty && !line.startsWith(options.comment.toString)\n+    }\n+  }\n+\n+  /**\n+   * Helper method that converts string representation of a character to actual character.\n+   * It handles some Java escaped strings and throws exception if given string is longer than one\n+   * character.\n+   */\n+  @throws[IllegalArgumentException]\n+  def toChar(str: String): Char = {"
  }],
  "prId": 22379
}]