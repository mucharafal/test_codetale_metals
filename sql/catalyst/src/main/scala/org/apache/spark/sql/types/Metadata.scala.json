[{
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "This old implementation of `Metadata.equals()` was insanely inefficient because `map.keySet()` performs tons of object allocation. The old code also used `array.view` to compare array contents for equality, which is going to be slower than `Arrays.equals()`.\n",
    "commit": "8c7f7ad9cef1993f817e35056a9d7b572829e349",
    "createdAt": "2016-04-30T07:12:07Z",
    "diffHunk": "@@ -85,17 +85,18 @@ sealed class Metadata private[types] (private[types] val map: Map[String, Any])\n   override def equals(obj: Any): Boolean = {\n     obj match {\n       case that: Metadata =>\n-        if (map.keySet == that.map.keySet) {"
  }],
  "prId": 12750
}, {
  "comments": [{
    "author": {
      "login": "JoshRosen"
    },
    "body": "Whoops, realized this is wrong if `that.map.keySet` contains keys that aren't in this key set. Will fix now.\n",
    "commit": "8c7f7ad9cef1993f817e35056a9d7b572829e349",
    "createdAt": "2016-04-30T07:16:36Z",
    "diffHunk": "@@ -85,17 +85,18 @@ sealed class Metadata private[types] (private[types] val map: Map[String, Any])\n   override def equals(obj: Any): Boolean = {\n     obj match {\n       case that: Metadata =>\n-        if (map.keySet == that.map.keySet) {\n-          map.keys.forall { k =>\n-            (map(k), that.map(k)) match {\n-              case (v0: Array[_], v1: Array[_]) =>\n-                v0.view == v1.view\n-              case (v0, v1) =>\n-                v0 == v1\n-            }\n+        map.keysIterator.forall { key =>"
  }, {
    "author": {
      "login": "JoshRosen"
    },
    "body": "I think it's sufficient to just check that the key sets are the same size.\n",
    "commit": "8c7f7ad9cef1993f817e35056a9d7b572829e349",
    "createdAt": "2016-04-30T07:17:41Z",
    "diffHunk": "@@ -85,17 +85,18 @@ sealed class Metadata private[types] (private[types] val map: Map[String, Any])\n   override def equals(obj: Any): Boolean = {\n     obj match {\n       case that: Metadata =>\n-        if (map.keySet == that.map.keySet) {\n-          map.keys.forall { k =>\n-            (map(k), that.map(k)) match {\n-              case (v0: Array[_], v1: Array[_]) =>\n-                v0.view == v1.view\n-              case (v0, v1) =>\n-                v0 == v1\n-            }\n+        map.keysIterator.forall { key =>"
  }],
  "prId": 12750
}]