[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "It's not immediately obvious if this API belongs in `StagedTable`, or if it should be tied to the `BatchWrite`'s `commit()` operation. The idea I had with tying it to `StagedTable` is:\r\n\r\n1. Make the atomic swap part more explicit from the perspective of the physical plan execution, and\r\n2. Allow both `StagedTable` and `Table` to share the same `WriteBuilder` and `BatchWrite` implementations that persist the rows, and decouple the atomic swap in this module only.\r\n\r\nIf we wanted to move the swap implementation behind the `BatchWrite#commit` and `BatchWrite#abort` APIs, then it's worth asking if we need the `StagedTable` interface at all - so `TransactionalTableCatalog` would return plain `Table` objects.",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-04T23:37:21Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+public interface StagedTable extends Table {\n+\n+  void commitStagedChanges();",
    "line": 45
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I like this. So the write's commit stashes changes in the staged table, which can finish or roll back.",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-06T23:08:00Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+public interface StagedTable extends Table {\n+\n+  void commitStagedChanges();",
    "line": 45
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This also solves the problem of where to document how to complete the changes staged in a `StagedTable`. Can you add docs that describe what these methods should do, and for the `StagedTable` interface?",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-06T23:44:16Z",
    "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.sources.v2;\n+\n+public interface StagedTable extends Table {\n+\n+  void commitStagedChanges();",
    "line": 45
  }],
  "prId": 24798
}]