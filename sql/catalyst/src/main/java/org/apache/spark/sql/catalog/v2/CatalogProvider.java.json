[{
  "comments": [{
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Can we reuse `CaseInsensitiveMap[String]`?",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-26T18:42:10Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import org.apache.spark.sql.internal.SQLConf;\n+\n+/**\n+ * A marker interface to provide a catalog implementation for Spark.\n+ * <p>\n+ * Implementations can provide catalog functions by implementing additional interfaces, like\n+ * {@link TableCatalog} to expose table operations.\n+ * <p>\n+ * Catalog implementations must implement this marker interface to be loaded by\n+ * {@link Catalogs#load(String, SQLConf)}. The loader will instantiate catalog classes using the\n+ * required public no-arg constructor. After creating an instance, it will be configured by calling\n+ * {@link #initialize(CaseInsensitiveStringMap)}.\n+ * <p>\n+ * Catalog implementations are registered to a name by adding a configuration option to Spark:\n+ * {@code spark.sql.catalog.catalog-name=com.example.YourCatalogClass}. All configuration properties\n+ * in the Spark configuration that share the catalog name prefix,\n+ * {@code spark.sql.catalog.catalog-name.(key)=(value)} will be passed in the case insensitive\n+ * string map of options in initialization with the prefix removed. An additional property,\n+ * {@code name}, is also added to the options and will contain the catalog's name; in this case,\n+ * \"catalog-name\".\n+ */\n+public interface CatalogProvider {\n+  /**\n+   * Called to initialize configuration.\n+   * <p>\n+   * This method is called once, just after the provider is instantiated.\n+   *\n+   * @param options a case-insensitive string map of configuration\n+   */\n+  void initialize(CaseInsensitiveStringMap options);",
    "line": 49
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "That's a Scala map and the v2 APIs are intended to be used with both Java and Scala. My intent is to reuse this map in place of DataSourceOptions, so at least we will reduce some duplication.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-26T19:13:06Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import org.apache.spark.sql.internal.SQLConf;\n+\n+/**\n+ * A marker interface to provide a catalog implementation for Spark.\n+ * <p>\n+ * Implementations can provide catalog functions by implementing additional interfaces, like\n+ * {@link TableCatalog} to expose table operations.\n+ * <p>\n+ * Catalog implementations must implement this marker interface to be loaded by\n+ * {@link Catalogs#load(String, SQLConf)}. The loader will instantiate catalog classes using the\n+ * required public no-arg constructor. After creating an instance, it will be configured by calling\n+ * {@link #initialize(CaseInsensitiveStringMap)}.\n+ * <p>\n+ * Catalog implementations are registered to a name by adding a configuration option to Spark:\n+ * {@code spark.sql.catalog.catalog-name=com.example.YourCatalogClass}. All configuration properties\n+ * in the Spark configuration that share the catalog name prefix,\n+ * {@code spark.sql.catalog.catalog-name.(key)=(value)} will be passed in the case insensitive\n+ * string map of options in initialization with the prefix removed. An additional property,\n+ * {@code name}, is also added to the options and will contain the catalog's name; in this case,\n+ * \"catalog-name\".\n+ */\n+public interface CatalogProvider {\n+  /**\n+   * Called to initialize configuration.\n+   * <p>\n+   * This method is called once, just after the provider is instantiated.\n+   *\n+   * @param options a case-insensitive string map of configuration\n+   */\n+  void initialize(CaseInsensitiveStringMap options);",
    "line": 49
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "Got it. Thanks!",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-07-26T20:05:01Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import org.apache.spark.sql.internal.SQLConf;\n+\n+/**\n+ * A marker interface to provide a catalog implementation for Spark.\n+ * <p>\n+ * Implementations can provide catalog functions by implementing additional interfaces, like\n+ * {@link TableCatalog} to expose table operations.\n+ * <p>\n+ * Catalog implementations must implement this marker interface to be loaded by\n+ * {@link Catalogs#load(String, SQLConf)}. The loader will instantiate catalog classes using the\n+ * required public no-arg constructor. After creating an instance, it will be configured by calling\n+ * {@link #initialize(CaseInsensitiveStringMap)}.\n+ * <p>\n+ * Catalog implementations are registered to a name by adding a configuration option to Spark:\n+ * {@code spark.sql.catalog.catalog-name=com.example.YourCatalogClass}. All configuration properties\n+ * in the Spark configuration that share the catalog name prefix,\n+ * {@code spark.sql.catalog.catalog-name.(key)=(value)} will be passed in the case insensitive\n+ * string map of options in initialization with the prefix removed. An additional property,\n+ * {@code name}, is also added to the options and will contain the catalog's name; in this case,\n+ * \"catalog-name\".\n+ */\n+public interface CatalogProvider {\n+  /**\n+   * Called to initialize configuration.\n+   * <p>\n+   * This method is called once, just after the provider is instantiated.\n+   *\n+   * @param options a case-insensitive string map of configuration\n+   */\n+  void initialize(CaseInsensitiveStringMap options);",
    "line": 49
  }],
  "prId": 21306
}, {
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "As we discussed, will these APIs now live in the `sql-api` package? Also at what point are we going to introduce this new Maven module and package?",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T00:36:41Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import org.apache.spark.sql.internal.SQLConf;\n+\n+/**\n+ * A marker interface to provide a catalog implementation for Spark.\n+ * <p>\n+ * Implementations can provide catalog functions by implementing additional interfaces, like\n+ * {@link TableCatalog} to expose table operations.\n+ * <p>\n+ * Catalog implementations must implement this marker interface to be loaded by\n+ * {@link Catalogs#load(String, SQLConf)}. The loader will instantiate catalog classes using the\n+ * required public no-arg constructor. After creating an instance, it will be configured by calling\n+ * {@link #initialize(CaseInsensitiveStringMap)}.\n+ * <p>\n+ * Catalog implementations are registered to a name by adding a configuration option to Spark:\n+ * {@code spark.sql.catalog.catalog-name=com.example.YourCatalogClass}. All configuration properties\n+ * in the Spark configuration that share the catalog name prefix,\n+ * {@code spark.sql.catalog.catalog-name.(key)=(value)} will be passed in the case insensitive\n+ * string map of options in initialization with the prefix removed. An additional property,\n+ * {@code name}, is also added to the options and will contain the catalog's name; in this case,\n+ * \"catalog-name\".\n+ */\n+public interface CatalogProvider {",
    "line": 41
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "@cloud-fan, do you want me to create the `sql-api` package in this PR, or do you want to add a separate PR to move the current v2 API?",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T19:25:47Z",
    "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import org.apache.spark.sql.internal.SQLConf;\n+\n+/**\n+ * A marker interface to provide a catalog implementation for Spark.\n+ * <p>\n+ * Implementations can provide catalog functions by implementing additional interfaces, like\n+ * {@link TableCatalog} to expose table operations.\n+ * <p>\n+ * Catalog implementations must implement this marker interface to be loaded by\n+ * {@link Catalogs#load(String, SQLConf)}. The loader will instantiate catalog classes using the\n+ * required public no-arg constructor. After creating an instance, it will be configured by calling\n+ * {@link #initialize(CaseInsensitiveStringMap)}.\n+ * <p>\n+ * Catalog implementations are registered to a name by adding a configuration option to Spark:\n+ * {@code spark.sql.catalog.catalog-name=com.example.YourCatalogClass}. All configuration properties\n+ * in the Spark configuration that share the catalog name prefix,\n+ * {@code spark.sql.catalog.catalog-name.(key)=(value)} will be passed in the case insensitive\n+ * string map of options in initialization with the prefix removed. An additional property,\n+ * {@code name}, is also added to the options and will contain the catalog's name; in this case,\n+ * \"catalog-name\".\n+ */\n+public interface CatalogProvider {",
    "line": 41
  }],
  "prId": 21306
}]