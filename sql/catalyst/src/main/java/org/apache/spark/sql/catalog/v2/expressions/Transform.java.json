[{
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "how would a library developer know what names are out there?",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T00:37:04Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "There isn't a restriction on names. Using the current implementation, it would be possible to express a custom partition function like this:\r\n```\r\nPARTITION BY (range(last_name, 'A', 'C', 'G', ...))\r\n```\r\n\r\nSpark defines commonly used transformations like bucketing and date transforms. Those transforms will be well-defined so they can eventually be used to pass values to Spark for metadata-only queries.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T16:05:42Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();",
    "line": 33
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Not sure if I asked the question clearly. Say I'm a developer that wants to built a new data source, will I need to know what the possible transform functions are? Or are those completely hidden from me?",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T21:42:59Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();",
    "line": 33
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "When it catalog API is added, it will link to the `Expressions` class that includes known transforms that have meaning to Spark. It will also note that any transform can be expressed, like I said above. The `range` transform example can be parsed and passed to the source, it just isn't one defined by Spark.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-03T17:45:12Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();",
    "line": 33
  }],
  "prId": 24117
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "why is this here?",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T00:37:58Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();\n+\n+  /**\n+   * Returns all field references in the transform arguments.\n+   */\n+  NamedReference[] references();",
    "line": 38
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "This is for validation. Spark should validate that there aren't any unresolved references.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T15:48:05Z",
    "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a transform function in the public logical expression API.\n+ * <p>\n+ * For example, the transform date(ts) is used to derive a date value from a timestamp column. The\n+ * transform name is \"date\" and its argument is a reference to the \"ts\" column.\n+ */\n+@Experimental\n+public interface Transform extends Expression {\n+  /**\n+   * Returns the transform function name.\n+   */\n+  String name();\n+\n+  /**\n+   * Returns all field references in the transform arguments.\n+   */\n+  NamedReference[] references();",
    "line": 38
  }],
  "prId": 24117
}]