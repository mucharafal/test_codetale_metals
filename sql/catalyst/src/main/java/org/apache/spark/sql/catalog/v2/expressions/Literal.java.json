[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'm a little hesitant to add type parameter to an expression interface. I'm not sure how useful it is. When I deal with expressions, my method parameter and return type is usually `Expression`. Because of type erasure, I won't get the type parameter of literal, unless the method deals with literal only.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T18:25:22Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal\n+ */\n+@Experimental\n+public interface Literal<T> extends Expression {",
    "line": 32
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "What is the down side to using this? We have a typed literal in Iceberg and it is useful for maintaining type safety.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T20:43:15Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal\n+ */\n+@Experimental\n+public interface Literal<T> extends Expression {",
    "line": 32
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "The downside is, we may need to add cast to read value from this literal, e.g.\r\n```\r\ndef func(e: Expression) = e match {\r\n  case lit: Literal[_] => lit.asInstanceOf[Literal[Any]].value\r\n}\r\n```",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T20:51:34Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal\n+ */\n+@Experimental\n+public interface Literal<T> extends Expression {",
    "line": 32
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "Actually it will be good to see some examples. In general, my feeling is that, adding type parameter to a sub-class but not the base class is not going to be very useful.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T20:57:56Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal\n+ */\n+@Experimental\n+public interface Literal<T> extends Expression {",
    "line": 32
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "The alternative is to cast the value instead, so you have to cast either way. You can't get around casting when the type is discarded. I don't think it is a good idea to throw away type information in all cases just because it isn't useful in some cases.\r\n\r\nHere's an example of how it is [used in Iceberg](https://github.com/apache/incubator-iceberg/blob/master/api/src/main/java/org/apache/iceberg/expressions/Evaluator.java#L102-L105) in expression evaluation:\r\n\r\n```java\r\n    public <T> Boolean lt(BoundReference<T> ref, Literal<T> lit) {\r\n      Comparator<T> cmp = lit.comparator();\r\n      return cmp.compare(ref.get(struct), lit.value()) < 0;\r\n    }\r\n```\r\n\r\nIn Iceberg, expression binding guarantees that the literal's type matches the reference's type. With that information, this code knows that the value returned by the reference's get method matches the type of the comparator and of the literal value.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T21:42:42Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal\n+ */\n+@Experimental\n+public interface Literal<T> extends Expression {",
    "line": 32
  }],
  "prId": 24117
}, {
  "comments": [{
    "author": {
      "login": "rxin"
    },
    "body": "sorry that's not what i meant ... as a library developer, I want to know what values I should be expecting from Literal's type T. In Spark there are now two types of values that we expose publicly to users (used to be only one but you changed it to expose InternalRow). For example, for a date type, is T an int, or T java.util.Date?",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T00:32:27Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "It should be int for a date. I'll update the doc.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T15:57:36Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal"
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "Did you add the doc somewhere?\r\n",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-02T21:41:17Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I'm still waiting on your response for moving the expressions package. When I hear back from you, I'll push all the changes.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-04-03T17:46:12Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+import org.apache.spark.sql.types.DataType;\n+\n+/**\n+ * Represents a constant literal value in the public expression API.\n+ *\n+ * @param <T> the Java type of a value held by the literal"
  }],
  "prId": 24117
}]