[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "As an aside, does this need to be Java? it would be simpler in Scala. I may be missing a reason it must be.\n",
    "commit": "6c906bb21a04a99ddf992863f552ed9e0b36d574",
    "createdAt": "2015-10-22T12:52:21Z",
    "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Locale;\n+import java.util.Vector;\n+import org.apache.spark.SparkException;\n+\n+/**\n+ * Methods for handling SQL identifiers. These methods were cribbed\n+ * from org.apache.derby.iapi.util.IdUtil and\n+ * org.apache.derby.iapi.util.StringUtil.\n+ */\n+public class SqlIdentifierUtil {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "Oh right. I read right past the reasoning. It's not just inspired by Derby but copied wholesale on purpose. OK, that makes some sense, more than making a dependency on Derby. It has some 'cost' though.\n",
    "commit": "6c906bb21a04a99ddf992863f552ed9e0b36d574",
    "createdAt": "2015-10-23T11:08:29Z",
    "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Locale;\n+import java.util.Vector;\n+import org.apache.spark.SparkException;\n+\n+/**\n+ * Methods for handling SQL identifiers. These methods were cribbed\n+ * from org.apache.derby.iapi.util.IdUtil and\n+ * org.apache.derby.iapi.util.StringUtil.\n+ */\n+public class SqlIdentifierUtil {"
  }],
  "prId": 9202
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "A lot of this looks accomplishable more simply with regexes. Is that not feasible?\n",
    "commit": "6c906bb21a04a99ddf992863f552ed9e0b36d574",
    "createdAt": "2015-10-22T12:55:06Z",
    "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Locale;\n+import java.util.Vector;\n+import org.apache.spark.SparkException;\n+\n+/**\n+ * Methods for handling SQL identifiers. These methods were cribbed\n+ * from org.apache.derby.iapi.util.IdUtil and\n+ * org.apache.derby.iapi.util.StringUtil.\n+ */\n+public class SqlIdentifierUtil {\n+\n+  /**\n+   * Quote a string so that it can be used as an identifier or a string\n+   * literal in SQL statements. Identifiers are surrounded by double quotes\n+   * and string literals are surrounded by single quotes. If the string\n+   * contains quote characters, they are escaped.\n+   *\n+   * @param source the string to quote\n+   * @param quote  the character to quote the string with (' or &quot;)\n+   * @return a string quoted with the specified quote character\n+   */\n+  public static String quoteString(String source, char quote) {\n+    // Normally, the quoted string is two characters longer than the source\n+    // string (because of start quote and end quote).\n+    StringBuffer quoted = new StringBuffer(source.length() + 2);\n+    quoted.append(quote);\n+    for (int i = 0; i < source.length(); i++) {\n+      char c = source.charAt(i);\n+      // if the character is a quote, escape it with an extra quote\n+      if (c == quote) quoted.append(quote);\n+      quoted.append(c);\n+    }\n+    quoted.append(quote);\n+    return quoted.toString();\n+  }\n+\n+  /**\n+   * Parse a multi-part (dot separated) SQL identifier from the\n+   * String provided. Raise an excepion\n+   * if the string does not contain valid SQL indentifiers.\n+   * The returned String array contains the normalized form of the\n+   * identifiers.\n+   *\n+   * @param s        The string to be parsed\n+   * @param quoteCharacter The character which frames a delimited id (e.g., \" or `)\n+   * @param upperCaseIdentifiers True if SQL ids are normalized to upper case.\n+   * @return An array of strings made by breaking the input string at its dots, '.'.\n+   * @throws SparkException Invalid SQL identifier.\n+   */\n+  public static String[] parseMultiPartSQLIdentifier(\n+      String s,\n+      char quoteCharacter,\n+      boolean upperCaseIdentifiers)\n+      throws SparkException {\n+    StringReader r = new StringReader(s);\n+    String[] qName = parseMultiPartSQLIdentifier(\n+        s,\n+        r,\n+        quoteCharacter,\n+        upperCaseIdentifiers);\n+    verifyEmpty(s, r);\n+    return qName;\n+  }\n+\n+  /**\n+   * Parse a multi-part (dot separated) SQL identifier from the\n+   * String provided. Raise an excepion\n+   * if the string does not contain valid SQL indentifiers.\n+   * The returned String array contains the normalized form of the\n+   * identifiers.\n+   *\n+   * @param orig The full text being parsed\n+   * @param r        The multi-part identifier to be parsed\n+   * @param quoteCharacter The character which frames a delimited id (e.g., \" or `)\n+   * @param upperCaseIdentifiers True if SQL ids are normalized to upper case.\n+   * @return An array of strings made by breaking the input string at its dots, '.'.\n+   * @throws SparkException Invalid SQL identifier.\n+   */\n+  private static String[] parseMultiPartSQLIdentifier("
  }],
  "prId": 9202
}]