[{
  "comments": [{
    "author": {
      "login": "maropu"
    },
    "body": "@cloud-fan In the latest commit, I just made this class by just wrapping `StringBuider`. Or, we can use byte[]-backed buffer implemenation like https://github.com/apache/spark/pull/20024/commits/91df078a99b6ec5f2063b2e73170336e3fe812d1#diff-ef9a1d6680a577c946ac779019a13beaR28.\r\nWhich one is preferred?",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T09:13:05Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal buffer\n+ * and get a final concatenated string.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private StringBuilder buffer;"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "We should use the byte[] backed implementation. At the end we need a `UTF8String`, by wrapping `StringBuilder` we still have the unnecessary `String` -> `UTF8String` -> `String` conversion.",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T11:02:36Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal buffer\n+ * and get a final concatenated string.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private StringBuilder buffer;"
  }, {
    "author": {
      "login": "maropu"
    },
    "body": "ok",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T11:04:30Z",
    "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal buffer\n+ * and get a final concatenated string.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private StringBuilder buffer;"
  }],
  "prId": 20024
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This should be `append(UTF8String.fromString(value))`, then we can remove `append(byte[] value)`",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T12:34:47Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal byte buffer\n+ * and get written data as `UTF8String`.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private static final int ARRAY_MAX = ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH;\n+\n+  private byte[] buffer;\n+  private int cursor = Platform.BYTE_ARRAY_OFFSET;\n+\n+  public UTF8StringBuilder() {\n+    // Since initial buffer size is 16 in `StringBuilder`, we set the same size here\n+    this.buffer = new byte[16];\n+  }\n+\n+  // Grows the buffer by at least `neededSize`\n+  private void grow(int neededSize) {\n+    if (neededSize > ARRAY_MAX - totalSize()) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot grow internal buffer by size \" + neededSize + \" because the size after growing \" +\n+          \"exceeds size limitation \" + ARRAY_MAX);\n+    }\n+    final int length = totalSize() + neededSize;\n+    if (buffer.length < length) {\n+      int newLength = length < ARRAY_MAX / 2 ? length * 2 : ARRAY_MAX;\n+      final byte[] tmp = new byte[newLength];\n+      Platform.copyMemory(\n+        buffer,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        tmp,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        totalSize());\n+      buffer = tmp;\n+    }\n+  }\n+\n+  public void append(UTF8String value) {\n+    grow(value.numBytes());\n+    value.writeToMemory(buffer, cursor);\n+    cursor += value.numBytes();\n+  }\n+\n+  public void append(String value) {\n+    append(value.getBytes(StandardCharsets.UTF_8));"
  }],
  "prId": 20024
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This doesn't need to be public",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T12:34:59Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal byte buffer\n+ * and get written data as `UTF8String`.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private static final int ARRAY_MAX = ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH;\n+\n+  private byte[] buffer;\n+  private int cursor = Platform.BYTE_ARRAY_OFFSET;\n+\n+  public UTF8StringBuilder() {\n+    // Since initial buffer size is 16 in `StringBuilder`, we set the same size here\n+    this.buffer = new byte[16];\n+  }\n+\n+  // Grows the buffer by at least `neededSize`\n+  private void grow(int neededSize) {\n+    if (neededSize > ARRAY_MAX - totalSize()) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot grow internal buffer by size \" + neededSize + \" because the size after growing \" +\n+          \"exceeds size limitation \" + ARRAY_MAX);\n+    }\n+    final int length = totalSize() + neededSize;\n+    if (buffer.length < length) {\n+      int newLength = length < ARRAY_MAX / 2 ? length * 2 : ARRAY_MAX;\n+      final byte[] tmp = new byte[newLength];\n+      Platform.copyMemory(\n+        buffer,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        tmp,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        totalSize());\n+      buffer = tmp;\n+    }\n+  }\n+\n+  public void append(UTF8String value) {\n+    grow(value.numBytes());\n+    value.writeToMemory(buffer, cursor);\n+    cursor += value.numBytes();\n+  }\n+\n+  public void append(String value) {\n+    append(value.getBytes(StandardCharsets.UTF_8));\n+  }\n+\n+  public void append(byte[] value) {\n+    grow(value.length);\n+    Platform.copyMemory(value, Platform.BYTE_ARRAY_OFFSET, buffer, cursor, value.length);\n+    cursor += value.length;\n+  }\n+\n+  public UTF8String toUTF8String() {\n+    final int len = totalSize();\n+    final byte[] bytes = new byte[len];\n+    Platform.copyMemory(buffer, Platform.BYTE_ARRAY_OFFSET, bytes, Platform.BYTE_ARRAY_OFFSET, len);\n+    return UTF8String.fromBytes(bytes);\n+  }\n+\n+  public int totalSize() {"
  }],
  "prId": 20024
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "why copy? we can do `UTF8String.fromBytes(buffer, 0, totalSize)`",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T12:35:59Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal byte buffer\n+ * and get written data as `UTF8String`.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private static final int ARRAY_MAX = ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH;\n+\n+  private byte[] buffer;\n+  private int cursor = Platform.BYTE_ARRAY_OFFSET;\n+\n+  public UTF8StringBuilder() {\n+    // Since initial buffer size is 16 in `StringBuilder`, we set the same size here\n+    this.buffer = new byte[16];\n+  }\n+\n+  // Grows the buffer by at least `neededSize`\n+  private void grow(int neededSize) {\n+    if (neededSize > ARRAY_MAX - totalSize()) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot grow internal buffer by size \" + neededSize + \" because the size after growing \" +\n+          \"exceeds size limitation \" + ARRAY_MAX);\n+    }\n+    final int length = totalSize() + neededSize;\n+    if (buffer.length < length) {\n+      int newLength = length < ARRAY_MAX / 2 ? length * 2 : ARRAY_MAX;\n+      final byte[] tmp = new byte[newLength];\n+      Platform.copyMemory(\n+        buffer,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        tmp,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        totalSize());\n+      buffer = tmp;\n+    }\n+  }\n+\n+  public void append(UTF8String value) {\n+    grow(value.numBytes());\n+    value.writeToMemory(buffer, cursor);\n+    cursor += value.numBytes();\n+  }\n+\n+  public void append(String value) {\n+    append(value.getBytes(StandardCharsets.UTF_8));\n+  }\n+\n+  public void append(byte[] value) {\n+    grow(value.length);\n+    Platform.copyMemory(value, Platform.BYTE_ARRAY_OFFSET, buffer, cursor, value.length);\n+    cursor += value.length;\n+  }\n+\n+  public UTF8String toUTF8String() {\n+    final int len = totalSize();\n+    final byte[] bytes = new byte[len];\n+    Platform.copyMemory(buffer, Platform.BYTE_ARRAY_OFFSET, bytes, Platform.BYTE_ARRAY_OFFSET, len);"
  }],
  "prId": 20024
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "nit: `public UTF8String build()`",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T12:36:51Z",
    "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal byte buffer\n+ * and get written data as `UTF8String`.\n+ */\n+public class UTF8StringBuilder {\n+\n+  private static final int ARRAY_MAX = ByteArrayMethods.MAX_ROUNDED_ARRAY_LENGTH;\n+\n+  private byte[] buffer;\n+  private int cursor = Platform.BYTE_ARRAY_OFFSET;\n+\n+  public UTF8StringBuilder() {\n+    // Since initial buffer size is 16 in `StringBuilder`, we set the same size here\n+    this.buffer = new byte[16];\n+  }\n+\n+  // Grows the buffer by at least `neededSize`\n+  private void grow(int neededSize) {\n+    if (neededSize > ARRAY_MAX - totalSize()) {\n+      throw new UnsupportedOperationException(\n+        \"Cannot grow internal buffer by size \" + neededSize + \" because the size after growing \" +\n+          \"exceeds size limitation \" + ARRAY_MAX);\n+    }\n+    final int length = totalSize() + neededSize;\n+    if (buffer.length < length) {\n+      int newLength = length < ARRAY_MAX / 2 ? length * 2 : ARRAY_MAX;\n+      final byte[] tmp = new byte[newLength];\n+      Platform.copyMemory(\n+        buffer,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        tmp,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        totalSize());\n+      buffer = tmp;\n+    }\n+  }\n+\n+  public void append(UTF8String value) {\n+    grow(value.numBytes());\n+    value.writeToMemory(buffer, cursor);\n+    cursor += value.numBytes();\n+  }\n+\n+  public void append(String value) {\n+    append(value.getBytes(StandardCharsets.UTF_8));\n+  }\n+\n+  public void append(byte[] value) {\n+    grow(value.length);\n+    Platform.copyMemory(value, Platform.BYTE_ARRAY_OFFSET, buffer, cursor, value.length);\n+    cursor += value.length;\n+  }\n+\n+  public UTF8String toUTF8String() {"
  }],
  "prId": 20024
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "```\r\nA helper class to write {@link UTF8String}s to an internal buffer and build the concatenated {@link UTF8String} at the end.\r\n```",
    "commit": "dc15b93fe76a675136dd1bf08ce25ad3c55959b3",
    "createdAt": "2018-01-04T15:32:46Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A helper class to write `UTF8String`, `String`, and `byte[]` data into an internal byte buffer"
  }],
  "prId": 20024
}]