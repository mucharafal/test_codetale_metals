[{
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "`codePointAt()`?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-09T10:34:59Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {\n+  final static int UNMASKED_VAL = -1;\n+\n+  /**\n+   *\n+   * @param c the character to transform\n+   * @param maskedUpperChar the character to use instead of a uppercase letter\n+   * @param maskedLowerChar the character to use instead of a lowercase letter\n+   * @param maskedDigitChar the character to use instead of a digit\n+   * @param maskedOtherChar the character to use instead of a any other character\n+   * @return masking character for {@param c}\n+   */\n+  public static int transformChar(\n+      final int c,\n+      int maskedUpperChar,\n+      int maskedLowerChar,\n+      int maskedDigitChar,\n+      int maskedOtherChar) {\n+    switch(Character.getType(c)) {\n+      case Character.UPPERCASE_LETTER:\n+        if(maskedUpperChar != UNMASKED_VAL) {\n+          return maskedUpperChar;\n+        }\n+        break;\n+\n+      case Character.LOWERCASE_LETTER:\n+        if(maskedLowerChar != UNMASKED_VAL) {\n+          return maskedLowerChar;\n+        }\n+        break;\n+\n+      case Character.DECIMAL_DIGIT_NUMBER:\n+        if(maskedDigitChar != UNMASKED_VAL) {\n+          return maskedDigitChar;\n+        }\n+        break;\n+\n+      default:\n+        if(maskedOtherChar != UNMASKED_VAL) {\n+          return maskedOtherChar;\n+        }\n+        break;\n+    }\n+\n+    return c;\n+  }\n+\n+  /**\n+   * Returns the replacement char to use according to the {@param rep} specified by the user and\n+   * the {@param def} default.\n+   */\n+  public static int getReplacementChar(String rep, int def) {\n+    if (rep != null && rep.length() > 0) {\n+      return rep.charAt(0);"
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "again, Hive does this...",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-09T12:21:39Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {\n+  final static int UNMASKED_VAL = -1;\n+\n+  /**\n+   *\n+   * @param c the character to transform\n+   * @param maskedUpperChar the character to use instead of a uppercase letter\n+   * @param maskedLowerChar the character to use instead of a lowercase letter\n+   * @param maskedDigitChar the character to use instead of a digit\n+   * @param maskedOtherChar the character to use instead of a any other character\n+   * @return masking character for {@param c}\n+   */\n+  public static int transformChar(\n+      final int c,\n+      int maskedUpperChar,\n+      int maskedLowerChar,\n+      int maskedDigitChar,\n+      int maskedOtherChar) {\n+    switch(Character.getType(c)) {\n+      case Character.UPPERCASE_LETTER:\n+        if(maskedUpperChar != UNMASKED_VAL) {\n+          return maskedUpperChar;\n+        }\n+        break;\n+\n+      case Character.LOWERCASE_LETTER:\n+        if(maskedLowerChar != UNMASKED_VAL) {\n+          return maskedLowerChar;\n+        }\n+        break;\n+\n+      case Character.DECIMAL_DIGIT_NUMBER:\n+        if(maskedDigitChar != UNMASKED_VAL) {\n+          return maskedDigitChar;\n+        }\n+        break;\n+\n+      default:\n+        if(maskedOtherChar != UNMASKED_VAL) {\n+          return maskedOtherChar;\n+        }\n+        break;\n+    }\n+\n+    return c;\n+  }\n+\n+  /**\n+   * Returns the replacement char to use according to the {@param rep} specified by the user and\n+   * the {@param def} default.\n+   */\n+  public static int getReplacementChar(String rep, int def) {\n+    if (rep != null && rep.length() > 0) {\n+      return rep.charAt(0);"
  }],
  "prId": 21246
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "Can you add a description?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-14T04:39:33Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {\n+  final static int UNMASKED_VAL = -1;\n+\n+  /**\n+   *"
  }],
  "prId": 21246
}, {
  "comments": [{
    "author": {
      "login": "ueshin"
    },
    "body": "Why is this implemented in Java?",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-14T04:42:34Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {",
    "line": 23
  }, {
    "author": {
      "login": "mgaido91"
    },
    "body": "Because I am invoking also in the Java code generated and I wanted to avoid using the match clause (instead of the switch java operation) for performance reasons.",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-14T12:52:11Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {",
    "line": 23
  }, {
    "author": {
      "login": "ueshin"
    },
    "body": "I see, thanks!",
    "commit": "6fd8f2fbd37e5193f0ffb1a25a8f4a8c71ab55bd",
    "createdAt": "2018-05-15T06:47:17Z",
    "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+/**\n+ * Contains all the Utils methods used in the masking expressions.\n+ */\n+public class MaskExpressionsUtils {",
    "line": 23
  }],
  "prId": 21246
}]