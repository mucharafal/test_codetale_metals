[{
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "@sarutak If understand this correctly they are shifting a hexidecimal value using a decimal multiplier. This would kinda work as long as you pass in decimal unicode literals :s...\n\nDo you think that we should file a bug with the Hive project?\n",
    "commit": "e28ddd2b358d354d25b94712b8baf735a8b84019",
    "createdAt": "2016-04-06T11:19:57Z",
    "diffHunk": "@@ -1,135 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.catalyst.parser;\n-\n-import java.nio.charset.StandardCharsets;\n-\n-/**\n- * A couple of utility methods that help with parsing ASTs.\n- *\n- * The 'unescapeSQLString' method in this class was take from the SemanticAnalyzer in Hive:\n- * ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java\n- */\n-public final class ParseUtils {\n-  private ParseUtils() {\n-    super();\n-  }\n-\n-  private static final int[] multiplier = new int[] {1000, 100, 10, 1};\n-\n-  @SuppressWarnings(\"nls\")\n-  public static String unescapeSQLString(String b) {\n-    Character enclosure = null;\n-\n-    // Some of the strings can be passed in as unicode. For example, the\n-    // delimiter can be passed in as \\002 - So, we first check if the\n-    // string is a unicode number, else go back to the old behavior\n-    StringBuilder sb = new StringBuilder(b.length());\n-    for (int i = 0; i < b.length(); i++) {\n-\n-      char currentChar = b.charAt(i);\n-      if (enclosure == null) {\n-        if (currentChar == '\\'' || b.charAt(i) == '\\\"') {\n-          enclosure = currentChar;\n-        }\n-        // ignore all other chars outside the enclosure\n-        continue;\n-      }\n-\n-      if (enclosure.equals(currentChar)) {\n-        enclosure = null;\n-        continue;\n-      }\n-\n-      if (currentChar == '\\\\' && (i + 6 < b.length()) && b.charAt(i + 1) == 'u') {\n-        int code = 0;\n-        int base = i + 2;\n-        for (int j = 0; j < 4; j++) {\n-          int digit = Character.digit(b.charAt(j + base), 16);\n-          code += digit * multiplier[j];",
    "line": 65
  }, {
    "author": {
      "login": "sarutak"
    },
    "body": "Yes, I'm thinking about reporting this issue.\n",
    "commit": "e28ddd2b358d354d25b94712b8baf735a8b84019",
    "createdAt": "2016-04-06T12:41:53Z",
    "diffHunk": "@@ -1,135 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.spark.sql.catalyst.parser;\n-\n-import java.nio.charset.StandardCharsets;\n-\n-/**\n- * A couple of utility methods that help with parsing ASTs.\n- *\n- * The 'unescapeSQLString' method in this class was take from the SemanticAnalyzer in Hive:\n- * ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java\n- */\n-public final class ParseUtils {\n-  private ParseUtils() {\n-    super();\n-  }\n-\n-  private static final int[] multiplier = new int[] {1000, 100, 10, 1};\n-\n-  @SuppressWarnings(\"nls\")\n-  public static String unescapeSQLString(String b) {\n-    Character enclosure = null;\n-\n-    // Some of the strings can be passed in as unicode. For example, the\n-    // delimiter can be passed in as \\002 - So, we first check if the\n-    // string is a unicode number, else go back to the old behavior\n-    StringBuilder sb = new StringBuilder(b.length());\n-    for (int i = 0; i < b.length(); i++) {\n-\n-      char currentChar = b.charAt(i);\n-      if (enclosure == null) {\n-        if (currentChar == '\\'' || b.charAt(i) == '\\\"') {\n-          enclosure = currentChar;\n-        }\n-        // ignore all other chars outside the enclosure\n-        continue;\n-      }\n-\n-      if (enclosure.equals(currentChar)) {\n-        enclosure = null;\n-        continue;\n-      }\n-\n-      if (currentChar == '\\\\' && (i + 6 < b.length()) && b.charAt(i + 1) == 'u') {\n-        int code = 0;\n-        int base = i + 2;\n-        for (int j = 0; j < 4; j++) {\n-          int digit = Character.digit(b.charAt(j + base), 16);\n-          code += digit * multiplier[j];",
    "line": 65
  }],
  "prId": 12199
}]