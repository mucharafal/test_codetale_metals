[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we move it to `org.apache.spark.sql.v2`? so that the non-catalog part can also use it.",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T03:19:12Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "ah there is no `org.apache.spark.sql.v2`, we may need to revist the package name and see if there can be a shared parent package for sources and catalogs.",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T03:23:36Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "For now maybe just put this class in `org.apache.spark.sql`?",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T03:24:24Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;"
  }, {
    "author": {
      "login": "dongjoon-hyun"
    },
    "body": "If we don't have `v2`, can we put into `org.apache.spark.sql.util` like Scala `CaseInsensitiveMap`?",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T06:27:09Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I like `org.apache.spark.sql.util`. I'll move it there.",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T18:51:38Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;"
  }],
  "prId": 23915
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "this line can be `put(entry.getKey(), entry.getValue)`",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-02-28T03:20:31Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Case-insensitive map of string keys to string values.\n+ * <p>\n+ * This is used to pass options to v2 implementations to ensure consistent case insensitivity.\n+ * <p>\n+ * Methods that return keys in this map, like {@link #entrySet()} and {@link #keySet()}, return\n+ * keys converted to lower case.\n+ */\n+public class CaseInsensitiveStringMap implements Map<String, String> {\n+\n+  public static CaseInsensitiveStringMap empty() {\n+    return new CaseInsensitiveStringMap();\n+  }\n+\n+  private final Map<String, String> delegate;\n+\n+  private CaseInsensitiveStringMap() {\n+    this.delegate = new HashMap<>();\n+  }\n+\n+  @Override\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean containsKey(Object key) {\n+    return delegate.containsKey(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public boolean containsValue(Object value) {\n+    return delegate.containsValue(value);\n+  }\n+\n+  @Override\n+  public String get(Object key) {\n+    return delegate.get(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public String put(String key, String value) {\n+    return delegate.put(key.toLowerCase(Locale.ROOT), value);\n+  }\n+\n+  @Override\n+  public String remove(Object key) {\n+    return delegate.remove(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends String, ? extends String> m) {\n+    for (Map.Entry<? extends String, ? extends String> entry : m.entrySet()) {\n+      delegate.put(entry.getKey().toLowerCase(Locale.ROOT), entry.getValue());"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Fixed. Thanks for pointing this out!",
    "commit": "7c64a2678de28224e1dda8c662ca750c5438fc9b",
    "createdAt": "2019-03-01T01:48:49Z",
    "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Case-insensitive map of string keys to string values.\n+ * <p>\n+ * This is used to pass options to v2 implementations to ensure consistent case insensitivity.\n+ * <p>\n+ * Methods that return keys in this map, like {@link #entrySet()} and {@link #keySet()}, return\n+ * keys converted to lower case.\n+ */\n+public class CaseInsensitiveStringMap implements Map<String, String> {\n+\n+  public static CaseInsensitiveStringMap empty() {\n+    return new CaseInsensitiveStringMap();\n+  }\n+\n+  private final Map<String, String> delegate;\n+\n+  private CaseInsensitiveStringMap() {\n+    this.delegate = new HashMap<>();\n+  }\n+\n+  @Override\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean containsKey(Object key) {\n+    return delegate.containsKey(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public boolean containsValue(Object value) {\n+    return delegate.containsValue(value);\n+  }\n+\n+  @Override\n+  public String get(Object key) {\n+    return delegate.get(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public String put(String key, String value) {\n+    return delegate.put(key.toLowerCase(Locale.ROOT), value);\n+  }\n+\n+  @Override\n+  public String remove(Object key) {\n+    return delegate.remove(key.toString().toLowerCase(Locale.ROOT));\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends String, ? extends String> m) {\n+    for (Map.Entry<? extends String, ? extends String> entry : m.entrySet()) {\n+      delegate.put(entry.getKey().toLowerCase(Locale.ROOT), entry.getValue());"
  }],
  "prId": 23915
}]