[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "shall we use `String[]` instead? Spark already parses it and we shouldn't construct a string and ask data source to parse it again.",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-26T18:46:01Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.logical.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a field or column reference in the public logical expression API.\n+ */\n+@Experimental\n+public interface NamedReference extends Expression {\n+  /**\n+   * Returns the referenced field name.\n+   * <p>\n+   * Names that identify nested fields are formatted using a \".\" separator without quoting or\n+   * additional escape characters. A struct column \"a\" with a field named \"b.c\" will produce the\n+   * field name \"a.b.c\".\n+   */\n+  String fieldName();"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "Updated to use String[].",
    "commit": "a4a87ac7582688e883e42980d95126dd05166c64",
    "createdAt": "2019-03-29T17:05:28Z",
    "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.logical.expressions;\n+\n+import org.apache.spark.annotation.Experimental;\n+\n+/**\n+ * Represents a field or column reference in the public logical expression API.\n+ */\n+@Experimental\n+public interface NamedReference extends Expression {\n+  /**\n+   * Returns the referenced field name.\n+   * <p>\n+   * Names that identify nested fields are formatted using a \".\" separator without quoting or\n+   * additional escape characters. A struct column \"a\" with a field named \"b.c\" will produce the\n+   * field name \"a.b.c\".\n+   */\n+  String fieldName();"
  }],
  "prId": 24117
}]