[{
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "This is just `global` to the projection, we may call it `BufferHolder`\n",
    "commit": "d7f941d4edc6e3165790f2546fc3e7f378f04250",
    "createdAt": "2015-10-01T18:57:52Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import org.apache.spark.unsafe.Platform;\n+\n+/**\n+ * A helper class to manage the global row buffer used in `GenerateUnsafeProjection`.\n+ *\n+ * Note that it is only used in `GenerateUnsafeProjection`, so it's safe to mark member variables\n+ * public for ease of use.\n+ */\n+public class GlobalBufferHolder {"
  }],
  "prId": 8747
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "Could we use `Platform.BYTE_ARRAY_OFFSET` as initial value? It's easy to understand.\n",
    "commit": "d7f941d4edc6e3165790f2546fc3e7f378f04250",
    "createdAt": "2015-10-01T19:42:29Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import org.apache.spark.unsafe.Platform;\n+\n+/**\n+ * A helper class to manage the global row buffer used in `GenerateUnsafeProjection`.\n+ *\n+ * Note that it is only used in `GenerateUnsafeProjection`, so it's safe to mark member variables\n+ * public for ease of use.\n+ */\n+public class GlobalBufferHolder {\n+  public byte[] buffer = new byte[64];\n+  public int cursor = 0;"
  }],
  "prId": 8747
}, {
  "comments": [{
    "author": {
      "login": "davies"
    },
    "body": "This will called multiple times, so should it be called `reset`?\n",
    "commit": "d7f941d4edc6e3165790f2546fc3e7f378f04250",
    "createdAt": "2015-10-01T19:43:19Z",
    "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions.codegen;\n+\n+import org.apache.spark.unsafe.Platform;\n+\n+/**\n+ * A helper class to manage the global row buffer used in `GenerateUnsafeProjection`.\n+ *\n+ * Note that it is only used in `GenerateUnsafeProjection`, so it's safe to mark member variables\n+ * public for ease of use.\n+ */\n+public class GlobalBufferHolder {\n+  public byte[] buffer = new byte[64];\n+  public int cursor = 0;\n+\n+  public void grow(int neededSize) {\n+    final int length = totalSize() + neededSize;\n+    if (buffer.length < length) {\n+      // This will not happen frequently, because the buffer is re-used.\n+      final byte[] tmp = new byte[length * 2];\n+      Platform.copyMemory(\n+        buffer,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        tmp,\n+        Platform.BYTE_ARRAY_OFFSET,\n+        totalSize());\n+      buffer = tmp;\n+    }\n+  }\n+\n+  public void initialize() {"
  }],
  "prId": 8747
}]