[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "These 4 methods are from `DataSourceOptions`, which are pretty general and useful.",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-08T15:47:35Z",
    "diffHunk": "@@ -107,4 +112,40 @@ public void clear() {\n   public Set<Map.Entry<String, String>> entrySet() {\n     return delegate.entrySet();\n   }\n+\n+  /**\n+   * Returns the boolean value to which the specified key is mapped,\n+   * or defaultValue if there is no mapping for the key. The key match is case-insensitive\n+   */\n+  public boolean getBoolean(String key, boolean defaultValue) {",
    "line": 70
  }],
  "prId": 24025
}, {
  "comments": [{
    "author": {
      "login": "gengliangwang"
    },
    "body": "Nit: add `.` at the end of line.",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-12T10:56:26Z",
    "diffHunk": "@@ -107,4 +112,49 @@ public void clear() {\n   public Set<Map.Entry<String, String>> entrySet() {\n     return delegate.entrySet();\n   }\n+\n+  /**\n+   * Returns the boolean value to which the specified key is mapped,\n+   * or defaultValue if there is no mapping for the key. The key match is case-insensitive\n+   */\n+  public boolean getBoolean(String key, boolean defaultValue) {\n+    String value = get(key);\n+    // We can't use `Boolean.parseBoolean` here, as it returns false for invalid strings.\n+    if (value == null) {\n+      return defaultValue;\n+    } else if (value.equalsIgnoreCase(\"true\")) {\n+      return true;\n+    } else if (value.equalsIgnoreCase(\"false\")) {\n+      return false;\n+    } else {\n+      throw new IllegalArgumentException(value + \" is not a boolean string.\");\n+    }\n+  }\n+\n+  /**\n+   * Returns the integer value to which the specified key is mapped,\n+   * or defaultValue if there is no mapping for the key. The key match is case-insensitive"
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "it's too minor to trigger another QA round. I'll fix it in another PR if the current QA round passes.",
    "commit": "4599659fa944abcd51feafb284f2f623d46b5976",
    "createdAt": "2019-03-12T12:50:38Z",
    "diffHunk": "@@ -107,4 +112,49 @@ public void clear() {\n   public Set<Map.Entry<String, String>> entrySet() {\n     return delegate.entrySet();\n   }\n+\n+  /**\n+   * Returns the boolean value to which the specified key is mapped,\n+   * or defaultValue if there is no mapping for the key. The key match is case-insensitive\n+   */\n+  public boolean getBoolean(String key, boolean defaultValue) {\n+    String value = get(key);\n+    // We can't use `Boolean.parseBoolean` here, as it returns false for invalid strings.\n+    if (value == null) {\n+      return defaultValue;\n+    } else if (value.equalsIgnoreCase(\"true\")) {\n+      return true;\n+    } else if (value.equalsIgnoreCase(\"false\")) {\n+      return false;\n+    } else {\n+      throw new IllegalArgumentException(value + \" is not a boolean string.\");\n+    }\n+  }\n+\n+  /**\n+   * Returns the integer value to which the specified key is mapped,\n+   * or defaultValue if there is no mapping for the key. The key match is case-insensitive"
  }],
  "prId": 24025
}]