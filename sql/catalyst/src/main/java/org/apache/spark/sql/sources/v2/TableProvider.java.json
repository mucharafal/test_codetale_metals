[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "I'll refine the classdoc of this interface, after we reach an agreement of the proposal.",
    "commit": "cfbe0a75f80e88d4a5831785d05fb9b708c5ada3",
    "createdAt": "2019-09-02T12:09:24Z",
    "diffHunk": "@@ -44,18 +45,28 @@\n   Table getTable(CaseInsensitiveStringMap options);\n \n   /**\n-   * Return a {@link Table} instance to do read/write with user-specified schema and options.\n+   * Return a {@link Table} instance to do read/write with user-specified options and additional\n+   * schema/partitions information. The additional schema/partitions information can be specified\n+   * by users (e.g. {@code session.read.format(\"myFormat\").schema(...)}) or retrieved from the\n+   * metastore (e.g. {@code CREATE TABLE t(i INT) USING myFormat}).\n+   * <p>\n+   * The returned table must report the same schema/partitions with the ones that are passed in.\n    * <p>\n    * By default this method throws {@link UnsupportedOperationException}, implementations should\n-   * override this method to handle user-specified schema.\n+   * override this method to handle the additional schema/partitions information.\n    * </p>\n    * @param options the user-specified options that can identify a table, e.g. file path, Kafka\n    *                topic name, etc. It's an immutable case-insensitive string-to-string map.\n-   * @param schema the user-specified schema.\n+   * @param schema the additional schema information.\n+   * @param partitions the additional partitions information.\n    * @throws UnsupportedOperationException\n    */\n-  default Table getTable(CaseInsensitiveStringMap options, StructType schema) {\n+  default Table getTable("
  }],
  "prId": 25651
}]