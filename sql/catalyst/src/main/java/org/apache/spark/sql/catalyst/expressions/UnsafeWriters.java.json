[{
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "This is a more abstract version of `UnsafeRowWriters`, we can make it work for both row and array in future refactor.\n",
    "commit": "3269bd779733706a73e388615eaffe8c39900655",
    "createdAt": "2015-08-01T15:14:15Z",
    "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.PlatformDependent;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.CalendarInterval;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A set of helper methods to write data into the variable length portion.\n+ */\n+public class UnsafeWriters {",
    "line": 29
  }],
  "prId": 7752
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "cc @rxin , note that in current encoding, we get the element value length by subtracting 2 neighbour offsets, so if we do word alighment, we will loss the length info.\n",
    "commit": "3269bd779733706a73e388615eaffe8c39900655",
    "createdAt": "2015-08-01T15:17:24Z",
    "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.PlatformDependent;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.CalendarInterval;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A set of helper methods to write data into the variable length portion.\n+ */\n+public class UnsafeWriters {\n+  public static void writeToMemory(\n+      Object inputObject,\n+      long inputOffset,\n+      Object targetObject,\n+      long targetOffset,\n+      int numBytes) {\n+\n+    // zero-out the padding bytes\n+    if ((numBytes & 0x07) > 0) {\n+      PlatformDependent.UNSAFE.putLong(targetObject, targetOffset + ((numBytes >> 3) << 3), 0L);\n+    }\n+\n+    // Write the UnsafeData to the target memory.\n+    PlatformDependent.copyMemory(\n+      inputObject,\n+      inputOffset,\n+      targetObject,\n+      targetOffset,\n+      numBytes\n+    );\n+  }\n+\n+  public static int getRoundedSize(int size) {\n+    //return ByteArrayMethods.roundNumberOfBytesToNearestWord(size);\n+    // todo: do word alignment\n+    return size;",
    "line": 55
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "the actual size stored in the fixed with portion can be the unaligned size, can't it? we just need to make sure alignment happens still in GenerateUnsafeProjection.\n",
    "commit": "3269bd779733706a73e388615eaffe8c39900655",
    "createdAt": "2015-08-02T02:15:42Z",
    "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.PlatformDependent;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.CalendarInterval;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A set of helper methods to write data into the variable length portion.\n+ */\n+public class UnsafeWriters {\n+  public static void writeToMemory(\n+      Object inputObject,\n+      long inputOffset,\n+      Object targetObject,\n+      long targetOffset,\n+      int numBytes) {\n+\n+    // zero-out the padding bytes\n+    if ((numBytes & 0x07) > 0) {\n+      PlatformDependent.UNSAFE.putLong(targetObject, targetOffset + ((numBytes >> 3) << 3), 0L);\n+    }\n+\n+    // Write the UnsafeData to the target memory.\n+    PlatformDependent.copyMemory(\n+      inputObject,\n+      inputOffset,\n+      targetObject,\n+      targetOffset,\n+      numBytes\n+    );\n+  }\n+\n+  public static int getRoundedSize(int size) {\n+    //return ByteArrayMethods.roundNumberOfBytesToNearestWord(size);\n+    // todo: do word alignment\n+    return size;",
    "line": 55
  }, {
    "author": {
      "login": "cloud-fan"
    },
    "body": "yea, we still do word alignment for UnsafeRow, but UnsafeArrayData can't do word alignment for its elements.\n",
    "commit": "3269bd779733706a73e388615eaffe8c39900655",
    "createdAt": "2015-08-02T03:11:29Z",
    "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.PlatformDependent;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.CalendarInterval;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A set of helper methods to write data into the variable length portion.\n+ */\n+public class UnsafeWriters {\n+  public static void writeToMemory(\n+      Object inputObject,\n+      long inputOffset,\n+      Object targetObject,\n+      long targetOffset,\n+      int numBytes) {\n+\n+    // zero-out the padding bytes\n+    if ((numBytes & 0x07) > 0) {\n+      PlatformDependent.UNSAFE.putLong(targetObject, targetOffset + ((numBytes >> 3) << 3), 0L);\n+    }\n+\n+    // Write the UnsafeData to the target memory.\n+    PlatformDependent.copyMemory(\n+      inputObject,\n+      inputOffset,\n+      targetObject,\n+      targetOffset,\n+      numBytes\n+    );\n+  }\n+\n+  public static int getRoundedSize(int size) {\n+    //return ByteArrayMethods.roundNumberOfBytesToNearestWord(size);\n+    // todo: do word alignment\n+    return size;",
    "line": 55
  }, {
    "author": {
      "login": "rxin"
    },
    "body": "That's fine.\n",
    "commit": "3269bd779733706a73e388615eaffe8c39900655",
    "createdAt": "2015-08-02T03:56:37Z",
    "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.PlatformDependent;\n+import org.apache.spark.unsafe.array.ByteArrayMethods;\n+import org.apache.spark.unsafe.types.CalendarInterval;\n+import org.apache.spark.unsafe.types.UTF8String;\n+\n+/**\n+ * A set of helper methods to write data into the variable length portion.\n+ */\n+public class UnsafeWriters {\n+  public static void writeToMemory(\n+      Object inputObject,\n+      long inputOffset,\n+      Object targetObject,\n+      long targetOffset,\n+      int numBytes) {\n+\n+    // zero-out the padding bytes\n+    if ((numBytes & 0x07) > 0) {\n+      PlatformDependent.UNSAFE.putLong(targetObject, targetOffset + ((numBytes >> 3) << 3), 0L);\n+    }\n+\n+    // Write the UnsafeData to the target memory.\n+    PlatformDependent.copyMemory(\n+      inputObject,\n+      inputOffset,\n+      targetObject,\n+      targetOffset,\n+      numBytes\n+    );\n+  }\n+\n+  public static int getRoundedSize(int size) {\n+    //return ByteArrayMethods.roundNumberOfBytesToNearestWord(size);\n+    // todo: do word alignment\n+    return size;",
    "line": 55
  }],
  "prId": 7752
}]