[{
  "comments": [{
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "We could even make the class as utility class and no need to make object: just change this to static, and add two boolean parameters. If we prefer not to have object even it's only one for each class, I'll make a change.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-08T01:39:44Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "I tend to agree, a new object isn't needed.\r\nIt could plausibly live in the SpecializedGetters interface in Java 8, but that might be weird.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T15:07:54Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Yes, I tried to add it to interface via default method, but looked weird so decided to have utility class for this.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T20:59:36Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {"
  }],
  "prId": 24016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "Nit: all the 'else's are redundant. It won't make a difference in the bytecode and isn't a big deal, just feels more readable to me if there are going to be 20 of them.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T14:58:30Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "Yeah I imagine this is brought to reduce lines, but given we return every statement, removing `else` looks OK to me.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T21:08:12Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {"
  }],
  "prId": 24016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "final?",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T14:58:35Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {"
  }],
  "prId": 24016
}, {
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "The order of evaluating Binary/String/DecimalType varied in the code this replaces. That shouldn't matter right -- none of these types are subtypes of the other.\r\n\r\nI wonder, while we're here, is it sensible to put checks for more common types further up? for example, 'short' is pretty rare. String is probably more common than binary or decimal. Those are all maybe more common that date types. Etc. I understand for readability we might not want to move short, but might be worth rearranging the others for some performance.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T15:10:20Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {\n+      return obj.getBoolean(ordinal);\n+    } else if (dataType instanceof ByteType) {\n+      return obj.getByte(ordinal);\n+    } else if (dataType instanceof ShortType) {\n+      return obj.getShort(ordinal);\n+    } else if (dataType instanceof IntegerType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof LongType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof FloatType) {\n+      return obj.getFloat(ordinal);\n+    } else if (dataType instanceof DoubleType) {\n+      return obj.getDouble(ordinal);\n+    } else if (dataType instanceof DecimalType) {\n+      DecimalType dt = (DecimalType) dataType;\n+      return obj.getDecimal(ordinal, dt.precision(), dt.scale());\n+    } else if (dataType instanceof DateType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof TimestampType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof BinaryType) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "IMHO, for performance, yes we can move commonly used types to top of huge if statements (though I don't have any statistic for this - we all know string should be placed to one of top), and for readability, this looks to be thoughtfully placed - primitive types first, dates, binary, string, complex types (`CalendarInterval` could be moved to dates group).\r\n\r\nEither is fine for me, and if we want to rearrange to gain performance, we may need to pick some commonly used things according to actual usages. Do you have something to refer?",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T21:17:02Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {\n+      return obj.getBoolean(ordinal);\n+    } else if (dataType instanceof ByteType) {\n+      return obj.getByte(ordinal);\n+    } else if (dataType instanceof ShortType) {\n+      return obj.getShort(ordinal);\n+    } else if (dataType instanceof IntegerType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof LongType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof FloatType) {\n+      return obj.getFloat(ordinal);\n+    } else if (dataType instanceof DoubleType) {\n+      return obj.getDouble(ordinal);\n+    } else if (dataType instanceof DecimalType) {\n+      DecimalType dt = (DecimalType) dataType;\n+      return obj.getDecimal(ordinal, dt.precision(), dt.scale());\n+    } else if (dataType instanceof DateType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof TimestampType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof BinaryType) {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "No, I have nothing but intuition here. I wouldn't make major changes. I think we can probably make the obvious ones, like, String should probably follow primitives.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T22:08:57Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {\n+      return obj.getBoolean(ordinal);\n+    } else if (dataType instanceof ByteType) {\n+      return obj.getByte(ordinal);\n+    } else if (dataType instanceof ShortType) {\n+      return obj.getShort(ordinal);\n+    } else if (dataType instanceof IntegerType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof LongType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof FloatType) {\n+      return obj.getFloat(ordinal);\n+    } else if (dataType instanceof DoubleType) {\n+      return obj.getDouble(ordinal);\n+    } else if (dataType instanceof DecimalType) {\n+      DecimalType dt = (DecimalType) dataType;\n+      return obj.getDecimal(ordinal, dt.precision(), dt.scale());\n+    } else if (dataType instanceof DateType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof TimestampType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof BinaryType) {"
  }, {
    "author": {
      "login": "HeartSaVioR"
    },
    "body": "OK. That's also intuitive to me. Will address. Please let me know if there're other obvious things.",
    "commit": "b7535df4c82f1d8997edd50bd0739193d98f0226",
    "createdAt": "2019-03-11T22:14:21Z",
    "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.expressions;\n+\n+import org.apache.spark.sql.types.*;\n+\n+public class SpecializedGettersReader {\n+  private final boolean handleNull;\n+  private final boolean handleUserDefinedType;\n+\n+  public SpecializedGettersReader(boolean handleNull, boolean handleUserDefinedType) {\n+    this.handleNull = handleNull;\n+    this.handleUserDefinedType = handleUserDefinedType;\n+  }\n+\n+  public Object read(SpecializedGetters obj, int ordinal, DataType dataType) {\n+    if (handleNull && (obj.isNullAt(ordinal) || dataType instanceof NullType)) {\n+      return null;\n+    } else if (dataType instanceof BooleanType) {\n+      return obj.getBoolean(ordinal);\n+    } else if (dataType instanceof ByteType) {\n+      return obj.getByte(ordinal);\n+    } else if (dataType instanceof ShortType) {\n+      return obj.getShort(ordinal);\n+    } else if (dataType instanceof IntegerType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof LongType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof FloatType) {\n+      return obj.getFloat(ordinal);\n+    } else if (dataType instanceof DoubleType) {\n+      return obj.getDouble(ordinal);\n+    } else if (dataType instanceof DecimalType) {\n+      DecimalType dt = (DecimalType) dataType;\n+      return obj.getDecimal(ordinal, dt.precision(), dt.scale());\n+    } else if (dataType instanceof DateType) {\n+      return obj.getInt(ordinal);\n+    } else if (dataType instanceof TimestampType) {\n+      return obj.getLong(ordinal);\n+    } else if (dataType instanceof BinaryType) {"
  }],
  "prId": 24016
}]