[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "Is it necessary to support all `PartitionTransform` types for a first pass? Though, I would imagine we'd have to for the v2 to v1 catalog adapter. If it weren't for that, I would suggest supporting only a simple set of `PartitionTransform`, such as only `identity`, to keep this PR focused on the catalog API and not the partitions API.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T01:49:50Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+/**\n+ * A standard set of transformations that are passed to data sources during table creation.\n+ *\n+ * @see PartitionTransform\n+ */\n+public class PartitionTransforms {\n+  private PartitionTransforms() {\n+  }\n+\n+  /**\n+   * Create a transform for a column with the given name.\n+   * <p>\n+   * This transform is used to pass named transforms that are not known to Spark.\n+   *\n+   * @param transform a name of the transform to apply to the column\n+   * @param colName a column name\n+   * @return an Apply transform for the column\n+   */\n+  public static PartitionTransform apply(String transform, String colName) {\n+    if (\"identity\".equals(transform)) {",
    "line": 39
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "What I wanted to discuss on Wednesday was how to pass these transforms. @rxin and I had some discussions about it on the dev list, but we didn't come up with a decision. I think the solution will probably be to add way to pass generic function application and a list of arguments that are either columns or constant literals.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T19:13:13Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+/**\n+ * A standard set of transformations that are passed to data sources during table creation.\n+ *\n+ * @see PartitionTransform\n+ */\n+public class PartitionTransforms {\n+  private PartitionTransforms() {\n+  }\n+\n+  /**\n+   * Create a transform for a column with the given name.\n+   * <p>\n+   * This transform is used to pass named transforms that are not known to Spark.\n+   *\n+   * @param transform a name of the transform to apply to the column\n+   * @param colName a column name\n+   * @return an Apply transform for the column\n+   */\n+  public static PartitionTransform apply(String transform, String colName) {\n+    if (\"identity\".equals(transform)) {",
    "line": 39
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I should note that the generic function application will probably look like the `Apply` case.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T19:24:49Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+/**\n+ * A standard set of transformations that are passed to data sources during table creation.\n+ *\n+ * @see PartitionTransform\n+ */\n+public class PartitionTransforms {\n+  private PartitionTransforms() {\n+  }\n+\n+  /**\n+   * Create a transform for a column with the given name.\n+   * <p>\n+   * This transform is used to pass named transforms that are not known to Spark.\n+   *\n+   * @param transform a name of the transform to apply to the column\n+   * @param colName a column name\n+   * @return an Apply transform for the column\n+   */\n+  public static PartitionTransform apply(String transform, String colName) {\n+    if (\"identity\".equals(transform)) {",
    "line": 39
  }, {
    "author": {
      "login": "mccheah"
    },
    "body": "Is it possible to defer partition support, or is is fundamentally important enough to get that correct now because we will be building on it on e.g. the very next evolution of this API and its uses? I'm thinking about how to minimize the amount of API we're proposing per change, particularly if choices aren't particularly obvious.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-11-30T23:57:44Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+/**\n+ * A standard set of transformations that are passed to data sources during table creation.\n+ *\n+ * @see PartitionTransform\n+ */\n+public class PartitionTransforms {\n+  private PartitionTransforms() {\n+  }\n+\n+  /**\n+   * Create a transform for a column with the given name.\n+   * <p>\n+   * This transform is used to pass named transforms that are not known to Spark.\n+   *\n+   * @param transform a name of the transform to apply to the column\n+   * @param colName a column name\n+   * @return an Apply transform for the column\n+   */\n+  public static PartitionTransform apply(String transform, String colName) {\n+    if (\"identity\".equals(transform)) {",
    "line": 39
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I think we should get this done now. Partition transforms are a generalization of Hive partitioning (which uses some columns directly) and bucketing (which is one specific transform). If we add transformation functions now, we will support both of those with a simple API instead of building in special cases for identity and bucket transforms.\r\n\r\nI also have a data source that allows users to configure partitioning using more transforms than just identity and bucketing, so I'd like to get this in so that DDL for those tables works.",
    "commit": "6b45a119df8e6382fa2503f854b4a85aed3e3785",
    "createdAt": "2018-12-01T01:45:15Z",
    "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+/**\n+ * A standard set of transformations that are passed to data sources during table creation.\n+ *\n+ * @see PartitionTransform\n+ */\n+public class PartitionTransforms {\n+  private PartitionTransforms() {\n+  }\n+\n+  /**\n+   * Create a transform for a column with the given name.\n+   * <p>\n+   * This transform is used to pass named transforms that are not known to Spark.\n+   *\n+   * @param transform a name of the transform to apply to the column\n+   * @param colName a column name\n+   * @return an Apply transform for the column\n+   */\n+  public static PartitionTransform apply(String transform, String colName) {\n+    if (\"identity\".equals(transform)) {",
    "line": 39
  }],
  "prId": 21306
}]