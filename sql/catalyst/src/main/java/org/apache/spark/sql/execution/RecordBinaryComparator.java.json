[{
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "How about the following change to minimize and localize the change?\r\n```\r\nlong res = Platform.getLong(leftObj, leftOff + i) -\r\n             Platform.getLong(rightObj, rightOff + i);\r\nif (res != 0) return res > 0 ? 1 : -1;\r\n```",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T07:41:56Z",
    "diffHunk": "@@ -42,16 +42,16 @@ public int compare(\n       while ((leftOff + i) % 8 != 0 && i < leftLen) {\n         res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n                 (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-        if (res != 0) return res;\n+        if (res != 0) return (int) res;\n         i += 1;\n       }\n     }\n     // for architectures that support unaligned accesses, chew it up 8 bytes at a time\n     if (Platform.unaligned() || (((leftOff + i) % 8 == 0) && ((rightOff + i) % 8 == 0))) {\n       while (i <= leftLen - 8) {\n-        res = (int) ((Platform.getLong(leftObj, leftOff + i) -\n-                Platform.getLong(rightObj, rightOff + i)) % Integer.MAX_VALUE);\n-        if (res != 0) return res;\n+        res = Platform.getLong(leftObj, leftOff + i) -\n+                Platform.getLong(rightObj, rightOff + i);\n+        if (res != 0) return res > 0 ? 1 : -1;"
  }, {
    "author": {
      "login": "mridulm"
    },
    "body": "The subtraction is buggy due to potential overflow.\r\nWhy not simply use:\r\n```\r\n  final long v1 = Platform.getLong(leftObj, leftOff + i);\r\n  final long v2 = Platform.getLong(rightObj, rightOff + i);\r\n  if (v1 != v2) {\r\n    return v1 > v2 ? -1 : 1;\r\n  }\r\n```",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T08:11:24Z",
    "diffHunk": "@@ -42,16 +42,16 @@ public int compare(\n       while ((leftOff + i) % 8 != 0 && i < leftLen) {\n         res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n                 (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-        if (res != 0) return res;\n+        if (res != 0) return (int) res;\n         i += 1;\n       }\n     }\n     // for architectures that support unaligned accesses, chew it up 8 bytes at a time\n     if (Platform.unaligned() || (((leftOff + i) % 8 == 0) && ((rightOff + i) % 8 == 0))) {\n       while (i <= leftLen - 8) {\n-        res = (int) ((Platform.getLong(leftObj, leftOff + i) -\n-                Platform.getLong(rightObj, rightOff + i)) % Integer.MAX_VALUE);\n-        if (res != 0) return res;\n+        res = Platform.getLong(leftObj, leftOff + i) -\n+                Platform.getLong(rightObj, rightOff + i);\n+        if (res != 0) return res > 0 ? 1 : -1;"
  }, {
    "author": {
      "login": "kiszk"
    },
    "body": "+1 for no subtraction.",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T08:16:35Z",
    "diffHunk": "@@ -42,16 +42,16 @@ public int compare(\n       while ((leftOff + i) % 8 != 0 && i < leftLen) {\n         res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n                 (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-        if (res != 0) return res;\n+        if (res != 0) return (int) res;\n         i += 1;\n       }\n     }\n     // for architectures that support unaligned accesses, chew it up 8 bytes at a time\n     if (Platform.unaligned() || (((leftOff + i) % 8 == 0) && ((rightOff + i) % 8 == 0))) {\n       while (i <= leftLen - 8) {\n-        res = (int) ((Platform.getLong(leftObj, leftOff + i) -\n-                Platform.getLong(rightObj, rightOff + i)) % Integer.MAX_VALUE);\n-        if (res != 0) return res;\n+        res = Platform.getLong(leftObj, leftOff + i) -\n+                Platform.getLong(rightObj, rightOff + i);\n+        if (res != 0) return res > 0 ? 1 : -1;"
  }],
  "prId": 22101
}, {
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "How about the following change to minimize and localize the change?\r\n```\r\nint res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\r\n             (Platform.getByte(rightObj, rightOff + i) & 0xff);\r\nif (res != 0) return res;\r\n```",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T07:43:39Z",
    "diffHunk": "@@ -42,16 +42,16 @@ public int compare(\n       while ((leftOff + i) % 8 != 0 && i < leftLen) {\n         res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n                 (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-        if (res != 0) return res;\n+        if (res != 0) return (int) res;"
  }, {
    "author": {
      "login": "mridulm"
    },
    "body": "We can restrict scope of 'res' as an 'int' : and avoid the type promotions/conversions.",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T08:03:07Z",
    "diffHunk": "@@ -42,16 +42,16 @@ public int compare(\n       while ((leftOff + i) % 8 != 0 && i < leftLen) {\n         res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n                 (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-        if (res != 0) return res;\n+        if (res != 0) return (int) res;"
  }],
  "prId": 22101
}, {
  "comments": [{
    "author": {
      "login": "kiszk"
    },
    "body": "ditto",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T07:43:55Z",
    "diffHunk": "@@ -60,7 +60,7 @@ public int compare(\n     while (i < leftLen) {\n       res = (Platform.getByte(leftObj, leftOff + i) & 0xff) -\n               (Platform.getByte(rightObj, rightOff + i) & 0xff);\n-      if (res != 0) return res;\n+      if (res != 0) return (int) res;"
  }],
  "prId": 22101
}, {
  "comments": [{
    "author": {
      "login": "gatorsmile"
    },
    "body": "Let us add a test suite for this function as you mentioned in the line 25. : )",
    "commit": "ecb26fc902995f866ee837f48c656cfb2174f18d",
    "createdAt": "2018-08-14T17:46:11Z",
    "diffHunk": "@@ -27,7 +27,6 @@\n   public int compare(",
    "line": 6
  }],
  "prId": 22101
}]