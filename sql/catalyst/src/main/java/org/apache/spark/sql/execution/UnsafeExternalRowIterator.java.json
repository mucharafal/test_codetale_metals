[{
  "comments": [{
    "author": {
      "login": "srowen"
    },
    "body": "This should maybe extend Closeable?",
    "commit": "461c494fb87ce258c44e7f8c8c12001930437439",
    "createdAt": "2019-02-12T16:24:21Z",
    "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution;\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+import scala.collection.AbstractIterator;\n+\n+public abstract class UnsafeExternalRowIterator extends AbstractIterator<UnsafeRow> {"
  }, {
    "author": {
      "login": "srowen"
    },
    "body": "... and now you can just copy in the implementation that was previously in the anonymous subclass below? that might be cleaner overall. Hm, but maybe it won't work out because it has to call cleanupResources(). That part may have to stay in an anonymous subclass.",
    "commit": "461c494fb87ce258c44e7f8c8c12001930437439",
    "createdAt": "2019-02-12T16:25:04Z",
    "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution;\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+import scala.collection.AbstractIterator;\n+\n+public abstract class UnsafeExternalRowIterator extends AbstractIterator<UnsafeRow> {"
  }, {
    "author": {
      "login": "taosaildrone"
    },
    "body": "Done",
    "commit": "461c494fb87ce258c44e7f8c8c12001930437439",
    "createdAt": "2019-02-12T22:58:58Z",
    "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution;\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+import scala.collection.AbstractIterator;\n+\n+public abstract class UnsafeExternalRowIterator extends AbstractIterator<UnsafeRow> {"
  }],
  "prId": 23762
}, {
  "comments": [{
    "author": {
      "login": "cloud-fan"
    },
    "body": "so we need an iterator API with a `close` method. Shall we reuse `RowIterator` and add `close` method to it?",
    "commit": "461c494fb87ce258c44e7f8c8c12001930437439",
    "createdAt": "2019-02-13T02:16:05Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution;\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+import org.apache.spark.sql.types.StructType;\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator;\n+import scala.collection.AbstractIterator;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+public abstract class UnsafeExternalRowIterator extends AbstractIterator<UnsafeRow> implements Closeable {",
    "line": 29
  }, {
    "author": {
      "login": "taosaildrone"
    },
    "body": "I think this would require introducing a dependency on the spark-sql module from catalyst. \r\nAnd would require more refactoring of RowIterator and its subclasses. ",
    "commit": "461c494fb87ce258c44e7f8c8c12001930437439",
    "createdAt": "2019-02-13T21:00:04Z",
    "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.execution;\n+\n+import org.apache.spark.sql.catalyst.expressions.UnsafeRow;\n+import org.apache.spark.sql.types.StructType;\n+import org.apache.spark.unsafe.Platform;\n+import org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator;\n+import scala.collection.AbstractIterator;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+public abstract class UnsafeExternalRowIterator extends AbstractIterator<UnsafeRow> implements Closeable {",
    "line": 29
  }],
  "prId": 23762
}]