[{
  "comments": [{
    "author": {
      "login": "mccheah"
    },
    "body": "`TransactionalTableCatalog` is proposed in the SPIP, but we don't really encode any formal notion of transactions in these APIs. Transactionality has a particular connotation in the DBMS nomenclature, e.g. `START TRANSACTION` statements. Perhaps we can rename this to `AtomicTableCatalog` or `SupportsAtomicOperations`?",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-04T23:42:05Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import java.util.Map;\n+\n+import org.apache.spark.sql.catalog.v2.expressions.Transform;\n+import org.apache.spark.sql.sources.v2.StagedTable;\n+import org.apache.spark.sql.types.StructType;\n+\n+public interface TransactionalTableCatalog {"
  }, {
    "author": {
      "login": "rdblue"
    },
    "body": "I think renaming this is a good idea. How about StagingTableCatalog? The main capability it introduces is staging a table so that it can be used for a write, but doesn't yet exist.",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-06T21:39:36Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import java.util.Map;\n+\n+import org.apache.spark.sql.catalog.v2.expressions.Transform;\n+import org.apache.spark.sql.sources.v2.StagedTable;\n+import org.apache.spark.sql.types.StructType;\n+\n+public interface TransactionalTableCatalog {"
  }],
  "prId": 24798
}, {
  "comments": [{
    "author": {
      "login": "rdblue"
    },
    "body": "These also need Javadoc.",
    "commit": "05a827df7094b07a492add875c6e649df52db41f",
    "createdAt": "2019-06-06T23:44:28Z",
    "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.sql.catalog.v2;\n+\n+import java.util.Map;\n+\n+import org.apache.spark.sql.catalog.v2.expressions.Transform;\n+import org.apache.spark.sql.sources.v2.StagedTable;\n+import org.apache.spark.sql.types.StructType;\n+\n+public interface TransactionalTableCatalog {\n+\n+  StagedTable stageCreate(\n+      Identifier ident,\n+      StructType schema,\n+      Transform[] partitions,\n+      Map<String, String> properties);\n+\n+  StagedTable stageReplace("
  }],
  "prId": 24798
}]