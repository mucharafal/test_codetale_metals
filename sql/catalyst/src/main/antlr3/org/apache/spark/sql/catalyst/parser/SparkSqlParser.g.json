[{
  "comments": [{
    "author": {
      "login": "viirya"
    },
    "body": "Passing `true` or `false` here doesn't really matter. This `topLevel` argument works only in `setOpSelectStatement` rule. We will pass in the real `topLevel` argument into the rule later.\n",
    "commit": "d024fff0e729ce12b4da67cb7cf922c5bbf53186",
    "createdAt": "2016-02-15T06:13:13Z",
    "diffHunk": "@@ -2320,6 +2320,19 @@ regularBody[boolean topLevel]\n    )\n    |\n    selectStatement[topLevel]\n+   |\n+   (LPAREN selectStatement[true]) => nestedSetOpSelectStatement[topLevel]"
  }],
  "prId": 11204
}, {
  "comments": [{
    "author": {
      "login": "hvanhovell"
    },
    "body": "Discussion: This works but is quite had to follow (passing the matched tree to the next rule). Isn't there a more simple & concise approach possible?\n",
    "commit": "d024fff0e729ce12b4da67cb7cf922c5bbf53186",
    "createdAt": "2016-02-15T13:11:09Z",
    "diffHunk": "@@ -2320,6 +2320,19 @@ regularBody[boolean topLevel]\n    )\n    |\n    selectStatement[topLevel]\n+   |\n+   (LPAREN selectStatement[true]) => nestedSetOpSelectStatement[topLevel]\n+   ;\n+\n+nestedSetOpSelectStatement[boolean topLevel]\n+   :\n+   (\n+   LPAREN s=selectStatement[topLevel] RPAREN -> {$s.tree}\n+   )\n+   (set=setOpSelectStatement[$nestedSetOpSelectStatement.tree, topLevel])"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I've tried few approaches unsuccessfully. I will try if there is more simple approach tomorrow.\n",
    "commit": "d024fff0e729ce12b4da67cb7cf922c5bbf53186",
    "createdAt": "2016-02-15T13:38:05Z",
    "diffHunk": "@@ -2320,6 +2320,19 @@ regularBody[boolean topLevel]\n    )\n    |\n    selectStatement[topLevel]\n+   |\n+   (LPAREN selectStatement[true]) => nestedSetOpSelectStatement[topLevel]\n+   ;\n+\n+nestedSetOpSelectStatement[boolean topLevel]\n+   :\n+   (\n+   LPAREN s=selectStatement[topLevel] RPAREN -> {$s.tree}\n+   )\n+   (set=setOpSelectStatement[$nestedSetOpSelectStatement.tree, topLevel])"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I made a little change to support recursively nested UNION. I also updated the test. But it is basically the same approach.\n",
    "commit": "d024fff0e729ce12b4da67cb7cf922c5bbf53186",
    "createdAt": "2016-02-16T04:33:37Z",
    "diffHunk": "@@ -2320,6 +2320,19 @@ regularBody[boolean topLevel]\n    )\n    |\n    selectStatement[topLevel]\n+   |\n+   (LPAREN selectStatement[true]) => nestedSetOpSelectStatement[topLevel]\n+   ;\n+\n+nestedSetOpSelectStatement[boolean topLevel]\n+   :\n+   (\n+   LPAREN s=selectStatement[topLevel] RPAREN -> {$s.tree}\n+   )\n+   (set=setOpSelectStatement[$nestedSetOpSelectStatement.tree, topLevel])"
  }, {
    "author": {
      "login": "viirya"
    },
    "body": "I think it might be the simplest approach to support recursively nested UNION query.\n",
    "commit": "d024fff0e729ce12b4da67cb7cf922c5bbf53186",
    "createdAt": "2016-02-16T04:34:35Z",
    "diffHunk": "@@ -2320,6 +2320,19 @@ regularBody[boolean topLevel]\n    )\n    |\n    selectStatement[topLevel]\n+   |\n+   (LPAREN selectStatement[true]) => nestedSetOpSelectStatement[topLevel]\n+   ;\n+\n+nestedSetOpSelectStatement[boolean topLevel]\n+   :\n+   (\n+   LPAREN s=selectStatement[topLevel] RPAREN -> {$s.tree}\n+   )\n+   (set=setOpSelectStatement[$nestedSetOpSelectStatement.tree, topLevel])"
  }],
  "prId": 11204
}]